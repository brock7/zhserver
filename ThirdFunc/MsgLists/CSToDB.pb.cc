// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToDB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSToDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CSToDB {

namespace {

const ::google::protobuf::Descriptor* UpdateCDKeyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCDKeyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertCDKeyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertCDKeyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDKeyEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDKeyEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreUserdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreUserdata_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreUserdata_SUserHeroDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreUserdata_SUserHeroDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreUserdata_SUserRelationshipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreUserdata_SUserRelationshipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreUserdata_SUserItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreUserdata_SUserItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreUserdata_UserMailDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreUserdata_UserMailDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExeSQL_Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExeSQL_Call_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNickName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNickName_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlterItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlterItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlterSNSList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlterSNSList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryObjIdxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryObjIdxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NicknameConflict_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NicknameConflict_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGameMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGameMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailCurtState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSToDB_2eproto() {
  protobuf_AddDesc_CSToDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSToDB.proto");
  GOOGLE_CHECK(file != NULL);
  UpdateCDKeyInfo_descriptor_ = file->message_type(0);
  static const int UpdateCDKeyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCDKeyInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCDKeyInfo, sql_str_),
  };
  UpdateCDKeyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateCDKeyInfo_descriptor_,
      UpdateCDKeyInfo::default_instance_,
      UpdateCDKeyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCDKeyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCDKeyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateCDKeyInfo));
  InsertCDKeyInfo_descriptor_ = file->message_type(1);
  static const int InsertCDKeyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertCDKeyInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertCDKeyInfo, sql_str_),
  };
  InsertCDKeyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertCDKeyInfo_descriptor_,
      InsertCDKeyInfo::default_instance_,
      InsertCDKeyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertCDKeyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertCDKeyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertCDKeyInfo));
  CDKeyEvents_descriptor_ = file->message_type(2);
  static const int CDKeyEvents_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, sql_str_),
  };
  CDKeyEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDKeyEvents_descriptor_,
      CDKeyEvents::default_instance_,
      CDKeyEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDKeyEvents));
  UpdateUserMail_descriptor_ = file->message_type(3);
  static const int UpdateUserMail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMail, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMail, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMail, cstate_),
  };
  UpdateUserMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserMail_descriptor_,
      UpdateUserMail::default_instance_,
      UpdateUserMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserMail));
  StoreUserdata_descriptor_ = file->message_type(4);
  static const int StoreUserdata_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un64objidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, euserplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32headerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, n8sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, n64diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, n64gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, tregisteutcmillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, tlastloginutcmillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, tlastlogoututctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, n64score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32totalgameinns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32totalwininns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32totalherokills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32totaldestorybuildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32totaldeadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32totalassist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un16userlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un32usercurlvexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, tlastfirstwintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un16cldays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, tlastgetloginreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, un16viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, vipscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, mguidesteps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, ssuserherodbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, friendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, runestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, slotstr_),
  };
  StoreUserdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreUserdata_descriptor_,
      StoreUserdata::default_instance_,
      StoreUserdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreUserdata));
  StoreUserdata_SUserHeroDBData_descriptor_ = StoreUserdata_descriptor_->nested_type(0);
  static const int StoreUserdata_SUserHeroDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserHeroDBData, un32heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserHeroDBData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserHeroDBData, buytime_),
  };
  StoreUserdata_SUserHeroDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreUserdata_SUserHeroDBData_descriptor_,
      StoreUserdata_SUserHeroDBData::default_instance_,
      StoreUserdata_SUserHeroDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserHeroDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserHeroDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreUserdata_SUserHeroDBData));
  StoreUserdata_SUserRelationshipInfo_descriptor_ = StoreUserdata_descriptor_->nested_type(1);
  static const int StoreUserdata_SUserRelationshipInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, stnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, nheadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, erelationship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, tmilsec_),
  };
  StoreUserdata_SUserRelationshipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreUserdata_SUserRelationshipInfo_descriptor_,
      StoreUserdata_SUserRelationshipInfo::default_instance_,
      StoreUserdata_SUserRelationshipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserRelationshipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreUserdata_SUserRelationshipInfo));
  StoreUserdata_SUserItemInfo_descriptor_ = StoreUserdata_descriptor_->nested_type(2);
  static const int StoreUserdata_SUserItemInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, ifusing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, n32effectvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, n32effectid_),
  };
  StoreUserdata_SUserItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreUserdata_SUserItemInfo_descriptor_,
      StoreUserdata_SUserItemInfo::default_instance_,
      StoreUserdata_SUserItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_SUserItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreUserdata_SUserItemInfo));
  StoreUserdata_UserMailDBData_descriptor_ = StoreUserdata_descriptor_->nested_type(3);
  static const int StoreUserdata_UserMailDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_UserMailDBData, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_UserMailDBData, mstate_),
  };
  StoreUserdata_UserMailDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreUserdata_UserMailDBData_descriptor_,
      StoreUserdata_UserMailDBData::default_instance_,
      StoreUserdata_UserMailDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_UserMailDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreUserdata_UserMailDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreUserdata_UserMailDBData));
  QueryNotice_descriptor_ = file->message_type(5);
  static const int QueryNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, msgid_),
  };
  QueryNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryNotice_descriptor_,
      QueryNotice::default_instance_,
      QueryNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryNotice));
  ExeSQL_Call_descriptor_ = file->message_type(6);
  static const int ExeSQL_Call_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExeSQL_Call, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExeSQL_Call, sql_),
  };
  ExeSQL_Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExeSQL_Call_descriptor_,
      ExeSQL_Call::default_instance_,
      ExeSQL_Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExeSQL_Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExeSQL_Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExeSQL_Call));
  ChangeNickName_descriptor_ = file->message_type(7);
  static const int ChangeNickName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, guid_),
  };
  ChangeNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNickName_descriptor_,
      ChangeNickName::default_instance_,
      ChangeNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNickName));
  AlterItem_descriptor_ = file->message_type(8);
  static const int AlterItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterItem, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterItem, sql_str_),
  };
  AlterItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlterItem_descriptor_,
      AlterItem::default_instance_,
      AlterItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlterItem));
  DeleteNotice_descriptor_ = file->message_type(9);
  static const int DeleteNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNotice, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNotice, id_),
  };
  DeleteNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteNotice_descriptor_,
      DeleteNotice::default_instance_,
      DeleteNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteNotice));
  InsertNotice_descriptor_ = file->message_type(10);
  static const int InsertNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertNotice, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertNotice, sql_str_),
  };
  InsertNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertNotice_descriptor_,
      InsertNotice::default_instance_,
      InsertNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertNotice));
  AlterSNSList_descriptor_ = file->message_type(11);
  static const int AlterSNSList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, related_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, related_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, opration_),
  };
  AlterSNSList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlterSNSList_descriptor_,
      AlterSNSList::default_instance_,
      AlterSNSList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterSNSList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlterSNSList));
  QueryObjIdxReq_descriptor_ = file->message_type(12);
  static const int QueryObjIdxReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, gcnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, csid_),
  };
  QueryObjIdxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryObjIdxReq_descriptor_,
      QueryObjIdxReq::default_instance_,
      QueryObjIdxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjIdxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryObjIdxReq));
  NicknameConflict_descriptor_ = file->message_type(13);
  static const int NicknameConflict_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, newnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, gcnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, sdkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, csid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, cdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, oldnickname_),
  };
  NicknameConflict_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NicknameConflict_descriptor_,
      NicknameConflict::default_instance_,
      NicknameConflict_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicknameConflict, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NicknameConflict));
  BuyGoods_descriptor_ = file->message_type(14);
  static const int BuyGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, buygoodsmag_),
  };
  BuyGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyGoods_descriptor_,
      BuyGoods::default_instance_,
      BuyGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyGoods));
  GameMailInfo_descriptor_ = file->message_type(15);
  static const int GameMailInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, curtstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, sdkidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, giftstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, overtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, sender_),
  };
  GameMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMailInfo_descriptor_,
      GameMailInfo::default_instance_,
      GameMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMailInfo));
  UpdateGameMail_descriptor_ = file->message_type(16);
  static const int UpdateGameMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameMail, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameMail, maillist_),
  };
  UpdateGameMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGameMail_descriptor_,
      UpdateGameMail::default_instance_,
      UpdateGameMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGameMail));
  InsertUser_descriptor_ = file->message_type(17);
  static const int InsertUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertUser, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertUser, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertUser, sqlstr_),
  };
  InsertUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertUser_descriptor_,
      InsertUser::default_instance_,
      InsertUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertUser));
  UpdateUser_descriptor_ = file->message_type(18);
  static const int UpdateUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUser, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUser, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUser, sqlstr_),
  };
  UpdateUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUser_descriptor_,
      UpdateUser::default_instance_,
      UpdateUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUser));
  CheckNameReq_descriptor_ = file->message_type(19);
  static const int CheckNameReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, gcnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, gsnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, sdkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, csid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, cdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, completeinfo_),
  };
  CheckNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameReq_descriptor_,
      CheckNameReq::default_instance_,
      CheckNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameReq));
  QueryUserReq_descriptor_ = file->message_type(20);
  static const int QueryUserReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, gcnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, csid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, uname_),
  };
  QueryUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserReq_descriptor_,
      QueryUserReq::default_instance_,
      QueryUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserReq));
  MsgID_descriptor_ = file->enum_type(0);
  MailType_descriptor_ = file->enum_type(1);
  EMailCurtState_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSToDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateCDKeyInfo_descriptor_, &UpdateCDKeyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertCDKeyInfo_descriptor_, &InsertCDKeyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDKeyEvents_descriptor_, &CDKeyEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserMail_descriptor_, &UpdateUserMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreUserdata_descriptor_, &StoreUserdata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreUserdata_SUserHeroDBData_descriptor_, &StoreUserdata_SUserHeroDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreUserdata_SUserRelationshipInfo_descriptor_, &StoreUserdata_SUserRelationshipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreUserdata_SUserItemInfo_descriptor_, &StoreUserdata_SUserItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreUserdata_UserMailDBData_descriptor_, &StoreUserdata_UserMailDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryNotice_descriptor_, &QueryNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExeSQL_Call_descriptor_, &ExeSQL_Call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNickName_descriptor_, &ChangeNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlterItem_descriptor_, &AlterItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteNotice_descriptor_, &DeleteNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertNotice_descriptor_, &InsertNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlterSNSList_descriptor_, &AlterSNSList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryObjIdxReq_descriptor_, &QueryObjIdxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NicknameConflict_descriptor_, &NicknameConflict::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyGoods_descriptor_, &BuyGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMailInfo_descriptor_, &GameMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGameMail_descriptor_, &UpdateGameMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertUser_descriptor_, &InsertUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUser_descriptor_, &UpdateUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameReq_descriptor_, &CheckNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserReq_descriptor_, &QueryUserReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSToDB_2eproto() {
  delete UpdateCDKeyInfo::default_instance_;
  delete UpdateCDKeyInfo_reflection_;
  delete InsertCDKeyInfo::default_instance_;
  delete InsertCDKeyInfo_reflection_;
  delete CDKeyEvents::default_instance_;
  delete CDKeyEvents_reflection_;
  delete UpdateUserMail::default_instance_;
  delete UpdateUserMail_reflection_;
  delete StoreUserdata::default_instance_;
  delete StoreUserdata_reflection_;
  delete StoreUserdata_SUserHeroDBData::default_instance_;
  delete StoreUserdata_SUserHeroDBData_reflection_;
  delete StoreUserdata_SUserRelationshipInfo::default_instance_;
  delete StoreUserdata_SUserRelationshipInfo_reflection_;
  delete StoreUserdata_SUserItemInfo::default_instance_;
  delete StoreUserdata_SUserItemInfo_reflection_;
  delete StoreUserdata_UserMailDBData::default_instance_;
  delete StoreUserdata_UserMailDBData_reflection_;
  delete QueryNotice::default_instance_;
  delete QueryNotice_reflection_;
  delete ExeSQL_Call::default_instance_;
  delete ExeSQL_Call_reflection_;
  delete ChangeNickName::default_instance_;
  delete ChangeNickName_reflection_;
  delete AlterItem::default_instance_;
  delete AlterItem_reflection_;
  delete DeleteNotice::default_instance_;
  delete DeleteNotice_reflection_;
  delete InsertNotice::default_instance_;
  delete InsertNotice_reflection_;
  delete AlterSNSList::default_instance_;
  delete AlterSNSList_reflection_;
  delete QueryObjIdxReq::default_instance_;
  delete QueryObjIdxReq_reflection_;
  delete NicknameConflict::default_instance_;
  delete NicknameConflict_reflection_;
  delete BuyGoods::default_instance_;
  delete BuyGoods_reflection_;
  delete GameMailInfo::default_instance_;
  delete GameMailInfo_reflection_;
  delete UpdateGameMail::default_instance_;
  delete UpdateGameMail_reflection_;
  delete InsertUser::default_instance_;
  delete InsertUser_reflection_;
  delete UpdateUser::default_instance_;
  delete UpdateUser_reflection_;
  delete CheckNameReq::default_instance_;
  delete CheckNameReq_reflection_;
  delete QueryUserReq::default_instance_;
  delete QueryUserReq_reflection_;
}

void protobuf_AddDesc_CSToDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CSToDB.proto\022\006CSToDB\"R\n\017UpdateCDKeyInf"
    "o\022.\n\005msgid\030\001 \001(\0162\r.CSToDB.MsgID:\020eUpdate"
    "CDKeyInfo\022\017\n\007sql_str\030\002 \001(\t\"R\n\017InsertCDKe"
    "yInfo\022.\n\005msgid\030\001 \001(\0162\r.CSToDB.MsgID:\020eIn"
    "sertCDKeyInfo\022\017\n\007sql_str\030\002 \001(\t\"P\n\013CDKeyE"
    "vents\0220\n\005msgid\030\001 \001(\0162\r.CSToDB.MsgID:\022eIn"
    "sertCDKeyEvents\022\017\n\007sql_str\030\002 \001(\t\"}\n\016Upda"
    "teUserMail\022<\n\005msgid\030\001 \001(\0162\r.CSToDB.MsgID"
    ":\036eUpdateUserGameMail_DBCallBack\022\r\n\005obji"
    "d\030\002 \001(\003\022\016\n\006mailid\030\003 \001(\005\022\016\n\006cstate\030\004 \001(\005\""
    "\330\n\n\rStoreUserdata\022\022\n\nun64ObjIdx\030\001 \001(\003\022\025\n"
    "\reUserPlatform\030\002 \001(\005\022\024\n\014un32HeaderID\030\003 \001"
    "(\005\022\r\n\005n8Sex\030\004 \001(\005\022\022\n\nn64Diamond\030\005 \001(\003\022\017\n"
    "\007n64Gold\030\006 \001(\003\022\033\n\023tRegisteUTCMillisec\030\007 "
    "\001(\003\022\035\n\025tLastLoginUTCMillisec\030\010 \001(\003\022\032\n\022tL"
    "astLogOutUTCTime\030\t \001(\003\022\020\n\010n64Score\030\n \001(\003"
    "\022\031\n\021un32TotalGameInns\030\013 \001(\005\022\030\n\020un32Total"
    "WinInns\030\014 \001(\005\022\032\n\022un32TotalHeroKills\030\r \001("
    "\005\022!\n\031un32TotalDestoryBuildings\030\016 \001(\005\022\032\n\022"
    "un32TotalDeadTimes\030\017 \001(\005\022\027\n\017un32TotalAss"
    "ist\030\020 \001(\005\022\022\n\nun16UserLv\030\021 \001(\005\022\030\n\020un32Use"
    "rCurLvExp\030\022 \001(\005\022\031\n\021tLastFirstWinTime\030\023 \001"
    "(\003\022\022\n\nun16Cldays\030\024 \001(\005\022\033\n\023tLastGetLoginR"
    "eward\030\025 \001(\t\022\021\n\tun16VipLv\030\026 \001(\005\022\020\n\010vipSco"
    "re\030\027 \001(\005\022\023\n\013mGuideSteps\030\030 \001(\t\022\?\n\020sSUserH"
    "eroDBData\030\031 \003(\0132%.CSToDB.StoreUserdata.S"
    "UserHeroDBData\022\?\n\nfriendList\030\032 \003(\0132+.CST"
    "oDB.StoreUserdata.SUserRelationshipInfo\022"
    ">\n\tblackList\030\033 \003(\0132+.CSToDB.StoreUserdat"
    "a.SUserRelationshipInfo\0225\n\010itemlist\030\034 \003("
    "\0132#.CSToDB.StoreUserdata.SUserItemInfo\0226"
    "\n\010mailList\030\035 \003(\0132$.CSToDB.StoreUserdata."
    "UserMailDBData\022\020\n\010nickname\030\036 \001(\t\022\020\n\010user"
    "name\030\037 \001(\t\022\013\n\003pwd\030  \001(\t\022\017\n\007runestr\030! \001(\t"
    "\022\017\n\007slotstr\030\" \001(\t\032G\n\017SUserHeroDBData\022\022\n\n"
    "un32HeroID\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\003\022\017\n\007buy"
    "Time\030\003 \001(\003\032u\n\025SUserRelationshipInfo\022\022\n\ns"
    "tNickName\030\001 \001(\t\022\017\n\007nHeadId\030\002 \001(\005\022\017\n\007guid"
    "idx\030\003 \001(\003\022\025\n\reRelationShip\030\004 \001(\005\022\017\n\007tMil"
    "Sec\030\005 \001(\003\032\224\001\n\rSUserItemInfo\022\017\n\007item_id\030\001"
    " \001(\005\022\017\n\007ifusing\030\002 \001(\010\022\020\n\010item_num\030\003 \001(\005\022"
    "\020\n\010buy_time\030\004 \001(\003\022\020\n\010end_time\030\006 \001(\003\022\026\n\016n"
    "32EffectValue\030\007 \001(\005\022\023\n\013n32EffectID\030\010 \001(\005"
    "\0320\n\016UserMailDBData\022\016\n\006mailId\030\001 \001(\005\022\016\n\006mS"
    "tate\030\002 \001(\005\"@\n\013QueryNotice\0221\n\005msgid\030\001 \001(\016"
    "2\r.CSToDB.MsgID:\023eQueryNotice_DBCall\"F\n\013"
    "ExeSQL_Call\022*\n\005msgid\030\001 \001(\0162\r.CSToDB.MsgI"
    "D:\014eExeSQL_Call\022\013\n\003sql\030\002 \001(\t\"f\n\016ChangeNi"
    "ckName\0224\n\005msgid\030\001 \001(\0162\r.CSToDB.MsgID:\026eC"
    "hangeNickName_DBCall\022\020\n\010nickname\030\002 \001(\t\022\014"
    "\n\004guid\030\003 \001(\003\"M\n\tAlterItem\022/\n\005mgsid\030\001 \001(\016"
    "2\r.CSToDB.MsgID:\021eAlterItem_DBCall\022\017\n\007sq"
    "l_str\030\002 \001(\t\"N\n\014DeleteNotice\0222\n\005mgsid\030\001 \001"
    "(\0162\r.CSToDB.MsgID:\024eDeleteNotice_DBCall\022"
    "\n\n\002id\030\002 \001(\r\"S\n\014InsertNotice\0222\n\005mgsid\030\001 \001"
    "(\0162\r.CSToDB.MsgID:\024eInsertNotice_DBCall\022"
    "\017\n\007sql_str\030\002 \001(\t\"\212\001\n\014AlterSNSList\0222\n\005mgs"
    "id\030\001 \001(\0162\r.CSToDB.MsgID:\024eAlterSNSList_D"
    "BCall\022\017\n\007user_id\030\002 \001(\004\022\022\n\nrelated_id\030\003 \001"
    "(\004\022\017\n\007related\030\004 \001(\r\022\020\n\010opration\030\005 \001(\r\"\206\001"
    "\n\016QueryObjIdxReq\0224\n\005msgid\030\001 \001(\0162\r.CSToDB"
    ".MsgID:\026eQueryObjId_DBCallBack\022\021\n\tLogini"
    "nfo\030\002 \001(\t\022\014\n\004gsid\030\003 \001(\005\022\017\n\007gcnetid\030\004 \001(\005"
    "\022\014\n\004csid\030\005 \001(\005\"\317\001\n\020NicknameConflict\022:\n\005m"
    "gsid\030\001 \001(\0162\r.CSToDB.MsgID:\034eNicknameConf"
    "lict_DBCallBack\022\023\n\013newnickname\030\002 \001(\t\022\014\n\004"
    "gsid\030\003 \001(\005\022\017\n\007gcnetid\030\004 \001(\005\022\014\n\004guid\030\005 \001("
    "\004\022\r\n\005sdkid\030\006 \001(\005\022\014\n\004csid\030\007 \001(\005\022\013\n\003cdk\030\010 "
    "\001(\t\022\023\n\013oldnickname\030\t \001(\t\"S\n\010BuyGoods\0222\n\005"
    "mgsid\030\001 \001(\0162\r.CSToDB.MsgID:\024eBuyGoods_DB"
    "CallBack\022\023\n\013buygoodsmag\030\002 \001(\t\"\360\001\n\014GameMa"
    "ilInfo\022\036\n\004type\030\001 \001(\0162\020.CSToDB.MailType\022\016"
    "\n\006mailId\030\002 \001(\005\022\016\n\006userid\030\003 \001(\003\022)\n\tcurtst"
    "ate\030\004 \001(\0162\026.CSToDB.EMailCurtState\022\016\n\006sdk"
    "idx\030\005 \001(\005\022\r\n\005title\030\006 \001(\t\022\017\n\007content\030\007 \001("
    "\t\022\017\n\007giftstr\030\010 \001(\t\022\022\n\ncreatetime\030\t \001(\t\022\020"
    "\n\010overtime\030\n \001(\t\022\016\n\006sender\030\013 \001(\t\"r\n\016Upda"
    "teGameMail\0228\n\005mgsid\030\001 \001(\0162\r.CSToDB.MsgID"
    ":\032eUpdateGameMail_DBCallBack\022&\n\010maillist"
    "\030\002 \003(\0132\024.CSToDB.GameMailInfo\"`\n\nInsertUs"
    "er\0224\n\005mgsid\030\001 \001(\0162\r.CSToDB.MsgID:\026eInser"
    "tUser_DBCallBack\022\014\n\004guid\030\002 \001(\003\022\016\n\006sqlstr"
    "\030\003 \001(\t\"`\n\nUpdateUser\0224\n\005mgsid\030\001 \001(\0162\r.CS"
    "ToDB.MsgID:\026eUpdateUser_DBCallBack\022\014\n\004gu"
    "id\030\002 \001(\003\022\016\n\006sqlstr\030\003 \001(\t\"\266\001\n\014CheckNameRe"
    "q\0226\n\005mgsid\030\001 \001(\0162\r.CSToDB.MsgID:\030eCheckN"
    "ickNameDBCallBack\022\014\n\004gsid\030\002 \001(\005\022\017\n\007gcnet"
    "id\030\003 \001(\005\022\017\n\007gsnetid\030\004 \001(\005\022\r\n\005sdkid\030\005 \001(\005"
    "\022\014\n\004csid\030\006 \001(\005\022\013\n\003cdk\030\007 \001(\t\022\024\n\014completeI"
    "nfo\030\010 \001(\t\"\241\001\n\014QueryUserReq\0223\n\005msgid\030\001 \001("
    "\0162\r.CSToDB.MsgID:\025eQueryUser_DBCallBack\022"
    "\021\n\tLogininfo\030\002 \001(\t\022\014\n\004gsid\030\003 \001(\005\022\017\n\007gcne"
    "tid\030\004 \001(\005\022\014\n\004csid\030\005 \001(\005\022\r\n\005objid\030\006 \001(\003\022\r"
    "\n\005uname\030\007 \001(\t*\262\004\n\005MsgID\022\034\n\030eCheckNickNam"
    "eDBCallBack\020d\022\031\n\025eQueryUser_DBCallBack\020e"
    "\022\030\n\024eLogStore_DBCallBack\020f\022\032\n\026eUpdateUse"
    "r_DBCallBack\020g\022\032\n\026eInsertUser_DBCallBack"
    "\020h\022\036\n\032eUpdateGameMail_DBCallBack\020i\022\030\n\024eB"
    "uyGoods_DBCallBack\020j\022 \n\034eNicknameConflic"
    "t_DBCallBack\020k\022\032\n\026eQueryObjId_DBCallBack"
    "\020l\022\030\n\024eAlterSNSList_DBCall\020m\022\030\n\024eInsertN"
    "otice_DBCall\020n\022\030\n\024eDeleteNotice_DBCall\020o"
    "\022\025\n\021eAlterItem_DBCall\020p\022\032\n\026eChangeNickNa"
    "me_DBCall\020q\022\020\n\014eExeSQL_Call\020r\022\027\n\023eQueryN"
    "otice_DBCall\020s\022\022\n\016eStoreUserData\020t\022\"\n\036eU"
    "pdateUserGameMail_DBCallBack\020u\022\026\n\022eInser"
    "tCDKeyEvents\020v\022\024\n\020eInsertCDKeyInfo\020w\022\024\n\020"
    "eUpdateCDKeyInfo\020x*]\n\010MailType\022\021\n\rmailTy"
    "pe_None\020\000\022\016\n\nmailType_1\020\001\022\016\n\nmailType_2\020"
    "\002\022\016\n\nmailType_3\020\003\022\016\n\nmailType_4\020\004*\206\001\n\016EM"
    "ailCurtState\022\023\n\017eMailState_None\020\000\022\022\n\016eMa"
    "ilState_New\020\001\022\"\n\036eMailState_LookedButNot"
    "GotGift\020\002\022\023\n\017eMailState_Look\020\003\022\022\n\016eMailS"
    "tate_Del\020\004", 4530);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSToDB.proto", &protobuf_RegisterTypes);
  UpdateCDKeyInfo::default_instance_ = new UpdateCDKeyInfo();
  InsertCDKeyInfo::default_instance_ = new InsertCDKeyInfo();
  CDKeyEvents::default_instance_ = new CDKeyEvents();
  UpdateUserMail::default_instance_ = new UpdateUserMail();
  StoreUserdata::default_instance_ = new StoreUserdata();
  StoreUserdata_SUserHeroDBData::default_instance_ = new StoreUserdata_SUserHeroDBData();
  StoreUserdata_SUserRelationshipInfo::default_instance_ = new StoreUserdata_SUserRelationshipInfo();
  StoreUserdata_SUserItemInfo::default_instance_ = new StoreUserdata_SUserItemInfo();
  StoreUserdata_UserMailDBData::default_instance_ = new StoreUserdata_UserMailDBData();
  QueryNotice::default_instance_ = new QueryNotice();
  ExeSQL_Call::default_instance_ = new ExeSQL_Call();
  ChangeNickName::default_instance_ = new ChangeNickName();
  AlterItem::default_instance_ = new AlterItem();
  DeleteNotice::default_instance_ = new DeleteNotice();
  InsertNotice::default_instance_ = new InsertNotice();
  AlterSNSList::default_instance_ = new AlterSNSList();
  QueryObjIdxReq::default_instance_ = new QueryObjIdxReq();
  NicknameConflict::default_instance_ = new NicknameConflict();
  BuyGoods::default_instance_ = new BuyGoods();
  GameMailInfo::default_instance_ = new GameMailInfo();
  UpdateGameMail::default_instance_ = new UpdateGameMail();
  InsertUser::default_instance_ = new InsertUser();
  UpdateUser::default_instance_ = new UpdateUser();
  CheckNameReq::default_instance_ = new CheckNameReq();
  QueryUserReq::default_instance_ = new QueryUserReq();
  UpdateCDKeyInfo::default_instance_->InitAsDefaultInstance();
  InsertCDKeyInfo::default_instance_->InitAsDefaultInstance();
  CDKeyEvents::default_instance_->InitAsDefaultInstance();
  UpdateUserMail::default_instance_->InitAsDefaultInstance();
  StoreUserdata::default_instance_->InitAsDefaultInstance();
  StoreUserdata_SUserHeroDBData::default_instance_->InitAsDefaultInstance();
  StoreUserdata_SUserRelationshipInfo::default_instance_->InitAsDefaultInstance();
  StoreUserdata_SUserItemInfo::default_instance_->InitAsDefaultInstance();
  StoreUserdata_UserMailDBData::default_instance_->InitAsDefaultInstance();
  QueryNotice::default_instance_->InitAsDefaultInstance();
  ExeSQL_Call::default_instance_->InitAsDefaultInstance();
  ChangeNickName::default_instance_->InitAsDefaultInstance();
  AlterItem::default_instance_->InitAsDefaultInstance();
  DeleteNotice::default_instance_->InitAsDefaultInstance();
  InsertNotice::default_instance_->InitAsDefaultInstance();
  AlterSNSList::default_instance_->InitAsDefaultInstance();
  QueryObjIdxReq::default_instance_->InitAsDefaultInstance();
  NicknameConflict::default_instance_->InitAsDefaultInstance();
  BuyGoods::default_instance_->InitAsDefaultInstance();
  GameMailInfo::default_instance_->InitAsDefaultInstance();
  UpdateGameMail::default_instance_->InitAsDefaultInstance();
  InsertUser::default_instance_->InitAsDefaultInstance();
  UpdateUser::default_instance_->InitAsDefaultInstance();
  CheckNameReq::default_instance_->InitAsDefaultInstance();
  QueryUserReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSToDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSToDB_2eproto {
  StaticDescriptorInitializer_CSToDB_2eproto() {
    protobuf_AddDesc_CSToDB_2eproto();
  }
} static_descriptor_initializer_CSToDB_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailType_descriptor_;
}
bool MailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailCurtState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailCurtState_descriptor_;
}
bool EMailCurtState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCDKeyInfo::kMsgidFieldNumber;
const int UpdateCDKeyInfo::kSqlStrFieldNumber;
#endif  // !_MSC_VER

UpdateCDKeyInfo::UpdateCDKeyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.UpdateCDKeyInfo)
}

void UpdateCDKeyInfo::InitAsDefaultInstance() {
}

UpdateCDKeyInfo::UpdateCDKeyInfo(const UpdateCDKeyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.UpdateCDKeyInfo)
}

void UpdateCDKeyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 120;
  sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCDKeyInfo::~UpdateCDKeyInfo() {
  // @@protoc_insertion_point(destructor:CSToDB.UpdateCDKeyInfo)
  SharedDtor();
}

void UpdateCDKeyInfo::SharedDtor() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (this != default_instance_) {
  }
}

void UpdateCDKeyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCDKeyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCDKeyInfo_descriptor_;
}

const UpdateCDKeyInfo& UpdateCDKeyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

UpdateCDKeyInfo* UpdateCDKeyInfo::default_instance_ = NULL;

UpdateCDKeyInfo* UpdateCDKeyInfo::New() const {
  return new UpdateCDKeyInfo;
}

void UpdateCDKeyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 120;
    if (has_sql_str()) {
      if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateCDKeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.UpdateCDKeyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eUpdateCDKeyInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sql_str;
        break;
      }

      // optional string sql_str = 2;
      case 2: {
        if (tag == 18) {
         parse_sql_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_str().data(), this->sql_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.UpdateCDKeyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.UpdateCDKeyInfo)
  return false;
#undef DO_
}

void UpdateCDKeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.UpdateCDKeyInfo)
  // optional .CSToDB.MsgID msgid = 1 [default = eUpdateCDKeyInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.UpdateCDKeyInfo)
}

::google::protobuf::uint8* UpdateCDKeyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.UpdateCDKeyInfo)
  // optional .CSToDB.MsgID msgid = 1 [default = eUpdateCDKeyInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.UpdateCDKeyInfo)
  return target;
}

int UpdateCDKeyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eUpdateCDKeyInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string sql_str = 2;
    if (has_sql_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCDKeyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateCDKeyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateCDKeyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateCDKeyInfo::MergeFrom(const UpdateCDKeyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sql_str()) {
      set_sql_str(from.sql_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateCDKeyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCDKeyInfo::CopyFrom(const UpdateCDKeyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCDKeyInfo::IsInitialized() const {

  return true;
}

void UpdateCDKeyInfo::Swap(UpdateCDKeyInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sql_str_, other->sql_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateCDKeyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCDKeyInfo_descriptor_;
  metadata.reflection = UpdateCDKeyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertCDKeyInfo::kMsgidFieldNumber;
const int InsertCDKeyInfo::kSqlStrFieldNumber;
#endif  // !_MSC_VER

InsertCDKeyInfo::InsertCDKeyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.InsertCDKeyInfo)
}

void InsertCDKeyInfo::InitAsDefaultInstance() {
}

InsertCDKeyInfo::InsertCDKeyInfo(const InsertCDKeyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.InsertCDKeyInfo)
}

void InsertCDKeyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 119;
  sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertCDKeyInfo::~InsertCDKeyInfo() {
  // @@protoc_insertion_point(destructor:CSToDB.InsertCDKeyInfo)
  SharedDtor();
}

void InsertCDKeyInfo::SharedDtor() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (this != default_instance_) {
  }
}

void InsertCDKeyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertCDKeyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertCDKeyInfo_descriptor_;
}

const InsertCDKeyInfo& InsertCDKeyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

InsertCDKeyInfo* InsertCDKeyInfo::default_instance_ = NULL;

InsertCDKeyInfo* InsertCDKeyInfo::New() const {
  return new InsertCDKeyInfo;
}

void InsertCDKeyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 119;
    if (has_sql_str()) {
      if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertCDKeyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.InsertCDKeyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sql_str;
        break;
      }

      // optional string sql_str = 2;
      case 2: {
        if (tag == 18) {
         parse_sql_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_str().data(), this->sql_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.InsertCDKeyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.InsertCDKeyInfo)
  return false;
#undef DO_
}

void InsertCDKeyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.InsertCDKeyInfo)
  // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.InsertCDKeyInfo)
}

::google::protobuf::uint8* InsertCDKeyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.InsertCDKeyInfo)
  // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.InsertCDKeyInfo)
  return target;
}

int InsertCDKeyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string sql_str = 2;
    if (has_sql_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertCDKeyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertCDKeyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertCDKeyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertCDKeyInfo::MergeFrom(const InsertCDKeyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sql_str()) {
      set_sql_str(from.sql_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertCDKeyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertCDKeyInfo::CopyFrom(const InsertCDKeyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertCDKeyInfo::IsInitialized() const {

  return true;
}

void InsertCDKeyInfo::Swap(InsertCDKeyInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sql_str_, other->sql_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertCDKeyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertCDKeyInfo_descriptor_;
  metadata.reflection = InsertCDKeyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDKeyEvents::kMsgidFieldNumber;
const int CDKeyEvents::kSqlStrFieldNumber;
#endif  // !_MSC_VER

CDKeyEvents::CDKeyEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.CDKeyEvents)
}

void CDKeyEvents::InitAsDefaultInstance() {
}

CDKeyEvents::CDKeyEvents(const CDKeyEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.CDKeyEvents)
}

void CDKeyEvents::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 118;
  sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDKeyEvents::~CDKeyEvents() {
  // @@protoc_insertion_point(destructor:CSToDB.CDKeyEvents)
  SharedDtor();
}

void CDKeyEvents::SharedDtor() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (this != default_instance_) {
  }
}

void CDKeyEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDKeyEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDKeyEvents_descriptor_;
}

const CDKeyEvents& CDKeyEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

CDKeyEvents* CDKeyEvents::default_instance_ = NULL;

CDKeyEvents* CDKeyEvents::New() const {
  return new CDKeyEvents;
}

void CDKeyEvents::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 118;
    if (has_sql_str()) {
      if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDKeyEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.CDKeyEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyEvents];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sql_str;
        break;
      }

      // optional string sql_str = 2;
      case 2: {
        if (tag == 18) {
         parse_sql_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_str().data(), this->sql_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.CDKeyEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.CDKeyEvents)
  return false;
#undef DO_
}

void CDKeyEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.CDKeyEvents)
  // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyEvents];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.CDKeyEvents)
}

::google::protobuf::uint8* CDKeyEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.CDKeyEvents)
  // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyEvents];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.CDKeyEvents)
  return target;
}

int CDKeyEvents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyEvents];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string sql_str = 2;
    if (has_sql_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDKeyEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDKeyEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDKeyEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDKeyEvents::MergeFrom(const CDKeyEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sql_str()) {
      set_sql_str(from.sql_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDKeyEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDKeyEvents::CopyFrom(const CDKeyEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDKeyEvents::IsInitialized() const {

  return true;
}

void CDKeyEvents::Swap(CDKeyEvents* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sql_str_, other->sql_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDKeyEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDKeyEvents_descriptor_;
  metadata.reflection = CDKeyEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserMail::kMsgidFieldNumber;
const int UpdateUserMail::kObjidFieldNumber;
const int UpdateUserMail::kMailidFieldNumber;
const int UpdateUserMail::kCstateFieldNumber;
#endif  // !_MSC_VER

UpdateUserMail::UpdateUserMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.UpdateUserMail)
}

void UpdateUserMail::InitAsDefaultInstance() {
}

UpdateUserMail::UpdateUserMail(const UpdateUserMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.UpdateUserMail)
}

void UpdateUserMail::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 117;
  objid_ = GOOGLE_LONGLONG(0);
  mailid_ = 0;
  cstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserMail::~UpdateUserMail() {
  // @@protoc_insertion_point(destructor:CSToDB.UpdateUserMail)
  SharedDtor();
}

void UpdateUserMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateUserMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserMail_descriptor_;
}

const UpdateUserMail& UpdateUserMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

UpdateUserMail* UpdateUserMail::default_instance_ = NULL;

UpdateUserMail* UpdateUserMail::New() const {
  return new UpdateUserMail;
}

void UpdateUserMail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateUserMail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mailid_, cstate_);
    msgid_ = 117;
    objid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.UpdateUserMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eUpdateUserGameMail_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objid;
        break;
      }

      // optional int64 objid = 2;
      case 2: {
        if (tag == 16) {
         parse_objid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mailid;
        break;
      }

      // optional int32 mailid = 3;
      case 3: {
        if (tag == 24) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cstate;
        break;
      }

      // optional int32 cstate = 4;
      case 4: {
        if (tag == 32) {
         parse_cstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cstate_)));
          set_has_cstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.UpdateUserMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.UpdateUserMail)
  return false;
#undef DO_
}

void UpdateUserMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.UpdateUserMail)
  // optional .CSToDB.MsgID msgid = 1 [default = eUpdateUserGameMail_DBCallBack];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 objid = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->objid(), output);
  }

  // optional int32 mailid = 3;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mailid(), output);
  }

  // optional int32 cstate = 4;
  if (has_cstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.UpdateUserMail)
}

::google::protobuf::uint8* UpdateUserMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.UpdateUserMail)
  // optional .CSToDB.MsgID msgid = 1 [default = eUpdateUserGameMail_DBCallBack];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 objid = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->objid(), target);
  }

  // optional int32 mailid = 3;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mailid(), target);
  }

  // optional int32 cstate = 4;
  if (has_cstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.UpdateUserMail)
  return target;
}

int UpdateUserMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eUpdateUserGameMail_DBCallBack];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 objid = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 mailid = 3;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 cstate = 4;
    if (has_cstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserMail::MergeFrom(const UpdateUserMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_cstate()) {
      set_cstate(from.cstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserMail::CopyFrom(const UpdateUserMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserMail::IsInitialized() const {

  return true;
}

void UpdateUserMail::Swap(UpdateUserMail* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objid_, other->objid_);
    std::swap(mailid_, other->mailid_);
    std::swap(cstate_, other->cstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserMail_descriptor_;
  metadata.reflection = UpdateUserMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreUserdata_SUserHeroDBData::kUn32HeroIDFieldNumber;
const int StoreUserdata_SUserHeroDBData::kEndTimeFieldNumber;
const int StoreUserdata_SUserHeroDBData::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

StoreUserdata_SUserHeroDBData::StoreUserdata_SUserHeroDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.StoreUserdata.SUserHeroDBData)
}

void StoreUserdata_SUserHeroDBData::InitAsDefaultInstance() {
}

StoreUserdata_SUserHeroDBData::StoreUserdata_SUserHeroDBData(const StoreUserdata_SUserHeroDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.StoreUserdata.SUserHeroDBData)
}

void StoreUserdata_SUserHeroDBData::SharedCtor() {
  _cached_size_ = 0;
  un32heroid_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  buytime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreUserdata_SUserHeroDBData::~StoreUserdata_SUserHeroDBData() {
  // @@protoc_insertion_point(destructor:CSToDB.StoreUserdata.SUserHeroDBData)
  SharedDtor();
}

void StoreUserdata_SUserHeroDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreUserdata_SUserHeroDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreUserdata_SUserHeroDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreUserdata_SUserHeroDBData_descriptor_;
}

const StoreUserdata_SUserHeroDBData& StoreUserdata_SUserHeroDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

StoreUserdata_SUserHeroDBData* StoreUserdata_SUserHeroDBData::default_instance_ = NULL;

StoreUserdata_SUserHeroDBData* StoreUserdata_SUserHeroDBData::New() const {
  return new StoreUserdata_SUserHeroDBData;
}

void StoreUserdata_SUserHeroDBData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreUserdata_SUserHeroDBData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(endtime_, un32heroid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreUserdata_SUserHeroDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.StoreUserdata.SUserHeroDBData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 un32HeroID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32heroid_)));
          set_has_un32heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2;
      case 2: {
        if (tag == 16) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyTime;
        break;
      }

      // optional int64 buyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_buyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.StoreUserdata.SUserHeroDBData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.StoreUserdata.SUserHeroDBData)
  return false;
#undef DO_
}

void StoreUserdata_SUserHeroDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.StoreUserdata.SUserHeroDBData)
  // optional int32 un32HeroID = 1;
  if (has_un32heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->un32heroid(), output);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // optional int64 buyTime = 3;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.StoreUserdata.SUserHeroDBData)
}

::google::protobuf::uint8* StoreUserdata_SUserHeroDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.StoreUserdata.SUserHeroDBData)
  // optional int32 un32HeroID = 1;
  if (has_un32heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->un32heroid(), target);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // optional int64 buyTime = 3;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.StoreUserdata.SUserHeroDBData)
  return target;
}

int StoreUserdata_SUserHeroDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 un32HeroID = 1;
    if (has_un32heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32heroid());
    }

    // optional int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 buyTime = 3;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreUserdata_SUserHeroDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreUserdata_SUserHeroDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreUserdata_SUserHeroDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreUserdata_SUserHeroDBData::MergeFrom(const StoreUserdata_SUserHeroDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_un32heroid()) {
      set_un32heroid(from.un32heroid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreUserdata_SUserHeroDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreUserdata_SUserHeroDBData::CopyFrom(const StoreUserdata_SUserHeroDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreUserdata_SUserHeroDBData::IsInitialized() const {

  return true;
}

void StoreUserdata_SUserHeroDBData::Swap(StoreUserdata_SUserHeroDBData* other) {
  if (other != this) {
    std::swap(un32heroid_, other->un32heroid_);
    std::swap(endtime_, other->endtime_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreUserdata_SUserHeroDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreUserdata_SUserHeroDBData_descriptor_;
  metadata.reflection = StoreUserdata_SUserHeroDBData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StoreUserdata_SUserRelationshipInfo::kStNickNameFieldNumber;
const int StoreUserdata_SUserRelationshipInfo::kNHeadIdFieldNumber;
const int StoreUserdata_SUserRelationshipInfo::kGuididxFieldNumber;
const int StoreUserdata_SUserRelationshipInfo::kERelationShipFieldNumber;
const int StoreUserdata_SUserRelationshipInfo::kTMilSecFieldNumber;
#endif  // !_MSC_VER

StoreUserdata_SUserRelationshipInfo::StoreUserdata_SUserRelationshipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.StoreUserdata.SUserRelationshipInfo)
}

void StoreUserdata_SUserRelationshipInfo::InitAsDefaultInstance() {
}

StoreUserdata_SUserRelationshipInfo::StoreUserdata_SUserRelationshipInfo(const StoreUserdata_SUserRelationshipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.StoreUserdata.SUserRelationshipInfo)
}

void StoreUserdata_SUserRelationshipInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nheadid_ = 0;
  guididx_ = GOOGLE_LONGLONG(0);
  erelationship_ = 0;
  tmilsec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreUserdata_SUserRelationshipInfo::~StoreUserdata_SUserRelationshipInfo() {
  // @@protoc_insertion_point(destructor:CSToDB.StoreUserdata.SUserRelationshipInfo)
  SharedDtor();
}

void StoreUserdata_SUserRelationshipInfo::SharedDtor() {
  if (stnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stnickname_;
  }
  if (this != default_instance_) {
  }
}

void StoreUserdata_SUserRelationshipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreUserdata_SUserRelationshipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreUserdata_SUserRelationshipInfo_descriptor_;
}

const StoreUserdata_SUserRelationshipInfo& StoreUserdata_SUserRelationshipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

StoreUserdata_SUserRelationshipInfo* StoreUserdata_SUserRelationshipInfo::default_instance_ = NULL;

StoreUserdata_SUserRelationshipInfo* StoreUserdata_SUserRelationshipInfo::New() const {
  return new StoreUserdata_SUserRelationshipInfo;
}

void StoreUserdata_SUserRelationshipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreUserdata_SUserRelationshipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guididx_, tmilsec_);
    if (has_stnickname()) {
      if (stnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stnickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreUserdata_SUserRelationshipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.StoreUserdata.SUserRelationshipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stNickName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stnickname().data(), this->stnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nHeadId;
        break;
      }

      // optional int32 nHeadId = 2;
      case 2: {
        if (tag == 16) {
         parse_nHeadId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nheadid_)));
          set_has_nheadid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guididx;
        break;
      }

      // optional int64 guididx = 3;
      case 3: {
        if (tag == 24) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eRelationShip;
        break;
      }

      // optional int32 eRelationShip = 4;
      case 4: {
        if (tag == 32) {
         parse_eRelationShip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &erelationship_)));
          set_has_erelationship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tMilSec;
        break;
      }

      // optional int64 tMilSec = 5;
      case 5: {
        if (tag == 40) {
         parse_tMilSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tmilsec_)));
          set_has_tmilsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.StoreUserdata.SUserRelationshipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.StoreUserdata.SUserRelationshipInfo)
  return false;
#undef DO_
}

void StoreUserdata_SUserRelationshipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.StoreUserdata.SUserRelationshipInfo)
  // optional string stNickName = 1;
  if (has_stnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stnickname().data(), this->stnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stnickname(), output);
  }

  // optional int32 nHeadId = 2;
  if (has_nheadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nheadid(), output);
  }

  // optional int64 guididx = 3;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guididx(), output);
  }

  // optional int32 eRelationShip = 4;
  if (has_erelationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->erelationship(), output);
  }

  // optional int64 tMilSec = 5;
  if (has_tmilsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tmilsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.StoreUserdata.SUserRelationshipInfo)
}

::google::protobuf::uint8* StoreUserdata_SUserRelationshipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.StoreUserdata.SUserRelationshipInfo)
  // optional string stNickName = 1;
  if (has_stnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stnickname().data(), this->stnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stnickname(), target);
  }

  // optional int32 nHeadId = 2;
  if (has_nheadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nheadid(), target);
  }

  // optional int64 guididx = 3;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guididx(), target);
  }

  // optional int32 eRelationShip = 4;
  if (has_erelationship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->erelationship(), target);
  }

  // optional int64 tMilSec = 5;
  if (has_tmilsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tmilsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.StoreUserdata.SUserRelationshipInfo)
  return target;
}

int StoreUserdata_SUserRelationshipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stNickName = 1;
    if (has_stnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stnickname());
    }

    // optional int32 nHeadId = 2;
    if (has_nheadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nheadid());
    }

    // optional int64 guididx = 3;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guididx());
    }

    // optional int32 eRelationShip = 4;
    if (has_erelationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->erelationship());
    }

    // optional int64 tMilSec = 5;
    if (has_tmilsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tmilsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreUserdata_SUserRelationshipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreUserdata_SUserRelationshipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreUserdata_SUserRelationshipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreUserdata_SUserRelationshipInfo::MergeFrom(const StoreUserdata_SUserRelationshipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stnickname()) {
      set_stnickname(from.stnickname());
    }
    if (from.has_nheadid()) {
      set_nheadid(from.nheadid());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_erelationship()) {
      set_erelationship(from.erelationship());
    }
    if (from.has_tmilsec()) {
      set_tmilsec(from.tmilsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreUserdata_SUserRelationshipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreUserdata_SUserRelationshipInfo::CopyFrom(const StoreUserdata_SUserRelationshipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreUserdata_SUserRelationshipInfo::IsInitialized() const {

  return true;
}

void StoreUserdata_SUserRelationshipInfo::Swap(StoreUserdata_SUserRelationshipInfo* other) {
  if (other != this) {
    std::swap(stnickname_, other->stnickname_);
    std::swap(nheadid_, other->nheadid_);
    std::swap(guididx_, other->guididx_);
    std::swap(erelationship_, other->erelationship_);
    std::swap(tmilsec_, other->tmilsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreUserdata_SUserRelationshipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreUserdata_SUserRelationshipInfo_descriptor_;
  metadata.reflection = StoreUserdata_SUserRelationshipInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StoreUserdata_SUserItemInfo::kItemIdFieldNumber;
const int StoreUserdata_SUserItemInfo::kIfusingFieldNumber;
const int StoreUserdata_SUserItemInfo::kItemNumFieldNumber;
const int StoreUserdata_SUserItemInfo::kBuyTimeFieldNumber;
const int StoreUserdata_SUserItemInfo::kEndTimeFieldNumber;
const int StoreUserdata_SUserItemInfo::kN32EffectValueFieldNumber;
const int StoreUserdata_SUserItemInfo::kN32EffectIDFieldNumber;
#endif  // !_MSC_VER

StoreUserdata_SUserItemInfo::StoreUserdata_SUserItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.StoreUserdata.SUserItemInfo)
}

void StoreUserdata_SUserItemInfo::InitAsDefaultInstance() {
}

StoreUserdata_SUserItemInfo::StoreUserdata_SUserItemInfo(const StoreUserdata_SUserItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.StoreUserdata.SUserItemInfo)
}

void StoreUserdata_SUserItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  ifusing_ = false;
  item_num_ = 0;
  buy_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  n32effectvalue_ = 0;
  n32effectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreUserdata_SUserItemInfo::~StoreUserdata_SUserItemInfo() {
  // @@protoc_insertion_point(destructor:CSToDB.StoreUserdata.SUserItemInfo)
  SharedDtor();
}

void StoreUserdata_SUserItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreUserdata_SUserItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreUserdata_SUserItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreUserdata_SUserItemInfo_descriptor_;
}

const StoreUserdata_SUserItemInfo& StoreUserdata_SUserItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

StoreUserdata_SUserItemInfo* StoreUserdata_SUserItemInfo::default_instance_ = NULL;

StoreUserdata_SUserItemInfo* StoreUserdata_SUserItemInfo::New() const {
  return new StoreUserdata_SUserItemInfo;
}

void StoreUserdata_SUserItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreUserdata_SUserItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(item_id_, n32effectid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreUserdata_SUserItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.StoreUserdata.SUserItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ifusing;
        break;
      }

      // optional bool ifusing = 2;
      case 2: {
        if (tag == 16) {
         parse_ifusing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifusing_)));
          set_has_ifusing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 3;
      case 3: {
        if (tag == 24) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buy_time;
        break;
      }

      // optional int64 buy_time = 4;
      case 4: {
        if (tag == 32) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 6;
      case 6: {
        if (tag == 48) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_n32EffectValue;
        break;
      }

      // optional int32 n32EffectValue = 7;
      case 7: {
        if (tag == 56) {
         parse_n32EffectValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n32effectvalue_)));
          set_has_n32effectvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_n32EffectID;
        break;
      }

      // optional int32 n32EffectID = 8;
      case 8: {
        if (tag == 64) {
         parse_n32EffectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n32effectid_)));
          set_has_n32effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.StoreUserdata.SUserItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.StoreUserdata.SUserItemInfo)
  return false;
#undef DO_
}

void StoreUserdata_SUserItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.StoreUserdata.SUserItemInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional bool ifusing = 2;
  if (has_ifusing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ifusing(), output);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_num(), output);
  }

  // optional int64 buy_time = 4;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->buy_time(), output);
  }

  // optional int64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  // optional int32 n32EffectValue = 7;
  if (has_n32effectvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->n32effectvalue(), output);
  }

  // optional int32 n32EffectID = 8;
  if (has_n32effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->n32effectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.StoreUserdata.SUserItemInfo)
}

::google::protobuf::uint8* StoreUserdata_SUserItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.StoreUserdata.SUserItemInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional bool ifusing = 2;
  if (has_ifusing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ifusing(), target);
  }

  // optional int32 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_num(), target);
  }

  // optional int64 buy_time = 4;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->buy_time(), target);
  }

  // optional int64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  // optional int32 n32EffectValue = 7;
  if (has_n32effectvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->n32effectvalue(), target);
  }

  // optional int32 n32EffectID = 8;
  if (has_n32effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->n32effectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.StoreUserdata.SUserItemInfo)
  return target;
}

int StoreUserdata_SUserItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional bool ifusing = 2;
    if (has_ifusing()) {
      total_size += 1 + 1;
    }

    // optional int32 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int64 buy_time = 4;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_time());
    }

    // optional int64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 n32EffectValue = 7;
    if (has_n32effectvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n32effectvalue());
    }

    // optional int32 n32EffectID = 8;
    if (has_n32effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n32effectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreUserdata_SUserItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreUserdata_SUserItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreUserdata_SUserItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreUserdata_SUserItemInfo::MergeFrom(const StoreUserdata_SUserItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_ifusing()) {
      set_ifusing(from.ifusing());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_n32effectvalue()) {
      set_n32effectvalue(from.n32effectvalue());
    }
    if (from.has_n32effectid()) {
      set_n32effectid(from.n32effectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreUserdata_SUserItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreUserdata_SUserItemInfo::CopyFrom(const StoreUserdata_SUserItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreUserdata_SUserItemInfo::IsInitialized() const {

  return true;
}

void StoreUserdata_SUserItemInfo::Swap(StoreUserdata_SUserItemInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(ifusing_, other->ifusing_);
    std::swap(item_num_, other->item_num_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(n32effectvalue_, other->n32effectvalue_);
    std::swap(n32effectid_, other->n32effectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreUserdata_SUserItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreUserdata_SUserItemInfo_descriptor_;
  metadata.reflection = StoreUserdata_SUserItemInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StoreUserdata_UserMailDBData::kMailIdFieldNumber;
const int StoreUserdata_UserMailDBData::kMStateFieldNumber;
#endif  // !_MSC_VER

StoreUserdata_UserMailDBData::StoreUserdata_UserMailDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.StoreUserdata.UserMailDBData)
}

void StoreUserdata_UserMailDBData::InitAsDefaultInstance() {
}

StoreUserdata_UserMailDBData::StoreUserdata_UserMailDBData(const StoreUserdata_UserMailDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.StoreUserdata.UserMailDBData)
}

void StoreUserdata_UserMailDBData::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  mstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreUserdata_UserMailDBData::~StoreUserdata_UserMailDBData() {
  // @@protoc_insertion_point(destructor:CSToDB.StoreUserdata.UserMailDBData)
  SharedDtor();
}

void StoreUserdata_UserMailDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreUserdata_UserMailDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreUserdata_UserMailDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreUserdata_UserMailDBData_descriptor_;
}

const StoreUserdata_UserMailDBData& StoreUserdata_UserMailDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

StoreUserdata_UserMailDBData* StoreUserdata_UserMailDBData::default_instance_ = NULL;

StoreUserdata_UserMailDBData* StoreUserdata_UserMailDBData::New() const {
  return new StoreUserdata_UserMailDBData;
}

void StoreUserdata_UserMailDBData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreUserdata_UserMailDBData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mailid_, mstate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreUserdata_UserMailDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.StoreUserdata.UserMailDBData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mState;
        break;
      }

      // optional int32 mState = 2;
      case 2: {
        if (tag == 16) {
         parse_mState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstate_)));
          set_has_mstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.StoreUserdata.UserMailDBData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.StoreUserdata.UserMailDBData)
  return false;
#undef DO_
}

void StoreUserdata_UserMailDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.StoreUserdata.UserMailDBData)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // optional int32 mState = 2;
  if (has_mstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.StoreUserdata.UserMailDBData)
}

::google::protobuf::uint8* StoreUserdata_UserMailDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.StoreUserdata.UserMailDBData)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mailid(), target);
  }

  // optional int32 mState = 2;
  if (has_mstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.StoreUserdata.UserMailDBData)
  return target;
}

int StoreUserdata_UserMailDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 mState = 2;
    if (has_mstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreUserdata_UserMailDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreUserdata_UserMailDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreUserdata_UserMailDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreUserdata_UserMailDBData::MergeFrom(const StoreUserdata_UserMailDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mstate()) {
      set_mstate(from.mstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreUserdata_UserMailDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreUserdata_UserMailDBData::CopyFrom(const StoreUserdata_UserMailDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreUserdata_UserMailDBData::IsInitialized() const {

  return true;
}

void StoreUserdata_UserMailDBData::Swap(StoreUserdata_UserMailDBData* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(mstate_, other->mstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreUserdata_UserMailDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreUserdata_UserMailDBData_descriptor_;
  metadata.reflection = StoreUserdata_UserMailDBData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StoreUserdata::kUn64ObjIdxFieldNumber;
const int StoreUserdata::kEUserPlatformFieldNumber;
const int StoreUserdata::kUn32HeaderIDFieldNumber;
const int StoreUserdata::kN8SexFieldNumber;
const int StoreUserdata::kN64DiamondFieldNumber;
const int StoreUserdata::kN64GoldFieldNumber;
const int StoreUserdata::kTRegisteUTCMillisecFieldNumber;
const int StoreUserdata::kTLastLoginUTCMillisecFieldNumber;
const int StoreUserdata::kTLastLogOutUTCTimeFieldNumber;
const int StoreUserdata::kN64ScoreFieldNumber;
const int StoreUserdata::kUn32TotalGameInnsFieldNumber;
const int StoreUserdata::kUn32TotalWinInnsFieldNumber;
const int StoreUserdata::kUn32TotalHeroKillsFieldNumber;
const int StoreUserdata::kUn32TotalDestoryBuildingsFieldNumber;
const int StoreUserdata::kUn32TotalDeadTimesFieldNumber;
const int StoreUserdata::kUn32TotalAssistFieldNumber;
const int StoreUserdata::kUn16UserLvFieldNumber;
const int StoreUserdata::kUn32UserCurLvExpFieldNumber;
const int StoreUserdata::kTLastFirstWinTimeFieldNumber;
const int StoreUserdata::kUn16CldaysFieldNumber;
const int StoreUserdata::kTLastGetLoginRewardFieldNumber;
const int StoreUserdata::kUn16VipLvFieldNumber;
const int StoreUserdata::kVipScoreFieldNumber;
const int StoreUserdata::kMGuideStepsFieldNumber;
const int StoreUserdata::kSSUserHeroDBDataFieldNumber;
const int StoreUserdata::kFriendListFieldNumber;
const int StoreUserdata::kBlackListFieldNumber;
const int StoreUserdata::kItemlistFieldNumber;
const int StoreUserdata::kMailListFieldNumber;
const int StoreUserdata::kNicknameFieldNumber;
const int StoreUserdata::kUsernameFieldNumber;
const int StoreUserdata::kPwdFieldNumber;
const int StoreUserdata::kRunestrFieldNumber;
const int StoreUserdata::kSlotstrFieldNumber;
#endif  // !_MSC_VER

StoreUserdata::StoreUserdata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.StoreUserdata)
}

void StoreUserdata::InitAsDefaultInstance() {
}

StoreUserdata::StoreUserdata(const StoreUserdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.StoreUserdata)
}

void StoreUserdata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  un64objidx_ = GOOGLE_LONGLONG(0);
  euserplatform_ = 0;
  un32headerid_ = 0;
  n8sex_ = 0;
  n64diamond_ = GOOGLE_LONGLONG(0);
  n64gold_ = GOOGLE_LONGLONG(0);
  tregisteutcmillisec_ = GOOGLE_LONGLONG(0);
  tlastloginutcmillisec_ = GOOGLE_LONGLONG(0);
  tlastlogoututctime_ = GOOGLE_LONGLONG(0);
  n64score_ = GOOGLE_LONGLONG(0);
  un32totalgameinns_ = 0;
  un32totalwininns_ = 0;
  un32totalherokills_ = 0;
  un32totaldestorybuildings_ = 0;
  un32totaldeadtimes_ = 0;
  un32totalassist_ = 0;
  un16userlv_ = 0;
  un32usercurlvexp_ = 0;
  tlastfirstwintime_ = GOOGLE_LONGLONG(0);
  un16cldays_ = 0;
  tlastgetloginreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  un16viplv_ = 0;
  vipscore_ = 0;
  mguidesteps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slotstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreUserdata::~StoreUserdata() {
  // @@protoc_insertion_point(destructor:CSToDB.StoreUserdata)
  SharedDtor();
}

void StoreUserdata::SharedDtor() {
  if (tlastgetloginreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tlastgetloginreward_;
  }
  if (mguidesteps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mguidesteps_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (runestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete runestr_;
  }
  if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slotstr_;
  }
  if (this != default_instance_) {
  }
}

void StoreUserdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreUserdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreUserdata_descriptor_;
}

const StoreUserdata& StoreUserdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

StoreUserdata* StoreUserdata::default_instance_ = NULL;

StoreUserdata* StoreUserdata::New() const {
  return new StoreUserdata;
}

void StoreUserdata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreUserdata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(un64objidx_, n8sex_);
    tlastloginutcmillisec_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(tlastlogoututctime_, un32totalassist_);
    un32totalgameinns_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(un16userlv_, un16cldays_);
    ZR_(un16viplv_, vipscore_);
    if (has_tlastgetloginreward()) {
      if (tlastgetloginreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tlastgetloginreward_->clear();
      }
    }
    if (has_mguidesteps()) {
      if (mguidesteps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mguidesteps_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 3758096384) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 3) {
    if (has_runestr()) {
      if (runestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        runestr_->clear();
      }
    }
    if (has_slotstr()) {
      if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slotstr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ssuserherodbdata_.Clear();
  friendlist_.Clear();
  blacklist_.Clear();
  itemlist_.Clear();
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreUserdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.StoreUserdata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 un64ObjIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &un64objidx_)));
          set_has_un64objidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eUserPlatform;
        break;
      }

      // optional int32 eUserPlatform = 2;
      case 2: {
        if (tag == 16) {
         parse_eUserPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &euserplatform_)));
          set_has_euserplatform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_un32HeaderID;
        break;
      }

      // optional int32 un32HeaderID = 3;
      case 3: {
        if (tag == 24) {
         parse_un32HeaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32headerid_)));
          set_has_un32headerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_n8Sex;
        break;
      }

      // optional int32 n8Sex = 4;
      case 4: {
        if (tag == 32) {
         parse_n8Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n8sex_)));
          set_has_n8sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_n64Diamond;
        break;
      }

      // optional int64 n64Diamond = 5;
      case 5: {
        if (tag == 40) {
         parse_n64Diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n64diamond_)));
          set_has_n64diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_n64Gold;
        break;
      }

      // optional int64 n64Gold = 6;
      case 6: {
        if (tag == 48) {
         parse_n64Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n64gold_)));
          set_has_n64gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tRegisteUTCMillisec;
        break;
      }

      // optional int64 tRegisteUTCMillisec = 7;
      case 7: {
        if (tag == 56) {
         parse_tRegisteUTCMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tregisteutcmillisec_)));
          set_has_tregisteutcmillisec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tLastLoginUTCMillisec;
        break;
      }

      // optional int64 tLastLoginUTCMillisec = 8;
      case 8: {
        if (tag == 64) {
         parse_tLastLoginUTCMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tlastloginutcmillisec_)));
          set_has_tlastloginutcmillisec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tLastLogOutUTCTime;
        break;
      }

      // optional int64 tLastLogOutUTCTime = 9;
      case 9: {
        if (tag == 72) {
         parse_tLastLogOutUTCTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tlastlogoututctime_)));
          set_has_tlastlogoututctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_n64Score;
        break;
      }

      // optional int64 n64Score = 10;
      case 10: {
        if (tag == 80) {
         parse_n64Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n64score_)));
          set_has_n64score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_un32TotalGameInns;
        break;
      }

      // optional int32 un32TotalGameInns = 11;
      case 11: {
        if (tag == 88) {
         parse_un32TotalGameInns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32totalgameinns_)));
          set_has_un32totalgameinns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_un32TotalWinInns;
        break;
      }

      // optional int32 un32TotalWinInns = 12;
      case 12: {
        if (tag == 96) {
         parse_un32TotalWinInns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32totalwininns_)));
          set_has_un32totalwininns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_un32TotalHeroKills;
        break;
      }

      // optional int32 un32TotalHeroKills = 13;
      case 13: {
        if (tag == 104) {
         parse_un32TotalHeroKills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32totalherokills_)));
          set_has_un32totalherokills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_un32TotalDestoryBuildings;
        break;
      }

      // optional int32 un32TotalDestoryBuildings = 14;
      case 14: {
        if (tag == 112) {
         parse_un32TotalDestoryBuildings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32totaldestorybuildings_)));
          set_has_un32totaldestorybuildings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_un32TotalDeadTimes;
        break;
      }

      // optional int32 un32TotalDeadTimes = 15;
      case 15: {
        if (tag == 120) {
         parse_un32TotalDeadTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32totaldeadtimes_)));
          set_has_un32totaldeadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_un32TotalAssist;
        break;
      }

      // optional int32 un32TotalAssist = 16;
      case 16: {
        if (tag == 128) {
         parse_un32TotalAssist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32totalassist_)));
          set_has_un32totalassist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_un16UserLv;
        break;
      }

      // optional int32 un16UserLv = 17;
      case 17: {
        if (tag == 136) {
         parse_un16UserLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un16userlv_)));
          set_has_un16userlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_un32UserCurLvExp;
        break;
      }

      // optional int32 un32UserCurLvExp = 18;
      case 18: {
        if (tag == 144) {
         parse_un32UserCurLvExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un32usercurlvexp_)));
          set_has_un32usercurlvexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tLastFirstWinTime;
        break;
      }

      // optional int64 tLastFirstWinTime = 19;
      case 19: {
        if (tag == 152) {
         parse_tLastFirstWinTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tlastfirstwintime_)));
          set_has_tlastfirstwintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_un16Cldays;
        break;
      }

      // optional int32 un16Cldays = 20;
      case 20: {
        if (tag == 160) {
         parse_un16Cldays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un16cldays_)));
          set_has_un16cldays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_tLastGetLoginReward;
        break;
      }

      // optional string tLastGetLoginReward = 21;
      case 21: {
        if (tag == 170) {
         parse_tLastGetLoginReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tlastgetloginreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tlastgetloginreward().data(), this->tlastgetloginreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tlastgetloginreward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_un16VipLv;
        break;
      }

      // optional int32 un16VipLv = 22;
      case 22: {
        if (tag == 176) {
         parse_un16VipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un16viplv_)));
          set_has_un16viplv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_vipScore;
        break;
      }

      // optional int32 vipScore = 23;
      case 23: {
        if (tag == 184) {
         parse_vipScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipscore_)));
          set_has_vipscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_mGuideSteps;
        break;
      }

      // optional string mGuideSteps = 24;
      case 24: {
        if (tag == 194) {
         parse_mGuideSteps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mguidesteps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mguidesteps().data(), this->mguidesteps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mguidesteps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_sSUserHeroDBData;
        break;
      }

      // repeated .CSToDB.StoreUserdata.SUserHeroDBData sSUserHeroDBData = 25;
      case 25: {
        if (tag == 202) {
         parse_sSUserHeroDBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ssuserherodbdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_sSUserHeroDBData;
        if (input->ExpectTag(210)) goto parse_friendList;
        break;
      }

      // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo friendList = 26;
      case 26: {
        if (tag == 210) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_friendList;
        if (input->ExpectTag(218)) goto parse_blackList;
        break;
      }

      // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo blackList = 27;
      case 27: {
        if (tag == 218) {
         parse_blackList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_blackList;
        if (input->ExpectTag(226)) goto parse_itemlist;
        break;
      }

      // repeated .CSToDB.StoreUserdata.SUserItemInfo itemlist = 28;
      case 28: {
        if (tag == 226) {
         parse_itemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_itemlist;
        if (input->ExpectTag(234)) goto parse_mailList;
        break;
      }

      // repeated .CSToDB.StoreUserdata.UserMailDBData mailList = 29;
      case 29: {
        if (tag == 234) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_mailList;
        if (input->ExpectTag(242)) goto parse_nickname;
        break;
      }

      // optional string nickname = 30;
      case 30: {
        if (tag == 242) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_username;
        break;
      }

      // optional string username = 31;
      case 31: {
        if (tag == 250) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_pwd;
        break;
      }

      // optional string pwd = 32;
      case 32: {
        if (tag == 258) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_runestr;
        break;
      }

      // optional string runestr = 33;
      case 33: {
        if (tag == 266) {
         parse_runestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->runestr().data(), this->runestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "runestr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_slotstr;
        break;
      }

      // optional string slotstr = 34;
      case 34: {
        if (tag == 274) {
         parse_slotstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slotstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slotstr().data(), this->slotstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slotstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.StoreUserdata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.StoreUserdata)
  return false;
#undef DO_
}

void StoreUserdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.StoreUserdata)
  // optional int64 un64ObjIdx = 1;
  if (has_un64objidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->un64objidx(), output);
  }

  // optional int32 eUserPlatform = 2;
  if (has_euserplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->euserplatform(), output);
  }

  // optional int32 un32HeaderID = 3;
  if (has_un32headerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->un32headerid(), output);
  }

  // optional int32 n8Sex = 4;
  if (has_n8sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->n8sex(), output);
  }

  // optional int64 n64Diamond = 5;
  if (has_n64diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->n64diamond(), output);
  }

  // optional int64 n64Gold = 6;
  if (has_n64gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->n64gold(), output);
  }

  // optional int64 tRegisteUTCMillisec = 7;
  if (has_tregisteutcmillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tregisteutcmillisec(), output);
  }

  // optional int64 tLastLoginUTCMillisec = 8;
  if (has_tlastloginutcmillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->tlastloginutcmillisec(), output);
  }

  // optional int64 tLastLogOutUTCTime = 9;
  if (has_tlastlogoututctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->tlastlogoututctime(), output);
  }

  // optional int64 n64Score = 10;
  if (has_n64score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->n64score(), output);
  }

  // optional int32 un32TotalGameInns = 11;
  if (has_un32totalgameinns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->un32totalgameinns(), output);
  }

  // optional int32 un32TotalWinInns = 12;
  if (has_un32totalwininns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->un32totalwininns(), output);
  }

  // optional int32 un32TotalHeroKills = 13;
  if (has_un32totalherokills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->un32totalherokills(), output);
  }

  // optional int32 un32TotalDestoryBuildings = 14;
  if (has_un32totaldestorybuildings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->un32totaldestorybuildings(), output);
  }

  // optional int32 un32TotalDeadTimes = 15;
  if (has_un32totaldeadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->un32totaldeadtimes(), output);
  }

  // optional int32 un32TotalAssist = 16;
  if (has_un32totalassist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->un32totalassist(), output);
  }

  // optional int32 un16UserLv = 17;
  if (has_un16userlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->un16userlv(), output);
  }

  // optional int32 un32UserCurLvExp = 18;
  if (has_un32usercurlvexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->un32usercurlvexp(), output);
  }

  // optional int64 tLastFirstWinTime = 19;
  if (has_tlastfirstwintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tlastfirstwintime(), output);
  }

  // optional int32 un16Cldays = 20;
  if (has_un16cldays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->un16cldays(), output);
  }

  // optional string tLastGetLoginReward = 21;
  if (has_tlastgetloginreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tlastgetloginreward().data(), this->tlastgetloginreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tlastgetloginreward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->tlastgetloginreward(), output);
  }

  // optional int32 un16VipLv = 22;
  if (has_un16viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->un16viplv(), output);
  }

  // optional int32 vipScore = 23;
  if (has_vipscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->vipscore(), output);
  }

  // optional string mGuideSteps = 24;
  if (has_mguidesteps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mguidesteps().data(), this->mguidesteps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mguidesteps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->mguidesteps(), output);
  }

  // repeated .CSToDB.StoreUserdata.SUserHeroDBData sSUserHeroDBData = 25;
  for (int i = 0; i < this->ssuserherodbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->ssuserherodbdata(i), output);
  }

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo friendList = 26;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->friendlist(i), output);
  }

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo blackList = 27;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->blacklist(i), output);
  }

  // repeated .CSToDB.StoreUserdata.SUserItemInfo itemlist = 28;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->itemlist(i), output);
  }

  // repeated .CSToDB.StoreUserdata.UserMailDBData mailList = 29;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->maillist(i), output);
  }

  // optional string nickname = 30;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->nickname(), output);
  }

  // optional string username = 31;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->username(), output);
  }

  // optional string pwd = 32;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->pwd(), output);
  }

  // optional string runestr = 33;
  if (has_runestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->runestr().data(), this->runestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "runestr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->runestr(), output);
  }

  // optional string slotstr = 34;
  if (has_slotstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slotstr().data(), this->slotstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slotstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->slotstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.StoreUserdata)
}

::google::protobuf::uint8* StoreUserdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.StoreUserdata)
  // optional int64 un64ObjIdx = 1;
  if (has_un64objidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->un64objidx(), target);
  }

  // optional int32 eUserPlatform = 2;
  if (has_euserplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->euserplatform(), target);
  }

  // optional int32 un32HeaderID = 3;
  if (has_un32headerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->un32headerid(), target);
  }

  // optional int32 n8Sex = 4;
  if (has_n8sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->n8sex(), target);
  }

  // optional int64 n64Diamond = 5;
  if (has_n64diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->n64diamond(), target);
  }

  // optional int64 n64Gold = 6;
  if (has_n64gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->n64gold(), target);
  }

  // optional int64 tRegisteUTCMillisec = 7;
  if (has_tregisteutcmillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tregisteutcmillisec(), target);
  }

  // optional int64 tLastLoginUTCMillisec = 8;
  if (has_tlastloginutcmillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->tlastloginutcmillisec(), target);
  }

  // optional int64 tLastLogOutUTCTime = 9;
  if (has_tlastlogoututctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->tlastlogoututctime(), target);
  }

  // optional int64 n64Score = 10;
  if (has_n64score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->n64score(), target);
  }

  // optional int32 un32TotalGameInns = 11;
  if (has_un32totalgameinns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->un32totalgameinns(), target);
  }

  // optional int32 un32TotalWinInns = 12;
  if (has_un32totalwininns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->un32totalwininns(), target);
  }

  // optional int32 un32TotalHeroKills = 13;
  if (has_un32totalherokills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->un32totalherokills(), target);
  }

  // optional int32 un32TotalDestoryBuildings = 14;
  if (has_un32totaldestorybuildings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->un32totaldestorybuildings(), target);
  }

  // optional int32 un32TotalDeadTimes = 15;
  if (has_un32totaldeadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->un32totaldeadtimes(), target);
  }

  // optional int32 un32TotalAssist = 16;
  if (has_un32totalassist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->un32totalassist(), target);
  }

  // optional int32 un16UserLv = 17;
  if (has_un16userlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->un16userlv(), target);
  }

  // optional int32 un32UserCurLvExp = 18;
  if (has_un32usercurlvexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->un32usercurlvexp(), target);
  }

  // optional int64 tLastFirstWinTime = 19;
  if (has_tlastfirstwintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tlastfirstwintime(), target);
  }

  // optional int32 un16Cldays = 20;
  if (has_un16cldays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->un16cldays(), target);
  }

  // optional string tLastGetLoginReward = 21;
  if (has_tlastgetloginreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tlastgetloginreward().data(), this->tlastgetloginreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tlastgetloginreward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->tlastgetloginreward(), target);
  }

  // optional int32 un16VipLv = 22;
  if (has_un16viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->un16viplv(), target);
  }

  // optional int32 vipScore = 23;
  if (has_vipscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->vipscore(), target);
  }

  // optional string mGuideSteps = 24;
  if (has_mguidesteps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mguidesteps().data(), this->mguidesteps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mguidesteps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->mguidesteps(), target);
  }

  // repeated .CSToDB.StoreUserdata.SUserHeroDBData sSUserHeroDBData = 25;
  for (int i = 0; i < this->ssuserherodbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->ssuserherodbdata(i), target);
  }

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo friendList = 26;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->friendlist(i), target);
  }

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo blackList = 27;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->blacklist(i), target);
  }

  // repeated .CSToDB.StoreUserdata.SUserItemInfo itemlist = 28;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->itemlist(i), target);
  }

  // repeated .CSToDB.StoreUserdata.UserMailDBData mailList = 29;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->maillist(i), target);
  }

  // optional string nickname = 30;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->nickname(), target);
  }

  // optional string username = 31;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->username(), target);
  }

  // optional string pwd = 32;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->pwd(), target);
  }

  // optional string runestr = 33;
  if (has_runestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->runestr().data(), this->runestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "runestr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->runestr(), target);
  }

  // optional string slotstr = 34;
  if (has_slotstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slotstr().data(), this->slotstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slotstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->slotstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.StoreUserdata)
  return target;
}

int StoreUserdata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 un64ObjIdx = 1;
    if (has_un64objidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->un64objidx());
    }

    // optional int32 eUserPlatform = 2;
    if (has_euserplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->euserplatform());
    }

    // optional int32 un32HeaderID = 3;
    if (has_un32headerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32headerid());
    }

    // optional int32 n8Sex = 4;
    if (has_n8sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n8sex());
    }

    // optional int64 n64Diamond = 5;
    if (has_n64diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n64diamond());
    }

    // optional int64 n64Gold = 6;
    if (has_n64gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n64gold());
    }

    // optional int64 tRegisteUTCMillisec = 7;
    if (has_tregisteutcmillisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tregisteutcmillisec());
    }

    // optional int64 tLastLoginUTCMillisec = 8;
    if (has_tlastloginutcmillisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tlastloginutcmillisec());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 tLastLogOutUTCTime = 9;
    if (has_tlastlogoututctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tlastlogoututctime());
    }

    // optional int64 n64Score = 10;
    if (has_n64score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n64score());
    }

    // optional int32 un32TotalGameInns = 11;
    if (has_un32totalgameinns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32totalgameinns());
    }

    // optional int32 un32TotalWinInns = 12;
    if (has_un32totalwininns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32totalwininns());
    }

    // optional int32 un32TotalHeroKills = 13;
    if (has_un32totalherokills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32totalherokills());
    }

    // optional int32 un32TotalDestoryBuildings = 14;
    if (has_un32totaldestorybuildings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32totaldestorybuildings());
    }

    // optional int32 un32TotalDeadTimes = 15;
    if (has_un32totaldeadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32totaldeadtimes());
    }

    // optional int32 un32TotalAssist = 16;
    if (has_un32totalassist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32totalassist());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 un16UserLv = 17;
    if (has_un16userlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un16userlv());
    }

    // optional int32 un32UserCurLvExp = 18;
    if (has_un32usercurlvexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un32usercurlvexp());
    }

    // optional int64 tLastFirstWinTime = 19;
    if (has_tlastfirstwintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tlastfirstwintime());
    }

    // optional int32 un16Cldays = 20;
    if (has_un16cldays()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un16cldays());
    }

    // optional string tLastGetLoginReward = 21;
    if (has_tlastgetloginreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tlastgetloginreward());
    }

    // optional int32 un16VipLv = 22;
    if (has_un16viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un16viplv());
    }

    // optional int32 vipScore = 23;
    if (has_vipscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipscore());
    }

    // optional string mGuideSteps = 24;
    if (has_mguidesteps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mguidesteps());
    }

  }
  if (_has_bits_[29 / 32] & (0xffu << (29 % 32))) {
    // optional string nickname = 30;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string username = 31;
    if (has_username()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string pwd = 32;
    if (has_pwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string runestr = 33;
    if (has_runestr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->runestr());
    }

    // optional string slotstr = 34;
    if (has_slotstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slotstr());
    }

  }
  // repeated .CSToDB.StoreUserdata.SUserHeroDBData sSUserHeroDBData = 25;
  total_size += 2 * this->ssuserherodbdata_size();
  for (int i = 0; i < this->ssuserherodbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ssuserherodbdata(i));
  }

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo friendList = 26;
  total_size += 2 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo blackList = 27;
  total_size += 2 * this->blacklist_size();
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blacklist(i));
  }

  // repeated .CSToDB.StoreUserdata.SUserItemInfo itemlist = 28;
  total_size += 2 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  // repeated .CSToDB.StoreUserdata.UserMailDBData mailList = 29;
  total_size += 2 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreUserdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreUserdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreUserdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreUserdata::MergeFrom(const StoreUserdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  ssuserherodbdata_.MergeFrom(from.ssuserherodbdata_);
  friendlist_.MergeFrom(from.friendlist_);
  blacklist_.MergeFrom(from.blacklist_);
  itemlist_.MergeFrom(from.itemlist_);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_un64objidx()) {
      set_un64objidx(from.un64objidx());
    }
    if (from.has_euserplatform()) {
      set_euserplatform(from.euserplatform());
    }
    if (from.has_un32headerid()) {
      set_un32headerid(from.un32headerid());
    }
    if (from.has_n8sex()) {
      set_n8sex(from.n8sex());
    }
    if (from.has_n64diamond()) {
      set_n64diamond(from.n64diamond());
    }
    if (from.has_n64gold()) {
      set_n64gold(from.n64gold());
    }
    if (from.has_tregisteutcmillisec()) {
      set_tregisteutcmillisec(from.tregisteutcmillisec());
    }
    if (from.has_tlastloginutcmillisec()) {
      set_tlastloginutcmillisec(from.tlastloginutcmillisec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tlastlogoututctime()) {
      set_tlastlogoututctime(from.tlastlogoututctime());
    }
    if (from.has_n64score()) {
      set_n64score(from.n64score());
    }
    if (from.has_un32totalgameinns()) {
      set_un32totalgameinns(from.un32totalgameinns());
    }
    if (from.has_un32totalwininns()) {
      set_un32totalwininns(from.un32totalwininns());
    }
    if (from.has_un32totalherokills()) {
      set_un32totalherokills(from.un32totalherokills());
    }
    if (from.has_un32totaldestorybuildings()) {
      set_un32totaldestorybuildings(from.un32totaldestorybuildings());
    }
    if (from.has_un32totaldeadtimes()) {
      set_un32totaldeadtimes(from.un32totaldeadtimes());
    }
    if (from.has_un32totalassist()) {
      set_un32totalassist(from.un32totalassist());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_un16userlv()) {
      set_un16userlv(from.un16userlv());
    }
    if (from.has_un32usercurlvexp()) {
      set_un32usercurlvexp(from.un32usercurlvexp());
    }
    if (from.has_tlastfirstwintime()) {
      set_tlastfirstwintime(from.tlastfirstwintime());
    }
    if (from.has_un16cldays()) {
      set_un16cldays(from.un16cldays());
    }
    if (from.has_tlastgetloginreward()) {
      set_tlastgetloginreward(from.tlastgetloginreward());
    }
    if (from.has_un16viplv()) {
      set_un16viplv(from.un16viplv());
    }
    if (from.has_vipscore()) {
      set_vipscore(from.vipscore());
    }
    if (from.has_mguidesteps()) {
      set_mguidesteps(from.mguidesteps());
    }
  }
  if (from._has_bits_[29 / 32] & (0xffu << (29 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_runestr()) {
      set_runestr(from.runestr());
    }
    if (from.has_slotstr()) {
      set_slotstr(from.slotstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreUserdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreUserdata::CopyFrom(const StoreUserdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreUserdata::IsInitialized() const {

  return true;
}

void StoreUserdata::Swap(StoreUserdata* other) {
  if (other != this) {
    std::swap(un64objidx_, other->un64objidx_);
    std::swap(euserplatform_, other->euserplatform_);
    std::swap(un32headerid_, other->un32headerid_);
    std::swap(n8sex_, other->n8sex_);
    std::swap(n64diamond_, other->n64diamond_);
    std::swap(n64gold_, other->n64gold_);
    std::swap(tregisteutcmillisec_, other->tregisteutcmillisec_);
    std::swap(tlastloginutcmillisec_, other->tlastloginutcmillisec_);
    std::swap(tlastlogoututctime_, other->tlastlogoututctime_);
    std::swap(n64score_, other->n64score_);
    std::swap(un32totalgameinns_, other->un32totalgameinns_);
    std::swap(un32totalwininns_, other->un32totalwininns_);
    std::swap(un32totalherokills_, other->un32totalherokills_);
    std::swap(un32totaldestorybuildings_, other->un32totaldestorybuildings_);
    std::swap(un32totaldeadtimes_, other->un32totaldeadtimes_);
    std::swap(un32totalassist_, other->un32totalassist_);
    std::swap(un16userlv_, other->un16userlv_);
    std::swap(un32usercurlvexp_, other->un32usercurlvexp_);
    std::swap(tlastfirstwintime_, other->tlastfirstwintime_);
    std::swap(un16cldays_, other->un16cldays_);
    std::swap(tlastgetloginreward_, other->tlastgetloginreward_);
    std::swap(un16viplv_, other->un16viplv_);
    std::swap(vipscore_, other->vipscore_);
    std::swap(mguidesteps_, other->mguidesteps_);
    ssuserherodbdata_.Swap(&other->ssuserherodbdata_);
    friendlist_.Swap(&other->friendlist_);
    blacklist_.Swap(&other->blacklist_);
    itemlist_.Swap(&other->itemlist_);
    maillist_.Swap(&other->maillist_);
    std::swap(nickname_, other->nickname_);
    std::swap(username_, other->username_);
    std::swap(pwd_, other->pwd_);
    std::swap(runestr_, other->runestr_);
    std::swap(slotstr_, other->slotstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreUserdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreUserdata_descriptor_;
  metadata.reflection = StoreUserdata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryNotice::kMsgidFieldNumber;
#endif  // !_MSC_VER

QueryNotice::QueryNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.QueryNotice)
}

void QueryNotice::InitAsDefaultInstance() {
}

QueryNotice::QueryNotice(const QueryNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.QueryNotice)
}

void QueryNotice::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 115;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryNotice::~QueryNotice() {
  // @@protoc_insertion_point(destructor:CSToDB.QueryNotice)
  SharedDtor();
}

void QueryNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNotice_descriptor_;
}

const QueryNotice& QueryNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

QueryNotice* QueryNotice::default_instance_ = NULL;

QueryNotice* QueryNotice::New() const {
  return new QueryNotice;
}

void QueryNotice::Clear() {
  msgid_ = 115;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.QueryNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eQueryNotice_DBCall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.QueryNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.QueryNotice)
  return false;
#undef DO_
}

void QueryNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.QueryNotice)
  // optional .CSToDB.MsgID msgid = 1 [default = eQueryNotice_DBCall];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.QueryNotice)
}

::google::protobuf::uint8* QueryNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.QueryNotice)
  // optional .CSToDB.MsgID msgid = 1 [default = eQueryNotice_DBCall];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.QueryNotice)
  return target;
}

int QueryNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eQueryNotice_DBCall];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryNotice::MergeFrom(const QueryNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNotice::CopyFrom(const QueryNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNotice::IsInitialized() const {

  return true;
}

void QueryNotice::Swap(QueryNotice* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNotice_descriptor_;
  metadata.reflection = QueryNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExeSQL_Call::kMsgidFieldNumber;
const int ExeSQL_Call::kSqlFieldNumber;
#endif  // !_MSC_VER

ExeSQL_Call::ExeSQL_Call()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.ExeSQL_Call)
}

void ExeSQL_Call::InitAsDefaultInstance() {
}

ExeSQL_Call::ExeSQL_Call(const ExeSQL_Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.ExeSQL_Call)
}

void ExeSQL_Call::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 114;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExeSQL_Call::~ExeSQL_Call() {
  // @@protoc_insertion_point(destructor:CSToDB.ExeSQL_Call)
  SharedDtor();
}

void ExeSQL_Call::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void ExeSQL_Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExeSQL_Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExeSQL_Call_descriptor_;
}

const ExeSQL_Call& ExeSQL_Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

ExeSQL_Call* ExeSQL_Call::default_instance_ = NULL;

ExeSQL_Call* ExeSQL_Call::New() const {
  return new ExeSQL_Call;
}

void ExeSQL_Call::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 114;
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExeSQL_Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.ExeSQL_Call)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eExeSQL_Call];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sql;
        break;
      }

      // optional string sql = 2;
      case 2: {
        if (tag == 18) {
         parse_sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.ExeSQL_Call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.ExeSQL_Call)
  return false;
#undef DO_
}

void ExeSQL_Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.ExeSQL_Call)
  // optional .CSToDB.MsgID msgid = 1 [default = eExeSQL_Call];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.ExeSQL_Call)
}

::google::protobuf::uint8* ExeSQL_Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.ExeSQL_Call)
  // optional .CSToDB.MsgID msgid = 1 [default = eExeSQL_Call];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.ExeSQL_Call)
  return target;
}

int ExeSQL_Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eExeSQL_Call];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string sql = 2;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExeSQL_Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExeSQL_Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExeSQL_Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExeSQL_Call::MergeFrom(const ExeSQL_Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExeSQL_Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExeSQL_Call::CopyFrom(const ExeSQL_Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExeSQL_Call::IsInitialized() const {

  return true;
}

void ExeSQL_Call::Swap(ExeSQL_Call* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(sql_, other->sql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExeSQL_Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExeSQL_Call_descriptor_;
  metadata.reflection = ExeSQL_Call_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNickName::kMsgidFieldNumber;
const int ChangeNickName::kNicknameFieldNumber;
const int ChangeNickName::kGuidFieldNumber;
#endif  // !_MSC_VER

ChangeNickName::ChangeNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.ChangeNickName)
}

void ChangeNickName::InitAsDefaultInstance() {
}

ChangeNickName::ChangeNickName(const ChangeNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.ChangeNickName)
}

void ChangeNickName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 113;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNickName::~ChangeNickName() {
  // @@protoc_insertion_point(destructor:CSToDB.ChangeNickName)
  SharedDtor();
}

void ChangeNickName::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNickName_descriptor_;
}

const ChangeNickName& ChangeNickName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

ChangeNickName* ChangeNickName::default_instance_ = NULL;

ChangeNickName* ChangeNickName::New() const {
  return new ChangeNickName;
}

void ChangeNickName::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 113;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.ChangeNickName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eChangeNickName_DBCall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional int64 guid = 3;
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.ChangeNickName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.ChangeNickName)
  return false;
#undef DO_
}

void ChangeNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.ChangeNickName)
  // optional .CSToDB.MsgID msgid = 1 [default = eChangeNickName_DBCall];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.ChangeNickName)
}

::google::protobuf::uint8* ChangeNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.ChangeNickName)
  // optional .CSToDB.MsgID msgid = 1 [default = eChangeNickName_DBCall];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.ChangeNickName)
  return target;
}

int ChangeNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eChangeNickName_DBCall];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNickName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNickName::MergeFrom(const ChangeNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNickName::CopyFrom(const ChangeNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNickName::IsInitialized() const {

  return true;
}

void ChangeNickName::Swap(ChangeNickName* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(nickname_, other->nickname_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNickName_descriptor_;
  metadata.reflection = ChangeNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlterItem::kMgsidFieldNumber;
const int AlterItem::kSqlStrFieldNumber;
#endif  // !_MSC_VER

AlterItem::AlterItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.AlterItem)
}

void AlterItem::InitAsDefaultInstance() {
}

AlterItem::AlterItem(const AlterItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.AlterItem)
}

void AlterItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 112;
  sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlterItem::~AlterItem() {
  // @@protoc_insertion_point(destructor:CSToDB.AlterItem)
  SharedDtor();
}

void AlterItem::SharedDtor() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (this != default_instance_) {
  }
}

void AlterItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlterItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlterItem_descriptor_;
}

const AlterItem& AlterItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

AlterItem* AlterItem::default_instance_ = NULL;

AlterItem* AlterItem::New() const {
  return new AlterItem;
}

void AlterItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 112;
    if (has_sql_str()) {
      if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlterItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.AlterItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eAlterItem_DBCall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sql_str;
        break;
      }

      // optional string sql_str = 2;
      case 2: {
        if (tag == 18) {
         parse_sql_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_str().data(), this->sql_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.AlterItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.AlterItem)
  return false;
#undef DO_
}

void AlterItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.AlterItem)
  // optional .CSToDB.MsgID mgsid = 1 [default = eAlterItem_DBCall];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.AlterItem)
}

::google::protobuf::uint8* AlterItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.AlterItem)
  // optional .CSToDB.MsgID mgsid = 1 [default = eAlterItem_DBCall];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.AlterItem)
  return target;
}

int AlterItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eAlterItem_DBCall];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string sql_str = 2;
    if (has_sql_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlterItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlterItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlterItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlterItem::MergeFrom(const AlterItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_sql_str()) {
      set_sql_str(from.sql_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlterItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterItem::CopyFrom(const AlterItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterItem::IsInitialized() const {

  return true;
}

void AlterItem::Swap(AlterItem* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(sql_str_, other->sql_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlterItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlterItem_descriptor_;
  metadata.reflection = AlterItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteNotice::kMgsidFieldNumber;
const int DeleteNotice::kIdFieldNumber;
#endif  // !_MSC_VER

DeleteNotice::DeleteNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.DeleteNotice)
}

void DeleteNotice::InitAsDefaultInstance() {
}

DeleteNotice::DeleteNotice(const DeleteNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.DeleteNotice)
}

void DeleteNotice::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 111;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteNotice::~DeleteNotice() {
  // @@protoc_insertion_point(destructor:CSToDB.DeleteNotice)
  SharedDtor();
}

void DeleteNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteNotice_descriptor_;
}

const DeleteNotice& DeleteNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

DeleteNotice* DeleteNotice::default_instance_ = NULL;

DeleteNotice* DeleteNotice::New() const {
  return new DeleteNotice;
}

void DeleteNotice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 111;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.DeleteNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eDeleteNotice_DBCall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.DeleteNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.DeleteNotice)
  return false;
#undef DO_
}

void DeleteNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.DeleteNotice)
  // optional .CSToDB.MsgID mgsid = 1 [default = eDeleteNotice_DBCall];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.DeleteNotice)
}

::google::protobuf::uint8* DeleteNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.DeleteNotice)
  // optional .CSToDB.MsgID mgsid = 1 [default = eDeleteNotice_DBCall];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.DeleteNotice)
  return target;
}

int DeleteNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eDeleteNotice_DBCall];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteNotice::MergeFrom(const DeleteNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNotice::CopyFrom(const DeleteNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNotice::IsInitialized() const {

  return true;
}

void DeleteNotice::Swap(DeleteNotice* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteNotice_descriptor_;
  metadata.reflection = DeleteNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertNotice::kMgsidFieldNumber;
const int InsertNotice::kSqlStrFieldNumber;
#endif  // !_MSC_VER

InsertNotice::InsertNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.InsertNotice)
}

void InsertNotice::InitAsDefaultInstance() {
}

InsertNotice::InsertNotice(const InsertNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.InsertNotice)
}

void InsertNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 110;
  sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertNotice::~InsertNotice() {
  // @@protoc_insertion_point(destructor:CSToDB.InsertNotice)
  SharedDtor();
}

void InsertNotice::SharedDtor() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (this != default_instance_) {
  }
}

void InsertNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertNotice_descriptor_;
}

const InsertNotice& InsertNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

InsertNotice* InsertNotice::default_instance_ = NULL;

InsertNotice* InsertNotice::New() const {
  return new InsertNotice;
}

void InsertNotice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 110;
    if (has_sql_str()) {
      if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sql_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.InsertNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eInsertNotice_DBCall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sql_str;
        break;
      }

      // optional string sql_str = 2;
      case 2: {
        if (tag == 18) {
         parse_sql_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_str().data(), this->sql_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.InsertNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.InsertNotice)
  return false;
#undef DO_
}

void InsertNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.InsertNotice)
  // optional .CSToDB.MsgID mgsid = 1 [default = eInsertNotice_DBCall];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.InsertNotice)
}

::google::protobuf::uint8* InsertNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.InsertNotice)
  // optional .CSToDB.MsgID mgsid = 1 [default = eInsertNotice_DBCall];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.InsertNotice)
  return target;
}

int InsertNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eInsertNotice_DBCall];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string sql_str = 2;
    if (has_sql_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertNotice::MergeFrom(const InsertNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_sql_str()) {
      set_sql_str(from.sql_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertNotice::CopyFrom(const InsertNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertNotice::IsInitialized() const {

  return true;
}

void InsertNotice::Swap(InsertNotice* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(sql_str_, other->sql_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertNotice_descriptor_;
  metadata.reflection = InsertNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlterSNSList::kMgsidFieldNumber;
const int AlterSNSList::kUserIdFieldNumber;
const int AlterSNSList::kRelatedIdFieldNumber;
const int AlterSNSList::kRelatedFieldNumber;
const int AlterSNSList::kOprationFieldNumber;
#endif  // !_MSC_VER

AlterSNSList::AlterSNSList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.AlterSNSList)
}

void AlterSNSList::InitAsDefaultInstance() {
}

AlterSNSList::AlterSNSList(const AlterSNSList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.AlterSNSList)
}

void AlterSNSList::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 109;
  user_id_ = GOOGLE_ULONGLONG(0);
  related_id_ = GOOGLE_ULONGLONG(0);
  related_ = 0u;
  opration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlterSNSList::~AlterSNSList() {
  // @@protoc_insertion_point(destructor:CSToDB.AlterSNSList)
  SharedDtor();
}

void AlterSNSList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlterSNSList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlterSNSList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlterSNSList_descriptor_;
}

const AlterSNSList& AlterSNSList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

AlterSNSList* AlterSNSList::default_instance_ = NULL;

AlterSNSList* AlterSNSList::New() const {
  return new AlterSNSList;
}

void AlterSNSList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AlterSNSList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(related_, opration_);
    mgsid_ = 109;
    user_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlterSNSList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.AlterSNSList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eAlterSNSList_DBCall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_related_id;
        break;
      }

      // optional uint64 related_id = 3;
      case 3: {
        if (tag == 24) {
         parse_related_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &related_id_)));
          set_has_related_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_related;
        break;
      }

      // optional uint32 related = 4;
      case 4: {
        if (tag == 32) {
         parse_related:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &related_)));
          set_has_related();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_opration;
        break;
      }

      // optional uint32 opration = 5;
      case 5: {
        if (tag == 40) {
         parse_opration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opration_)));
          set_has_opration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.AlterSNSList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.AlterSNSList)
  return false;
#undef DO_
}

void AlterSNSList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.AlterSNSList)
  // optional .CSToDB.MsgID mgsid = 1 [default = eAlterSNSList_DBCall];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 related_id = 3;
  if (has_related_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->related_id(), output);
  }

  // optional uint32 related = 4;
  if (has_related()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->related(), output);
  }

  // optional uint32 opration = 5;
  if (has_opration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.AlterSNSList)
}

::google::protobuf::uint8* AlterSNSList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.AlterSNSList)
  // optional .CSToDB.MsgID mgsid = 1 [default = eAlterSNSList_DBCall];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 related_id = 3;
  if (has_related_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->related_id(), target);
  }

  // optional uint32 related = 4;
  if (has_related()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->related(), target);
  }

  // optional uint32 opration = 5;
  if (has_opration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.AlterSNSList)
  return target;
}

int AlterSNSList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eAlterSNSList_DBCall];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 related_id = 3;
    if (has_related_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->related_id());
    }

    // optional uint32 related = 4;
    if (has_related()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->related());
    }

    // optional uint32 opration = 5;
    if (has_opration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlterSNSList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlterSNSList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlterSNSList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlterSNSList::MergeFrom(const AlterSNSList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_related_id()) {
      set_related_id(from.related_id());
    }
    if (from.has_related()) {
      set_related(from.related());
    }
    if (from.has_opration()) {
      set_opration(from.opration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlterSNSList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterSNSList::CopyFrom(const AlterSNSList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterSNSList::IsInitialized() const {

  return true;
}

void AlterSNSList::Swap(AlterSNSList* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(user_id_, other->user_id_);
    std::swap(related_id_, other->related_id_);
    std::swap(related_, other->related_);
    std::swap(opration_, other->opration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlterSNSList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlterSNSList_descriptor_;
  metadata.reflection = AlterSNSList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryObjIdxReq::kMsgidFieldNumber;
const int QueryObjIdxReq::kLogininfoFieldNumber;
const int QueryObjIdxReq::kGsidFieldNumber;
const int QueryObjIdxReq::kGcnetidFieldNumber;
const int QueryObjIdxReq::kCsidFieldNumber;
#endif  // !_MSC_VER

QueryObjIdxReq::QueryObjIdxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.QueryObjIdxReq)
}

void QueryObjIdxReq::InitAsDefaultInstance() {
}

QueryObjIdxReq::QueryObjIdxReq(const QueryObjIdxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.QueryObjIdxReq)
}

void QueryObjIdxReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 108;
  logininfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gsid_ = 0;
  gcnetid_ = 0;
  csid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryObjIdxReq::~QueryObjIdxReq() {
  // @@protoc_insertion_point(destructor:CSToDB.QueryObjIdxReq)
  SharedDtor();
}

void QueryObjIdxReq::SharedDtor() {
  if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logininfo_;
  }
  if (this != default_instance_) {
  }
}

void QueryObjIdxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryObjIdxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryObjIdxReq_descriptor_;
}

const QueryObjIdxReq& QueryObjIdxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

QueryObjIdxReq* QueryObjIdxReq::default_instance_ = NULL;

QueryObjIdxReq* QueryObjIdxReq::New() const {
  return new QueryObjIdxReq;
}

void QueryObjIdxReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryObjIdxReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gsid_, csid_);
    msgid_ = 108;
    if (has_logininfo()) {
      if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logininfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryObjIdxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.QueryObjIdxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eQueryObjId_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Logininfo;
        break;
      }

      // optional string Logininfo = 2;
      case 2: {
        if (tag == 18) {
         parse_Logininfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logininfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logininfo().data(), this->logininfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logininfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 3;
      case 3: {
        if (tag == 24) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gcnetid;
        break;
      }

      // optional int32 gcnetid = 4;
      case 4: {
        if (tag == 32) {
         parse_gcnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnetid_)));
          set_has_gcnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_csid;
        break;
      }

      // optional int32 csid = 5;
      case 5: {
        if (tag == 40) {
         parse_csid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.QueryObjIdxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.QueryObjIdxReq)
  return false;
#undef DO_
}

void QueryObjIdxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.QueryObjIdxReq)
  // optional .CSToDB.MsgID msgid = 1 [default = eQueryObjId_DBCallBack];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string Logininfo = 2;
  if (has_logininfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logininfo().data(), this->logininfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logininfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logininfo(), output);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gsid(), output);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gcnetid(), output);
  }

  // optional int32 csid = 5;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->csid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.QueryObjIdxReq)
}

::google::protobuf::uint8* QueryObjIdxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.QueryObjIdxReq)
  // optional .CSToDB.MsgID msgid = 1 [default = eQueryObjId_DBCallBack];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string Logininfo = 2;
  if (has_logininfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logininfo().data(), this->logininfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logininfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logininfo(), target);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gsid(), target);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gcnetid(), target);
  }

  // optional int32 csid = 5;
  if (has_csid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->csid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.QueryObjIdxReq)
  return target;
}

int QueryObjIdxReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eQueryObjId_DBCallBack];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string Logininfo = 2;
    if (has_logininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logininfo());
    }

    // optional int32 gsid = 3;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnetid = 4;
    if (has_gcnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnetid());
    }

    // optional int32 csid = 5;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryObjIdxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryObjIdxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryObjIdxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryObjIdxReq::MergeFrom(const QueryObjIdxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_logininfo()) {
      set_logininfo(from.logininfo());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnetid()) {
      set_gcnetid(from.gcnetid());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryObjIdxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryObjIdxReq::CopyFrom(const QueryObjIdxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryObjIdxReq::IsInitialized() const {

  return true;
}

void QueryObjIdxReq::Swap(QueryObjIdxReq* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(logininfo_, other->logininfo_);
    std::swap(gsid_, other->gsid_);
    std::swap(gcnetid_, other->gcnetid_);
    std::swap(csid_, other->csid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryObjIdxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryObjIdxReq_descriptor_;
  metadata.reflection = QueryObjIdxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NicknameConflict::kMgsidFieldNumber;
const int NicknameConflict::kNewnicknameFieldNumber;
const int NicknameConflict::kGsidFieldNumber;
const int NicknameConflict::kGcnetidFieldNumber;
const int NicknameConflict::kGuidFieldNumber;
const int NicknameConflict::kSdkidFieldNumber;
const int NicknameConflict::kCsidFieldNumber;
const int NicknameConflict::kCdkFieldNumber;
const int NicknameConflict::kOldnicknameFieldNumber;
#endif  // !_MSC_VER

NicknameConflict::NicknameConflict()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.NicknameConflict)
}

void NicknameConflict::InitAsDefaultInstance() {
}

NicknameConflict::NicknameConflict(const NicknameConflict& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.NicknameConflict)
}

void NicknameConflict::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 107;
  newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gsid_ = 0;
  gcnetid_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  sdkid_ = 0;
  csid_ = 0;
  cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NicknameConflict::~NicknameConflict() {
  // @@protoc_insertion_point(destructor:CSToDB.NicknameConflict)
  SharedDtor();
}

void NicknameConflict::SharedDtor() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdk_;
  }
  if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldnickname_;
  }
  if (this != default_instance_) {
  }
}

void NicknameConflict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NicknameConflict::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NicknameConflict_descriptor_;
}

const NicknameConflict& NicknameConflict::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

NicknameConflict* NicknameConflict::default_instance_ = NULL;

NicknameConflict* NicknameConflict::New() const {
  return new NicknameConflict;
}

void NicknameConflict::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NicknameConflict*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gsid_, sdkid_);
    mgsid_ = 107;
    if (has_newnickname()) {
      if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newnickname_->clear();
      }
    }
    csid_ = 0;
    if (has_cdk()) {
      if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cdk_->clear();
      }
    }
  }
  if (has_oldnickname()) {
    if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      oldnickname_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NicknameConflict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.NicknameConflict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eNicknameConflict_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newnickname;
        break;
      }

      // optional string newnickname = 2;
      case 2: {
        if (tag == 18) {
         parse_newnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newnickname().data(), this->newnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 3;
      case 3: {
        if (tag == 24) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gcnetid;
        break;
      }

      // optional int32 gcnetid = 4;
      case 4: {
        if (tag == 32) {
         parse_gcnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnetid_)));
          set_has_gcnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 5;
      case 5: {
        if (tag == 40) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sdkid;
        break;
      }

      // optional int32 sdkid = 6;
      case 6: {
        if (tag == 48) {
         parse_sdkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_csid;
        break;
      }

      // optional int32 csid = 7;
      case 7: {
        if (tag == 56) {
         parse_csid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cdk;
        break;
      }

      // optional string cdk = 8;
      case 8: {
        if (tag == 66) {
         parse_cdk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdk().data(), this->cdk().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdk");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_oldnickname;
        break;
      }

      // optional string oldnickname = 9;
      case 9: {
        if (tag == 74) {
         parse_oldnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldnickname().data(), this->oldnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.NicknameConflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.NicknameConflict)
  return false;
#undef DO_
}

void NicknameConflict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.NicknameConflict)
  // optional .CSToDB.MsgID mgsid = 1 [default = eNicknameConflict_DBCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string newnickname = 2;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newnickname(), output);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gsid(), output);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gcnetid(), output);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guid(), output);
  }

  // optional int32 sdkid = 6;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sdkid(), output);
  }

  // optional int32 csid = 7;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->csid(), output);
  }

  // optional string cdk = 8;
  if (has_cdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdk().data(), this->cdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cdk(), output);
  }

  // optional string oldnickname = 9;
  if (has_oldnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldnickname().data(), this->oldnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->oldnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.NicknameConflict)
}

::google::protobuf::uint8* NicknameConflict::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.NicknameConflict)
  // optional .CSToDB.MsgID mgsid = 1 [default = eNicknameConflict_DBCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string newnickname = 2;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newnickname(), target);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gsid(), target);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gcnetid(), target);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guid(), target);
  }

  // optional int32 sdkid = 6;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sdkid(), target);
  }

  // optional int32 csid = 7;
  if (has_csid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->csid(), target);
  }

  // optional string cdk = 8;
  if (has_cdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdk().data(), this->cdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cdk(), target);
  }

  // optional string oldnickname = 9;
  if (has_oldnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldnickname().data(), this->oldnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->oldnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.NicknameConflict)
  return target;
}

int NicknameConflict::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eNicknameConflict_DBCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string newnickname = 2;
    if (has_newnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newnickname());
    }

    // optional int32 gsid = 3;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnetid = 4;
    if (has_gcnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnetid());
    }

    // optional uint64 guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 sdkid = 6;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdkid());
    }

    // optional int32 csid = 7;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

    // optional string cdk = 8;
    if (has_cdk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdk());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string oldnickname = 9;
    if (has_oldnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NicknameConflict::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NicknameConflict* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NicknameConflict*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NicknameConflict::MergeFrom(const NicknameConflict& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_newnickname()) {
      set_newnickname(from.newnickname());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnetid()) {
      set_gcnetid(from.gcnetid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
    if (from.has_cdk()) {
      set_cdk(from.cdk());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oldnickname()) {
      set_oldnickname(from.oldnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NicknameConflict::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NicknameConflict::CopyFrom(const NicknameConflict& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NicknameConflict::IsInitialized() const {

  return true;
}

void NicknameConflict::Swap(NicknameConflict* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(newnickname_, other->newnickname_);
    std::swap(gsid_, other->gsid_);
    std::swap(gcnetid_, other->gcnetid_);
    std::swap(guid_, other->guid_);
    std::swap(sdkid_, other->sdkid_);
    std::swap(csid_, other->csid_);
    std::swap(cdk_, other->cdk_);
    std::swap(oldnickname_, other->oldnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NicknameConflict::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NicknameConflict_descriptor_;
  metadata.reflection = NicknameConflict_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyGoods::kMgsidFieldNumber;
const int BuyGoods::kBuygoodsmagFieldNumber;
#endif  // !_MSC_VER

BuyGoods::BuyGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.BuyGoods)
}

void BuyGoods::InitAsDefaultInstance() {
}

BuyGoods::BuyGoods(const BuyGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.BuyGoods)
}

void BuyGoods::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 106;
  buygoodsmag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyGoods::~BuyGoods() {
  // @@protoc_insertion_point(destructor:CSToDB.BuyGoods)
  SharedDtor();
}

void BuyGoods::SharedDtor() {
  if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buygoodsmag_;
  }
  if (this != default_instance_) {
  }
}

void BuyGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyGoods_descriptor_;
}

const BuyGoods& BuyGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

BuyGoods* BuyGoods::default_instance_ = NULL;

BuyGoods* BuyGoods::New() const {
  return new BuyGoods;
}

void BuyGoods::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 106;
    if (has_buygoodsmag()) {
      if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buygoodsmag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.BuyGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eBuyGoods_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buygoodsmag;
        break;
      }

      // optional string buygoodsmag = 2;
      case 2: {
        if (tag == 18) {
         parse_buygoodsmag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buygoodsmag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buygoodsmag().data(), this->buygoodsmag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buygoodsmag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.BuyGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.BuyGoods)
  return false;
#undef DO_
}

void BuyGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.BuyGoods)
  // optional .CSToDB.MsgID mgsid = 1 [default = eBuyGoods_DBCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string buygoodsmag = 2;
  if (has_buygoodsmag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buygoodsmag().data(), this->buygoodsmag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buygoodsmag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buygoodsmag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.BuyGoods)
}

::google::protobuf::uint8* BuyGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.BuyGoods)
  // optional .CSToDB.MsgID mgsid = 1 [default = eBuyGoods_DBCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string buygoodsmag = 2;
  if (has_buygoodsmag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buygoodsmag().data(), this->buygoodsmag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buygoodsmag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buygoodsmag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.BuyGoods)
  return target;
}

int BuyGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eBuyGoods_DBCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string buygoodsmag = 2;
    if (has_buygoodsmag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buygoodsmag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyGoods::MergeFrom(const BuyGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_buygoodsmag()) {
      set_buygoodsmag(from.buygoodsmag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyGoods::CopyFrom(const BuyGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyGoods::IsInitialized() const {

  return true;
}

void BuyGoods::Swap(BuyGoods* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(buygoodsmag_, other->buygoodsmag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyGoods_descriptor_;
  metadata.reflection = BuyGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameMailInfo::kTypeFieldNumber;
const int GameMailInfo::kMailIdFieldNumber;
const int GameMailInfo::kUseridFieldNumber;
const int GameMailInfo::kCurtstateFieldNumber;
const int GameMailInfo::kSdkidxFieldNumber;
const int GameMailInfo::kTitleFieldNumber;
const int GameMailInfo::kContentFieldNumber;
const int GameMailInfo::kGiftstrFieldNumber;
const int GameMailInfo::kCreatetimeFieldNumber;
const int GameMailInfo::kOvertimeFieldNumber;
const int GameMailInfo::kSenderFieldNumber;
#endif  // !_MSC_VER

GameMailInfo::GameMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.GameMailInfo)
}

void GameMailInfo::InitAsDefaultInstance() {
}

GameMailInfo::GameMailInfo(const GameMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.GameMailInfo)
}

void GameMailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  mailid_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  curtstate_ = 0;
  sdkidx_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  giftstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMailInfo::~GameMailInfo() {
  // @@protoc_insertion_point(destructor:CSToDB.GameMailInfo)
  SharedDtor();
}

void GameMailInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (giftstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete giftstr_;
  }
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (overtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete overtime_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void GameMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMailInfo_descriptor_;
}

const GameMailInfo& GameMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

GameMailInfo* GameMailInfo::default_instance_ = NULL;

GameMailInfo* GameMailInfo::New() const {
  return new GameMailInfo;
}

void GameMailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameMailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, sdkidx_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_giftstr()) {
      if (giftstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        giftstr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
    if (has_overtime()) {
      if (overtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        overtime_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.GameMailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MailType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MailType_IsValid(value)) {
            set_type(static_cast< ::CSToDB::MailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }

      // optional int32 mailId = 2;
      case 2: {
        if (tag == 16) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional int64 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curtstate;
        break;
      }

      // optional .CSToDB.EMailCurtState curtstate = 4;
      case 4: {
        if (tag == 32) {
         parse_curtstate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::EMailCurtState_IsValid(value)) {
            set_curtstate(static_cast< ::CSToDB::EMailCurtState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sdkidx;
        break;
      }

      // optional int32 sdkidx = 5;
      case 5: {
        if (tag == 40) {
         parse_sdkidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdkidx_)));
          set_has_sdkidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (tag == 50) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (tag == 58) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_giftstr;
        break;
      }

      // optional string giftstr = 8;
      case 8: {
        if (tag == 66) {
         parse_giftstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->giftstr().data(), this->giftstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "giftstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_createtime;
        break;
      }

      // optional string createtime = 9;
      case 9: {
        if (tag == 74) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_overtime;
        break;
      }

      // optional string overtime = 10;
      case 10: {
        if (tag == 82) {
         parse_overtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_overtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->overtime().data(), this->overtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "overtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sender;
        break;
      }

      // optional string sender = 11;
      case 11: {
        if (tag == 90) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.GameMailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.GameMailInfo)
  return false;
#undef DO_
}

void GameMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.GameMailInfo)
  // optional .CSToDB.MailType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  // optional int64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userid(), output);
  }

  // optional .CSToDB.EMailCurtState curtstate = 4;
  if (has_curtstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->curtstate(), output);
  }

  // optional int32 sdkidx = 5;
  if (has_sdkidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sdkidx(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->content(), output);
  }

  // optional string giftstr = 8;
  if (has_giftstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->giftstr().data(), this->giftstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "giftstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->giftstr(), output);
  }

  // optional string createtime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->createtime(), output);
  }

  // optional string overtime = 10;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->overtime().data(), this->overtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "overtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->overtime(), output);
  }

  // optional string sender = 11;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.GameMailInfo)
}

::google::protobuf::uint8* GameMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.GameMailInfo)
  // optional .CSToDB.MailType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  // optional int64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userid(), target);
  }

  // optional .CSToDB.EMailCurtState curtstate = 4;
  if (has_curtstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->curtstate(), target);
  }

  // optional int32 sdkidx = 5;
  if (has_sdkidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sdkidx(), target);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional string giftstr = 8;
  if (has_giftstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->giftstr().data(), this->giftstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "giftstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->giftstr(), target);
  }

  // optional string createtime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->createtime(), target);
  }

  // optional string overtime = 10;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->overtime().data(), this->overtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "overtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->overtime(), target);
  }

  // optional string sender = 11;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.GameMailInfo)
  return target;
}

int GameMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MailType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional .CSToDB.EMailCurtState curtstate = 4;
    if (has_curtstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curtstate());
    }

    // optional int32 sdkidx = 5;
    if (has_sdkidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdkidx());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string giftstr = 8;
    if (has_giftstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftstr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string createtime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional string overtime = 10;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->overtime());
    }

    // optional string sender = 11;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMailInfo::MergeFrom(const GameMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_curtstate()) {
      set_curtstate(from.curtstate());
    }
    if (from.has_sdkidx()) {
      set_sdkidx(from.sdkidx());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_giftstr()) {
      set_giftstr(from.giftstr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMailInfo::CopyFrom(const GameMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMailInfo::IsInitialized() const {

  return true;
}

void GameMailInfo::Swap(GameMailInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(mailid_, other->mailid_);
    std::swap(userid_, other->userid_);
    std::swap(curtstate_, other->curtstate_);
    std::swap(sdkidx_, other->sdkidx_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(giftstr_, other->giftstr_);
    std::swap(createtime_, other->createtime_);
    std::swap(overtime_, other->overtime_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMailInfo_descriptor_;
  metadata.reflection = GameMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGameMail::kMgsidFieldNumber;
const int UpdateGameMail::kMaillistFieldNumber;
#endif  // !_MSC_VER

UpdateGameMail::UpdateGameMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.UpdateGameMail)
}

void UpdateGameMail::InitAsDefaultInstance() {
}

UpdateGameMail::UpdateGameMail(const UpdateGameMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.UpdateGameMail)
}

void UpdateGameMail::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 105;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGameMail::~UpdateGameMail() {
  // @@protoc_insertion_point(destructor:CSToDB.UpdateGameMail)
  SharedDtor();
}

void UpdateGameMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGameMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGameMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGameMail_descriptor_;
}

const UpdateGameMail& UpdateGameMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

UpdateGameMail* UpdateGameMail::default_instance_ = NULL;

UpdateGameMail* UpdateGameMail::New() const {
  return new UpdateGameMail;
}

void UpdateGameMail::Clear() {
  mgsid_ = 105;
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGameMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.UpdateGameMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateGameMail_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_maillist;
        break;
      }

      // repeated .CSToDB.GameMailInfo maillist = 2;
      case 2: {
        if (tag == 18) {
         parse_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_maillist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.UpdateGameMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.UpdateGameMail)
  return false;
#undef DO_
}

void UpdateGameMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.UpdateGameMail)
  // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateGameMail_DBCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // repeated .CSToDB.GameMailInfo maillist = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maillist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.UpdateGameMail)
}

::google::protobuf::uint8* UpdateGameMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.UpdateGameMail)
  // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateGameMail_DBCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // repeated .CSToDB.GameMailInfo maillist = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maillist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.UpdateGameMail)
  return target;
}

int UpdateGameMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateGameMail_DBCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  // repeated .CSToDB.GameMailInfo maillist = 2;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGameMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGameMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGameMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGameMail::MergeFrom(const UpdateGameMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGameMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGameMail::CopyFrom(const UpdateGameMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGameMail::IsInitialized() const {

  return true;
}

void UpdateGameMail::Swap(UpdateGameMail* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGameMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGameMail_descriptor_;
  metadata.reflection = UpdateGameMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertUser::kMgsidFieldNumber;
const int InsertUser::kGuidFieldNumber;
const int InsertUser::kSqlstrFieldNumber;
#endif  // !_MSC_VER

InsertUser::InsertUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.InsertUser)
}

void InsertUser::InitAsDefaultInstance() {
}

InsertUser::InsertUser(const InsertUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.InsertUser)
}

void InsertUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 104;
  guid_ = GOOGLE_LONGLONG(0);
  sqlstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertUser::~InsertUser() {
  // @@protoc_insertion_point(destructor:CSToDB.InsertUser)
  SharedDtor();
}

void InsertUser::SharedDtor() {
  if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sqlstr_;
  }
  if (this != default_instance_) {
  }
}

void InsertUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertUser_descriptor_;
}

const InsertUser& InsertUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

InsertUser* InsertUser::default_instance_ = NULL;

InsertUser* InsertUser::New() const {
  return new InsertUser;
}

void InsertUser::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 104;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_sqlstr()) {
      if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sqlstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.InsertUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eInsertUser_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sqlstr;
        break;
      }

      // optional string sqlstr = 3;
      case 3: {
        if (tag == 26) {
         parse_sqlstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sqlstr().data(), this->sqlstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sqlstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.InsertUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.InsertUser)
  return false;
#undef DO_
}

void InsertUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.InsertUser)
  // optional .CSToDB.MsgID mgsid = 1 [default = eInsertUser_DBCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional string sqlstr = 3;
  if (has_sqlstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlstr().data(), this->sqlstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sqlstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sqlstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.InsertUser)
}

::google::protobuf::uint8* InsertUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.InsertUser)
  // optional .CSToDB.MsgID mgsid = 1 [default = eInsertUser_DBCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional string sqlstr = 3;
  if (has_sqlstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlstr().data(), this->sqlstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sqlstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sqlstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.InsertUser)
  return target;
}

int InsertUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eInsertUser_DBCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional string sqlstr = 3;
    if (has_sqlstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sqlstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertUser::MergeFrom(const InsertUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_sqlstr()) {
      set_sqlstr(from.sqlstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertUser::CopyFrom(const InsertUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertUser::IsInitialized() const {

  return true;
}

void InsertUser::Swap(InsertUser* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(sqlstr_, other->sqlstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertUser_descriptor_;
  metadata.reflection = InsertUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUser::kMgsidFieldNumber;
const int UpdateUser::kGuidFieldNumber;
const int UpdateUser::kSqlstrFieldNumber;
#endif  // !_MSC_VER

UpdateUser::UpdateUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.UpdateUser)
}

void UpdateUser::InitAsDefaultInstance() {
}

UpdateUser::UpdateUser(const UpdateUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.UpdateUser)
}

void UpdateUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 103;
  guid_ = GOOGLE_LONGLONG(0);
  sqlstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUser::~UpdateUser() {
  // @@protoc_insertion_point(destructor:CSToDB.UpdateUser)
  SharedDtor();
}

void UpdateUser::SharedDtor() {
  if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sqlstr_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUser_descriptor_;
}

const UpdateUser& UpdateUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

UpdateUser* UpdateUser::default_instance_ = NULL;

UpdateUser* UpdateUser::New() const {
  return new UpdateUser;
}

void UpdateUser::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 103;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_sqlstr()) {
      if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sqlstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.UpdateUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateUser_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sqlstr;
        break;
      }

      // optional string sqlstr = 3;
      case 3: {
        if (tag == 26) {
         parse_sqlstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sqlstr().data(), this->sqlstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sqlstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.UpdateUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.UpdateUser)
  return false;
#undef DO_
}

void UpdateUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.UpdateUser)
  // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateUser_DBCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional string sqlstr = 3;
  if (has_sqlstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlstr().data(), this->sqlstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sqlstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sqlstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.UpdateUser)
}

::google::protobuf::uint8* UpdateUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.UpdateUser)
  // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateUser_DBCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional string sqlstr = 3;
  if (has_sqlstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sqlstr().data(), this->sqlstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sqlstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sqlstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.UpdateUser)
  return target;
}

int UpdateUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateUser_DBCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional string sqlstr = 3;
    if (has_sqlstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sqlstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUser::MergeFrom(const UpdateUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_sqlstr()) {
      set_sqlstr(from.sqlstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUser::CopyFrom(const UpdateUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUser::IsInitialized() const {

  return true;
}

void UpdateUser::Swap(UpdateUser* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(sqlstr_, other->sqlstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUser_descriptor_;
  metadata.reflection = UpdateUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameReq::kMgsidFieldNumber;
const int CheckNameReq::kGsidFieldNumber;
const int CheckNameReq::kGcnetidFieldNumber;
const int CheckNameReq::kGsnetidFieldNumber;
const int CheckNameReq::kSdkidFieldNumber;
const int CheckNameReq::kCsidFieldNumber;
const int CheckNameReq::kCdkFieldNumber;
const int CheckNameReq::kCompleteInfoFieldNumber;
#endif  // !_MSC_VER

CheckNameReq::CheckNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.CheckNameReq)
}

void CheckNameReq::InitAsDefaultInstance() {
}

CheckNameReq::CheckNameReq(const CheckNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.CheckNameReq)
}

void CheckNameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 100;
  gsid_ = 0;
  gcnetid_ = 0;
  gsnetid_ = 0;
  sdkid_ = 0;
  csid_ = 0;
  cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  completeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameReq::~CheckNameReq() {
  // @@protoc_insertion_point(destructor:CSToDB.CheckNameReq)
  SharedDtor();
}

void CheckNameReq::SharedDtor() {
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdk_;
  }
  if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete completeinfo_;
  }
  if (this != default_instance_) {
  }
}

void CheckNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameReq_descriptor_;
}

const CheckNameReq& CheckNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

CheckNameReq* CheckNameReq::default_instance_ = NULL;

CheckNameReq* CheckNameReq::New() const {
  return new CheckNameReq;
}

void CheckNameReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckNameReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gsid_, csid_);
    mgsid_ = 100;
    if (has_cdk()) {
      if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cdk_->clear();
      }
    }
    if (has_completeinfo()) {
      if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        completeinfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.CheckNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID mgsid = 1 [default = eCheckNickNameDBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 2;
      case 2: {
        if (tag == 16) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gcnetid;
        break;
      }

      // optional int32 gcnetid = 3;
      case 3: {
        if (tag == 24) {
         parse_gcnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnetid_)));
          set_has_gcnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gsnetid;
        break;
      }

      // optional int32 gsnetid = 4;
      case 4: {
        if (tag == 32) {
         parse_gsnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsnetid_)));
          set_has_gsnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sdkid;
        break;
      }

      // optional int32 sdkid = 5;
      case 5: {
        if (tag == 40) {
         parse_sdkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_csid;
        break;
      }

      // optional int32 csid = 6;
      case 6: {
        if (tag == 48) {
         parse_csid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cdk;
        break;
      }

      // optional string cdk = 7;
      case 7: {
        if (tag == 58) {
         parse_cdk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdk().data(), this->cdk().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdk");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_completeInfo;
        break;
      }

      // optional string completeInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_completeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->completeinfo().data(), this->completeinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "completeinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.CheckNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.CheckNameReq)
  return false;
#undef DO_
}

void CheckNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.CheckNameReq)
  // optional .CSToDB.MsgID mgsid = 1 [default = eCheckNickNameDBCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gsid(), output);
  }

  // optional int32 gcnetid = 3;
  if (has_gcnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gcnetid(), output);
  }

  // optional int32 gsnetid = 4;
  if (has_gsnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gsnetid(), output);
  }

  // optional int32 sdkid = 5;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sdkid(), output);
  }

  // optional int32 csid = 6;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->csid(), output);
  }

  // optional string cdk = 7;
  if (has_cdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdk().data(), this->cdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cdk(), output);
  }

  // optional string completeInfo = 8;
  if (has_completeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completeinfo().data(), this->completeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completeinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->completeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.CheckNameReq)
}

::google::protobuf::uint8* CheckNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.CheckNameReq)
  // optional .CSToDB.MsgID mgsid = 1 [default = eCheckNickNameDBCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 gsid = 2;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gsid(), target);
  }

  // optional int32 gcnetid = 3;
  if (has_gcnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gcnetid(), target);
  }

  // optional int32 gsnetid = 4;
  if (has_gsnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gsnetid(), target);
  }

  // optional int32 sdkid = 5;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sdkid(), target);
  }

  // optional int32 csid = 6;
  if (has_csid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->csid(), target);
  }

  // optional string cdk = 7;
  if (has_cdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdk().data(), this->cdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cdk(), target);
  }

  // optional string completeInfo = 8;
  if (has_completeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completeinfo().data(), this->completeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completeinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->completeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.CheckNameReq)
  return target;
}

int CheckNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID mgsid = 1 [default = eCheckNickNameDBCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnetid = 3;
    if (has_gcnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnetid());
    }

    // optional int32 gsnetid = 4;
    if (has_gsnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsnetid());
    }

    // optional int32 sdkid = 5;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdkid());
    }

    // optional int32 csid = 6;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

    // optional string cdk = 7;
    if (has_cdk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdk());
    }

    // optional string completeInfo = 8;
    if (has_completeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completeinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameReq::MergeFrom(const CheckNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnetid()) {
      set_gcnetid(from.gcnetid());
    }
    if (from.has_gsnetid()) {
      set_gsnetid(from.gsnetid());
    }
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
    if (from.has_cdk()) {
      set_cdk(from.cdk());
    }
    if (from.has_completeinfo()) {
      set_completeinfo(from.completeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameReq::CopyFrom(const CheckNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameReq::IsInitialized() const {

  return true;
}

void CheckNameReq::Swap(CheckNameReq* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(gsid_, other->gsid_);
    std::swap(gcnetid_, other->gcnetid_);
    std::swap(gsnetid_, other->gsnetid_);
    std::swap(sdkid_, other->sdkid_);
    std::swap(csid_, other->csid_);
    std::swap(cdk_, other->cdk_);
    std::swap(completeinfo_, other->completeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameReq_descriptor_;
  metadata.reflection = CheckNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserReq::kMsgidFieldNumber;
const int QueryUserReq::kLogininfoFieldNumber;
const int QueryUserReq::kGsidFieldNumber;
const int QueryUserReq::kGcnetidFieldNumber;
const int QueryUserReq::kCsidFieldNumber;
const int QueryUserReq::kObjidFieldNumber;
const int QueryUserReq::kUnameFieldNumber;
#endif  // !_MSC_VER

QueryUserReq::QueryUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToDB.QueryUserReq)
}

void QueryUserReq::InitAsDefaultInstance() {
}

QueryUserReq::QueryUserReq(const QueryUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToDB.QueryUserReq)
}

void QueryUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 101;
  logininfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gsid_ = 0;
  gcnetid_ = 0;
  csid_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserReq::~QueryUserReq() {
  // @@protoc_insertion_point(destructor:CSToDB.QueryUserReq)
  SharedDtor();
}

void QueryUserReq::SharedDtor() {
  if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logininfo_;
  }
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void QueryUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserReq_descriptor_;
}

const QueryUserReq& QueryUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToDB_2eproto();
  return *default_instance_;
}

QueryUserReq* QueryUserReq::default_instance_ = NULL;

QueryUserReq* QueryUserReq::New() const {
  return new QueryUserReq;
}

void QueryUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gsid_, objid_);
    msgid_ = 101;
    if (has_logininfo()) {
      if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logininfo_->clear();
      }
    }
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToDB.QueryUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToDB.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToDB::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToDB::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Logininfo;
        break;
      }

      // optional string Logininfo = 2;
      case 2: {
        if (tag == 18) {
         parse_Logininfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logininfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logininfo().data(), this->logininfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logininfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 3;
      case 3: {
        if (tag == 24) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gcnetid;
        break;
      }

      // optional int32 gcnetid = 4;
      case 4: {
        if (tag == 32) {
         parse_gcnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnetid_)));
          set_has_gcnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_csid;
        break;
      }

      // optional int32 csid = 5;
      case 5: {
        if (tag == 40) {
         parse_csid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_objid;
        break;
      }

      // optional int64 objid = 6;
      case 6: {
        if (tag == 48) {
         parse_objid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_uname;
        break;
      }

      // optional string uname = 7;
      case 7: {
        if (tag == 58) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToDB.QueryUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToDB.QueryUserReq)
  return false;
#undef DO_
}

void QueryUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToDB.QueryUserReq)
  // optional .CSToDB.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string Logininfo = 2;
  if (has_logininfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logininfo().data(), this->logininfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logininfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logininfo(), output);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gsid(), output);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gcnetid(), output);
  }

  // optional int32 csid = 5;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->csid(), output);
  }

  // optional int64 objid = 6;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->objid(), output);
  }

  // optional string uname = 7;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->uname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToDB.QueryUserReq)
}

::google::protobuf::uint8* QueryUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToDB.QueryUserReq)
  // optional .CSToDB.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string Logininfo = 2;
  if (has_logininfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logininfo().data(), this->logininfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logininfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logininfo(), target);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gsid(), target);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gcnetid(), target);
  }

  // optional int32 csid = 5;
  if (has_csid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->csid(), target);
  }

  // optional int64 objid = 6;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->objid(), target);
  }

  // optional string uname = 7;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToDB.QueryUserReq)
  return target;
}

int QueryUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToDB.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string Logininfo = 2;
    if (has_logininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logininfo());
    }

    // optional int32 gsid = 3;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnetid = 4;
    if (has_gcnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnetid());
    }

    // optional int32 csid = 5;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

    // optional int64 objid = 6;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional string uname = 7;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserReq::MergeFrom(const QueryUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_logininfo()) {
      set_logininfo(from.logininfo());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnetid()) {
      set_gcnetid(from.gcnetid());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserReq::CopyFrom(const QueryUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserReq::IsInitialized() const {

  return true;
}

void QueryUserReq::Swap(QueryUserReq* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(logininfo_, other->logininfo_);
    std::swap(gsid_, other->gsid_);
    std::swap(gcnetid_, other->gcnetid_);
    std::swap(csid_, other->csid_);
    std::swap(objid_, other->objid_);
    std::swap(uname_, other->uname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserReq_descriptor_;
  metadata.reflection = QueryUserReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSToDB

// @@protoc_insertion_point(global_scope)
