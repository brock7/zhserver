// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToSS.proto

#ifndef PROTOBUF_GSToSS_2eproto__INCLUDED
#define PROTOBUF_GSToSS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GSToSS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GSToSS_2eproto();
void protobuf_AssignDesc_GSToSS_2eproto();
void protobuf_ShutdownFile_GSToSS_2eproto();

class UserOffLine;
class AskPing;
class AskRegiste;
class ReportGCMsg;

enum MsgID {
  eMsgToSSFromGS_Begin = 16384,
  eMsgToSSFromGS_AskPing = 16385,
  eMsgToSSFromGS_AskRegiste = 16386,
  eMsgToSSFromGS_ReportGCMsg = 16387,
  eMsgToSSFromGS_UserOffLine = 16388,
  eMsgToSSFromGS_End = 17000
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgToSSFromGS_Begin;
const MsgID MsgID_MAX = eMsgToSSFromGS_End;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class UserOffLine : public ::google::protobuf::Message {
 public:
  UserOffLine();
  virtual ~UserOffLine();

  UserOffLine(const UserOffLine& from);

  inline UserOffLine& operator=(const UserOffLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserOffLine& default_instance();

  void Swap(UserOffLine* other);

  // implements Message ----------------------------------------------

  UserOffLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserOffLine& from);
  void MergeFrom(const UserOffLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GSToSS.MsgID mgsid = 1 [default = eMsgToSSFromGS_UserOffLine];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::GSToSS::MsgID mgsid() const;
  inline void set_mgsid(::GSToSS::MsgID value);

  // optional int32 usernetid = 2;
  inline bool has_usernetid() const;
  inline void clear_usernetid();
  static const int kUsernetidFieldNumber = 2;
  inline ::google::protobuf::int32 usernetid() const;
  inline void set_usernetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GSToSS.UserOffLine)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_usernetid();
  inline void clear_has_usernetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::int32 usernetid_;
  friend void  protobuf_AddDesc_GSToSS_2eproto();
  friend void protobuf_AssignDesc_GSToSS_2eproto();
  friend void protobuf_ShutdownFile_GSToSS_2eproto();

  void InitAsDefaultInstance();
  static UserOffLine* default_instance_;
};
// -------------------------------------------------------------------

class AskPing : public ::google::protobuf::Message {
 public:
  AskPing();
  virtual ~AskPing();

  AskPing(const AskPing& from);

  inline AskPing& operator=(const AskPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskPing& default_instance();

  void Swap(AskPing* other);

  // implements Message ----------------------------------------------

  AskPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskPing& from);
  void MergeFrom(const AskPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GSToSS.MsgID mgsid = 1 [default = eMsgToSSFromGS_AskPing];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::GSToSS::MsgID mgsid() const;
  inline void set_mgsid(::GSToSS::MsgID value);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GSToSS.AskPing)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  int mgsid_;
  friend void  protobuf_AddDesc_GSToSS_2eproto();
  friend void protobuf_AssignDesc_GSToSS_2eproto();
  friend void protobuf_ShutdownFile_GSToSS_2eproto();

  void InitAsDefaultInstance();
  static AskPing* default_instance_;
};
// -------------------------------------------------------------------

class AskRegiste : public ::google::protobuf::Message {
 public:
  AskRegiste();
  virtual ~AskRegiste();

  AskRegiste(const AskRegiste& from);

  inline AskRegiste& operator=(const AskRegiste& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRegiste& default_instance();

  void Swap(AskRegiste* other);

  // implements Message ----------------------------------------------

  AskRegiste* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRegiste& from);
  void MergeFrom(const AskRegiste& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GSToSS.MsgID msgid = 1 [default = eMsgToSSFromGS_AskRegiste];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::GSToSS::MsgID msgid() const;
  inline void set_msgid(::GSToSS::MsgID value);

  // optional int32 gsid = 2;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 2;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional string pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:GSToSS.AskRegiste)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 gsid_;
  ::std::string* pwd_;
  friend void  protobuf_AddDesc_GSToSS_2eproto();
  friend void protobuf_AssignDesc_GSToSS_2eproto();
  friend void protobuf_ShutdownFile_GSToSS_2eproto();

  void InitAsDefaultInstance();
  static AskRegiste* default_instance_;
};
// -------------------------------------------------------------------

class ReportGCMsg : public ::google::protobuf::Message {
 public:
  ReportGCMsg();
  virtual ~ReportGCMsg();

  ReportGCMsg(const ReportGCMsg& from);

  inline ReportGCMsg& operator=(const ReportGCMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportGCMsg& default_instance();

  void Swap(ReportGCMsg* other);

  // implements Message ----------------------------------------------

  ReportGCMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportGCMsg& from);
  void MergeFrom(const ReportGCMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GSToSS.MsgID mgsid = 1 [default = eMsgToSSFromGS_ReportGCMsg];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::GSToSS::MsgID mgsid() const;
  inline void set_mgsid(::GSToSS::MsgID value);

  // optional int32 nsid = 2;
  inline bool has_nsid() const;
  inline void clear_nsid();
  static const int kNsidFieldNumber = 2;
  inline ::google::protobuf::int32 nsid() const;
  inline void set_nsid(::google::protobuf::int32 value);

  // optional string othermsg = 3;
  inline bool has_othermsg() const;
  inline void clear_othermsg();
  static const int kOthermsgFieldNumber = 3;
  inline const ::std::string& othermsg() const;
  inline void set_othermsg(const ::std::string& value);
  inline void set_othermsg(const char* value);
  inline void set_othermsg(const char* value, size_t size);
  inline ::std::string* mutable_othermsg();
  inline ::std::string* release_othermsg();
  inline void set_allocated_othermsg(::std::string* othermsg);

  // optional int32 othermsgid = 4;
  inline bool has_othermsgid() const;
  inline void clear_othermsgid();
  static const int kOthermsgidFieldNumber = 4;
  inline ::google::protobuf::int32 othermsgid() const;
  inline void set_othermsgid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GSToSS.ReportGCMsg)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_nsid();
  inline void clear_has_nsid();
  inline void set_has_othermsg();
  inline void clear_has_othermsg();
  inline void set_has_othermsgid();
  inline void clear_has_othermsgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::int32 nsid_;
  ::std::string* othermsg_;
  ::google::protobuf::int32 othermsgid_;
  friend void  protobuf_AddDesc_GSToSS_2eproto();
  friend void protobuf_AssignDesc_GSToSS_2eproto();
  friend void protobuf_ShutdownFile_GSToSS_2eproto();

  void InitAsDefaultInstance();
  static ReportGCMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// UserOffLine

// optional .GSToSS.MsgID mgsid = 1 [default = eMsgToSSFromGS_UserOffLine];
inline bool UserOffLine::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserOffLine::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserOffLine::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserOffLine::clear_mgsid() {
  mgsid_ = 16388;
  clear_has_mgsid();
}
inline ::GSToSS::MsgID UserOffLine::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToSS.UserOffLine.mgsid)
  return static_cast< ::GSToSS::MsgID >(mgsid_);
}
inline void UserOffLine::set_mgsid(::GSToSS::MsgID value) {
  assert(::GSToSS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.UserOffLine.mgsid)
}

// optional int32 usernetid = 2;
inline bool UserOffLine::has_usernetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserOffLine::set_has_usernetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserOffLine::clear_has_usernetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserOffLine::clear_usernetid() {
  usernetid_ = 0;
  clear_has_usernetid();
}
inline ::google::protobuf::int32 UserOffLine::usernetid() const {
  // @@protoc_insertion_point(field_get:GSToSS.UserOffLine.usernetid)
  return usernetid_;
}
inline void UserOffLine::set_usernetid(::google::protobuf::int32 value) {
  set_has_usernetid();
  usernetid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.UserOffLine.usernetid)
}

// -------------------------------------------------------------------

// AskPing

// optional .GSToSS.MsgID mgsid = 1 [default = eMsgToSSFromGS_AskPing];
inline bool AskPing::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskPing::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskPing::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskPing::clear_mgsid() {
  mgsid_ = 16385;
  clear_has_mgsid();
}
inline ::GSToSS::MsgID AskPing::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToSS.AskPing.mgsid)
  return static_cast< ::GSToSS::MsgID >(mgsid_);
}
inline void AskPing::set_mgsid(::GSToSS::MsgID value) {
  assert(::GSToSS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.AskPing.mgsid)
}

// optional int64 time = 2;
inline bool AskPing::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskPing::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskPing::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskPing::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 AskPing::time() const {
  // @@protoc_insertion_point(field_get:GSToSS.AskPing.time)
  return time_;
}
inline void AskPing::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.AskPing.time)
}

// -------------------------------------------------------------------

// AskRegiste

// optional .GSToSS.MsgID msgid = 1 [default = eMsgToSSFromGS_AskRegiste];
inline bool AskRegiste::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRegiste::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRegiste::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRegiste::clear_msgid() {
  msgid_ = 16386;
  clear_has_msgid();
}
inline ::GSToSS::MsgID AskRegiste::msgid() const {
  // @@protoc_insertion_point(field_get:GSToSS.AskRegiste.msgid)
  return static_cast< ::GSToSS::MsgID >(msgid_);
}
inline void AskRegiste::set_msgid(::GSToSS::MsgID value) {
  assert(::GSToSS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.AskRegiste.msgid)
}

// optional int32 gsid = 2;
inline bool AskRegiste::has_gsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskRegiste::set_has_gsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskRegiste::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskRegiste::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 AskRegiste::gsid() const {
  // @@protoc_insertion_point(field_get:GSToSS.AskRegiste.gsid)
  return gsid_;
}
inline void AskRegiste::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.AskRegiste.gsid)
}

// optional string pwd = 3;
inline bool AskRegiste::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskRegiste::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskRegiste::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskRegiste::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& AskRegiste::pwd() const {
  // @@protoc_insertion_point(field_get:GSToSS.AskRegiste.pwd)
  return *pwd_;
}
inline void AskRegiste::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:GSToSS.AskRegiste.pwd)
}
inline void AskRegiste::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:GSToSS.AskRegiste.pwd)
}
inline void AskRegiste::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GSToSS.AskRegiste.pwd)
}
inline ::std::string* AskRegiste::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GSToSS.AskRegiste.pwd)
  return pwd_;
}
inline ::std::string* AskRegiste::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskRegiste::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GSToSS.AskRegiste.pwd)
}

// -------------------------------------------------------------------

// ReportGCMsg

// optional .GSToSS.MsgID mgsid = 1 [default = eMsgToSSFromGS_ReportGCMsg];
inline bool ReportGCMsg::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportGCMsg::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportGCMsg::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportGCMsg::clear_mgsid() {
  mgsid_ = 16387;
  clear_has_mgsid();
}
inline ::GSToSS::MsgID ReportGCMsg::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToSS.ReportGCMsg.mgsid)
  return static_cast< ::GSToSS::MsgID >(mgsid_);
}
inline void ReportGCMsg::set_mgsid(::GSToSS::MsgID value) {
  assert(::GSToSS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.ReportGCMsg.mgsid)
}

// optional int32 nsid = 2;
inline bool ReportGCMsg::has_nsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportGCMsg::set_has_nsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportGCMsg::clear_has_nsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportGCMsg::clear_nsid() {
  nsid_ = 0;
  clear_has_nsid();
}
inline ::google::protobuf::int32 ReportGCMsg::nsid() const {
  // @@protoc_insertion_point(field_get:GSToSS.ReportGCMsg.nsid)
  return nsid_;
}
inline void ReportGCMsg::set_nsid(::google::protobuf::int32 value) {
  set_has_nsid();
  nsid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.ReportGCMsg.nsid)
}

// optional string othermsg = 3;
inline bool ReportGCMsg::has_othermsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportGCMsg::set_has_othermsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportGCMsg::clear_has_othermsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportGCMsg::clear_othermsg() {
  if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othermsg_->clear();
  }
  clear_has_othermsg();
}
inline const ::std::string& ReportGCMsg::othermsg() const {
  // @@protoc_insertion_point(field_get:GSToSS.ReportGCMsg.othermsg)
  return *othermsg_;
}
inline void ReportGCMsg::set_othermsg(const ::std::string& value) {
  set_has_othermsg();
  if (othermsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othermsg_ = new ::std::string;
  }
  othermsg_->assign(value);
  // @@protoc_insertion_point(field_set:GSToSS.ReportGCMsg.othermsg)
}
inline void ReportGCMsg::set_othermsg(const char* value) {
  set_has_othermsg();
  if (othermsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othermsg_ = new ::std::string;
  }
  othermsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:GSToSS.ReportGCMsg.othermsg)
}
inline void ReportGCMsg::set_othermsg(const char* value, size_t size) {
  set_has_othermsg();
  if (othermsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othermsg_ = new ::std::string;
  }
  othermsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GSToSS.ReportGCMsg.othermsg)
}
inline ::std::string* ReportGCMsg::mutable_othermsg() {
  set_has_othermsg();
  if (othermsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    othermsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GSToSS.ReportGCMsg.othermsg)
  return othermsg_;
}
inline ::std::string* ReportGCMsg::release_othermsg() {
  clear_has_othermsg();
  if (othermsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = othermsg_;
    othermsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportGCMsg::set_allocated_othermsg(::std::string* othermsg) {
  if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othermsg_;
  }
  if (othermsg) {
    set_has_othermsg();
    othermsg_ = othermsg;
  } else {
    clear_has_othermsg();
    othermsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GSToSS.ReportGCMsg.othermsg)
}

// optional int32 othermsgid = 4;
inline bool ReportGCMsg::has_othermsgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportGCMsg::set_has_othermsgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportGCMsg::clear_has_othermsgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportGCMsg::clear_othermsgid() {
  othermsgid_ = 0;
  clear_has_othermsgid();
}
inline ::google::protobuf::int32 ReportGCMsg::othermsgid() const {
  // @@protoc_insertion_point(field_get:GSToSS.ReportGCMsg.othermsgid)
  return othermsgid_;
}
inline void ReportGCMsg::set_othermsgid(::google::protobuf::int32 value) {
  set_has_othermsgid();
  othermsgid_ = value;
  // @@protoc_insertion_point(field_set:GSToSS.ReportGCMsg.othermsgid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GSToSS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GSToSS::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GSToSS::MsgID>() {
  return ::GSToSS::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GSToSS_2eproto__INCLUDED
