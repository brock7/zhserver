// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GCToCS.proto

#ifndef PROTOBUF_GCToCS_2eproto__INCLUDED
#define PROTOBUF_GCToCS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GCToCS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GCToCS_2eproto();
void protobuf_AssignDesc_GCToCS_2eproto();
void protobuf_ShutdownFile_GCToCS_2eproto();

class AskOneTaskRewards;
class CDKReq;
class CurtUIEvent;
class CurtUIEvent_UIEvent;
class AskRecoinRune;
class BlackListOnlineInfo;
class AddCSGMCmd;
class NotifyOneMatchNeedOneRet;
class AskChangeheaderId;
class ChangeNickName;
class AskCreateMatchTeam;
class AskAddMatchTeam;
class AskRemoveMatchTeam;
class AskInviteJoinMatchTeam;
class AskStartMatch;
class AskStopMatch;
class RequestMatchTeamList;
class AskGoodscfg;
class AskCSCreateGuideBattle;
class AskQuickBattle;
class AskStopQuickBattle;
class AskCreateRoom;
class AskAddRoom;
class AskLeaveRoom;
class AskChangeRoomSeat;
class AskReadyRoom;
class AskCancelRoom;
class AskStartRoom;
class AskReEnterRoom;
class AskChatInRoom;
class AskGetMailGift;
class AskMailInfo;
class AskBuyGoods;
class UserAskGetCLReward;
class Notice;
class AskCurtNotice;
class CompleteInfo;
class AskAddToSNSList;
class AskCanInviteFriends;
class AskAddToSNSListByID;
class AskRemoveFromSNSList;
class AskSendMsgToUser;
class AskInviteFriendsToBattle;
class AskQueryUserByNickName;
class GCReplyAddFriendRequst;
class GuideCSStepComp;
class GCReplyInviteToBattle;
class Login;
class UserGameInfo;
class BuyRunes;
class EuipRunes;
class UnEuipRunes;
class ComposeRunes;
class ReconnectToGame;
class ComGuideStepID;
class AskRoomList;

enum AskCSCreateGuideBattle_guidetype {
  AskCSCreateGuideBattle_guidetype_first = 1,
  AskCSCreateGuideBattle_guidetype_second = 2,
  AskCSCreateGuideBattle_guidetype_other = 3
};
bool AskCSCreateGuideBattle_guidetype_IsValid(int value);
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle_guidetype_guidetype_MIN = AskCSCreateGuideBattle_guidetype_first;
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle_guidetype_guidetype_MAX = AskCSCreateGuideBattle_guidetype_other;
const int AskCSCreateGuideBattle_guidetype_guidetype_ARRAYSIZE = AskCSCreateGuideBattle_guidetype_guidetype_MAX + 1;

const ::google::protobuf::EnumDescriptor* AskCSCreateGuideBattle_guidetype_descriptor();
inline const ::std::string& AskCSCreateGuideBattle_guidetype_Name(AskCSCreateGuideBattle_guidetype value) {
  return ::google::protobuf::internal::NameOfEnum(
    AskCSCreateGuideBattle_guidetype_descriptor(), value);
}
inline bool AskCSCreateGuideBattle_guidetype_Parse(
    const ::std::string& name, AskCSCreateGuideBattle_guidetype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AskCSCreateGuideBattle_guidetype>(
    AskCSCreateGuideBattle_guidetype_descriptor(), name, value);
}
enum MsgNum {
  eMsgToGSToCSFromGC_Begin = 8191,
  eMsgToGSToCSFromGC_AskLogin = 8193,
  eMsgToGSToCSFromGC_AskReconnectGame = 8194,
  eMsgToGSToCSFromGC_AskComleteUserInfo = 8195,
  eMsgToGSToCSFromGC_AskUserGameInfo = 8196,
  eMsgToGSToCSFromGC_UserAskGetCLReward = 8197,
  eMsgToGSToCSFromGC_Notice = 8200,
  eMsgToGSToCSFromGC_AskCurtNotice = 8201,
  eMsgToGSToCSFromGC_AskAddToSNSList = 8210,
  eMsgToGSToCSFromGC_AskRemoveFromSNSList = 8211,
  eMsgToGSToCSFromGC_AskSendMsgToUser = 8212,
  eMsgToGSToCSFromGC_AskInviteFriendsToBattle = 8213,
  eMsgToGSToCSFromGC_AskQueryUserByNickName = 8214,
  eMsgToGSToCSFromGC_GCReplyAddFriendRequst = 8215,
  eMsgToGSToCSFromGC_GCReplyInviteToBattle = 8216,
  eMsgToGSToCSFromGC_AskAddToSNSListByID = 8217,
  eMsgToGSToCSFromGC_AskCanInviteFriends = 8218,
  eMsgToGSToCSFromGC_AskBlackListOnlineInfo = 8502,
  eMsgToGSToCSFromGC_BUYRunes = 8220,
  eMsgToGSToCSFromGC_EuipRunes = 8221,
  eMsgToGSToCSFromGC_UnloadRunes = 8222,
  eMsgToGSToCSFromGC_ComposeRunes = 8223,
  eMsgToGSToCSFromGC_AskBuyGoods = 8224,
  eMsgToGSToCSFromGC_AskRecoinRune = 8503,
  eMsgToGSToCSFromGC_AskMailInfo = 8230,
  eMsgToGSToCSFromGC_AskGetMailGift = 8231,
  eMsgToGSToCSFromGC_AskGuideBattle = 8240,
  eMsgToGSToCSFromGC_AskGuideStepId = 8241,
  eMsgToGSToCSFromGC_CompCSGuideStepId = 8242,
  eMsgToGSToCSFromGC_AskQuickBattle = 8250,
  eMsgToGSToCSFromGC_AskStopQuickBattle = 8251,
  eMsgToGSToCSFromGC_AskCreateRoom = 8260,
  eMsgToGSToCSFromGC_AskAddRoom = 8261,
  eMsgToGSToCSFromGC_AskLeaveRoom = 8262,
  eMsgToGSToCSFromGC_AskChangeRoomSeat = 8263,
  eMsgToGSToCSFromGC_AskReadyRoom = 8264,
  eMsgToGSToCSFromGC_AskCancelRoom = 8265,
  eMsgToGSToCSFromGC_AskStartRoom = 8266,
  eMsgToGSToCSFromGC_AskChatInRoom = 8267,
  eMsgToGSToCSFromGC_AskReEnterRoom = 8268,
  eMsgToGSToCSFromGC_AskRoomList = 8269,
  eMsgToGSToCSFromGC_AskGoodscfg = 8270,
  eMsgToGSToCSFromGC_AskCreateMatchTeam = 8280,
  eMsgToGSToCSFromGC_AskAddMatchTeam = 8281,
  eMsgToGSToCSFromGC_AskRemoveMatchTeam = 8282,
  eMsgToGSToCSFromGC_AskInviteJoinMatchTeam = 8283,
  eMsgToGSToCSFromGC_AskStartMatch = 8284,
  eMsgToGSToCSFromGC_AskStopMatch = 8285,
  eMsgToGSToCSFromGC_AskChangeNickName = 8286,
  eMsgToGSToCSFromGC_RequestMatchTeamList = 8287,
  eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet = 8288,
  eMsgToGSToCSFromGC_AskOneTaskRewards = 8290,
  eMsgToGSToCSFromGC_AskChangeheaderId = 8500,
  eMsgToGSToCSFromGC_CDKReq = 8505,
  eMsgToGSToCSFromGC_GmCmd = 8501,
  eMsgToGSToCSFromGC_UIEvent = 8550,
  eMsgToGSToCSFromGC_End = 9000
};
bool MsgNum_IsValid(int value);
const MsgNum MsgNum_MIN = eMsgToGSToCSFromGC_Begin;
const MsgNum MsgNum_MAX = eMsgToGSToCSFromGC_End;
const int MsgNum_ARRAYSIZE = MsgNum_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgNum_descriptor();
inline const ::std::string& MsgNum_Name(MsgNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgNum_descriptor(), value);
}
inline bool MsgNum_Parse(
    const ::std::string& name, MsgNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgNum>(
    MsgNum_descriptor(), name, value);
}
enum notice_type {
  type_none = 0,
  type_1 = 1,
  type_2 = 2,
  type_3 = 3
};
bool notice_type_IsValid(int value);
const notice_type notice_type_MIN = type_none;
const notice_type notice_type_MAX = type_3;
const int notice_type_ARRAYSIZE = notice_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* notice_type_descriptor();
inline const ::std::string& notice_type_Name(notice_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    notice_type_descriptor(), value);
}
inline bool notice_type_Parse(
    const ::std::string& name, notice_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<notice_type>(
    notice_type_descriptor(), name, value);
}
// ===================================================================

class AskOneTaskRewards : public ::google::protobuf::Message {
 public:
  AskOneTaskRewards();
  virtual ~AskOneTaskRewards();

  AskOneTaskRewards(const AskOneTaskRewards& from);

  inline AskOneTaskRewards& operator=(const AskOneTaskRewards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskOneTaskRewards& default_instance();

  void Swap(AskOneTaskRewards* other);

  // implements Message ----------------------------------------------

  AskOneTaskRewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskOneTaskRewards& from);
  void MergeFrom(const AskOneTaskRewards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskOneTaskRewards];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint32 task_guid = 2;
  inline bool has_task_guid() const;
  inline void clear_task_guid();
  static const int kTaskGuidFieldNumber = 2;
  inline ::google::protobuf::uint32 task_guid() const;
  inline void set_task_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskOneTaskRewards)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_task_guid();
  inline void clear_has_task_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::uint32 task_guid_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskOneTaskRewards* default_instance_;
};
// -------------------------------------------------------------------

class CDKReq : public ::google::protobuf::Message {
 public:
  CDKReq();
  virtual ~CDKReq();

  CDKReq(const CDKReq& from);

  inline CDKReq& operator=(const CDKReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDKReq& default_instance();

  void Swap(CDKReq* other);

  // implements Message ----------------------------------------------

  CDKReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDKReq& from);
  void MergeFrom(const CDKReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CDKReq];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string cdkstr = 2;
  inline bool has_cdkstr() const;
  inline void clear_cdkstr();
  static const int kCdkstrFieldNumber = 2;
  inline const ::std::string& cdkstr() const;
  inline void set_cdkstr(const ::std::string& value);
  inline void set_cdkstr(const char* value);
  inline void set_cdkstr(const char* value, size_t size);
  inline ::std::string* mutable_cdkstr();
  inline ::std::string* release_cdkstr();
  inline void set_allocated_cdkstr(::std::string* cdkstr);

  // @@protoc_insertion_point(class_scope:GCToCS.CDKReq)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_cdkstr();
  inline void clear_has_cdkstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cdkstr_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static CDKReq* default_instance_;
};
// -------------------------------------------------------------------

class CurtUIEvent_UIEvent : public ::google::protobuf::Message {
 public:
  CurtUIEvent_UIEvent();
  virtual ~CurtUIEvent_UIEvent();

  CurtUIEvent_UIEvent(const CurtUIEvent_UIEvent& from);

  inline CurtUIEvent_UIEvent& operator=(const CurtUIEvent_UIEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurtUIEvent_UIEvent& default_instance();

  void Swap(CurtUIEvent_UIEvent* other);

  // implements Message ----------------------------------------------

  CurtUIEvent_UIEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurtUIEvent_UIEvent& from);
  void MergeFrom(const CurtUIEvent_UIEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiidx = 2;
  inline bool has_uiidx() const;
  inline void clear_uiidx();
  static const int kUiidxFieldNumber = 2;
  inline ::google::protobuf::uint32 uiidx() const;
  inline void set_uiidx(::google::protobuf::uint32 value);

  // optional uint32 eventNum = 3;
  inline bool has_eventnum() const;
  inline void clear_eventnum();
  static const int kEventNumFieldNumber = 3;
  inline ::google::protobuf::uint32 eventnum() const;
  inline void set_eventnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.CurtUIEvent.UIEvent)
 private:
  inline void set_has_uiidx();
  inline void clear_has_uiidx();
  inline void set_has_eventnum();
  inline void clear_has_eventnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uiidx_;
  ::google::protobuf::uint32 eventnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static CurtUIEvent_UIEvent* default_instance_;
};
// -------------------------------------------------------------------

class CurtUIEvent : public ::google::protobuf::Message {
 public:
  CurtUIEvent();
  virtual ~CurtUIEvent();

  CurtUIEvent(const CurtUIEvent& from);

  inline CurtUIEvent& operator=(const CurtUIEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurtUIEvent& default_instance();

  void Swap(CurtUIEvent* other);

  // implements Message ----------------------------------------------

  CurtUIEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurtUIEvent& from);
  void MergeFrom(const CurtUIEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CurtUIEvent_UIEvent UIEvent;

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UIEvent];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // repeated .GCToCS.CurtUIEvent.UIEvent eventlist = 2;
  inline int eventlist_size() const;
  inline void clear_eventlist();
  static const int kEventlistFieldNumber = 2;
  inline const ::GCToCS::CurtUIEvent_UIEvent& eventlist(int index) const;
  inline ::GCToCS::CurtUIEvent_UIEvent* mutable_eventlist(int index);
  inline ::GCToCS::CurtUIEvent_UIEvent* add_eventlist();
  inline const ::google::protobuf::RepeatedPtrField< ::GCToCS::CurtUIEvent_UIEvent >&
      eventlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::GCToCS::CurtUIEvent_UIEvent >*
      mutable_eventlist();

  // @@protoc_insertion_point(class_scope:GCToCS.CurtUIEvent)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GCToCS::CurtUIEvent_UIEvent > eventlist_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static CurtUIEvent* default_instance_;
};
// -------------------------------------------------------------------

class AskRecoinRune : public ::google::protobuf::Message {
 public:
  AskRecoinRune();
  virtual ~AskRecoinRune();

  AskRecoinRune(const AskRecoinRune& from);

  inline AskRecoinRune& operator=(const AskRecoinRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRecoinRune& default_instance();

  void Swap(AskRecoinRune* other);

  // implements Message ----------------------------------------------

  AskRecoinRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRecoinRune& from);
  void MergeFrom(const AskRecoinRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRecoinRune];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint32 rune_id = 2;
  inline bool has_rune_id() const;
  inline void clear_rune_id();
  static const int kRuneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 rune_id() const;
  inline void set_rune_id(::google::protobuf::uint32 value);

  // optional uint32 pay_type = 3;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 pay_type() const;
  inline void set_pay_type(::google::protobuf::uint32 value);

  // optional uint32 cost = 4;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 4;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskRecoinRune)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_rune_id();
  inline void clear_has_rune_id();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_cost();
  inline void clear_has_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::uint32 rune_id_;
  ::google::protobuf::uint32 pay_type_;
  ::google::protobuf::uint32 cost_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskRecoinRune* default_instance_;
};
// -------------------------------------------------------------------

class BlackListOnlineInfo : public ::google::protobuf::Message {
 public:
  BlackListOnlineInfo();
  virtual ~BlackListOnlineInfo();

  BlackListOnlineInfo(const BlackListOnlineInfo& from);

  inline BlackListOnlineInfo& operator=(const BlackListOnlineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlackListOnlineInfo& default_instance();

  void Swap(BlackListOnlineInfo* other);

  // implements Message ----------------------------------------------

  BlackListOnlineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlackListOnlineInfo& from);
  void MergeFrom(const BlackListOnlineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBlackListOnlineInfo];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.BlackListOnlineInfo)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static BlackListOnlineInfo* default_instance_;
};
// -------------------------------------------------------------------

class AddCSGMCmd : public ::google::protobuf::Message {
 public:
  AddCSGMCmd();
  virtual ~AddCSGMCmd();

  AddCSGMCmd(const AddCSGMCmd& from);

  inline AddCSGMCmd& operator=(const AddCSGMCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddCSGMCmd& default_instance();

  void Swap(AddCSGMCmd* other);

  // implements Message ----------------------------------------------

  AddCSGMCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddCSGMCmd& from);
  void MergeFrom(const AddCSGMCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GmCmd];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string gmcmd = 2;
  inline bool has_gmcmd() const;
  inline void clear_gmcmd();
  static const int kGmcmdFieldNumber = 2;
  inline const ::std::string& gmcmd() const;
  inline void set_gmcmd(const ::std::string& value);
  inline void set_gmcmd(const char* value);
  inline void set_gmcmd(const char* value, size_t size);
  inline ::std::string* mutable_gmcmd();
  inline ::std::string* release_gmcmd();
  inline void set_allocated_gmcmd(::std::string* gmcmd);

  // @@protoc_insertion_point(class_scope:GCToCS.AddCSGMCmd)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_gmcmd();
  inline void clear_has_gmcmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gmcmd_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AddCSGMCmd* default_instance_;
};
// -------------------------------------------------------------------

class NotifyOneMatchNeedOneRet : public ::google::protobuf::Message {
 public:
  NotifyOneMatchNeedOneRet();
  virtual ~NotifyOneMatchNeedOneRet();

  NotifyOneMatchNeedOneRet(const NotifyOneMatchNeedOneRet& from);

  inline NotifyOneMatchNeedOneRet& operator=(const NotifyOneMatchNeedOneRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyOneMatchNeedOneRet& default_instance();

  void Swap(NotifyOneMatchNeedOneRet* other);

  // implements Message ----------------------------------------------

  NotifyOneMatchNeedOneRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyOneMatchNeedOneRet& from);
  void MergeFrom(const NotifyOneMatchNeedOneRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 fightid = 3;
  inline bool has_fightid() const;
  inline void clear_fightid();
  static const int kFightidFieldNumber = 3;
  inline ::google::protobuf::uint32 fightid() const;
  inline void set_fightid(::google::protobuf::uint32 value);

  // optional bool isAccept = 4;
  inline bool has_isaccept() const;
  inline void clear_isaccept();
  static const int kIsAcceptFieldNumber = 4;
  inline bool isaccept() const;
  inline void set_isaccept(bool value);

  // @@protoc_insertion_point(class_scope:GCToCS.NotifyOneMatchNeedOneRet)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_fightid();
  inline void clear_has_fightid();
  inline void set_has_isaccept();
  inline void clear_has_isaccept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 fightid_;
  bool isaccept_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static NotifyOneMatchNeedOneRet* default_instance_;
};
// -------------------------------------------------------------------

class AskChangeheaderId : public ::google::protobuf::Message {
 public:
  AskChangeheaderId();
  virtual ~AskChangeheaderId();

  AskChangeheaderId(const AskChangeheaderId& from);

  inline AskChangeheaderId& operator=(const AskChangeheaderId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskChangeheaderId& default_instance();

  void Swap(AskChangeheaderId* other);

  // implements Message ----------------------------------------------

  AskChangeheaderId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskChangeheaderId& from);
  void MergeFrom(const AskChangeheaderId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeheaderId];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint32 newheaderid = 2;
  inline bool has_newheaderid() const;
  inline void clear_newheaderid();
  static const int kNewheaderidFieldNumber = 2;
  inline ::google::protobuf::uint32 newheaderid() const;
  inline void set_newheaderid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskChangeheaderId)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_newheaderid();
  inline void clear_has_newheaderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::uint32 newheaderid_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskChangeheaderId* default_instance_;
};
// -------------------------------------------------------------------

class ChangeNickName : public ::google::protobuf::Message {
 public:
  ChangeNickName();
  virtual ~ChangeNickName();

  ChangeNickName(const ChangeNickName& from);

  inline ChangeNickName& operator=(const ChangeNickName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeNickName& default_instance();

  void Swap(ChangeNickName* other);

  // implements Message ----------------------------------------------

  ChangeNickName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeNickName& from);
  void MergeFrom(const ChangeNickName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeNickName];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string newnickname = 2;
  inline bool has_newnickname() const;
  inline void clear_newnickname();
  static const int kNewnicknameFieldNumber = 2;
  inline const ::std::string& newnickname() const;
  inline void set_newnickname(const ::std::string& value);
  inline void set_newnickname(const char* value);
  inline void set_newnickname(const char* value, size_t size);
  inline ::std::string* mutable_newnickname();
  inline ::std::string* release_newnickname();
  inline void set_allocated_newnickname(::std::string* newnickname);

  // @@protoc_insertion_point(class_scope:GCToCS.ChangeNickName)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_newnickname();
  inline void clear_has_newnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* newnickname_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static ChangeNickName* default_instance_;
};
// -------------------------------------------------------------------

class AskCreateMatchTeam : public ::google::protobuf::Message {
 public:
  AskCreateMatchTeam();
  virtual ~AskCreateMatchTeam();

  AskCreateMatchTeam(const AskCreateMatchTeam& from);

  inline AskCreateMatchTeam& operator=(const AskCreateMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskCreateMatchTeam& default_instance();

  void Swap(AskCreateMatchTeam* other);

  // implements Message ----------------------------------------------

  AskCreateMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskCreateMatchTeam& from);
  void MergeFrom(const AskCreateMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateMatchTeam];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint32 matchtype = 2;
  inline bool has_matchtype() const;
  inline void clear_matchtype();
  static const int kMatchtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 matchtype() const;
  inline void set_matchtype(::google::protobuf::uint32 value);

  // optional uint32 mapid = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskCreateMatchTeam)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_matchtype();
  inline void clear_has_matchtype();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::uint32 matchtype_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskCreateMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class AskAddMatchTeam : public ::google::protobuf::Message {
 public:
  AskAddMatchTeam();
  virtual ~AskAddMatchTeam();

  AskAddMatchTeam(const AskAddMatchTeam& from);

  inline AskAddMatchTeam& operator=(const AskAddMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskAddMatchTeam& default_instance();

  void Swap(AskAddMatchTeam* other);

  // implements Message ----------------------------------------------

  AskAddMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskAddMatchTeam& from);
  void MergeFrom(const AskAddMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddMatchTeam];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string friendsNickName = 2;
  inline bool has_friendsnickname() const;
  inline void clear_friendsnickname();
  static const int kFriendsNickNameFieldNumber = 2;
  inline const ::std::string& friendsnickname() const;
  inline void set_friendsnickname(const ::std::string& value);
  inline void set_friendsnickname(const char* value);
  inline void set_friendsnickname(const char* value, size_t size);
  inline ::std::string* mutable_friendsnickname();
  inline ::std::string* release_friendsnickname();
  inline void set_allocated_friendsnickname(::std::string* friendsnickname);

  // @@protoc_insertion_point(class_scope:GCToCS.AskAddMatchTeam)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_friendsnickname();
  inline void clear_has_friendsnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* friendsnickname_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskAddMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class AskRemoveMatchTeam : public ::google::protobuf::Message {
 public:
  AskRemoveMatchTeam();
  virtual ~AskRemoveMatchTeam();

  AskRemoveMatchTeam(const AskRemoveMatchTeam& from);

  inline AskRemoveMatchTeam& operator=(const AskRemoveMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRemoveMatchTeam& default_instance();

  void Swap(AskRemoveMatchTeam* other);

  // implements Message ----------------------------------------------

  AskRemoveMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRemoveMatchTeam& from);
  void MergeFrom(const AskRemoveMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveMatchTeam];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskRemoveMatchTeam)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskRemoveMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class AskInviteJoinMatchTeam : public ::google::protobuf::Message {
 public:
  AskInviteJoinMatchTeam();
  virtual ~AskInviteJoinMatchTeam();

  AskInviteJoinMatchTeam(const AskInviteJoinMatchTeam& from);

  inline AskInviteJoinMatchTeam& operator=(const AskInviteJoinMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskInviteJoinMatchTeam& default_instance();

  void Swap(AskInviteJoinMatchTeam* other);

  // implements Message ----------------------------------------------

  AskInviteJoinMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskInviteJoinMatchTeam& from);
  void MergeFrom(const AskInviteJoinMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteJoinMatchTeam];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string friendsNickName = 2;
  inline bool has_friendsnickname() const;
  inline void clear_friendsnickname();
  static const int kFriendsNickNameFieldNumber = 2;
  inline const ::std::string& friendsnickname() const;
  inline void set_friendsnickname(const ::std::string& value);
  inline void set_friendsnickname(const char* value);
  inline void set_friendsnickname(const char* value, size_t size);
  inline ::std::string* mutable_friendsnickname();
  inline ::std::string* release_friendsnickname();
  inline void set_allocated_friendsnickname(::std::string* friendsnickname);

  // @@protoc_insertion_point(class_scope:GCToCS.AskInviteJoinMatchTeam)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_friendsnickname();
  inline void clear_has_friendsnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* friendsnickname_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskInviteJoinMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class AskStartMatch : public ::google::protobuf::Message {
 public:
  AskStartMatch();
  virtual ~AskStartMatch();

  AskStartMatch(const AskStartMatch& from);

  inline AskStartMatch& operator=(const AskStartMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskStartMatch& default_instance();

  void Swap(AskStartMatch* other);

  // implements Message ----------------------------------------------

  AskStartMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskStartMatch& from);
  void MergeFrom(const AskStartMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartMatch];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskStartMatch)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskStartMatch* default_instance_;
};
// -------------------------------------------------------------------

class AskStopMatch : public ::google::protobuf::Message {
 public:
  AskStopMatch();
  virtual ~AskStopMatch();

  AskStopMatch(const AskStopMatch& from);

  inline AskStopMatch& operator=(const AskStopMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskStopMatch& default_instance();

  void Swap(AskStopMatch* other);

  // implements Message ----------------------------------------------

  AskStopMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskStopMatch& from);
  void MergeFrom(const AskStopMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopMatch];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskStopMatch)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskStopMatch* default_instance_;
};
// -------------------------------------------------------------------

class RequestMatchTeamList : public ::google::protobuf::Message {
 public:
  RequestMatchTeamList();
  virtual ~RequestMatchTeamList();

  RequestMatchTeamList(const RequestMatchTeamList& from);

  inline RequestMatchTeamList& operator=(const RequestMatchTeamList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestMatchTeamList& default_instance();

  void Swap(RequestMatchTeamList* other);

  // implements Message ----------------------------------------------

  RequestMatchTeamList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestMatchTeamList& from);
  void MergeFrom(const RequestMatchTeamList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_RequestMatchTeamList];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.RequestMatchTeamList)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static RequestMatchTeamList* default_instance_;
};
// -------------------------------------------------------------------

class AskGoodscfg : public ::google::protobuf::Message {
 public:
  AskGoodscfg();
  virtual ~AskGoodscfg();

  AskGoodscfg(const AskGoodscfg& from);

  inline AskGoodscfg& operator=(const AskGoodscfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskGoodscfg& default_instance();

  void Swap(AskGoodscfg* other);

  // implements Message ----------------------------------------------

  AskGoodscfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskGoodscfg& from);
  void MergeFrom(const AskGoodscfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGoodscfg];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskGoodscfg)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskGoodscfg* default_instance_;
};
// -------------------------------------------------------------------

class AskCSCreateGuideBattle : public ::google::protobuf::Message {
 public:
  AskCSCreateGuideBattle();
  virtual ~AskCSCreateGuideBattle();

  AskCSCreateGuideBattle(const AskCSCreateGuideBattle& from);

  inline AskCSCreateGuideBattle& operator=(const AskCSCreateGuideBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskCSCreateGuideBattle& default_instance();

  void Swap(AskCSCreateGuideBattle* other);

  // implements Message ----------------------------------------------

  AskCSCreateGuideBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskCSCreateGuideBattle& from);
  void MergeFrom(const AskCSCreateGuideBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AskCSCreateGuideBattle_guidetype guidetype;
  static const guidetype first = AskCSCreateGuideBattle_guidetype_first;
  static const guidetype second = AskCSCreateGuideBattle_guidetype_second;
  static const guidetype other = AskCSCreateGuideBattle_guidetype_other;
  static inline bool guidetype_IsValid(int value) {
    return AskCSCreateGuideBattle_guidetype_IsValid(value);
  }
  static const guidetype guidetype_MIN =
    AskCSCreateGuideBattle_guidetype_guidetype_MIN;
  static const guidetype guidetype_MAX =
    AskCSCreateGuideBattle_guidetype_guidetype_MAX;
  static const int guidetype_ARRAYSIZE =
    AskCSCreateGuideBattle_guidetype_guidetype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  guidetype_descriptor() {
    return AskCSCreateGuideBattle_guidetype_descriptor();
  }
  static inline const ::std::string& guidetype_Name(guidetype value) {
    return AskCSCreateGuideBattle_guidetype_Name(value);
  }
  static inline bool guidetype_Parse(const ::std::string& name,
      guidetype* value) {
    return AskCSCreateGuideBattle_guidetype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideBattle];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional .GCToCS.AskCSCreateGuideBattle.guidetype ntype = 3;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNtypeFieldNumber = 3;
  inline ::GCToCS::AskCSCreateGuideBattle_guidetype ntype() const;
  inline void set_ntype(::GCToCS::AskCSCreateGuideBattle_guidetype value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskCSCreateGuideBattle)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_ntype();
  inline void clear_has_ntype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 mapid_;
  int ntype_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskCSCreateGuideBattle* default_instance_;
};
// -------------------------------------------------------------------

class AskQuickBattle : public ::google::protobuf::Message {
 public:
  AskQuickBattle();
  virtual ~AskQuickBattle();

  AskQuickBattle(const AskQuickBattle& from);

  inline AskQuickBattle& operator=(const AskQuickBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskQuickBattle& default_instance();

  void Swap(AskQuickBattle* other);

  // implements Message ----------------------------------------------

  AskQuickBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskQuickBattle& from);
  void MergeFrom(const AskQuickBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQuickBattle];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskQuickBattle)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 mapid_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskQuickBattle* default_instance_;
};
// -------------------------------------------------------------------

class AskStopQuickBattle : public ::google::protobuf::Message {
 public:
  AskStopQuickBattle();
  virtual ~AskStopQuickBattle();

  AskStopQuickBattle(const AskStopQuickBattle& from);

  inline AskStopQuickBattle& operator=(const AskStopQuickBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskStopQuickBattle& default_instance();

  void Swap(AskStopQuickBattle* other);

  // implements Message ----------------------------------------------

  AskStopQuickBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskStopQuickBattle& from);
  void MergeFrom(const AskStopQuickBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopQuickBattle];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskStopQuickBattle)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskStopQuickBattle* default_instance_;
};
// -------------------------------------------------------------------

class AskCreateRoom : public ::google::protobuf::Message {
 public:
  AskCreateRoom();
  virtual ~AskCreateRoom();

  AskCreateRoom(const AskCreateRoom& from);

  inline AskCreateRoom& operator=(const AskCreateRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskCreateRoom& default_instance();

  void Swap(AskCreateRoom* other);

  // implements Message ----------------------------------------------

  AskCreateRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskCreateRoom& from);
  void MergeFrom(const AskCreateRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:GCToCS.AskCreateRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 mapid_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskCreateRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskAddRoom : public ::google::protobuf::Message {
 public:
  AskAddRoom();
  virtual ~AskAddRoom();

  AskAddRoom(const AskAddRoom& from);

  inline AskAddRoom& operator=(const AskAddRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskAddRoom& default_instance();

  void Swap(AskAddRoom* other);

  // implements Message ----------------------------------------------

  AskAddRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskAddRoom& from);
  void MergeFrom(const AskAddRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint64 battleid = 2;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleidFieldNumber = 2;
  inline ::google::protobuf::uint64 battleid() const;
  inline void set_battleid(::google::protobuf::uint64 value);

  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:GCToCS.AskAddRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 battleid_;
  ::std::string* passwd_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskAddRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskLeaveRoom : public ::google::protobuf::Message {
 public:
  AskLeaveRoom();
  virtual ~AskLeaveRoom();

  AskLeaveRoom(const AskLeaveRoom& from);

  inline AskLeaveRoom& operator=(const AskLeaveRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskLeaveRoom& default_instance();

  void Swap(AskLeaveRoom* other);

  // implements Message ----------------------------------------------

  AskLeaveRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskLeaveRoom& from);
  void MergeFrom(const AskLeaveRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLeaveRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskLeaveRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskLeaveRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskChangeRoomSeat : public ::google::protobuf::Message {
 public:
  AskChangeRoomSeat();
  virtual ~AskChangeRoomSeat();

  AskChangeRoomSeat(const AskChangeRoomSeat& from);

  inline AskChangeRoomSeat& operator=(const AskChangeRoomSeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskChangeRoomSeat& default_instance();

  void Swap(AskChangeRoomSeat* other);

  // implements Message ----------------------------------------------

  AskChangeRoomSeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskChangeRoomSeat& from);
  void MergeFrom(const AskChangeRoomSeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeRoomSeat];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 newpos = 2;
  inline bool has_newpos() const;
  inline void clear_newpos();
  static const int kNewposFieldNumber = 2;
  inline ::google::protobuf::int32 newpos() const;
  inline void set_newpos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskChangeRoomSeat)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_newpos();
  inline void clear_has_newpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 newpos_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskChangeRoomSeat* default_instance_;
};
// -------------------------------------------------------------------

class AskReadyRoom : public ::google::protobuf::Message {
 public:
  AskReadyRoom();
  virtual ~AskReadyRoom();

  AskReadyRoom(const AskReadyRoom& from);

  inline AskReadyRoom& operator=(const AskReadyRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskReadyRoom& default_instance();

  void Swap(AskReadyRoom* other);

  // implements Message ----------------------------------------------

  AskReadyRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskReadyRoom& from);
  void MergeFrom(const AskReadyRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReadyRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskReadyRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskReadyRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskCancelRoom : public ::google::protobuf::Message {
 public:
  AskCancelRoom();
  virtual ~AskCancelRoom();

  AskCancelRoom(const AskCancelRoom& from);

  inline AskCancelRoom& operator=(const AskCancelRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskCancelRoom& default_instance();

  void Swap(AskCancelRoom* other);

  // implements Message ----------------------------------------------

  AskCancelRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskCancelRoom& from);
  void MergeFrom(const AskCancelRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCancelRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskCancelRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskCancelRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskStartRoom : public ::google::protobuf::Message {
 public:
  AskStartRoom();
  virtual ~AskStartRoom();

  AskStartRoom(const AskStartRoom& from);

  inline AskStartRoom& operator=(const AskStartRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskStartRoom& default_instance();

  void Swap(AskStartRoom* other);

  // implements Message ----------------------------------------------

  AskStartRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskStartRoom& from);
  void MergeFrom(const AskStartRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskStartRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskStartRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskReEnterRoom : public ::google::protobuf::Message {
 public:
  AskReEnterRoom();
  virtual ~AskReEnterRoom();

  AskReEnterRoom(const AskReEnterRoom& from);

  inline AskReEnterRoom& operator=(const AskReEnterRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskReEnterRoom& default_instance();

  void Swap(AskReEnterRoom* other);

  // implements Message ----------------------------------------------

  AskReEnterRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskReEnterRoom& from);
  void MergeFrom(const AskReEnterRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReEnterRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskReEnterRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskReEnterRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskChatInRoom : public ::google::protobuf::Message {
 public:
  AskChatInRoom();
  virtual ~AskChatInRoom();

  AskChatInRoom(const AskChatInRoom& from);

  inline AskChatInRoom& operator=(const AskChatInRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskChatInRoom& default_instance();

  void Swap(AskChatInRoom* other);

  // implements Message ----------------------------------------------

  AskChatInRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskChatInRoom& from);
  void MergeFrom(const AskChatInRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChatInRoom];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string chat = 2;
  inline bool has_chat() const;
  inline void clear_chat();
  static const int kChatFieldNumber = 2;
  inline const ::std::string& chat() const;
  inline void set_chat(const ::std::string& value);
  inline void set_chat(const char* value);
  inline void set_chat(const char* value, size_t size);
  inline ::std::string* mutable_chat();
  inline ::std::string* release_chat();
  inline void set_allocated_chat(::std::string* chat);

  // @@protoc_insertion_point(class_scope:GCToCS.AskChatInRoom)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_chat();
  inline void clear_has_chat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* chat_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskChatInRoom* default_instance_;
};
// -------------------------------------------------------------------

class AskGetMailGift : public ::google::protobuf::Message {
 public:
  AskGetMailGift();
  virtual ~AskGetMailGift();

  AskGetMailGift(const AskGetMailGift& from);

  inline AskGetMailGift& operator=(const AskGetMailGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskGetMailGift& default_instance();

  void Swap(AskGetMailGift* other);

  // implements Message ----------------------------------------------

  AskGetMailGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskGetMailGift& from);
  void MergeFrom(const AskGetMailGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGetMailGift];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskGetMailGift)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 mailid_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskGetMailGift* default_instance_;
};
// -------------------------------------------------------------------

class AskMailInfo : public ::google::protobuf::Message {
 public:
  AskMailInfo();
  virtual ~AskMailInfo();

  AskMailInfo(const AskMailInfo& from);

  inline AskMailInfo& operator=(const AskMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskMailInfo& default_instance();

  void Swap(AskMailInfo* other);

  // implements Message ----------------------------------------------

  AskMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskMailInfo& from);
  void MergeFrom(const AskMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskMailInfo];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskMailInfo)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 mailid_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class AskBuyGoods : public ::google::protobuf::Message {
 public:
  AskBuyGoods();
  virtual ~AskBuyGoods();

  AskBuyGoods(const AskBuyGoods& from);

  inline AskBuyGoods& operator=(const AskBuyGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskBuyGoods& default_instance();

  void Swap(AskBuyGoods* other);

  // implements Message ----------------------------------------------

  AskBuyGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskBuyGoods& from);
  void MergeFrom(const AskBuyGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBuyGoods];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 commondityid = 2;
  inline bool has_commondityid() const;
  inline void clear_commondityid();
  static const int kCommondityidFieldNumber = 2;
  inline ::google::protobuf::int32 commondityid() const;
  inline void set_commondityid(::google::protobuf::int32 value);

  // optional int32 consumetype = 3;
  inline bool has_consumetype() const;
  inline void clear_consumetype();
  static const int kConsumetypeFieldNumber = 3;
  inline ::google::protobuf::int32 consumetype() const;
  inline void set_consumetype(::google::protobuf::int32 value);

  // optional uint32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskBuyGoods)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_commondityid();
  inline void clear_has_commondityid();
  inline void set_has_consumetype();
  inline void clear_has_consumetype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 commondityid_;
  ::google::protobuf::int32 consumetype_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskBuyGoods* default_instance_;
};
// -------------------------------------------------------------------

class UserAskGetCLReward : public ::google::protobuf::Message {
 public:
  UserAskGetCLReward();
  virtual ~UserAskGetCLReward();

  UserAskGetCLReward(const UserAskGetCLReward& from);

  inline UserAskGetCLReward& operator=(const UserAskGetCLReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAskGetCLReward& default_instance();

  void Swap(UserAskGetCLReward* other);

  // implements Message ----------------------------------------------

  UserAskGetCLReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAskGetCLReward& from);
  void MergeFrom(const UserAskGetCLReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UserAskGetCLReward];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.UserAskGetCLReward)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static UserAskGetCLReward* default_instance_;
};
// -------------------------------------------------------------------

class Notice : public ::google::protobuf::Message {
 public:
  Notice();
  virtual ~Notice();

  Notice(const Notice& from);

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice& default_instance();

  void Swap(Notice* other);

  // implements Message ----------------------------------------------

  Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_Notice];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional .GCToCS.notice_type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::GCToCS::notice_type type() const;
  inline void set_type(::GCToCS::notice_type value);

  // optional string notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:GCToCS.Notice)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  int type_;
  ::std::string* notice_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static Notice* default_instance_;
};
// -------------------------------------------------------------------

class AskCurtNotice : public ::google::protobuf::Message {
 public:
  AskCurtNotice();
  virtual ~AskCurtNotice();

  AskCurtNotice(const AskCurtNotice& from);

  inline AskCurtNotice& operator=(const AskCurtNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskCurtNotice& default_instance();

  void Swap(AskCurtNotice* other);

  // implements Message ----------------------------------------------

  AskCurtNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskCurtNotice& from);
  void MergeFrom(const AskCurtNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCurtNotice];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional .GCToCS.notice_type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::GCToCS::notice_type type() const;
  inline void set_type(::GCToCS::notice_type value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskCurtNotice)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  int type_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskCurtNotice* default_instance_;
};
// -------------------------------------------------------------------

class CompleteInfo : public ::google::protobuf::Message {
 public:
  CompleteInfo();
  virtual ~CompleteInfo();

  CompleteInfo(const CompleteInfo& from);

  inline CompleteInfo& operator=(const CompleteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompleteInfo& default_instance();

  void Swap(CompleteInfo* other);

  // implements Message ----------------------------------------------

  CompleteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompleteInfo& from);
  void MergeFrom(const CompleteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskComleteUserInfo];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.CompleteInfo)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  int msgnum_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static CompleteInfo* default_instance_;
};
// -------------------------------------------------------------------

class AskAddToSNSList : public ::google::protobuf::Message {
 public:
  AskAddToSNSList();
  virtual ~AskAddToSNSList();

  AskAddToSNSList(const AskAddToSNSList& from);

  inline AskAddToSNSList& operator=(const AskAddToSNSList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskAddToSNSList& default_instance();

  void Swap(AskAddToSNSList* other);

  // implements Message ----------------------------------------------

  AskAddToSNSList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskAddToSNSList& from);
  void MergeFrom(const AskAddToSNSList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSList];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskAddToSNSList)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  int msgnum_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskAddToSNSList* default_instance_;
};
// -------------------------------------------------------------------

class AskCanInviteFriends : public ::google::protobuf::Message {
 public:
  AskCanInviteFriends();
  virtual ~AskCanInviteFriends();

  AskCanInviteFriends(const AskCanInviteFriends& from);

  inline AskCanInviteFriends& operator=(const AskCanInviteFriends& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskCanInviteFriends& default_instance();

  void Swap(AskCanInviteFriends* other);

  // implements Message ----------------------------------------------

  AskCanInviteFriends* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskCanInviteFriends& from);
  void MergeFrom(const AskCanInviteFriends& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCanInviteFriends];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskCanInviteFriends)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskCanInviteFriends* default_instance_;
};
// -------------------------------------------------------------------

class AskAddToSNSListByID : public ::google::protobuf::Message {
 public:
  AskAddToSNSListByID();
  virtual ~AskAddToSNSListByID();

  AskAddToSNSListByID(const AskAddToSNSListByID& from);

  inline AskAddToSNSListByID& operator=(const AskAddToSNSListByID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskAddToSNSListByID& default_instance();

  void Swap(AskAddToSNSListByID* other);

  // implements Message ----------------------------------------------

  AskAddToSNSListByID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskAddToSNSListByID& from);
  void MergeFrom(const AskAddToSNSListByID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSListByID];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskAddToSNSListByID)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 userid_;
  int msgnum_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskAddToSNSListByID* default_instance_;
};
// -------------------------------------------------------------------

class AskRemoveFromSNSList : public ::google::protobuf::Message {
 public:
  AskRemoveFromSNSList();
  virtual ~AskRemoveFromSNSList();

  AskRemoveFromSNSList(const AskRemoveFromSNSList& from);

  inline AskRemoveFromSNSList& operator=(const AskRemoveFromSNSList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRemoveFromSNSList& default_instance();

  void Swap(AskRemoveFromSNSList* other);

  // implements Message ----------------------------------------------

  AskRemoveFromSNSList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRemoveFromSNSList& from);
  void MergeFrom(const AskRemoveFromSNSList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveFromSNSList];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint64 guididx = 2;
  inline bool has_guididx() const;
  inline void clear_guididx();
  static const int kGuididxFieldNumber = 2;
  inline ::google::protobuf::uint64 guididx() const;
  inline void set_guididx(::google::protobuf::uint64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskRemoveFromSNSList)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_guididx();
  inline void clear_has_guididx();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guididx_;
  int msgnum_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskRemoveFromSNSList* default_instance_;
};
// -------------------------------------------------------------------

class AskSendMsgToUser : public ::google::protobuf::Message {
 public:
  AskSendMsgToUser();
  virtual ~AskSendMsgToUser();

  AskSendMsgToUser(const AskSendMsgToUser& from);

  inline AskSendMsgToUser& operator=(const AskSendMsgToUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskSendMsgToUser& default_instance();

  void Swap(AskSendMsgToUser* other);

  // implements Message ----------------------------------------------

  AskSendMsgToUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskSendMsgToUser& from);
  void MergeFrom(const AskSendMsgToUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskSendMsgToUser];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint64 guididx = 2;
  inline bool has_guididx() const;
  inline void clear_guididx();
  static const int kGuididxFieldNumber = 2;
  inline ::google::protobuf::uint64 guididx() const;
  inline void set_guididx(::google::protobuf::uint64 value);

  // optional string contents = 3;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 3;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const char* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // @@protoc_insertion_point(class_scope:GCToCS.AskSendMsgToUser)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_guididx();
  inline void clear_has_guididx();
  inline void set_has_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guididx_;
  ::std::string* contents_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskSendMsgToUser* default_instance_;
};
// -------------------------------------------------------------------

class AskInviteFriendsToBattle : public ::google::protobuf::Message {
 public:
  AskInviteFriendsToBattle();
  virtual ~AskInviteFriendsToBattle();

  AskInviteFriendsToBattle(const AskInviteFriendsToBattle& from);

  inline AskInviteFriendsToBattle& operator=(const AskInviteFriendsToBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskInviteFriendsToBattle& default_instance();

  void Swap(AskInviteFriendsToBattle* other);

  // implements Message ----------------------------------------------

  AskInviteFriendsToBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskInviteFriendsToBattle& from);
  void MergeFrom(const AskInviteFriendsToBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteFriendsToBattle];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 battleid = 2;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleidFieldNumber = 2;
  inline ::google::protobuf::int32 battleid() const;
  inline void set_battleid(::google::protobuf::int32 value);

  // optional uint64 guididx = 3;
  inline bool has_guididx() const;
  inline void clear_guididx();
  static const int kGuididxFieldNumber = 3;
  inline ::google::protobuf::uint64 guididx() const;
  inline void set_guididx(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskInviteFriendsToBattle)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_guididx();
  inline void clear_has_guididx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 battleid_;
  ::google::protobuf::uint64 guididx_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskInviteFriendsToBattle* default_instance_;
};
// -------------------------------------------------------------------

class AskQueryUserByNickName : public ::google::protobuf::Message {
 public:
  AskQueryUserByNickName();
  virtual ~AskQueryUserByNickName();

  AskQueryUserByNickName(const AskQueryUserByNickName& from);

  inline AskQueryUserByNickName& operator=(const AskQueryUserByNickName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskQueryUserByNickName& default_instance();

  void Swap(AskQueryUserByNickName* other);

  // implements Message ----------------------------------------------

  AskQueryUserByNickName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskQueryUserByNickName& from);
  void MergeFrom(const AskQueryUserByNickName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQueryUserByNickName];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:GCToCS.AskQueryUserByNickName)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskQueryUserByNickName* default_instance_;
};
// -------------------------------------------------------------------

class GCReplyAddFriendRequst : public ::google::protobuf::Message {
 public:
  GCReplyAddFriendRequst();
  virtual ~GCReplyAddFriendRequst();

  GCReplyAddFriendRequst(const GCReplyAddFriendRequst& from);

  inline GCReplyAddFriendRequst& operator=(const GCReplyAddFriendRequst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCReplyAddFriendRequst& default_instance();

  void Swap(GCReplyAddFriendRequst* other);

  // implements Message ----------------------------------------------

  GCReplyAddFriendRequst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCReplyAddFriendRequst& from);
  void MergeFrom(const GCReplyAddFriendRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyAddFriendRequst];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint64 guididx = 2;
  inline bool has_guididx() const;
  inline void clear_guididx();
  static const int kGuididxFieldNumber = 2;
  inline ::google::protobuf::uint64 guididx() const;
  inline void set_guididx(::google::protobuf::uint64 value);

  // optional int32 reply = 3;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 3;
  inline ::google::protobuf::int32 reply() const;
  inline void set_reply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.GCReplyAddFriendRequst)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_guididx();
  inline void clear_has_guididx();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guididx_;
  int msgnum_;
  ::google::protobuf::int32 reply_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static GCReplyAddFriendRequst* default_instance_;
};
// -------------------------------------------------------------------

class GuideCSStepComp : public ::google::protobuf::Message {
 public:
  GuideCSStepComp();
  virtual ~GuideCSStepComp();

  GuideCSStepComp(const GuideCSStepComp& from);

  inline GuideCSStepComp& operator=(const GuideCSStepComp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuideCSStepComp& default_instance();

  void Swap(GuideCSStepComp* other);

  // implements Message ----------------------------------------------

  GuideCSStepComp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuideCSStepComp& from);
  void MergeFrom(const GuideCSStepComp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CompCSGuideStepId];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 guidepart = 2;
  inline bool has_guidepart() const;
  inline void clear_guidepart();
  static const int kGuidepartFieldNumber = 2;
  inline ::google::protobuf::int32 guidepart() const;
  inline void set_guidepart(::google::protobuf::int32 value);

  // optional bool bcomp = 3;
  inline bool has_bcomp() const;
  inline void clear_bcomp();
  static const int kBcompFieldNumber = 3;
  inline bool bcomp() const;
  inline void set_bcomp(bool value);

  // @@protoc_insertion_point(class_scope:GCToCS.GuideCSStepComp)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_guidepart();
  inline void clear_has_guidepart();
  inline void set_has_bcomp();
  inline void clear_has_bcomp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 guidepart_;
  bool bcomp_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static GuideCSStepComp* default_instance_;
};
// -------------------------------------------------------------------

class GCReplyInviteToBattle : public ::google::protobuf::Message {
 public:
  GCReplyInviteToBattle();
  virtual ~GCReplyInviteToBattle();

  GCReplyInviteToBattle(const GCReplyInviteToBattle& from);

  inline GCReplyInviteToBattle& operator=(const GCReplyInviteToBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCReplyInviteToBattle& default_instance();

  void Swap(GCReplyInviteToBattle* other);

  // implements Message ----------------------------------------------

  GCReplyInviteToBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCReplyInviteToBattle& from);
  void MergeFrom(const GCReplyInviteToBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyInviteToBattle];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:GCToCS.GCReplyInviteToBattle)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static GCReplyInviteToBattle* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLogin];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 sdk = 2;
  inline bool has_sdk() const;
  inline void clear_sdk();
  static const int kSdkFieldNumber = 2;
  inline ::google::protobuf::int32 sdk() const;
  inline void set_sdk(::google::protobuf::int32 value);

  // optional int32 platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string passwd = 5;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 5;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // optional string ipaddress = 6;
  inline bool has_ipaddress() const;
  inline void clear_ipaddress();
  static const int kIpaddressFieldNumber = 6;
  inline const ::std::string& ipaddress() const;
  inline void set_ipaddress(const ::std::string& value);
  inline void set_ipaddress(const char* value);
  inline void set_ipaddress(const char* value, size_t size);
  inline ::std::string* mutable_ipaddress();
  inline ::std::string* release_ipaddress();
  inline void set_allocated_ipaddress(::std::string* ipaddress);

  // optional string equimentid = 7;
  inline bool has_equimentid() const;
  inline void clear_equimentid();
  static const int kEquimentidFieldNumber = 7;
  inline const ::std::string& equimentid() const;
  inline void set_equimentid(const ::std::string& value);
  inline void set_equimentid(const char* value);
  inline void set_equimentid(const char* value, size_t size);
  inline ::std::string* mutable_equimentid();
  inline ::std::string* release_equimentid();
  inline void set_allocated_equimentid(::std::string* equimentid);

  // @@protoc_insertion_point(class_scope:GCToCS.Login)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_sdk();
  inline void clear_has_sdk();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_ipaddress();
  inline void clear_has_ipaddress();
  inline void set_has_equimentid();
  inline void clear_has_equimentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 sdk_;
  ::std::string* name_;
  ::std::string* passwd_;
  ::std::string* ipaddress_;
  ::std::string* equimentid_;
  ::google::protobuf::int32 platform_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class UserGameInfo : public ::google::protobuf::Message {
 public:
  UserGameInfo();
  virtual ~UserGameInfo();

  UserGameInfo(const UserGameInfo& from);

  inline UserGameInfo& operator=(const UserGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameInfo& default_instance();

  void Swap(UserGameInfo* other);

  // implements Message ----------------------------------------------

  UserGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserGameInfo& from);
  void MergeFrom(const UserGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskUserGameInfo];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.UserGameInfo)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static UserGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuyRunes : public ::google::protobuf::Message {
 public:
  BuyRunes();
  virtual ~BuyRunes();

  BuyRunes(const BuyRunes& from);

  inline BuyRunes& operator=(const BuyRunes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyRunes& default_instance();

  void Swap(BuyRunes* other);

  // implements Message ----------------------------------------------

  BuyRunes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyRunes& from);
  void MergeFrom(const BuyRunes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_BUYRunes];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 typeid = 2;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeidFieldNumber = 2;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.BuyRunes)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_typeid_();
  inline void clear_has_typeid_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 typeid__;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static BuyRunes* default_instance_;
};
// -------------------------------------------------------------------

class EuipRunes : public ::google::protobuf::Message {
 public:
  EuipRunes();
  virtual ~EuipRunes();

  EuipRunes(const EuipRunes& from);

  inline EuipRunes& operator=(const EuipRunes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EuipRunes& default_instance();

  void Swap(EuipRunes* other);

  // implements Message ----------------------------------------------

  EuipRunes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EuipRunes& from);
  void MergeFrom(const EuipRunes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_EuipRunes];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional uint32 runeid = 2;
  inline bool has_runeid() const;
  inline void clear_runeid();
  static const int kRuneidFieldNumber = 2;
  inline ::google::protobuf::uint32 runeid() const;
  inline void set_runeid(::google::protobuf::uint32 value);

  // optional int32 topos = 3;
  inline bool has_topos() const;
  inline void clear_topos();
  static const int kToposFieldNumber = 3;
  inline ::google::protobuf::int32 topos() const;
  inline void set_topos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.EuipRunes)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_runeid();
  inline void clear_has_runeid();
  inline void set_has_topos();
  inline void clear_has_topos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::uint32 runeid_;
  ::google::protobuf::int32 topos_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static EuipRunes* default_instance_;
};
// -------------------------------------------------------------------

class UnEuipRunes : public ::google::protobuf::Message {
 public:
  UnEuipRunes();
  virtual ~UnEuipRunes();

  UnEuipRunes(const UnEuipRunes& from);

  inline UnEuipRunes& operator=(const UnEuipRunes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnEuipRunes& default_instance();

  void Swap(UnEuipRunes* other);

  // implements Message ----------------------------------------------

  UnEuipRunes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnEuipRunes& from);
  void MergeFrom(const UnEuipRunes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UnloadRunes];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.UnEuipRunes)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 pos_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static UnEuipRunes* default_instance_;
};
// -------------------------------------------------------------------

class ComposeRunes : public ::google::protobuf::Message {
 public:
  ComposeRunes();
  virtual ~ComposeRunes();

  ComposeRunes(const ComposeRunes& from);

  inline ComposeRunes& operator=(const ComposeRunes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComposeRunes& default_instance();

  void Swap(ComposeRunes* other);

  // implements Message ----------------------------------------------

  ComposeRunes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComposeRunes& from);
  void MergeFrom(const ComposeRunes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_ComposeRunes];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // repeated uint32 runesid = 2;
  inline int runesid_size() const;
  inline void clear_runesid();
  static const int kRunesidFieldNumber = 2;
  inline ::google::protobuf::uint32 runesid(int index) const;
  inline void set_runesid(int index, ::google::protobuf::uint32 value);
  inline void add_runesid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      runesid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_runesid();

  // @@protoc_insertion_point(class_scope:GCToCS.ComposeRunes)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > runesid_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static ComposeRunes* default_instance_;
};
// -------------------------------------------------------------------

class ReconnectToGame : public ::google::protobuf::Message {
 public:
  ReconnectToGame();
  virtual ~ReconnectToGame();

  ReconnectToGame(const ReconnectToGame& from);

  inline ReconnectToGame& operator=(const ReconnectToGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectToGame& default_instance();

  void Swap(ReconnectToGame* other);

  // implements Message ----------------------------------------------

  ReconnectToGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconnectToGame& from);
  void MergeFrom(const ReconnectToGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReconnectGame];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:GCToCS.ReconnectToGame)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* passwd_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static ReconnectToGame* default_instance_;
};
// -------------------------------------------------------------------

class ComGuideStepID : public ::google::protobuf::Message {
 public:
  ComGuideStepID();
  virtual ~ComGuideStepID();

  ComGuideStepID(const ComGuideStepID& from);

  inline ComGuideStepID& operator=(const ComGuideStepID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComGuideStepID& default_instance();

  void Swap(ComGuideStepID* other);

  // implements Message ----------------------------------------------

  ComGuideStepID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComGuideStepID& from);
  void MergeFrom(const ComGuideStepID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideStepId];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 step = 3;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 3;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCToCS.ComGuideStepID)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static ComGuideStepID* default_instance_;
};
// -------------------------------------------------------------------

class AskRoomList : public ::google::protobuf::Message {
 public:
  AskRoomList();
  virtual ~AskRoomList();

  AskRoomList(const AskRoomList& from);

  inline AskRoomList& operator=(const AskRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRoomList& default_instance();

  void Swap(AskRoomList* other);

  // implements Message ----------------------------------------------

  AskRoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRoomList& from);
  void MergeFrom(const AskRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRoomList];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToCS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToCS::MsgNum value);

  // @@protoc_insertion_point(class_scope:GCToCS.AskRoomList)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  friend void  protobuf_AddDesc_GCToCS_2eproto();
  friend void protobuf_AssignDesc_GCToCS_2eproto();
  friend void protobuf_ShutdownFile_GCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskRoomList* default_instance_;
};
// ===================================================================


// ===================================================================

// AskOneTaskRewards

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskOneTaskRewards];
inline bool AskOneTaskRewards::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskOneTaskRewards::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskOneTaskRewards::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskOneTaskRewards::clear_msgnum() {
  msgnum_ = 8290;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskOneTaskRewards::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskOneTaskRewards.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskOneTaskRewards::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskOneTaskRewards.msgnum)
}

// optional uint32 task_guid = 2;
inline bool AskOneTaskRewards::has_task_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskOneTaskRewards::set_has_task_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskOneTaskRewards::clear_has_task_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskOneTaskRewards::clear_task_guid() {
  task_guid_ = 0u;
  clear_has_task_guid();
}
inline ::google::protobuf::uint32 AskOneTaskRewards::task_guid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskOneTaskRewards.task_guid)
  return task_guid_;
}
inline void AskOneTaskRewards::set_task_guid(::google::protobuf::uint32 value) {
  set_has_task_guid();
  task_guid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskOneTaskRewards.task_guid)
}

// -------------------------------------------------------------------

// CDKReq

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CDKReq];
inline bool CDKReq::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDKReq::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDKReq::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDKReq::clear_msgnum() {
  msgnum_ = 8505;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum CDKReq::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.CDKReq.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void CDKReq::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CDKReq.msgnum)
}

// optional string cdkstr = 2;
inline bool CDKReq::has_cdkstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDKReq::set_has_cdkstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDKReq::clear_has_cdkstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDKReq::clear_cdkstr() {
  if (cdkstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkstr_->clear();
  }
  clear_has_cdkstr();
}
inline const ::std::string& CDKReq::cdkstr() const {
  // @@protoc_insertion_point(field_get:GCToCS.CDKReq.cdkstr)
  return *cdkstr_;
}
inline void CDKReq::set_cdkstr(const ::std::string& value) {
  set_has_cdkstr();
  if (cdkstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkstr_ = new ::std::string;
  }
  cdkstr_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.CDKReq.cdkstr)
}
inline void CDKReq::set_cdkstr(const char* value) {
  set_has_cdkstr();
  if (cdkstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkstr_ = new ::std::string;
  }
  cdkstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.CDKReq.cdkstr)
}
inline void CDKReq::set_cdkstr(const char* value, size_t size) {
  set_has_cdkstr();
  if (cdkstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkstr_ = new ::std::string;
  }
  cdkstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.CDKReq.cdkstr)
}
inline ::std::string* CDKReq::mutable_cdkstr() {
  set_has_cdkstr();
  if (cdkstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdkstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.CDKReq.cdkstr)
  return cdkstr_;
}
inline ::std::string* CDKReq::release_cdkstr() {
  clear_has_cdkstr();
  if (cdkstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cdkstr_;
    cdkstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDKReq::set_allocated_cdkstr(::std::string* cdkstr) {
  if (cdkstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdkstr_;
  }
  if (cdkstr) {
    set_has_cdkstr();
    cdkstr_ = cdkstr;
  } else {
    clear_has_cdkstr();
    cdkstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.CDKReq.cdkstr)
}

// -------------------------------------------------------------------

// CurtUIEvent_UIEvent

// optional uint32 uiidx = 2;
inline bool CurtUIEvent_UIEvent::has_uiidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurtUIEvent_UIEvent::set_has_uiidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurtUIEvent_UIEvent::clear_has_uiidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurtUIEvent_UIEvent::clear_uiidx() {
  uiidx_ = 0u;
  clear_has_uiidx();
}
inline ::google::protobuf::uint32 CurtUIEvent_UIEvent::uiidx() const {
  // @@protoc_insertion_point(field_get:GCToCS.CurtUIEvent.UIEvent.uiidx)
  return uiidx_;
}
inline void CurtUIEvent_UIEvent::set_uiidx(::google::protobuf::uint32 value) {
  set_has_uiidx();
  uiidx_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CurtUIEvent.UIEvent.uiidx)
}

// optional uint32 eventNum = 3;
inline bool CurtUIEvent_UIEvent::has_eventnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurtUIEvent_UIEvent::set_has_eventnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurtUIEvent_UIEvent::clear_has_eventnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurtUIEvent_UIEvent::clear_eventnum() {
  eventnum_ = 0u;
  clear_has_eventnum();
}
inline ::google::protobuf::uint32 CurtUIEvent_UIEvent::eventnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.CurtUIEvent.UIEvent.eventNum)
  return eventnum_;
}
inline void CurtUIEvent_UIEvent::set_eventnum(::google::protobuf::uint32 value) {
  set_has_eventnum();
  eventnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CurtUIEvent.UIEvent.eventNum)
}

// -------------------------------------------------------------------

// CurtUIEvent

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UIEvent];
inline bool CurtUIEvent::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurtUIEvent::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurtUIEvent::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurtUIEvent::clear_msgnum() {
  msgnum_ = 8550;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum CurtUIEvent::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.CurtUIEvent.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void CurtUIEvent::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CurtUIEvent.msgnum)
}

// repeated .GCToCS.CurtUIEvent.UIEvent eventlist = 2;
inline int CurtUIEvent::eventlist_size() const {
  return eventlist_.size();
}
inline void CurtUIEvent::clear_eventlist() {
  eventlist_.Clear();
}
inline const ::GCToCS::CurtUIEvent_UIEvent& CurtUIEvent::eventlist(int index) const {
  // @@protoc_insertion_point(field_get:GCToCS.CurtUIEvent.eventlist)
  return eventlist_.Get(index);
}
inline ::GCToCS::CurtUIEvent_UIEvent* CurtUIEvent::mutable_eventlist(int index) {
  // @@protoc_insertion_point(field_mutable:GCToCS.CurtUIEvent.eventlist)
  return eventlist_.Mutable(index);
}
inline ::GCToCS::CurtUIEvent_UIEvent* CurtUIEvent::add_eventlist() {
  // @@protoc_insertion_point(field_add:GCToCS.CurtUIEvent.eventlist)
  return eventlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GCToCS::CurtUIEvent_UIEvent >&
CurtUIEvent::eventlist() const {
  // @@protoc_insertion_point(field_list:GCToCS.CurtUIEvent.eventlist)
  return eventlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::GCToCS::CurtUIEvent_UIEvent >*
CurtUIEvent::mutable_eventlist() {
  // @@protoc_insertion_point(field_mutable_list:GCToCS.CurtUIEvent.eventlist)
  return &eventlist_;
}

// -------------------------------------------------------------------

// AskRecoinRune

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRecoinRune];
inline bool AskRecoinRune::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRecoinRune::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRecoinRune::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRecoinRune::clear_msgnum() {
  msgnum_ = 8503;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskRecoinRune::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRecoinRune.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskRecoinRune::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRecoinRune.msgnum)
}

// optional uint32 rune_id = 2;
inline bool AskRecoinRune::has_rune_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskRecoinRune::set_has_rune_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskRecoinRune::clear_has_rune_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskRecoinRune::clear_rune_id() {
  rune_id_ = 0u;
  clear_has_rune_id();
}
inline ::google::protobuf::uint32 AskRecoinRune::rune_id() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRecoinRune.rune_id)
  return rune_id_;
}
inline void AskRecoinRune::set_rune_id(::google::protobuf::uint32 value) {
  set_has_rune_id();
  rune_id_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRecoinRune.rune_id)
}

// optional uint32 pay_type = 3;
inline bool AskRecoinRune::has_pay_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskRecoinRune::set_has_pay_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskRecoinRune::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskRecoinRune::clear_pay_type() {
  pay_type_ = 0u;
  clear_has_pay_type();
}
inline ::google::protobuf::uint32 AskRecoinRune::pay_type() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRecoinRune.pay_type)
  return pay_type_;
}
inline void AskRecoinRune::set_pay_type(::google::protobuf::uint32 value) {
  set_has_pay_type();
  pay_type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRecoinRune.pay_type)
}

// optional uint32 cost = 4;
inline bool AskRecoinRune::has_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskRecoinRune::set_has_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskRecoinRune::clear_has_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskRecoinRune::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 AskRecoinRune::cost() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRecoinRune.cost)
  return cost_;
}
inline void AskRecoinRune::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRecoinRune.cost)
}

// -------------------------------------------------------------------

// BlackListOnlineInfo

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBlackListOnlineInfo];
inline bool BlackListOnlineInfo::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlackListOnlineInfo::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlackListOnlineInfo::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlackListOnlineInfo::clear_msgnum() {
  msgnum_ = 8502;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum BlackListOnlineInfo::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.BlackListOnlineInfo.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void BlackListOnlineInfo::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.BlackListOnlineInfo.msgnum)
}

// -------------------------------------------------------------------

// AddCSGMCmd

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GmCmd];
inline bool AddCSGMCmd::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddCSGMCmd::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddCSGMCmd::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddCSGMCmd::clear_msgnum() {
  msgnum_ = 8501;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AddCSGMCmd::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AddCSGMCmd.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AddCSGMCmd::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AddCSGMCmd.msgnum)
}

// optional string gmcmd = 2;
inline bool AddCSGMCmd::has_gmcmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddCSGMCmd::set_has_gmcmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddCSGMCmd::clear_has_gmcmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddCSGMCmd::clear_gmcmd() {
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_->clear();
  }
  clear_has_gmcmd();
}
inline const ::std::string& AddCSGMCmd::gmcmd() const {
  // @@protoc_insertion_point(field_get:GCToCS.AddCSGMCmd.gmcmd)
  return *gmcmd_;
}
inline void AddCSGMCmd::set_gmcmd(const ::std::string& value) {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  gmcmd_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AddCSGMCmd.gmcmd)
}
inline void AddCSGMCmd::set_gmcmd(const char* value) {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  gmcmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AddCSGMCmd.gmcmd)
}
inline void AddCSGMCmd::set_gmcmd(const char* value, size_t size) {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  gmcmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AddCSGMCmd.gmcmd)
}
inline ::std::string* AddCSGMCmd::mutable_gmcmd() {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AddCSGMCmd.gmcmd)
  return gmcmd_;
}
inline ::std::string* AddCSGMCmd::release_gmcmd() {
  clear_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gmcmd_;
    gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddCSGMCmd::set_allocated_gmcmd(::std::string* gmcmd) {
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcmd_;
  }
  if (gmcmd) {
    set_has_gmcmd();
    gmcmd_ = gmcmd;
  } else {
    clear_has_gmcmd();
    gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AddCSGMCmd.gmcmd)
}

// -------------------------------------------------------------------

// NotifyOneMatchNeedOneRet

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet];
inline bool NotifyOneMatchNeedOneRet::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyOneMatchNeedOneRet::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyOneMatchNeedOneRet::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyOneMatchNeedOneRet::clear_msgnum() {
  msgnum_ = 8288;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum NotifyOneMatchNeedOneRet::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.NotifyOneMatchNeedOneRet.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void NotifyOneMatchNeedOneRet::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.NotifyOneMatchNeedOneRet.msgnum)
}

// optional uint32 mapid = 2;
inline bool NotifyOneMatchNeedOneRet::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyOneMatchNeedOneRet::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyOneMatchNeedOneRet::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyOneMatchNeedOneRet::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 NotifyOneMatchNeedOneRet::mapid() const {
  // @@protoc_insertion_point(field_get:GCToCS.NotifyOneMatchNeedOneRet.mapid)
  return mapid_;
}
inline void NotifyOneMatchNeedOneRet::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.NotifyOneMatchNeedOneRet.mapid)
}

// optional uint32 fightid = 3;
inline bool NotifyOneMatchNeedOneRet::has_fightid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyOneMatchNeedOneRet::set_has_fightid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyOneMatchNeedOneRet::clear_has_fightid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyOneMatchNeedOneRet::clear_fightid() {
  fightid_ = 0u;
  clear_has_fightid();
}
inline ::google::protobuf::uint32 NotifyOneMatchNeedOneRet::fightid() const {
  // @@protoc_insertion_point(field_get:GCToCS.NotifyOneMatchNeedOneRet.fightid)
  return fightid_;
}
inline void NotifyOneMatchNeedOneRet::set_fightid(::google::protobuf::uint32 value) {
  set_has_fightid();
  fightid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.NotifyOneMatchNeedOneRet.fightid)
}

// optional bool isAccept = 4;
inline bool NotifyOneMatchNeedOneRet::has_isaccept() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyOneMatchNeedOneRet::set_has_isaccept() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyOneMatchNeedOneRet::clear_has_isaccept() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyOneMatchNeedOneRet::clear_isaccept() {
  isaccept_ = false;
  clear_has_isaccept();
}
inline bool NotifyOneMatchNeedOneRet::isaccept() const {
  // @@protoc_insertion_point(field_get:GCToCS.NotifyOneMatchNeedOneRet.isAccept)
  return isaccept_;
}
inline void NotifyOneMatchNeedOneRet::set_isaccept(bool value) {
  set_has_isaccept();
  isaccept_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.NotifyOneMatchNeedOneRet.isAccept)
}

// -------------------------------------------------------------------

// AskChangeheaderId

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeheaderId];
inline bool AskChangeheaderId::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskChangeheaderId::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskChangeheaderId::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskChangeheaderId::clear_msgnum() {
  msgnum_ = 8500;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskChangeheaderId::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskChangeheaderId.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskChangeheaderId::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskChangeheaderId.msgnum)
}

// optional uint32 newheaderid = 2;
inline bool AskChangeheaderId::has_newheaderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskChangeheaderId::set_has_newheaderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskChangeheaderId::clear_has_newheaderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskChangeheaderId::clear_newheaderid() {
  newheaderid_ = 0u;
  clear_has_newheaderid();
}
inline ::google::protobuf::uint32 AskChangeheaderId::newheaderid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskChangeheaderId.newheaderid)
  return newheaderid_;
}
inline void AskChangeheaderId::set_newheaderid(::google::protobuf::uint32 value) {
  set_has_newheaderid();
  newheaderid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskChangeheaderId.newheaderid)
}

// -------------------------------------------------------------------

// ChangeNickName

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeNickName];
inline bool ChangeNickName::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeNickName::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeNickName::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeNickName::clear_msgnum() {
  msgnum_ = 8286;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum ChangeNickName::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.ChangeNickName.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void ChangeNickName::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ChangeNickName.msgnum)
}

// optional string newnickname = 2;
inline bool ChangeNickName::has_newnickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeNickName::set_has_newnickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeNickName::clear_has_newnickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeNickName::clear_newnickname() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_->clear();
  }
  clear_has_newnickname();
}
inline const ::std::string& ChangeNickName::newnickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.ChangeNickName.newnickname)
  return *newnickname_;
}
inline void ChangeNickName::set_newnickname(const ::std::string& value) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.ChangeNickName.newnickname)
}
inline void ChangeNickName::set_newnickname(const char* value) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.ChangeNickName.newnickname)
}
inline void ChangeNickName::set_newnickname(const char* value, size_t size) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.ChangeNickName.newnickname)
}
inline ::std::string* ChangeNickName::mutable_newnickname() {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.ChangeNickName.newnickname)
  return newnickname_;
}
inline ::std::string* ChangeNickName::release_newnickname() {
  clear_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newnickname_;
    newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeNickName::set_allocated_newnickname(::std::string* newnickname) {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (newnickname) {
    set_has_newnickname();
    newnickname_ = newnickname;
  } else {
    clear_has_newnickname();
    newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.ChangeNickName.newnickname)
}

// -------------------------------------------------------------------

// AskCreateMatchTeam

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateMatchTeam];
inline bool AskCreateMatchTeam::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskCreateMatchTeam::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskCreateMatchTeam::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskCreateMatchTeam::clear_msgnum() {
  msgnum_ = 8280;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskCreateMatchTeam::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCreateMatchTeam.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskCreateMatchTeam::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCreateMatchTeam.msgnum)
}

// optional uint32 matchtype = 2;
inline bool AskCreateMatchTeam::has_matchtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskCreateMatchTeam::set_has_matchtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskCreateMatchTeam::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskCreateMatchTeam::clear_matchtype() {
  matchtype_ = 0u;
  clear_has_matchtype();
}
inline ::google::protobuf::uint32 AskCreateMatchTeam::matchtype() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCreateMatchTeam.matchtype)
  return matchtype_;
}
inline void AskCreateMatchTeam::set_matchtype(::google::protobuf::uint32 value) {
  set_has_matchtype();
  matchtype_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCreateMatchTeam.matchtype)
}

// optional uint32 mapid = 3;
inline bool AskCreateMatchTeam::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskCreateMatchTeam::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskCreateMatchTeam::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskCreateMatchTeam::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 AskCreateMatchTeam::mapid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCreateMatchTeam.mapid)
  return mapid_;
}
inline void AskCreateMatchTeam::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCreateMatchTeam.mapid)
}

// -------------------------------------------------------------------

// AskAddMatchTeam

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddMatchTeam];
inline bool AskAddMatchTeam::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskAddMatchTeam::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskAddMatchTeam::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskAddMatchTeam::clear_msgnum() {
  msgnum_ = 8281;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskAddMatchTeam::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddMatchTeam.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskAddMatchTeam::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddMatchTeam.msgnum)
}

// optional string friendsNickName = 2;
inline bool AskAddMatchTeam::has_friendsnickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskAddMatchTeam::set_has_friendsnickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskAddMatchTeam::clear_has_friendsnickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskAddMatchTeam::clear_friendsnickname() {
  if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_->clear();
  }
  clear_has_friendsnickname();
}
inline const ::std::string& AskAddMatchTeam::friendsnickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddMatchTeam.friendsNickName)
  return *friendsnickname_;
}
inline void AskAddMatchTeam::set_friendsnickname(const ::std::string& value) {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  friendsnickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskAddMatchTeam.friendsNickName)
}
inline void AskAddMatchTeam::set_friendsnickname(const char* value) {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  friendsnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskAddMatchTeam.friendsNickName)
}
inline void AskAddMatchTeam::set_friendsnickname(const char* value, size_t size) {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  friendsnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskAddMatchTeam.friendsNickName)
}
inline ::std::string* AskAddMatchTeam::mutable_friendsnickname() {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskAddMatchTeam.friendsNickName)
  return friendsnickname_;
}
inline ::std::string* AskAddMatchTeam::release_friendsnickname() {
  clear_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friendsnickname_;
    friendsnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMatchTeam::set_allocated_friendsnickname(::std::string* friendsnickname) {
  if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendsnickname_;
  }
  if (friendsnickname) {
    set_has_friendsnickname();
    friendsnickname_ = friendsnickname;
  } else {
    clear_has_friendsnickname();
    friendsnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskAddMatchTeam.friendsNickName)
}

// -------------------------------------------------------------------

// AskRemoveMatchTeam

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveMatchTeam];
inline bool AskRemoveMatchTeam::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRemoveMatchTeam::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRemoveMatchTeam::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRemoveMatchTeam::clear_msgnum() {
  msgnum_ = 8282;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskRemoveMatchTeam::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRemoveMatchTeam.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskRemoveMatchTeam::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRemoveMatchTeam.msgnum)
}

// -------------------------------------------------------------------

// AskInviteJoinMatchTeam

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteJoinMatchTeam];
inline bool AskInviteJoinMatchTeam::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskInviteJoinMatchTeam::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskInviteJoinMatchTeam::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskInviteJoinMatchTeam::clear_msgnum() {
  msgnum_ = 8283;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskInviteJoinMatchTeam::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskInviteJoinMatchTeam.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskInviteJoinMatchTeam::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskInviteJoinMatchTeam.msgnum)
}

// optional string friendsNickName = 2;
inline bool AskInviteJoinMatchTeam::has_friendsnickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskInviteJoinMatchTeam::set_has_friendsnickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskInviteJoinMatchTeam::clear_has_friendsnickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskInviteJoinMatchTeam::clear_friendsnickname() {
  if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_->clear();
  }
  clear_has_friendsnickname();
}
inline const ::std::string& AskInviteJoinMatchTeam::friendsnickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskInviteJoinMatchTeam.friendsNickName)
  return *friendsnickname_;
}
inline void AskInviteJoinMatchTeam::set_friendsnickname(const ::std::string& value) {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  friendsnickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskInviteJoinMatchTeam.friendsNickName)
}
inline void AskInviteJoinMatchTeam::set_friendsnickname(const char* value) {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  friendsnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskInviteJoinMatchTeam.friendsNickName)
}
inline void AskInviteJoinMatchTeam::set_friendsnickname(const char* value, size_t size) {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  friendsnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskInviteJoinMatchTeam.friendsNickName)
}
inline ::std::string* AskInviteJoinMatchTeam::mutable_friendsnickname() {
  set_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendsnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskInviteJoinMatchTeam.friendsNickName)
  return friendsnickname_;
}
inline ::std::string* AskInviteJoinMatchTeam::release_friendsnickname() {
  clear_has_friendsnickname();
  if (friendsnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friendsnickname_;
    friendsnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskInviteJoinMatchTeam::set_allocated_friendsnickname(::std::string* friendsnickname) {
  if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendsnickname_;
  }
  if (friendsnickname) {
    set_has_friendsnickname();
    friendsnickname_ = friendsnickname;
  } else {
    clear_has_friendsnickname();
    friendsnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskInviteJoinMatchTeam.friendsNickName)
}

// -------------------------------------------------------------------

// AskStartMatch

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartMatch];
inline bool AskStartMatch::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskStartMatch::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskStartMatch::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskStartMatch::clear_msgnum() {
  msgnum_ = 8284;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskStartMatch::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskStartMatch.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskStartMatch::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskStartMatch.msgnum)
}

// -------------------------------------------------------------------

// AskStopMatch

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopMatch];
inline bool AskStopMatch::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskStopMatch::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskStopMatch::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskStopMatch::clear_msgnum() {
  msgnum_ = 8285;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskStopMatch::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskStopMatch.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskStopMatch::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskStopMatch.msgnum)
}

// -------------------------------------------------------------------

// RequestMatchTeamList

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_RequestMatchTeamList];
inline bool RequestMatchTeamList::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestMatchTeamList::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestMatchTeamList::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestMatchTeamList::clear_msgnum() {
  msgnum_ = 8287;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum RequestMatchTeamList::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.RequestMatchTeamList.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void RequestMatchTeamList::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.RequestMatchTeamList.msgnum)
}

// -------------------------------------------------------------------

// AskGoodscfg

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGoodscfg];
inline bool AskGoodscfg::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskGoodscfg::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskGoodscfg::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskGoodscfg::clear_msgnum() {
  msgnum_ = 8270;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskGoodscfg::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskGoodscfg.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskGoodscfg::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskGoodscfg.msgnum)
}

// -------------------------------------------------------------------

// AskCSCreateGuideBattle

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideBattle];
inline bool AskCSCreateGuideBattle::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskCSCreateGuideBattle::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskCSCreateGuideBattle::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskCSCreateGuideBattle::clear_msgnum() {
  msgnum_ = 8240;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskCSCreateGuideBattle::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCSCreateGuideBattle.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskCSCreateGuideBattle::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCSCreateGuideBattle.msgnum)
}

// optional int32 mapid = 2;
inline bool AskCSCreateGuideBattle::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskCSCreateGuideBattle::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskCSCreateGuideBattle::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskCSCreateGuideBattle::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 AskCSCreateGuideBattle::mapid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCSCreateGuideBattle.mapid)
  return mapid_;
}
inline void AskCSCreateGuideBattle::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCSCreateGuideBattle.mapid)
}

// optional .GCToCS.AskCSCreateGuideBattle.guidetype ntype = 3;
inline bool AskCSCreateGuideBattle::has_ntype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskCSCreateGuideBattle::set_has_ntype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskCSCreateGuideBattle::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskCSCreateGuideBattle::clear_ntype() {
  ntype_ = 1;
  clear_has_ntype();
}
inline ::GCToCS::AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle::ntype() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCSCreateGuideBattle.ntype)
  return static_cast< ::GCToCS::AskCSCreateGuideBattle_guidetype >(ntype_);
}
inline void AskCSCreateGuideBattle::set_ntype(::GCToCS::AskCSCreateGuideBattle_guidetype value) {
  assert(::GCToCS::AskCSCreateGuideBattle_guidetype_IsValid(value));
  set_has_ntype();
  ntype_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCSCreateGuideBattle.ntype)
}

// -------------------------------------------------------------------

// AskQuickBattle

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQuickBattle];
inline bool AskQuickBattle::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskQuickBattle::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskQuickBattle::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskQuickBattle::clear_msgnum() {
  msgnum_ = 8250;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskQuickBattle::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskQuickBattle.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskQuickBattle::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskQuickBattle.msgnum)
}

// optional int32 mapid = 2;
inline bool AskQuickBattle::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskQuickBattle::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskQuickBattle::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskQuickBattle::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 AskQuickBattle::mapid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskQuickBattle.mapid)
  return mapid_;
}
inline void AskQuickBattle::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskQuickBattle.mapid)
}

// -------------------------------------------------------------------

// AskStopQuickBattle

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopQuickBattle];
inline bool AskStopQuickBattle::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskStopQuickBattle::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskStopQuickBattle::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskStopQuickBattle::clear_msgnum() {
  msgnum_ = 8251;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskStopQuickBattle::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskStopQuickBattle.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskStopQuickBattle::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskStopQuickBattle.msgnum)
}

// -------------------------------------------------------------------

// AskCreateRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateRoom];
inline bool AskCreateRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskCreateRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskCreateRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskCreateRoom::clear_msgnum() {
  msgnum_ = 8260;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskCreateRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCreateRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskCreateRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCreateRoom.msgnum)
}

// optional int32 mapid = 2;
inline bool AskCreateRoom::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskCreateRoom::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskCreateRoom::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskCreateRoom::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 AskCreateRoom::mapid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCreateRoom.mapid)
  return mapid_;
}
inline void AskCreateRoom::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCreateRoom.mapid)
}

// optional string passwd = 3;
inline bool AskCreateRoom::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskCreateRoom::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskCreateRoom::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskCreateRoom::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& AskCreateRoom::passwd() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCreateRoom.passwd)
  return *passwd_;
}
inline void AskCreateRoom::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskCreateRoom.passwd)
}
inline void AskCreateRoom::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskCreateRoom.passwd)
}
inline void AskCreateRoom::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskCreateRoom.passwd)
}
inline ::std::string* AskCreateRoom::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskCreateRoom.passwd)
  return passwd_;
}
inline ::std::string* AskCreateRoom::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskCreateRoom::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskCreateRoom.passwd)
}

// -------------------------------------------------------------------

// AskAddRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddRoom];
inline bool AskAddRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskAddRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskAddRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskAddRoom::clear_msgnum() {
  msgnum_ = 8261;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskAddRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskAddRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddRoom.msgnum)
}

// optional uint64 battleid = 2;
inline bool AskAddRoom::has_battleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskAddRoom::set_has_battleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskAddRoom::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskAddRoom::clear_battleid() {
  battleid_ = GOOGLE_ULONGLONG(0);
  clear_has_battleid();
}
inline ::google::protobuf::uint64 AskAddRoom::battleid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddRoom.battleid)
  return battleid_;
}
inline void AskAddRoom::set_battleid(::google::protobuf::uint64 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddRoom.battleid)
}

// optional string passwd = 3;
inline bool AskAddRoom::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskAddRoom::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskAddRoom::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskAddRoom::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& AskAddRoom::passwd() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddRoom.passwd)
  return *passwd_;
}
inline void AskAddRoom::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskAddRoom.passwd)
}
inline void AskAddRoom::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskAddRoom.passwd)
}
inline void AskAddRoom::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskAddRoom.passwd)
}
inline ::std::string* AskAddRoom::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskAddRoom.passwd)
  return passwd_;
}
inline ::std::string* AskAddRoom::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddRoom::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskAddRoom.passwd)
}

// -------------------------------------------------------------------

// AskLeaveRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLeaveRoom];
inline bool AskLeaveRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskLeaveRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskLeaveRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskLeaveRoom::clear_msgnum() {
  msgnum_ = 8262;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskLeaveRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskLeaveRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskLeaveRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskLeaveRoom.msgnum)
}

// -------------------------------------------------------------------

// AskChangeRoomSeat

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeRoomSeat];
inline bool AskChangeRoomSeat::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskChangeRoomSeat::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskChangeRoomSeat::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskChangeRoomSeat::clear_msgnum() {
  msgnum_ = 8263;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskChangeRoomSeat::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskChangeRoomSeat.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskChangeRoomSeat::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskChangeRoomSeat.msgnum)
}

// optional int32 newpos = 2;
inline bool AskChangeRoomSeat::has_newpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskChangeRoomSeat::set_has_newpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskChangeRoomSeat::clear_has_newpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskChangeRoomSeat::clear_newpos() {
  newpos_ = 0;
  clear_has_newpos();
}
inline ::google::protobuf::int32 AskChangeRoomSeat::newpos() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskChangeRoomSeat.newpos)
  return newpos_;
}
inline void AskChangeRoomSeat::set_newpos(::google::protobuf::int32 value) {
  set_has_newpos();
  newpos_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskChangeRoomSeat.newpos)
}

// -------------------------------------------------------------------

// AskReadyRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReadyRoom];
inline bool AskReadyRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskReadyRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskReadyRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskReadyRoom::clear_msgnum() {
  msgnum_ = 8264;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskReadyRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskReadyRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskReadyRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskReadyRoom.msgnum)
}

// -------------------------------------------------------------------

// AskCancelRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCancelRoom];
inline bool AskCancelRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskCancelRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskCancelRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskCancelRoom::clear_msgnum() {
  msgnum_ = 8265;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskCancelRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCancelRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskCancelRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCancelRoom.msgnum)
}

// -------------------------------------------------------------------

// AskStartRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartRoom];
inline bool AskStartRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskStartRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskStartRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskStartRoom::clear_msgnum() {
  msgnum_ = 8266;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskStartRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskStartRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskStartRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskStartRoom.msgnum)
}

// -------------------------------------------------------------------

// AskReEnterRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReEnterRoom];
inline bool AskReEnterRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskReEnterRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskReEnterRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskReEnterRoom::clear_msgnum() {
  msgnum_ = 8268;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskReEnterRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskReEnterRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskReEnterRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskReEnterRoom.msgnum)
}

// -------------------------------------------------------------------

// AskChatInRoom

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChatInRoom];
inline bool AskChatInRoom::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskChatInRoom::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskChatInRoom::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskChatInRoom::clear_msgnum() {
  msgnum_ = 8267;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskChatInRoom::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskChatInRoom.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskChatInRoom::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskChatInRoom.msgnum)
}

// optional string chat = 2;
inline bool AskChatInRoom::has_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskChatInRoom::set_has_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskChatInRoom::clear_has_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskChatInRoom::clear_chat() {
  if (chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chat_->clear();
  }
  clear_has_chat();
}
inline const ::std::string& AskChatInRoom::chat() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskChatInRoom.chat)
  return *chat_;
}
inline void AskChatInRoom::set_chat(const ::std::string& value) {
  set_has_chat();
  if (chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chat_ = new ::std::string;
  }
  chat_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskChatInRoom.chat)
}
inline void AskChatInRoom::set_chat(const char* value) {
  set_has_chat();
  if (chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chat_ = new ::std::string;
  }
  chat_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskChatInRoom.chat)
}
inline void AskChatInRoom::set_chat(const char* value, size_t size) {
  set_has_chat();
  if (chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chat_ = new ::std::string;
  }
  chat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskChatInRoom.chat)
}
inline ::std::string* AskChatInRoom::mutable_chat() {
  set_has_chat();
  if (chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskChatInRoom.chat)
  return chat_;
}
inline ::std::string* AskChatInRoom::release_chat() {
  clear_has_chat();
  if (chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chat_;
    chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskChatInRoom::set_allocated_chat(::std::string* chat) {
  if (chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chat_;
  }
  if (chat) {
    set_has_chat();
    chat_ = chat;
  } else {
    clear_has_chat();
    chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskChatInRoom.chat)
}

// -------------------------------------------------------------------

// AskGetMailGift

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGetMailGift];
inline bool AskGetMailGift::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskGetMailGift::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskGetMailGift::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskGetMailGift::clear_msgnum() {
  msgnum_ = 8231;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskGetMailGift::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskGetMailGift.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskGetMailGift::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskGetMailGift.msgnum)
}

// optional int32 mailId = 2;
inline bool AskGetMailGift::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskGetMailGift::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskGetMailGift::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskGetMailGift::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 AskGetMailGift::mailid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskGetMailGift.mailId)
  return mailid_;
}
inline void AskGetMailGift::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskGetMailGift.mailId)
}

// -------------------------------------------------------------------

// AskMailInfo

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskMailInfo];
inline bool AskMailInfo::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskMailInfo::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskMailInfo::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskMailInfo::clear_msgnum() {
  msgnum_ = 8230;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskMailInfo::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskMailInfo.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskMailInfo::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskMailInfo.msgnum)
}

// optional int32 mailId = 2;
inline bool AskMailInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskMailInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskMailInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskMailInfo::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 AskMailInfo::mailid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskMailInfo.mailId)
  return mailid_;
}
inline void AskMailInfo::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskMailInfo.mailId)
}

// -------------------------------------------------------------------

// AskBuyGoods

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBuyGoods];
inline bool AskBuyGoods::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskBuyGoods::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskBuyGoods::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskBuyGoods::clear_msgnum() {
  msgnum_ = 8224;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskBuyGoods::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskBuyGoods.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskBuyGoods::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskBuyGoods.msgnum)
}

// optional int32 commondityid = 2;
inline bool AskBuyGoods::has_commondityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskBuyGoods::set_has_commondityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskBuyGoods::clear_has_commondityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskBuyGoods::clear_commondityid() {
  commondityid_ = 0;
  clear_has_commondityid();
}
inline ::google::protobuf::int32 AskBuyGoods::commondityid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskBuyGoods.commondityid)
  return commondityid_;
}
inline void AskBuyGoods::set_commondityid(::google::protobuf::int32 value) {
  set_has_commondityid();
  commondityid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskBuyGoods.commondityid)
}

// optional int32 consumetype = 3;
inline bool AskBuyGoods::has_consumetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskBuyGoods::set_has_consumetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskBuyGoods::clear_has_consumetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskBuyGoods::clear_consumetype() {
  consumetype_ = 0;
  clear_has_consumetype();
}
inline ::google::protobuf::int32 AskBuyGoods::consumetype() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskBuyGoods.consumetype)
  return consumetype_;
}
inline void AskBuyGoods::set_consumetype(::google::protobuf::int32 value) {
  set_has_consumetype();
  consumetype_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskBuyGoods.consumetype)
}

// optional uint32 num = 4;
inline bool AskBuyGoods::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskBuyGoods::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskBuyGoods::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskBuyGoods::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 AskBuyGoods::num() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskBuyGoods.num)
  return num_;
}
inline void AskBuyGoods::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskBuyGoods.num)
}

// -------------------------------------------------------------------

// UserAskGetCLReward

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UserAskGetCLReward];
inline bool UserAskGetCLReward::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAskGetCLReward::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAskGetCLReward::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAskGetCLReward::clear_msgnum() {
  msgnum_ = 8197;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum UserAskGetCLReward::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.UserAskGetCLReward.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void UserAskGetCLReward::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.UserAskGetCLReward.msgnum)
}

// -------------------------------------------------------------------

// Notice

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_Notice];
inline bool Notice::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice::clear_msgnum() {
  msgnum_ = 8200;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum Notice::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.Notice.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void Notice::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.Notice.msgnum)
}

// optional .GCToCS.notice_type type = 2;
inline bool Notice::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notice::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notice::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notice::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::GCToCS::notice_type Notice::type() const {
  // @@protoc_insertion_point(field_get:GCToCS.Notice.type)
  return static_cast< ::GCToCS::notice_type >(type_);
}
inline void Notice::set_type(::GCToCS::notice_type value) {
  assert(::GCToCS::notice_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.Notice.type)
}

// optional string notice = 3;
inline bool Notice::has_notice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notice::set_has_notice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notice::clear_has_notice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notice::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Notice::notice() const {
  // @@protoc_insertion_point(field_get:GCToCS.Notice.notice)
  return *notice_;
}
inline void Notice::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.Notice.notice)
}
inline void Notice::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.Notice.notice)
}
inline void Notice::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.Notice.notice)
}
inline ::std::string* Notice::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.Notice.notice)
  return notice_;
}
inline ::std::string* Notice::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Notice::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.Notice.notice)
}

// -------------------------------------------------------------------

// AskCurtNotice

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCurtNotice];
inline bool AskCurtNotice::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskCurtNotice::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskCurtNotice::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskCurtNotice::clear_msgnum() {
  msgnum_ = 8201;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskCurtNotice::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCurtNotice.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskCurtNotice::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCurtNotice.msgnum)
}

// optional .GCToCS.notice_type type = 2;
inline bool AskCurtNotice::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskCurtNotice::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskCurtNotice::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskCurtNotice::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::GCToCS::notice_type AskCurtNotice::type() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCurtNotice.type)
  return static_cast< ::GCToCS::notice_type >(type_);
}
inline void AskCurtNotice::set_type(::GCToCS::notice_type value) {
  assert(::GCToCS::notice_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCurtNotice.type)
}

// -------------------------------------------------------------------

// CompleteInfo

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskComleteUserInfo];
inline bool CompleteInfo::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompleteInfo::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompleteInfo::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompleteInfo::clear_msgnum() {
  msgnum_ = 8195;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum CompleteInfo::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.CompleteInfo.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void CompleteInfo::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CompleteInfo.msgnum)
}

// optional string nickname = 2;
inline bool CompleteInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompleteInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompleteInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompleteInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CompleteInfo::nickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.CompleteInfo.nickname)
  return *nickname_;
}
inline void CompleteInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.CompleteInfo.nickname)
}
inline void CompleteInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.CompleteInfo.nickname)
}
inline void CompleteInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.CompleteInfo.nickname)
}
inline ::std::string* CompleteInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.CompleteInfo.nickname)
  return nickname_;
}
inline ::std::string* CompleteInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompleteInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.CompleteInfo.nickname)
}

// optional int32 headid = 3;
inline bool CompleteInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompleteInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompleteInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompleteInfo::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 CompleteInfo::headid() const {
  // @@protoc_insertion_point(field_get:GCToCS.CompleteInfo.headid)
  return headid_;
}
inline void CompleteInfo::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CompleteInfo.headid)
}

// optional int32 sex = 4;
inline bool CompleteInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompleteInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompleteInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompleteInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 CompleteInfo::sex() const {
  // @@protoc_insertion_point(field_get:GCToCS.CompleteInfo.sex)
  return sex_;
}
inline void CompleteInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.CompleteInfo.sex)
}

// -------------------------------------------------------------------

// AskAddToSNSList

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSList];
inline bool AskAddToSNSList::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskAddToSNSList::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskAddToSNSList::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskAddToSNSList::clear_msgnum() {
  msgnum_ = 8210;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskAddToSNSList::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddToSNSList.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskAddToSNSList::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddToSNSList.msgnum)
}

// optional string nickname = 2;
inline bool AskAddToSNSList::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskAddToSNSList::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskAddToSNSList::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskAddToSNSList::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& AskAddToSNSList::nickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddToSNSList.nickname)
  return *nickname_;
}
inline void AskAddToSNSList::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskAddToSNSList.nickname)
}
inline void AskAddToSNSList::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskAddToSNSList.nickname)
}
inline void AskAddToSNSList::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskAddToSNSList.nickname)
}
inline ::std::string* AskAddToSNSList::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskAddToSNSList.nickname)
  return nickname_;
}
inline ::std::string* AskAddToSNSList::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddToSNSList::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskAddToSNSList.nickname)
}

// optional int32 type = 3;
inline bool AskAddToSNSList::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskAddToSNSList::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskAddToSNSList::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskAddToSNSList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AskAddToSNSList::type() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddToSNSList.type)
  return type_;
}
inline void AskAddToSNSList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddToSNSList.type)
}

// -------------------------------------------------------------------

// AskCanInviteFriends

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCanInviteFriends];
inline bool AskCanInviteFriends::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskCanInviteFriends::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskCanInviteFriends::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskCanInviteFriends::clear_msgnum() {
  msgnum_ = 8218;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskCanInviteFriends::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskCanInviteFriends.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskCanInviteFriends::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskCanInviteFriends.msgnum)
}

// -------------------------------------------------------------------

// AskAddToSNSListByID

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSListByID];
inline bool AskAddToSNSListByID::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskAddToSNSListByID::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskAddToSNSListByID::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskAddToSNSListByID::clear_msgnum() {
  msgnum_ = 8217;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskAddToSNSListByID::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddToSNSListByID.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskAddToSNSListByID::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddToSNSListByID.msgnum)
}

// optional uint64 userid = 2;
inline bool AskAddToSNSListByID::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskAddToSNSListByID::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskAddToSNSListByID::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskAddToSNSListByID::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 AskAddToSNSListByID::userid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddToSNSListByID.userid)
  return userid_;
}
inline void AskAddToSNSListByID::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddToSNSListByID.userid)
}

// optional int32 type = 3;
inline bool AskAddToSNSListByID::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskAddToSNSListByID::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskAddToSNSListByID::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskAddToSNSListByID::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AskAddToSNSListByID::type() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskAddToSNSListByID.type)
  return type_;
}
inline void AskAddToSNSListByID::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskAddToSNSListByID.type)
}

// -------------------------------------------------------------------

// AskRemoveFromSNSList

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveFromSNSList];
inline bool AskRemoveFromSNSList::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRemoveFromSNSList::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRemoveFromSNSList::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRemoveFromSNSList::clear_msgnum() {
  msgnum_ = 8211;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskRemoveFromSNSList::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRemoveFromSNSList.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskRemoveFromSNSList::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRemoveFromSNSList.msgnum)
}

// optional uint64 guididx = 2;
inline bool AskRemoveFromSNSList::has_guididx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskRemoveFromSNSList::set_has_guididx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskRemoveFromSNSList::clear_has_guididx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskRemoveFromSNSList::clear_guididx() {
  guididx_ = GOOGLE_ULONGLONG(0);
  clear_has_guididx();
}
inline ::google::protobuf::uint64 AskRemoveFromSNSList::guididx() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRemoveFromSNSList.guididx)
  return guididx_;
}
inline void AskRemoveFromSNSList::set_guididx(::google::protobuf::uint64 value) {
  set_has_guididx();
  guididx_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRemoveFromSNSList.guididx)
}

// optional int32 type = 3;
inline bool AskRemoveFromSNSList::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskRemoveFromSNSList::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskRemoveFromSNSList::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskRemoveFromSNSList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AskRemoveFromSNSList::type() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRemoveFromSNSList.type)
  return type_;
}
inline void AskRemoveFromSNSList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRemoveFromSNSList.type)
}

// -------------------------------------------------------------------

// AskSendMsgToUser

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskSendMsgToUser];
inline bool AskSendMsgToUser::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskSendMsgToUser::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskSendMsgToUser::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskSendMsgToUser::clear_msgnum() {
  msgnum_ = 8212;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskSendMsgToUser::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskSendMsgToUser.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskSendMsgToUser::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskSendMsgToUser.msgnum)
}

// optional uint64 guididx = 2;
inline bool AskSendMsgToUser::has_guididx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskSendMsgToUser::set_has_guididx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskSendMsgToUser::clear_has_guididx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskSendMsgToUser::clear_guididx() {
  guididx_ = GOOGLE_ULONGLONG(0);
  clear_has_guididx();
}
inline ::google::protobuf::uint64 AskSendMsgToUser::guididx() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskSendMsgToUser.guididx)
  return guididx_;
}
inline void AskSendMsgToUser::set_guididx(::google::protobuf::uint64 value) {
  set_has_guididx();
  guididx_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskSendMsgToUser.guididx)
}

// optional string contents = 3;
inline bool AskSendMsgToUser::has_contents() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskSendMsgToUser::set_has_contents() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskSendMsgToUser::clear_has_contents() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskSendMsgToUser::clear_contents() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& AskSendMsgToUser::contents() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskSendMsgToUser.contents)
  return *contents_;
}
inline void AskSendMsgToUser::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskSendMsgToUser.contents)
}
inline void AskSendMsgToUser::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskSendMsgToUser.contents)
}
inline void AskSendMsgToUser::set_contents(const char* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskSendMsgToUser.contents)
}
inline ::std::string* AskSendMsgToUser::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskSendMsgToUser.contents)
  return contents_;
}
inline ::std::string* AskSendMsgToUser::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskSendMsgToUser::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskSendMsgToUser.contents)
}

// -------------------------------------------------------------------

// AskInviteFriendsToBattle

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteFriendsToBattle];
inline bool AskInviteFriendsToBattle::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskInviteFriendsToBattle::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskInviteFriendsToBattle::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskInviteFriendsToBattle::clear_msgnum() {
  msgnum_ = 8213;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskInviteFriendsToBattle::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskInviteFriendsToBattle.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskInviteFriendsToBattle::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskInviteFriendsToBattle.msgnum)
}

// optional int32 battleid = 2;
inline bool AskInviteFriendsToBattle::has_battleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskInviteFriendsToBattle::set_has_battleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskInviteFriendsToBattle::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskInviteFriendsToBattle::clear_battleid() {
  battleid_ = 0;
  clear_has_battleid();
}
inline ::google::protobuf::int32 AskInviteFriendsToBattle::battleid() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskInviteFriendsToBattle.battleid)
  return battleid_;
}
inline void AskInviteFriendsToBattle::set_battleid(::google::protobuf::int32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskInviteFriendsToBattle.battleid)
}

// optional uint64 guididx = 3;
inline bool AskInviteFriendsToBattle::has_guididx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskInviteFriendsToBattle::set_has_guididx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskInviteFriendsToBattle::clear_has_guididx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskInviteFriendsToBattle::clear_guididx() {
  guididx_ = GOOGLE_ULONGLONG(0);
  clear_has_guididx();
}
inline ::google::protobuf::uint64 AskInviteFriendsToBattle::guididx() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskInviteFriendsToBattle.guididx)
  return guididx_;
}
inline void AskInviteFriendsToBattle::set_guididx(::google::protobuf::uint64 value) {
  set_has_guididx();
  guididx_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskInviteFriendsToBattle.guididx)
}

// -------------------------------------------------------------------

// AskQueryUserByNickName

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQueryUserByNickName];
inline bool AskQueryUserByNickName::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskQueryUserByNickName::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskQueryUserByNickName::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskQueryUserByNickName::clear_msgnum() {
  msgnum_ = 8214;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskQueryUserByNickName::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskQueryUserByNickName.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskQueryUserByNickName::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskQueryUserByNickName.msgnum)
}

// optional string nickname = 2;
inline bool AskQueryUserByNickName::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskQueryUserByNickName::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskQueryUserByNickName::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskQueryUserByNickName::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& AskQueryUserByNickName::nickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskQueryUserByNickName.nickname)
  return *nickname_;
}
inline void AskQueryUserByNickName::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.AskQueryUserByNickName.nickname)
}
inline void AskQueryUserByNickName::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.AskQueryUserByNickName.nickname)
}
inline void AskQueryUserByNickName::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.AskQueryUserByNickName.nickname)
}
inline ::std::string* AskQueryUserByNickName::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.AskQueryUserByNickName.nickname)
  return nickname_;
}
inline ::std::string* AskQueryUserByNickName::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskQueryUserByNickName::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.AskQueryUserByNickName.nickname)
}

// -------------------------------------------------------------------

// GCReplyAddFriendRequst

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyAddFriendRequst];
inline bool GCReplyAddFriendRequst::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCReplyAddFriendRequst::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCReplyAddFriendRequst::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCReplyAddFriendRequst::clear_msgnum() {
  msgnum_ = 8215;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum GCReplyAddFriendRequst::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.GCReplyAddFriendRequst.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void GCReplyAddFriendRequst::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GCReplyAddFriendRequst.msgnum)
}

// optional uint64 guididx = 2;
inline bool GCReplyAddFriendRequst::has_guididx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCReplyAddFriendRequst::set_has_guididx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCReplyAddFriendRequst::clear_has_guididx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCReplyAddFriendRequst::clear_guididx() {
  guididx_ = GOOGLE_ULONGLONG(0);
  clear_has_guididx();
}
inline ::google::protobuf::uint64 GCReplyAddFriendRequst::guididx() const {
  // @@protoc_insertion_point(field_get:GCToCS.GCReplyAddFriendRequst.guididx)
  return guididx_;
}
inline void GCReplyAddFriendRequst::set_guididx(::google::protobuf::uint64 value) {
  set_has_guididx();
  guididx_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GCReplyAddFriendRequst.guididx)
}

// optional int32 reply = 3;
inline bool GCReplyAddFriendRequst::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCReplyAddFriendRequst::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCReplyAddFriendRequst::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCReplyAddFriendRequst::clear_reply() {
  reply_ = 0;
  clear_has_reply();
}
inline ::google::protobuf::int32 GCReplyAddFriendRequst::reply() const {
  // @@protoc_insertion_point(field_get:GCToCS.GCReplyAddFriendRequst.reply)
  return reply_;
}
inline void GCReplyAddFriendRequst::set_reply(::google::protobuf::int32 value) {
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GCReplyAddFriendRequst.reply)
}

// -------------------------------------------------------------------

// GuideCSStepComp

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CompCSGuideStepId];
inline bool GuideCSStepComp::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuideCSStepComp::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuideCSStepComp::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuideCSStepComp::clear_msgnum() {
  msgnum_ = 8242;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum GuideCSStepComp::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.GuideCSStepComp.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void GuideCSStepComp::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GuideCSStepComp.msgnum)
}

// optional int32 guidepart = 2;
inline bool GuideCSStepComp::has_guidepart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuideCSStepComp::set_has_guidepart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuideCSStepComp::clear_has_guidepart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuideCSStepComp::clear_guidepart() {
  guidepart_ = 0;
  clear_has_guidepart();
}
inline ::google::protobuf::int32 GuideCSStepComp::guidepart() const {
  // @@protoc_insertion_point(field_get:GCToCS.GuideCSStepComp.guidepart)
  return guidepart_;
}
inline void GuideCSStepComp::set_guidepart(::google::protobuf::int32 value) {
  set_has_guidepart();
  guidepart_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GuideCSStepComp.guidepart)
}

// optional bool bcomp = 3;
inline bool GuideCSStepComp::has_bcomp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuideCSStepComp::set_has_bcomp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuideCSStepComp::clear_has_bcomp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuideCSStepComp::clear_bcomp() {
  bcomp_ = false;
  clear_has_bcomp();
}
inline bool GuideCSStepComp::bcomp() const {
  // @@protoc_insertion_point(field_get:GCToCS.GuideCSStepComp.bcomp)
  return bcomp_;
}
inline void GuideCSStepComp::set_bcomp(bool value) {
  set_has_bcomp();
  bcomp_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GuideCSStepComp.bcomp)
}

// -------------------------------------------------------------------

// GCReplyInviteToBattle

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyInviteToBattle];
inline bool GCReplyInviteToBattle::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCReplyInviteToBattle::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCReplyInviteToBattle::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCReplyInviteToBattle::clear_msgnum() {
  msgnum_ = 8216;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum GCReplyInviteToBattle::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.GCReplyInviteToBattle.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void GCReplyInviteToBattle::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.GCReplyInviteToBattle.msgnum)
}

// optional string nickname = 2;
inline bool GCReplyInviteToBattle::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCReplyInviteToBattle::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCReplyInviteToBattle::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCReplyInviteToBattle::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& GCReplyInviteToBattle::nickname() const {
  // @@protoc_insertion_point(field_get:GCToCS.GCReplyInviteToBattle.nickname)
  return *nickname_;
}
inline void GCReplyInviteToBattle::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.GCReplyInviteToBattle.nickname)
}
inline void GCReplyInviteToBattle::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.GCReplyInviteToBattle.nickname)
}
inline void GCReplyInviteToBattle::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.GCReplyInviteToBattle.nickname)
}
inline ::std::string* GCReplyInviteToBattle::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.GCReplyInviteToBattle.nickname)
  return nickname_;
}
inline ::std::string* GCReplyInviteToBattle::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCReplyInviteToBattle::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.GCReplyInviteToBattle.nickname)
}

// -------------------------------------------------------------------

// Login

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLogin];
inline bool Login::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_msgnum() {
  msgnum_ = 8193;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum Login::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void Login::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.Login.msgnum)
}

// optional int32 sdk = 2;
inline bool Login::has_sdk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_sdk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_sdk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_sdk() {
  sdk_ = 0;
  clear_has_sdk();
}
inline ::google::protobuf::int32 Login::sdk() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.sdk)
  return sdk_;
}
inline void Login::set_sdk(::google::protobuf::int32 value) {
  set_has_sdk();
  sdk_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.Login.sdk)
}

// optional int32 platform = 3;
inline bool Login::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 Login::platform() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.platform)
  return platform_;
}
inline void Login::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.Login.platform)
}

// optional string name = 4;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.name)
  return *name_;
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.Login.name)
}
inline void Login::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.Login.name)
}
inline void Login::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.Login.name)
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.Login.name)
  return name_;
}
inline ::std::string* Login::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.Login.name)
}

// optional string passwd = 5;
inline bool Login::has_passwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login::set_has_passwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& Login::passwd() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.passwd)
  return *passwd_;
}
inline void Login::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.Login.passwd)
}
inline void Login::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.Login.passwd)
}
inline void Login::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.Login.passwd)
}
inline ::std::string* Login::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.Login.passwd)
  return passwd_;
}
inline ::std::string* Login::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.Login.passwd)
}

// optional string ipaddress = 6;
inline bool Login::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login::clear_ipaddress() {
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_->clear();
  }
  clear_has_ipaddress();
}
inline const ::std::string& Login::ipaddress() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.ipaddress)
  return *ipaddress_;
}
inline void Login::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.Login.ipaddress)
}
inline void Login::set_ipaddress(const char* value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.Login.ipaddress)
}
inline void Login::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.Login.ipaddress)
}
inline ::std::string* Login::mutable_ipaddress() {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.Login.ipaddress)
  return ipaddress_;
}
inline ::std::string* Login::release_ipaddress() {
  clear_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipaddress_;
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipaddress_;
  }
  if (ipaddress) {
    set_has_ipaddress();
    ipaddress_ = ipaddress;
  } else {
    clear_has_ipaddress();
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.Login.ipaddress)
}

// optional string equimentid = 7;
inline bool Login::has_equimentid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Login::set_has_equimentid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Login::clear_has_equimentid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Login::clear_equimentid() {
  if (equimentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equimentid_->clear();
  }
  clear_has_equimentid();
}
inline const ::std::string& Login::equimentid() const {
  // @@protoc_insertion_point(field_get:GCToCS.Login.equimentid)
  return *equimentid_;
}
inline void Login::set_equimentid(const ::std::string& value) {
  set_has_equimentid();
  if (equimentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equimentid_ = new ::std::string;
  }
  equimentid_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.Login.equimentid)
}
inline void Login::set_equimentid(const char* value) {
  set_has_equimentid();
  if (equimentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equimentid_ = new ::std::string;
  }
  equimentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.Login.equimentid)
}
inline void Login::set_equimentid(const char* value, size_t size) {
  set_has_equimentid();
  if (equimentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equimentid_ = new ::std::string;
  }
  equimentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.Login.equimentid)
}
inline ::std::string* Login::mutable_equimentid() {
  set_has_equimentid();
  if (equimentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equimentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.Login.equimentid)
  return equimentid_;
}
inline ::std::string* Login::release_equimentid() {
  clear_has_equimentid();
  if (equimentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = equimentid_;
    equimentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_equimentid(::std::string* equimentid) {
  if (equimentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equimentid_;
  }
  if (equimentid) {
    set_has_equimentid();
    equimentid_ = equimentid;
  } else {
    clear_has_equimentid();
    equimentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.Login.equimentid)
}

// -------------------------------------------------------------------

// UserGameInfo

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskUserGameInfo];
inline bool UserGameInfo::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserGameInfo::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserGameInfo::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserGameInfo::clear_msgnum() {
  msgnum_ = 8196;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum UserGameInfo::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.UserGameInfo.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void UserGameInfo::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.UserGameInfo.msgnum)
}

// -------------------------------------------------------------------

// BuyRunes

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_BUYRunes];
inline bool BuyRunes::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyRunes::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyRunes::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyRunes::clear_msgnum() {
  msgnum_ = 8220;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum BuyRunes::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.BuyRunes.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void BuyRunes::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.BuyRunes.msgnum)
}

// optional int32 typeid = 2;
inline bool BuyRunes::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyRunes::set_has_typeid_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyRunes::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyRunes::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 BuyRunes::typeid_() const {
  // @@protoc_insertion_point(field_get:GCToCS.BuyRunes.typeid)
  return typeid__;
}
inline void BuyRunes::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:GCToCS.BuyRunes.typeid)
}

// -------------------------------------------------------------------

// EuipRunes

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_EuipRunes];
inline bool EuipRunes::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EuipRunes::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EuipRunes::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EuipRunes::clear_msgnum() {
  msgnum_ = 8221;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum EuipRunes::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.EuipRunes.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void EuipRunes::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.EuipRunes.msgnum)
}

// optional uint32 runeid = 2;
inline bool EuipRunes::has_runeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EuipRunes::set_has_runeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EuipRunes::clear_has_runeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EuipRunes::clear_runeid() {
  runeid_ = 0u;
  clear_has_runeid();
}
inline ::google::protobuf::uint32 EuipRunes::runeid() const {
  // @@protoc_insertion_point(field_get:GCToCS.EuipRunes.runeid)
  return runeid_;
}
inline void EuipRunes::set_runeid(::google::protobuf::uint32 value) {
  set_has_runeid();
  runeid_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.EuipRunes.runeid)
}

// optional int32 topos = 3;
inline bool EuipRunes::has_topos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EuipRunes::set_has_topos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EuipRunes::clear_has_topos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EuipRunes::clear_topos() {
  topos_ = 0;
  clear_has_topos();
}
inline ::google::protobuf::int32 EuipRunes::topos() const {
  // @@protoc_insertion_point(field_get:GCToCS.EuipRunes.topos)
  return topos_;
}
inline void EuipRunes::set_topos(::google::protobuf::int32 value) {
  set_has_topos();
  topos_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.EuipRunes.topos)
}

// -------------------------------------------------------------------

// UnEuipRunes

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UnloadRunes];
inline bool UnEuipRunes::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnEuipRunes::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnEuipRunes::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnEuipRunes::clear_msgnum() {
  msgnum_ = 8222;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum UnEuipRunes::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.UnEuipRunes.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void UnEuipRunes::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.UnEuipRunes.msgnum)
}

// optional int32 page = 2;
inline bool UnEuipRunes::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnEuipRunes::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnEuipRunes::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnEuipRunes::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 UnEuipRunes::page() const {
  // @@protoc_insertion_point(field_get:GCToCS.UnEuipRunes.page)
  return page_;
}
inline void UnEuipRunes::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.UnEuipRunes.page)
}

// optional int32 pos = 3;
inline bool UnEuipRunes::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnEuipRunes::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnEuipRunes::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnEuipRunes::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 UnEuipRunes::pos() const {
  // @@protoc_insertion_point(field_get:GCToCS.UnEuipRunes.pos)
  return pos_;
}
inline void UnEuipRunes::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.UnEuipRunes.pos)
}

// -------------------------------------------------------------------

// ComposeRunes

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_ComposeRunes];
inline bool ComposeRunes::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComposeRunes::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComposeRunes::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComposeRunes::clear_msgnum() {
  msgnum_ = 8223;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum ComposeRunes::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.ComposeRunes.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void ComposeRunes::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ComposeRunes.msgnum)
}

// repeated uint32 runesid = 2;
inline int ComposeRunes::runesid_size() const {
  return runesid_.size();
}
inline void ComposeRunes::clear_runesid() {
  runesid_.Clear();
}
inline ::google::protobuf::uint32 ComposeRunes::runesid(int index) const {
  // @@protoc_insertion_point(field_get:GCToCS.ComposeRunes.runesid)
  return runesid_.Get(index);
}
inline void ComposeRunes::set_runesid(int index, ::google::protobuf::uint32 value) {
  runesid_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCToCS.ComposeRunes.runesid)
}
inline void ComposeRunes::add_runesid(::google::protobuf::uint32 value) {
  runesid_.Add(value);
  // @@protoc_insertion_point(field_add:GCToCS.ComposeRunes.runesid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ComposeRunes::runesid() const {
  // @@protoc_insertion_point(field_list:GCToCS.ComposeRunes.runesid)
  return runesid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ComposeRunes::mutable_runesid() {
  // @@protoc_insertion_point(field_mutable_list:GCToCS.ComposeRunes.runesid)
  return &runesid_;
}

// -------------------------------------------------------------------

// ReconnectToGame

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReconnectGame];
inline bool ReconnectToGame::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconnectToGame::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconnectToGame::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconnectToGame::clear_msgnum() {
  msgnum_ = 8194;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum ReconnectToGame::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.ReconnectToGame.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void ReconnectToGame::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ReconnectToGame.msgnum)
}

// optional string name = 2;
inline bool ReconnectToGame::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReconnectToGame::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReconnectToGame::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReconnectToGame::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReconnectToGame::name() const {
  // @@protoc_insertion_point(field_get:GCToCS.ReconnectToGame.name)
  return *name_;
}
inline void ReconnectToGame::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.ReconnectToGame.name)
}
inline void ReconnectToGame::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.ReconnectToGame.name)
}
inline void ReconnectToGame::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.ReconnectToGame.name)
}
inline ::std::string* ReconnectToGame::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.ReconnectToGame.name)
  return name_;
}
inline ::std::string* ReconnectToGame::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconnectToGame::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.ReconnectToGame.name)
}

// optional string passwd = 3;
inline bool ReconnectToGame::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReconnectToGame::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReconnectToGame::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReconnectToGame::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& ReconnectToGame::passwd() const {
  // @@protoc_insertion_point(field_get:GCToCS.ReconnectToGame.passwd)
  return *passwd_;
}
inline void ReconnectToGame::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:GCToCS.ReconnectToGame.passwd)
}
inline void ReconnectToGame::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToCS.ReconnectToGame.passwd)
}
inline void ReconnectToGame::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToCS.ReconnectToGame.passwd)
}
inline ::std::string* ReconnectToGame::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToCS.ReconnectToGame.passwd)
  return passwd_;
}
inline ::std::string* ReconnectToGame::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconnectToGame::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToCS.ReconnectToGame.passwd)
}

// -------------------------------------------------------------------

// ComGuideStepID

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideStepId];
inline bool ComGuideStepID::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComGuideStepID::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComGuideStepID::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComGuideStepID::clear_msgnum() {
  msgnum_ = 8241;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum ComGuideStepID::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.ComGuideStepID.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void ComGuideStepID::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ComGuideStepID.msgnum)
}

// optional int32 type = 2;
inline bool ComGuideStepID::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComGuideStepID::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComGuideStepID::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComGuideStepID::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ComGuideStepID::type() const {
  // @@protoc_insertion_point(field_get:GCToCS.ComGuideStepID.type)
  return type_;
}
inline void ComGuideStepID::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ComGuideStepID.type)
}

// optional int32 step = 3;
inline bool ComGuideStepID::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComGuideStepID::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComGuideStepID::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComGuideStepID::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 ComGuideStepID::step() const {
  // @@protoc_insertion_point(field_get:GCToCS.ComGuideStepID.step)
  return step_;
}
inline void ComGuideStepID::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ComGuideStepID.step)
}

// optional int32 state = 4;
inline bool ComGuideStepID::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComGuideStepID::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComGuideStepID::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComGuideStepID::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ComGuideStepID::state() const {
  // @@protoc_insertion_point(field_get:GCToCS.ComGuideStepID.state)
  return state_;
}
inline void ComGuideStepID::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.ComGuideStepID.state)
}

// -------------------------------------------------------------------

// AskRoomList

// optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRoomList];
inline bool AskRoomList::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRoomList::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRoomList::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRoomList::clear_msgnum() {
  msgnum_ = 8269;
  clear_has_msgnum();
}
inline ::GCToCS::MsgNum AskRoomList::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToCS.AskRoomList.msgnum)
  return static_cast< ::GCToCS::MsgNum >(msgnum_);
}
inline void AskRoomList::set_msgnum(::GCToCS::MsgNum value) {
  assert(::GCToCS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToCS.AskRoomList.msgnum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GCToCS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GCToCS::AskCSCreateGuideBattle_guidetype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCToCS::AskCSCreateGuideBattle_guidetype>() {
  return ::GCToCS::AskCSCreateGuideBattle_guidetype_descriptor();
}
template <> struct is_proto_enum< ::GCToCS::MsgNum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCToCS::MsgNum>() {
  return ::GCToCS::MsgNum_descriptor();
}
template <> struct is_proto_enum< ::GCToCS::notice_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCToCS::notice_type>() {
  return ::GCToCS::notice_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GCToCS_2eproto__INCLUDED
