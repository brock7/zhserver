// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GCToSS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GCToSS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GCToSS {

namespace {

const ::google::protobuf::Descriptor* AskSSGuideStepComp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSSGuideStepComp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSSGuideStepComp_taskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSSGuideStepComp_taskinfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AskSSGuideStepComp_edotype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HerosBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HerosBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskHeroAttributesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskHeroAttributesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskQuickBattleEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskQuickBattleEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPingSS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPingSS_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskEnterBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskEnterBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dir_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBattleLoadingState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBattleLoadingState_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* LockTar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockTar_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportAltarStrawSolder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAltarStrawSolder_reflection_ = NULL;
const ::google::protobuf::Descriptor* Absorb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Absorb_reflection_ = NULL;
const ::google::protobuf::Descriptor* GasExplosion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GasExplosion_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoAtk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoAtk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideJumpToHall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideJumpToHall_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskReconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskReconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveTar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveTar_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskBornNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskBornNPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlwaysAutoAtk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlwaysAutoAtk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrySeleceHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrySeleceHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectRunePage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectRunePage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadComplete_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgNum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GCToSS_2eproto() {
  protobuf_AddDesc_GCToSS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GCToSS.proto");
  GOOGLE_CHECK(file != NULL);
  AskSSGuideStepComp_descriptor_ = file->message_type(0);
  static const int AskSSGuideStepComp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp, info_),
  };
  AskSSGuideStepComp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSSGuideStepComp_descriptor_,
      AskSSGuideStepComp::default_instance_,
      AskSSGuideStepComp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSSGuideStepComp));
  AskSSGuideStepComp_taskinfo_descriptor_ = AskSSGuideStepComp_descriptor_->nested_type(0);
  static const int AskSSGuideStepComp_taskinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp_taskinfo, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp_taskinfo, stepid_),
  };
  AskSSGuideStepComp_taskinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSSGuideStepComp_taskinfo_descriptor_,
      AskSSGuideStepComp_taskinfo::default_instance_,
      AskSSGuideStepComp_taskinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp_taskinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSSGuideStepComp_taskinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSSGuideStepComp_taskinfo));
  AskSSGuideStepComp_edotype_descriptor_ = AskSSGuideStepComp_descriptor_->enum_type(0);
  HerosBattleInfo_descriptor_ = file->message_type(1);
  static const int HerosBattleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HerosBattleInfo, msgid_),
  };
  HerosBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HerosBattleInfo_descriptor_,
      HerosBattleInfo::default_instance_,
      HerosBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HerosBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HerosBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HerosBattleInfo));
  AskHeroAttributesInfo_descriptor_ = file->message_type(2);
  static const int AskHeroAttributesInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskHeroAttributesInfo, msgid_),
  };
  AskHeroAttributesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskHeroAttributesInfo_descriptor_,
      AskHeroAttributesInfo::default_instance_,
      AskHeroAttributesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskHeroAttributesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskHeroAttributesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskHeroAttributesInfo));
  AskQuickBattleEnd_descriptor_ = file->message_type(3);
  static const int AskQuickBattleEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattleEnd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattleEnd, other_),
  };
  AskQuickBattleEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskQuickBattleEnd_descriptor_,
      AskQuickBattleEnd::default_instance_,
      AskQuickBattleEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattleEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattleEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskQuickBattleEnd));
  AskPingSS_descriptor_ = file->message_type(4);
  static const int AskPingSS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingSS, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingSS, time_),
  };
  AskPingSS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPingSS_descriptor_,
      AskPingSS::default_instance_,
      AskPingSS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingSS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingSS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPingSS));
  AskEnterBattle_descriptor_ = file->message_type(5);
  static const int AskEnterBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskEnterBattle, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskEnterBattle, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskEnterBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskEnterBattle, obuserstate_),
  };
  AskEnterBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskEnterBattle_descriptor_,
      AskEnterBattle::default_instance_,
      AskEnterBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskEnterBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskEnterBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskEnterBattle));
  Dir_descriptor_ = file->message_type(6);
  static const int Dir_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, angle_),
  };
  Dir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dir_descriptor_,
      Dir::default_instance_,
      Dir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dir));
  MoveDir_descriptor_ = file->message_type(7);
  static const int MoveDir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDir, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDir, dir_),
  };
  MoveDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDir_descriptor_,
      MoveDir::default_instance_,
      MoveDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDir));
  StopMove_descriptor_ = file->message_type(8);
  static const int StopMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMove, msgnum_),
  };
  StopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopMove_descriptor_,
      StopMove::default_instance_,
      StopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopMove));
  BuyGoods_descriptor_ = file->message_type(9);
  static const int BuyGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, typeid__),
  };
  BuyGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyGoods_descriptor_,
      BuyGoods::default_instance_,
      BuyGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyGoods));
  UseGoods_descriptor_ = file->message_type(10);
  static const int UseGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGoods, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGoods, goodspos_),
  };
  UseGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseGoods_descriptor_,
      UseGoods::default_instance_,
      UseGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseGoods));
  SellGoods_descriptor_ = file->message_type(11);
  static const int SellGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoods, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoods, goodspos_),
  };
  SellGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellGoods_descriptor_,
      SellGoods::default_instance_,
      SellGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellGoods));
  MoveGoods_descriptor_ = file->message_type(12);
  static const int MoveGoods_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGoods, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGoods, frompos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGoods, topos_),
  };
  MoveGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveGoods_descriptor_,
      MoveGoods::default_instance_,
      MoveGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveGoods));
  ReportBattleLoadingState_descriptor_ = file->message_type(13);
  static const int ReportBattleLoadingState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleLoadingState, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleLoadingState, loadingnum_),
  };
  ReportBattleLoadingState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportBattleLoadingState_descriptor_,
      ReportBattleLoadingState::default_instance_,
      ReportBattleLoadingState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleLoadingState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleLoadingState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportBattleLoadingState));
  UseSkill_descriptor_ = file->message_type(14);
  static const int UseSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkill, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkill, skillid_),
  };
  UseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkill_descriptor_,
      UseSkill::default_instance_,
      UseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkill));
  LockTar_descriptor_ = file->message_type(15);
  static const int LockTar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTar, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTar, guid_),
  };
  LockTar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LockTar_descriptor_,
      LockTar::default_instance_,
      LockTar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockTar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LockTar));
  ReportAltarStrawSolder_descriptor_ = file->message_type(16);
  static const int ReportAltarStrawSolder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAltarStrawSolder, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAltarStrawSolder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAltarStrawSolder, index_),
  };
  ReportAltarStrawSolder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAltarStrawSolder_descriptor_,
      ReportAltarStrawSolder::default_instance_,
      ReportAltarStrawSolder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAltarStrawSolder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAltarStrawSolder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAltarStrawSolder));
  Absorb_descriptor_ = file->message_type(17);
  static const int Absorb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Absorb, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Absorb, removeid_),
  };
  Absorb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Absorb_descriptor_,
      Absorb::default_instance_,
      Absorb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Absorb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Absorb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Absorb));
  GasExplosion_descriptor_ = file->message_type(18);
  static const int GasExplosion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GasExplosion, msgnum_),
  };
  GasExplosion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GasExplosion_descriptor_,
      GasExplosion::default_instance_,
      GasExplosion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GasExplosion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GasExplosion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GasExplosion));
  BuReborn_descriptor_ = file->message_type(19);
  static const int BuReborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuReborn, msgnum_),
  };
  BuReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuReborn_descriptor_,
      BuReborn::default_instance_,
      BuReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuReborn));
  GMCmd_descriptor_ = file->message_type(20);
  static const int GMCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, cmd_),
  };
  GMCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCmd_descriptor_,
      GMCmd::default_instance_,
      GMCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCmd));
  StepID_descriptor_ = file->message_type(21);
  static const int StepID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepID, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepID, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepID, type_),
  };
  StepID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepID_descriptor_,
      StepID::default_instance_,
      StepID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepID));
  AutoAtk_descriptor_ = file->message_type(22);
  static const int AutoAtk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAtk, msgnum_),
  };
  AutoAtk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoAtk_descriptor_,
      AutoAtk::default_instance_,
      AutoAtk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAtk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAtk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoAtk));
  GuideJumpToHall_descriptor_ = file->message_type(23);
  static const int GuideJumpToHall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideJumpToHall, msgnum_),
  };
  GuideJumpToHall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideJumpToHall_descriptor_,
      GuideJumpToHall::default_instance_,
      GuideJumpToHall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideJumpToHall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideJumpToHall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideJumpToHall));
  AskReconnect_descriptor_ = file->message_type(24);
  static const int AskReconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReconnect, msgnum_),
  };
  AskReconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskReconnect_descriptor_,
      AskReconnect::default_instance_,
      AskReconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskReconnect));
  Pos_descriptor_ = file->message_type(25);
  static const int Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, z_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
  MoveTar_descriptor_ = file->message_type(26);
  static const int MoveTar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTar, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTar, pos_),
  };
  MoveTar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveTar_descriptor_,
      MoveTar::default_instance_,
      MoveTar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveTar));
  AskBornNPC_descriptor_ = file->message_type(27);
  static const int AskBornNPC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBornNPC, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBornNPC, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBornNPC, state_),
  };
  AskBornNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskBornNPC_descriptor_,
      AskBornNPC::default_instance_,
      AskBornNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBornNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBornNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskBornNPC));
  AlwaysAutoAtk_descriptor_ = file->message_type(28);
  static const int AlwaysAutoAtk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlwaysAutoAtk, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlwaysAutoAtk, flag_),
  };
  AlwaysAutoAtk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlwaysAutoAtk_descriptor_,
      AlwaysAutoAtk::default_instance_,
      AlwaysAutoAtk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlwaysAutoAtk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlwaysAutoAtk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlwaysAutoAtk));
  TrySeleceHero_descriptor_ = file->message_type(29);
  static const int TrySeleceHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrySeleceHero, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrySeleceHero, heroid_),
  };
  TrySeleceHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrySeleceHero_descriptor_,
      TrySeleceHero::default_instance_,
      TrySeleceHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrySeleceHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrySeleceHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrySeleceHero));
  SelectHero_descriptor_ = file->message_type(30);
  static const int SelectHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHero, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHero, heroid_),
  };
  SelectHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectHero_descriptor_,
      SelectHero::default_instance_,
      SelectHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectHero));
  SelectRunePage_descriptor_ = file->message_type(31);
  static const int SelectRunePage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRunePage, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRunePage, pageindex_),
  };
  SelectRunePage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectRunePage_descriptor_,
      SelectRunePage::default_instance_,
      SelectRunePage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRunePage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRunePage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectRunePage));
  LoadComplete_descriptor_ = file->message_type(32);
  static const int LoadComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComplete, msgnum_),
  };
  LoadComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadComplete_descriptor_,
      LoadComplete::default_instance_,
      LoadComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadComplete));
  MsgNum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GCToSS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSSGuideStepComp_descriptor_, &AskSSGuideStepComp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSSGuideStepComp_taskinfo_descriptor_, &AskSSGuideStepComp_taskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HerosBattleInfo_descriptor_, &HerosBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskHeroAttributesInfo_descriptor_, &AskHeroAttributesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskQuickBattleEnd_descriptor_, &AskQuickBattleEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPingSS_descriptor_, &AskPingSS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskEnterBattle_descriptor_, &AskEnterBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dir_descriptor_, &Dir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDir_descriptor_, &MoveDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopMove_descriptor_, &StopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyGoods_descriptor_, &BuyGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseGoods_descriptor_, &UseGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellGoods_descriptor_, &SellGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveGoods_descriptor_, &MoveGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportBattleLoadingState_descriptor_, &ReportBattleLoadingState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkill_descriptor_, &UseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LockTar_descriptor_, &LockTar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAltarStrawSolder_descriptor_, &ReportAltarStrawSolder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Absorb_descriptor_, &Absorb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GasExplosion_descriptor_, &GasExplosion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuReborn_descriptor_, &BuReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCmd_descriptor_, &GMCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepID_descriptor_, &StepID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoAtk_descriptor_, &AutoAtk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideJumpToHall_descriptor_, &GuideJumpToHall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskReconnect_descriptor_, &AskReconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveTar_descriptor_, &MoveTar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskBornNPC_descriptor_, &AskBornNPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlwaysAutoAtk_descriptor_, &AlwaysAutoAtk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrySeleceHero_descriptor_, &TrySeleceHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectHero_descriptor_, &SelectHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectRunePage_descriptor_, &SelectRunePage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadComplete_descriptor_, &LoadComplete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GCToSS_2eproto() {
  delete AskSSGuideStepComp::default_instance_;
  delete AskSSGuideStepComp_reflection_;
  delete AskSSGuideStepComp_taskinfo::default_instance_;
  delete AskSSGuideStepComp_taskinfo_reflection_;
  delete HerosBattleInfo::default_instance_;
  delete HerosBattleInfo_reflection_;
  delete AskHeroAttributesInfo::default_instance_;
  delete AskHeroAttributesInfo_reflection_;
  delete AskQuickBattleEnd::default_instance_;
  delete AskQuickBattleEnd_reflection_;
  delete AskPingSS::default_instance_;
  delete AskPingSS_reflection_;
  delete AskEnterBattle::default_instance_;
  delete AskEnterBattle_reflection_;
  delete Dir::default_instance_;
  delete Dir_reflection_;
  delete MoveDir::default_instance_;
  delete MoveDir_reflection_;
  delete StopMove::default_instance_;
  delete StopMove_reflection_;
  delete BuyGoods::default_instance_;
  delete BuyGoods_reflection_;
  delete UseGoods::default_instance_;
  delete UseGoods_reflection_;
  delete SellGoods::default_instance_;
  delete SellGoods_reflection_;
  delete MoveGoods::default_instance_;
  delete MoveGoods_reflection_;
  delete ReportBattleLoadingState::default_instance_;
  delete ReportBattleLoadingState_reflection_;
  delete UseSkill::default_instance_;
  delete UseSkill_reflection_;
  delete LockTar::default_instance_;
  delete LockTar_reflection_;
  delete ReportAltarStrawSolder::default_instance_;
  delete ReportAltarStrawSolder_reflection_;
  delete Absorb::default_instance_;
  delete Absorb_reflection_;
  delete GasExplosion::default_instance_;
  delete GasExplosion_reflection_;
  delete BuReborn::default_instance_;
  delete BuReborn_reflection_;
  delete GMCmd::default_instance_;
  delete GMCmd_reflection_;
  delete StepID::default_instance_;
  delete StepID_reflection_;
  delete AutoAtk::default_instance_;
  delete AutoAtk_reflection_;
  delete GuideJumpToHall::default_instance_;
  delete GuideJumpToHall_reflection_;
  delete AskReconnect::default_instance_;
  delete AskReconnect_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
  delete MoveTar::default_instance_;
  delete MoveTar_reflection_;
  delete AskBornNPC::default_instance_;
  delete AskBornNPC_reflection_;
  delete AlwaysAutoAtk::default_instance_;
  delete AlwaysAutoAtk_reflection_;
  delete TrySeleceHero::default_instance_;
  delete TrySeleceHero_reflection_;
  delete SelectHero::default_instance_;
  delete SelectHero_reflection_;
  delete SelectRunePage::default_instance_;
  delete SelectRunePage_reflection_;
  delete LoadComplete::default_instance_;
  delete LoadComplete_reflection_;
}

void protobuf_AddDesc_GCToSS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GCToSS.proto\022\006GCToSS\"\261\002\n\022AskSSGuideSte"
    "pComp\022B\n\005msgid\030\001 \001(\0162\016.GCToSS.MsgNum:#eM"
    "sgToGSToSSFromGC_AskGuideStepComp\0221\n\004inf"
    "o\030\003 \003(\0132#.GCToSS.AskSSGuideStepComp.task"
    "info\032M\n\010taskinfo\0221\n\005dtype\030\001 \001(\0162\".GCToSS"
    ".AskSSGuideStepComp.edotype\022\016\n\006stepid\030\002 "
    "\001(\005\"U\n\007edotype\022\r\n\tecomptask\020\001\022\r\n\tebuygoo"
    "ds\020\002\022\017\n\013ebornsolder\020\003\022\r\n\tebornhero\020\004\022\014\n\010"
    "nextstep\020\005\"W\n\017HerosBattleInfo\022D\n\005msgid\030\001"
    " \001(\0162\016.GCToSS.MsgNum:%eMsgToGSToSSFromGC"
    "_AskHerosBattleInfo\"`\n\025AskHeroAttributes"
    "Info\022G\n\005msgid\030\001 \001(\0162\016.GCToSS.MsgNum:(eMs"
    "gToGSToSSFromGC_AskHeroAttributesInfo\"c\n"
    "\021AskQuickBattleEnd\022\?\n\005msgid\030\001 \001(\0162\016.GCTo"
    "SS.MsgNum: eMsgToSSFromGS_AskQuickBattle"
    "End\022\r\n\005other\030\002 \001(\005\"W\n\tAskPingSS\022<\n\006msgnu"
    "m\030\001 \001(\0162\016.GCToSS.MsgNum:\034eMsgToGSToSSFro"
    "mGC_AskPingSS\022\014\n\004time\030\002 \001(\003\"\216\001\n\016AskEnter"
    "Battle\022A\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:!"
    "eMsgToGSToSSFromGC_AskEnterBattle\022\022\n\ncli"
    "entTime\030\002 \001(\003\022\020\n\010battleid\030\003 \001(\004\022\023\n\013obuse"
    "rstate\030\004 \001(\005\"*\n\003Dir\022\t\n\001x\030\001 \001(\002\022\t\n\001z\030\002 \001("
    "\002\022\r\n\005angle\030\003 \001(\002\"b\n\007MoveDir\022=\n\006msgnum\030\001 "
    "\001(\0162\016.GCToSS.MsgNum:\035eMsgToGSToSSFromGC_"
    "AskMoveDir\022\030\n\003dir\030\003 \001(\0132\013.GCToSS.Dir\"J\n\010"
    "StopMove\022>\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum"
    ":\036eMsgToGSToSSFromGC_AskStopMove\"Z\n\010BuyG"
    "oods\022>\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:\036eM"
    "sgToGSToSSFromGC_AskBuyGoods\022\016\n\006typeid\030\003"
    " \001(\005\"\\\n\010UseGoods\022>\n\006msgnum\030\001 \001(\0162\016.GCToS"
    "S.MsgNum:\036eMsgToGSToSSFromGC_AskUseGoods"
    "\022\020\n\010goodspos\030\003 \001(\005\"^\n\tSellGoods\022\?\n\006msgnu"
    "m\030\001 \001(\0162\016.GCToSS.MsgNum:\037eMsgToGSToSSFro"
    "mGC_AskSellGoods\022\020\n\010goodspos\030\003 \001(\005\"l\n\tMo"
    "veGoods\022\?\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:"
    "\037eMsgToGSToSSFromGC_AskMoveGoods\022\017\n\007from"
    "pos\030\003 \001(\005\022\r\n\005topos\030\004 \001(\005\"{\n\030ReportBattle"
    "LoadingState\022K\n\006msgnum\030\001 \001(\0162\016.GCToSS.Ms"
    "gNum:+eMsgToGSToSSFromGC_ReportBattleLoa"
    "dingState\022\022\n\nloadingnum\030\003 \001(\005\"[\n\010UseSkil"
    "l\022>\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:\036eMsgT"
    "oGSToSSFromGC_AskUseSkill\022\017\n\007skillid\030\003 \001"
    "(\005\"Y\n\007LockTar\022@\n\006msgnum\030\001 \001(\0162\016.GCToSS.M"
    "sgNum: eMsgToGSToSSFromGC_AskLockTarget\022"
    "\014\n\004guid\030\003 \001(\003\"\200\001\n\026ReportAltarStrawSolder"
    "\022I\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:)eMsgTo"
    "GSToSSFromGC_ReportAltarStrawSolder\022\014\n\004t"
    "ype\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\"c\n\006Absorb\022C\n\006ms"
    "gnum\030\001 \001(\0162\016.GCToSS.MsgNum:#eMsgToGSToSS"
    "FromGC_AskAbsorbMonster\022\024\n\010removeid\030\002 \001("
    "\005:\002-1\"R\n\014GasExplosion\022B\n\006msgnum\030\001 \001(\0162\016."
    "GCToSS.MsgNum:\"eMsgToGSToSSFromGC_AskGas"
    "Explosion\"O\n\010BuReborn\022C\n\006msgnum\030\001 \001(\0162\016."
    "GCToSS.MsgNum:#eMsgToGSToSSFromGC_AskBuy"
    "RebornHero\"N\n\005GMCmd\0228\n\006msgnum\030\001 \001(\0162\016.GC"
    "ToSS.MsgNum:\030eMsgToGSToSSFromGC_GMCmd\022\013\n"
    "\003cmd\030\002 \001(\t\"a\n\006StepID\0229\n\006msgnum\030\001 \001(\0162\016.G"
    "CToSS.MsgNum:\031eMsgToGSToSSFromGC_StepId\022"
    "\016\n\006stepid\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\"K\n\007AutoAtk"
    "\022@\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum: eMsgTo"
    "GSToSSFromGC_AskAutoAttack\"[\n\017GuideJumpT"
    "oHall\022H\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:(e"
    "MsgToGSToSSFromGC_AskGuideEndJumpToHall\""
    "O\n\014AskReconnect\022\?\n\006msgnum\030\001 \001(\0162\016.GCToSS"
    ".MsgNum:\037eMsgToGSToSSFromGC_AskReconnect"
    "\"\033\n\003Pos\022\t\n\001x\030\001 \001(\002\022\t\n\001z\030\002 \001(\002\"b\n\007MoveTar"
    "\022=\n\006msgnum\030\001 \001(\0162\016.GCToSS.MsgNum:\035eMsgTo"
    "GSToSSFromGC_AskMovePos\022\030\n\003pos\030\003 \001(\0132\013.G"
    "CToSS.Pos\"j\n\nAskBornNPC\022=\n\006msgnum\030\001 \001(\0162"
    "\016.GCToSS.MsgNum:\035eMsgToGSToSSFromGC_AskB"
    "ornNPC\022\016\n\006stepid\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\"b\n"
    "\rAlwaysAutoAtk\022C\n\006msgnum\030\001 \001(\0162\016.GCToSS."
    "MsgNum:#eMsgToGSToSSFromGC_AskAlwaysAuto"
    "Atk\022\014\n\004flag\030\002 \001(\010\"d\n\rTrySeleceHero\022C\n\006ms"
    "gnum\030\001 \001(\0162\016.GCToSS.MsgNum:#eMsgToGSToSS"
    "FromGC_AskTrySelectHero\022\016\n\006heroid\030\002 \001(\r\""
    "^\n\nSelectHero\022@\n\006msgnum\030\001 \001(\0162\016.GCToSS.M"
    "sgNum: eMsgToGSToSSFromGC_AskSelectHero\022"
    "\016\n\006heroid\030\002 \001(\005\"i\n\016SelectRunePage\022D\n\006msg"
    "num\030\001 \001(\0162\016.GCToSS.MsgNum:$eMsgToGSToSSF"
    "romGC_AskSelectRunePage\022\021\n\tpageindex\030\002 \001"
    "(\005\"[\n\014LoadComplete\022K\n\006msgnum\030\001 \001(\0162\016.GCT"
    "oSS.MsgNum:+eMsgToGSToSSFromGC_ReportLoa"
    "dBattleComplete*\334\013\n\006MsgNum\022\036\n\030eMsgToGSTo"
    "SSFromGC_Begin\020\200\200\001\022\"\n\034eMsgToGSToSSFromGC"
    "_AskPingSS\020\201\200\001\022\'\n!eMsgToGSToSSFromGC_Ask"
    "EnterBattle\020\202\200\001\022#\n\035eMsgToGSToSSFromGC_As"
    "kMoveDir\020\203\200\001\022$\n\036eMsgToGSToSSFromGC_AskSt"
    "opMove\020\204\200\001\022$\n\036eMsgToGSToSSFromGC_AskBuyG"
    "oods\020\205\200\001\022$\n\036eMsgToGSToSSFromGC_AskUseGoo"
    "ds\020\206\200\001\022%\n\037eMsgToGSToSSFromGC_AskSellGood"
    "s\020\207\200\001\022%\n\037eMsgToGSToSSFromGC_AskMoveGoods"
    "\020\210\200\001\0221\n+eMsgToGSToSSFromGC_ReportBattleL"
    "oadingState\020\211\200\001\022\"\n\034eMsgToGSToSSFromGC_As"
    "kAttack\020\212\200\001\022$\n\036eMsgToGSToSSFromGC_AskUse"
    "Skill\020\213\200\001\022&\n eMsgToGSToSSFromGC_AskLockT"
    "arget\020\214\200\001\022/\n)eMsgToGSToSSFromGC_ReportAl"
    "tarStrawSolder\020\215\200\001\022)\n#eMsgToGSToSSFromGC"
    "_AskAbsorbMonster\020\216\200\001\022-\n\'eMsgToGSToSSFro"
    "mGC_AskCancelAbsorbSkill\020\217\200\001\022(\n\"eMsgToGS"
    "ToSSFromGC_AskGasExplosion\020\220\200\001\022)\n#eMsgTo"
    "GSToSSFromGC_AskBuyRebornHero\020\221\200\001\022\036\n\030eMs"
    "gToGSToSSFromGC_GMCmd\020\222\200\001\022$\n\036eMsgToGSToS"
    "SFromGC_AskOBBattle\020\223\200\001\022\037\n\031eMsgToGSToSSF"
    "romGC_StepId\020\224\200\001\022#\n\035eMsgToGSToSSFromGC_A"
    "skBornNPC\020\225\200\001\022&\n eMsgToGSToSSFromGC_AskA"
    "utoAttack\020\226\200\001\022.\n(eMsgToGSToSSFromGC_AskG"
    "uideEndJumpToHall\020\227\200\001\022%\n\037eMsgToGSToSSFro"
    "mGC_AskReconnect\020\230\200\001\022#\n\035eMsgToGSToSSFrom"
    "GC_AskMovePos\020\231\200\001\022)\n#eMsgToGSToSSFromGC_"
    "AskAlwaysAutoAtk\020\232\200\001\022 \n\032eMsgToSSFromGS_R"
    "eportSSMsg\020\233\200\001\022&\n eMsgToSSFromGS_AskQuic"
    "kBattleEnd\020\234\200\001\022)\n#eMsgToGSToSSFromGC_Ask"
    "TrySelectHero\020\371\200\001\022&\n eMsgToGSToSSFromGC_"
    "AskSelectHero\020\372\200\001\022*\n$eMsgToGSToSSFromGC_"
    "AskSelectRunePage\020\373\200\001\0221\n+eMsgToGSToSSFro"
    "mGC_ReportLoadBattleComplete\020\210\201\001\022.\n(eMsg"
    "ToGSToSSFromGC_AskHeroAttributesInfo\020\211\201\001"
    "\022+\n%eMsgToGSToSSFromGC_AskHerosBattleInf"
    "o\020\212\201\001\022)\n#eMsgToGSToSSFromGC_AskGuideStep"
    "Comp\020\234\201\001\022\034\n\026eMsgToGSToSSFromGC_End\020\350\204\001", 4838);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GCToSS.proto", &protobuf_RegisterTypes);
  AskSSGuideStepComp::default_instance_ = new AskSSGuideStepComp();
  AskSSGuideStepComp_taskinfo::default_instance_ = new AskSSGuideStepComp_taskinfo();
  HerosBattleInfo::default_instance_ = new HerosBattleInfo();
  AskHeroAttributesInfo::default_instance_ = new AskHeroAttributesInfo();
  AskQuickBattleEnd::default_instance_ = new AskQuickBattleEnd();
  AskPingSS::default_instance_ = new AskPingSS();
  AskEnterBattle::default_instance_ = new AskEnterBattle();
  Dir::default_instance_ = new Dir();
  MoveDir::default_instance_ = new MoveDir();
  StopMove::default_instance_ = new StopMove();
  BuyGoods::default_instance_ = new BuyGoods();
  UseGoods::default_instance_ = new UseGoods();
  SellGoods::default_instance_ = new SellGoods();
  MoveGoods::default_instance_ = new MoveGoods();
  ReportBattleLoadingState::default_instance_ = new ReportBattleLoadingState();
  UseSkill::default_instance_ = new UseSkill();
  LockTar::default_instance_ = new LockTar();
  ReportAltarStrawSolder::default_instance_ = new ReportAltarStrawSolder();
  Absorb::default_instance_ = new Absorb();
  GasExplosion::default_instance_ = new GasExplosion();
  BuReborn::default_instance_ = new BuReborn();
  GMCmd::default_instance_ = new GMCmd();
  StepID::default_instance_ = new StepID();
  AutoAtk::default_instance_ = new AutoAtk();
  GuideJumpToHall::default_instance_ = new GuideJumpToHall();
  AskReconnect::default_instance_ = new AskReconnect();
  Pos::default_instance_ = new Pos();
  MoveTar::default_instance_ = new MoveTar();
  AskBornNPC::default_instance_ = new AskBornNPC();
  AlwaysAutoAtk::default_instance_ = new AlwaysAutoAtk();
  TrySeleceHero::default_instance_ = new TrySeleceHero();
  SelectHero::default_instance_ = new SelectHero();
  SelectRunePage::default_instance_ = new SelectRunePage();
  LoadComplete::default_instance_ = new LoadComplete();
  AskSSGuideStepComp::default_instance_->InitAsDefaultInstance();
  AskSSGuideStepComp_taskinfo::default_instance_->InitAsDefaultInstance();
  HerosBattleInfo::default_instance_->InitAsDefaultInstance();
  AskHeroAttributesInfo::default_instance_->InitAsDefaultInstance();
  AskQuickBattleEnd::default_instance_->InitAsDefaultInstance();
  AskPingSS::default_instance_->InitAsDefaultInstance();
  AskEnterBattle::default_instance_->InitAsDefaultInstance();
  Dir::default_instance_->InitAsDefaultInstance();
  MoveDir::default_instance_->InitAsDefaultInstance();
  StopMove::default_instance_->InitAsDefaultInstance();
  BuyGoods::default_instance_->InitAsDefaultInstance();
  UseGoods::default_instance_->InitAsDefaultInstance();
  SellGoods::default_instance_->InitAsDefaultInstance();
  MoveGoods::default_instance_->InitAsDefaultInstance();
  ReportBattleLoadingState::default_instance_->InitAsDefaultInstance();
  UseSkill::default_instance_->InitAsDefaultInstance();
  LockTar::default_instance_->InitAsDefaultInstance();
  ReportAltarStrawSolder::default_instance_->InitAsDefaultInstance();
  Absorb::default_instance_->InitAsDefaultInstance();
  GasExplosion::default_instance_->InitAsDefaultInstance();
  BuReborn::default_instance_->InitAsDefaultInstance();
  GMCmd::default_instance_->InitAsDefaultInstance();
  StepID::default_instance_->InitAsDefaultInstance();
  AutoAtk::default_instance_->InitAsDefaultInstance();
  GuideJumpToHall::default_instance_->InitAsDefaultInstance();
  AskReconnect::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  MoveTar::default_instance_->InitAsDefaultInstance();
  AskBornNPC::default_instance_->InitAsDefaultInstance();
  AlwaysAutoAtk::default_instance_->InitAsDefaultInstance();
  TrySeleceHero::default_instance_->InitAsDefaultInstance();
  SelectHero::default_instance_->InitAsDefaultInstance();
  SelectRunePage::default_instance_->InitAsDefaultInstance();
  LoadComplete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GCToSS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GCToSS_2eproto {
  StaticDescriptorInitializer_GCToSS_2eproto() {
    protobuf_AddDesc_GCToSS_2eproto();
  }
} static_descriptor_initializer_GCToSS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgNum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNum_descriptor_;
}
bool MsgNum_IsValid(int value) {
  switch(value) {
    case 16384:
    case 16385:
    case 16386:
    case 16387:
    case 16388:
    case 16389:
    case 16390:
    case 16391:
    case 16392:
    case 16393:
    case 16394:
    case 16395:
    case 16396:
    case 16397:
    case 16398:
    case 16399:
    case 16400:
    case 16401:
    case 16402:
    case 16403:
    case 16404:
    case 16405:
    case 16406:
    case 16407:
    case 16408:
    case 16409:
    case 16410:
    case 16411:
    case 16412:
    case 16505:
    case 16506:
    case 16507:
    case 16520:
    case 16521:
    case 16522:
    case 16540:
    case 17000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AskSSGuideStepComp_edotype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSSGuideStepComp_edotype_descriptor_;
}
bool AskSSGuideStepComp_edotype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AskSSGuideStepComp_edotype AskSSGuideStepComp::ecomptask;
const AskSSGuideStepComp_edotype AskSSGuideStepComp::ebuygoods;
const AskSSGuideStepComp_edotype AskSSGuideStepComp::ebornsolder;
const AskSSGuideStepComp_edotype AskSSGuideStepComp::ebornhero;
const AskSSGuideStepComp_edotype AskSSGuideStepComp::nextstep;
const AskSSGuideStepComp_edotype AskSSGuideStepComp::edotype_MIN;
const AskSSGuideStepComp_edotype AskSSGuideStepComp::edotype_MAX;
const int AskSSGuideStepComp::edotype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AskSSGuideStepComp_taskinfo::kDtypeFieldNumber;
const int AskSSGuideStepComp_taskinfo::kStepidFieldNumber;
#endif  // !_MSC_VER

AskSSGuideStepComp_taskinfo::AskSSGuideStepComp_taskinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskSSGuideStepComp.taskinfo)
}

void AskSSGuideStepComp_taskinfo::InitAsDefaultInstance() {
}

AskSSGuideStepComp_taskinfo::AskSSGuideStepComp_taskinfo(const AskSSGuideStepComp_taskinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskSSGuideStepComp.taskinfo)
}

void AskSSGuideStepComp_taskinfo::SharedCtor() {
  _cached_size_ = 0;
  dtype_ = 1;
  stepid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSSGuideStepComp_taskinfo::~AskSSGuideStepComp_taskinfo() {
  // @@protoc_insertion_point(destructor:GCToSS.AskSSGuideStepComp.taskinfo)
  SharedDtor();
}

void AskSSGuideStepComp_taskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSSGuideStepComp_taskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSSGuideStepComp_taskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSSGuideStepComp_taskinfo_descriptor_;
}

const AskSSGuideStepComp_taskinfo& AskSSGuideStepComp_taskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskSSGuideStepComp_taskinfo* AskSSGuideStepComp_taskinfo::default_instance_ = NULL;

AskSSGuideStepComp_taskinfo* AskSSGuideStepComp_taskinfo::New() const {
  return new AskSSGuideStepComp_taskinfo;
}

void AskSSGuideStepComp_taskinfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    dtype_ = 1;
    stepid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSSGuideStepComp_taskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskSSGuideStepComp.taskinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.AskSSGuideStepComp.edotype dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::AskSSGuideStepComp_edotype_IsValid(value)) {
            set_dtype(static_cast< ::GCToSS::AskSSGuideStepComp_edotype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stepid;
        break;
      }

      // optional int32 stepid = 2;
      case 2: {
        if (tag == 16) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskSSGuideStepComp.taskinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskSSGuideStepComp.taskinfo)
  return false;
#undef DO_
}

void AskSSGuideStepComp_taskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskSSGuideStepComp.taskinfo)
  // optional .GCToSS.AskSSGuideStepComp.edotype dtype = 1;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // optional int32 stepid = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskSSGuideStepComp.taskinfo)
}

::google::protobuf::uint8* AskSSGuideStepComp_taskinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskSSGuideStepComp.taskinfo)
  // optional .GCToSS.AskSSGuideStepComp.edotype dtype = 1;
  if (has_dtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // optional int32 stepid = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskSSGuideStepComp.taskinfo)
  return target;
}

int AskSSGuideStepComp_taskinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.AskSSGuideStepComp.edotype dtype = 1;
    if (has_dtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
    }

    // optional int32 stepid = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSSGuideStepComp_taskinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSSGuideStepComp_taskinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSSGuideStepComp_taskinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSSGuideStepComp_taskinfo::MergeFrom(const AskSSGuideStepComp_taskinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dtype()) {
      set_dtype(from.dtype());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSSGuideStepComp_taskinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSSGuideStepComp_taskinfo::CopyFrom(const AskSSGuideStepComp_taskinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSSGuideStepComp_taskinfo::IsInitialized() const {

  return true;
}

void AskSSGuideStepComp_taskinfo::Swap(AskSSGuideStepComp_taskinfo* other) {
  if (other != this) {
    std::swap(dtype_, other->dtype_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSSGuideStepComp_taskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSSGuideStepComp_taskinfo_descriptor_;
  metadata.reflection = AskSSGuideStepComp_taskinfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AskSSGuideStepComp::kMsgidFieldNumber;
const int AskSSGuideStepComp::kInfoFieldNumber;
#endif  // !_MSC_VER

AskSSGuideStepComp::AskSSGuideStepComp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskSSGuideStepComp)
}

void AskSSGuideStepComp::InitAsDefaultInstance() {
}

AskSSGuideStepComp::AskSSGuideStepComp(const AskSSGuideStepComp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskSSGuideStepComp)
}

void AskSSGuideStepComp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 16540;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSSGuideStepComp::~AskSSGuideStepComp() {
  // @@protoc_insertion_point(destructor:GCToSS.AskSSGuideStepComp)
  SharedDtor();
}

void AskSSGuideStepComp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSSGuideStepComp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSSGuideStepComp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSSGuideStepComp_descriptor_;
}

const AskSSGuideStepComp& AskSSGuideStepComp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskSSGuideStepComp* AskSSGuideStepComp::default_instance_ = NULL;

AskSSGuideStepComp* AskSSGuideStepComp::New() const {
  return new AskSSGuideStepComp;
}

void AskSSGuideStepComp::Clear() {
  msgid_ = 16540;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSSGuideStepComp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskSSGuideStepComp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskGuideStepComp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgid(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .GCToSS.AskSSGuideStepComp.taskinfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskSSGuideStepComp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskSSGuideStepComp)
  return false;
#undef DO_
}

void AskSSGuideStepComp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskSSGuideStepComp)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskGuideStepComp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GCToSS.AskSSGuideStepComp.taskinfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskSSGuideStepComp)
}

::google::protobuf::uint8* AskSSGuideStepComp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskSSGuideStepComp)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskGuideStepComp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GCToSS.AskSSGuideStepComp.taskinfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskSSGuideStepComp)
  return target;
}

int AskSSGuideStepComp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskGuideStepComp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GCToSS.AskSSGuideStepComp.taskinfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSSGuideStepComp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSSGuideStepComp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSSGuideStepComp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSSGuideStepComp::MergeFrom(const AskSSGuideStepComp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSSGuideStepComp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSSGuideStepComp::CopyFrom(const AskSSGuideStepComp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSSGuideStepComp::IsInitialized() const {

  return true;
}

void AskSSGuideStepComp::Swap(AskSSGuideStepComp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSSGuideStepComp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSSGuideStepComp_descriptor_;
  metadata.reflection = AskSSGuideStepComp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HerosBattleInfo::kMsgidFieldNumber;
#endif  // !_MSC_VER

HerosBattleInfo::HerosBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.HerosBattleInfo)
}

void HerosBattleInfo::InitAsDefaultInstance() {
}

HerosBattleInfo::HerosBattleInfo(const HerosBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.HerosBattleInfo)
}

void HerosBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 16522;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HerosBattleInfo::~HerosBattleInfo() {
  // @@protoc_insertion_point(destructor:GCToSS.HerosBattleInfo)
  SharedDtor();
}

void HerosBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HerosBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HerosBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HerosBattleInfo_descriptor_;
}

const HerosBattleInfo& HerosBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

HerosBattleInfo* HerosBattleInfo::default_instance_ = NULL;

HerosBattleInfo* HerosBattleInfo::New() const {
  return new HerosBattleInfo;
}

void HerosBattleInfo::Clear() {
  msgid_ = 16522;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HerosBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.HerosBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHerosBattleInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgid(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.HerosBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.HerosBattleInfo)
  return false;
#undef DO_
}

void HerosBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.HerosBattleInfo)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHerosBattleInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.HerosBattleInfo)
}

::google::protobuf::uint8* HerosBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.HerosBattleInfo)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHerosBattleInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.HerosBattleInfo)
  return target;
}

int HerosBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHerosBattleInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HerosBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HerosBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HerosBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HerosBattleInfo::MergeFrom(const HerosBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HerosBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HerosBattleInfo::CopyFrom(const HerosBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HerosBattleInfo::IsInitialized() const {

  return true;
}

void HerosBattleInfo::Swap(HerosBattleInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HerosBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HerosBattleInfo_descriptor_;
  metadata.reflection = HerosBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskHeroAttributesInfo::kMsgidFieldNumber;
#endif  // !_MSC_VER

AskHeroAttributesInfo::AskHeroAttributesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskHeroAttributesInfo)
}

void AskHeroAttributesInfo::InitAsDefaultInstance() {
}

AskHeroAttributesInfo::AskHeroAttributesInfo(const AskHeroAttributesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskHeroAttributesInfo)
}

void AskHeroAttributesInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 16521;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskHeroAttributesInfo::~AskHeroAttributesInfo() {
  // @@protoc_insertion_point(destructor:GCToSS.AskHeroAttributesInfo)
  SharedDtor();
}

void AskHeroAttributesInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskHeroAttributesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskHeroAttributesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskHeroAttributesInfo_descriptor_;
}

const AskHeroAttributesInfo& AskHeroAttributesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskHeroAttributesInfo* AskHeroAttributesInfo::default_instance_ = NULL;

AskHeroAttributesInfo* AskHeroAttributesInfo::New() const {
  return new AskHeroAttributesInfo;
}

void AskHeroAttributesInfo::Clear() {
  msgid_ = 16521;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskHeroAttributesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskHeroAttributesInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHeroAttributesInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgid(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskHeroAttributesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskHeroAttributesInfo)
  return false;
#undef DO_
}

void AskHeroAttributesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskHeroAttributesInfo)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHeroAttributesInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskHeroAttributesInfo)
}

::google::protobuf::uint8* AskHeroAttributesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskHeroAttributesInfo)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHeroAttributesInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskHeroAttributesInfo)
  return target;
}

int AskHeroAttributesInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToGSToSSFromGC_AskHeroAttributesInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskHeroAttributesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskHeroAttributesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskHeroAttributesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskHeroAttributesInfo::MergeFrom(const AskHeroAttributesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskHeroAttributesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskHeroAttributesInfo::CopyFrom(const AskHeroAttributesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskHeroAttributesInfo::IsInitialized() const {

  return true;
}

void AskHeroAttributesInfo::Swap(AskHeroAttributesInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskHeroAttributesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskHeroAttributesInfo_descriptor_;
  metadata.reflection = AskHeroAttributesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskQuickBattleEnd::kMsgidFieldNumber;
const int AskQuickBattleEnd::kOtherFieldNumber;
#endif  // !_MSC_VER

AskQuickBattleEnd::AskQuickBattleEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskQuickBattleEnd)
}

void AskQuickBattleEnd::InitAsDefaultInstance() {
}

AskQuickBattleEnd::AskQuickBattleEnd(const AskQuickBattleEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskQuickBattleEnd)
}

void AskQuickBattleEnd::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 16412;
  other_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskQuickBattleEnd::~AskQuickBattleEnd() {
  // @@protoc_insertion_point(destructor:GCToSS.AskQuickBattleEnd)
  SharedDtor();
}

void AskQuickBattleEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskQuickBattleEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskQuickBattleEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskQuickBattleEnd_descriptor_;
}

const AskQuickBattleEnd& AskQuickBattleEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskQuickBattleEnd* AskQuickBattleEnd::default_instance_ = NULL;

AskQuickBattleEnd* AskQuickBattleEnd::New() const {
  return new AskQuickBattleEnd;
}

void AskQuickBattleEnd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 16412;
    other_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskQuickBattleEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskQuickBattleEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToSSFromGS_AskQuickBattleEnd];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgid(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_other;
        break;
      }

      // optional int32 other = 2;
      case 2: {
        if (tag == 16) {
         parse_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_)));
          set_has_other();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskQuickBattleEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskQuickBattleEnd)
  return false;
#undef DO_
}

void AskQuickBattleEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskQuickBattleEnd)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToSSFromGS_AskQuickBattleEnd];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskQuickBattleEnd)
}

::google::protobuf::uint8* AskQuickBattleEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskQuickBattleEnd)
  // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToSSFromGS_AskQuickBattleEnd];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskQuickBattleEnd)
  return target;
}

int AskQuickBattleEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgid = 1 [default = eMsgToSSFromGS_AskQuickBattleEnd];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskQuickBattleEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskQuickBattleEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskQuickBattleEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskQuickBattleEnd::MergeFrom(const AskQuickBattleEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_other()) {
      set_other(from.other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskQuickBattleEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskQuickBattleEnd::CopyFrom(const AskQuickBattleEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskQuickBattleEnd::IsInitialized() const {

  return true;
}

void AskQuickBattleEnd::Swap(AskQuickBattleEnd* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(other_, other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskQuickBattleEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskQuickBattleEnd_descriptor_;
  metadata.reflection = AskQuickBattleEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPingSS::kMsgnumFieldNumber;
const int AskPingSS::kTimeFieldNumber;
#endif  // !_MSC_VER

AskPingSS::AskPingSS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskPingSS)
}

void AskPingSS::InitAsDefaultInstance() {
}

AskPingSS::AskPingSS(const AskPingSS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskPingSS)
}

void AskPingSS::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16385;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPingSS::~AskPingSS() {
  // @@protoc_insertion_point(destructor:GCToSS.AskPingSS)
  SharedDtor();
}

void AskPingSS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPingSS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPingSS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPingSS_descriptor_;
}

const AskPingSS& AskPingSS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskPingSS* AskPingSS::default_instance_ = NULL;

AskPingSS* AskPingSS::New() const {
  return new AskPingSS;
}

void AskPingSS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16385;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPingSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskPingSS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskPingSS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskPingSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskPingSS)
  return false;
#undef DO_
}

void AskPingSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskPingSS)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskPingSS];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskPingSS)
}

::google::protobuf::uint8* AskPingSS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskPingSS)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskPingSS];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskPingSS)
  return target;
}

int AskPingSS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskPingSS];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPingSS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPingSS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPingSS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPingSS::MergeFrom(const AskPingSS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPingSS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPingSS::CopyFrom(const AskPingSS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPingSS::IsInitialized() const {

  return true;
}

void AskPingSS::Swap(AskPingSS* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPingSS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPingSS_descriptor_;
  metadata.reflection = AskPingSS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskEnterBattle::kMsgnumFieldNumber;
const int AskEnterBattle::kClientTimeFieldNumber;
const int AskEnterBattle::kBattleidFieldNumber;
const int AskEnterBattle::kObuserstateFieldNumber;
#endif  // !_MSC_VER

AskEnterBattle::AskEnterBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskEnterBattle)
}

void AskEnterBattle::InitAsDefaultInstance() {
}

AskEnterBattle::AskEnterBattle(const AskEnterBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskEnterBattle)
}

void AskEnterBattle::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16386;
  clienttime_ = GOOGLE_LONGLONG(0);
  battleid_ = GOOGLE_ULONGLONG(0);
  obuserstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskEnterBattle::~AskEnterBattle() {
  // @@protoc_insertion_point(destructor:GCToSS.AskEnterBattle)
  SharedDtor();
}

void AskEnterBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskEnterBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskEnterBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskEnterBattle_descriptor_;
}

const AskEnterBattle& AskEnterBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskEnterBattle* AskEnterBattle::default_instance_ = NULL;

AskEnterBattle* AskEnterBattle::New() const {
  return new AskEnterBattle;
}

void AskEnterBattle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskEnterBattle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(obuserstate_, battleid_);
    msgnum_ = 16386;
    clienttime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskEnterBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskEnterBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskEnterBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientTime;
        break;
      }

      // optional int64 clientTime = 2;
      case 2: {
        if (tag == 16) {
         parse_clientTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clienttime_)));
          set_has_clienttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 3;
      case 3: {
        if (tag == 24) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_obuserstate;
        break;
      }

      // optional int32 obuserstate = 4;
      case 4: {
        if (tag == 32) {
         parse_obuserstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obuserstate_)));
          set_has_obuserstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskEnterBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskEnterBattle)
  return false;
#undef DO_
}

void AskEnterBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskEnterBattle)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskEnterBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int64 clientTime = 2;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->clienttime(), output);
  }

  // optional uint64 battleid = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleid(), output);
  }

  // optional int32 obuserstate = 4;
  if (has_obuserstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obuserstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskEnterBattle)
}

::google::protobuf::uint8* AskEnterBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskEnterBattle)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskEnterBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int64 clientTime = 2;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->clienttime(), target);
  }

  // optional uint64 battleid = 3;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleid(), target);
  }

  // optional int32 obuserstate = 4;
  if (has_obuserstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->obuserstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskEnterBattle)
  return target;
}

int AskEnterBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskEnterBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int64 clientTime = 2;
    if (has_clienttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clienttime());
    }

    // optional uint64 battleid = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

    // optional int32 obuserstate = 4;
    if (has_obuserstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obuserstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskEnterBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskEnterBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskEnterBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskEnterBattle::MergeFrom(const AskEnterBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_obuserstate()) {
      set_obuserstate(from.obuserstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskEnterBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskEnterBattle::CopyFrom(const AskEnterBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskEnterBattle::IsInitialized() const {

  return true;
}

void AskEnterBattle::Swap(AskEnterBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(clienttime_, other->clienttime_);
    std::swap(battleid_, other->battleid_);
    std::swap(obuserstate_, other->obuserstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskEnterBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskEnterBattle_descriptor_;
  metadata.reflection = AskEnterBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dir::kXFieldNumber;
const int Dir::kZFieldNumber;
const int Dir::kAngleFieldNumber;
#endif  // !_MSC_VER

Dir::Dir()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.Dir)
}

void Dir::InitAsDefaultInstance() {
}

Dir::Dir(const Dir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.Dir)
}

void Dir::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  z_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dir::~Dir() {
  // @@protoc_insertion_point(destructor:GCToSS.Dir)
  SharedDtor();
}

void Dir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dir_descriptor_;
}

const Dir& Dir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

Dir* Dir::default_instance_ = NULL;

Dir* Dir::New() const {
  return new Dir;
}

void Dir::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Dir*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, angle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.Dir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_z;
        break;
      }

      // optional float z = 2;
      case 2: {
        if (tag == 21) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }

      // optional float angle = 3;
      case 3: {
        if (tag == 29) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.Dir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.Dir)
  return false;
#undef DO_
}

void Dir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.Dir)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->z(), output);
  }

  // optional float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.Dir)
}

::google::protobuf::uint8* Dir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.Dir)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->z(), target);
  }

  // optional float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.Dir)
  return target;
}

int Dir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float z = 2;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float angle = 3;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dir::MergeFrom(const Dir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dir::CopyFrom(const Dir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dir::IsInitialized() const {

  return true;
}

void Dir::Swap(Dir* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dir_descriptor_;
  metadata.reflection = Dir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveDir::kMsgnumFieldNumber;
const int MoveDir::kDirFieldNumber;
#endif  // !_MSC_VER

MoveDir::MoveDir()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.MoveDir)
}

void MoveDir::InitAsDefaultInstance() {
  dir_ = const_cast< ::GCToSS::Dir*>(&::GCToSS::Dir::default_instance());
}

MoveDir::MoveDir(const MoveDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.MoveDir)
}

void MoveDir::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16387;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDir::~MoveDir() {
  // @@protoc_insertion_point(destructor:GCToSS.MoveDir)
  SharedDtor();
}

void MoveDir::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
  }
}

void MoveDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDir_descriptor_;
}

const MoveDir& MoveDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

MoveDir* MoveDir::default_instance_ = NULL;

MoveDir* MoveDir::New() const {
  return new MoveDir;
}

void MoveDir::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16387;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GCToSS::Dir::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.MoveDir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveDir];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dir;
        break;
      }

      // optional .GCToSS.Dir dir = 3;
      case 3: {
        if (tag == 26) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.MoveDir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.MoveDir)
  return false;
#undef DO_
}

void MoveDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.MoveDir)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveDir];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional .GCToSS.Dir dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.MoveDir)
}

::google::protobuf::uint8* MoveDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.MoveDir)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveDir];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional .GCToSS.Dir dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.MoveDir)
  return target;
}

int MoveDir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveDir];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional .GCToSS.Dir dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDir::MergeFrom(const MoveDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_dir()) {
      mutable_dir()->::GCToSS::Dir::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDir::CopyFrom(const MoveDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDir::IsInitialized() const {

  return true;
}

void MoveDir::Swap(MoveDir* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDir_descriptor_;
  metadata.reflection = MoveDir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopMove::kMsgnumFieldNumber;
#endif  // !_MSC_VER

StopMove::StopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.StopMove)
}

void StopMove::InitAsDefaultInstance() {
}

StopMove::StopMove(const StopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.StopMove)
}

void StopMove::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16388;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopMove::~StopMove() {
  // @@protoc_insertion_point(destructor:GCToSS.StopMove)
  SharedDtor();
}

void StopMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopMove_descriptor_;
}

const StopMove& StopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

StopMove* StopMove::default_instance_ = NULL;

StopMove* StopMove::New() const {
  return new StopMove;
}

void StopMove::Clear() {
  msgnum_ = 16388;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.StopMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskStopMove];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.StopMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.StopMove)
  return false;
#undef DO_
}

void StopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.StopMove)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskStopMove];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.StopMove)
}

::google::protobuf::uint8* StopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.StopMove)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskStopMove];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.StopMove)
  return target;
}

int StopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskStopMove];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopMove::MergeFrom(const StopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMove::CopyFrom(const StopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMove::IsInitialized() const {

  return true;
}

void StopMove::Swap(StopMove* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopMove_descriptor_;
  metadata.reflection = StopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyGoods::kMsgnumFieldNumber;
const int BuyGoods::kTypeidFieldNumber;
#endif  // !_MSC_VER

BuyGoods::BuyGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.BuyGoods)
}

void BuyGoods::InitAsDefaultInstance() {
}

BuyGoods::BuyGoods(const BuyGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.BuyGoods)
}

void BuyGoods::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16389;
  typeid__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyGoods::~BuyGoods() {
  // @@protoc_insertion_point(destructor:GCToSS.BuyGoods)
  SharedDtor();
}

void BuyGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyGoods_descriptor_;
}

const BuyGoods& BuyGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

BuyGoods* BuyGoods::default_instance_ = NULL;

BuyGoods* BuyGoods::New() const {
  return new BuyGoods;
}

void BuyGoods::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16389;
    typeid__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.BuyGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyGoods];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_typeid;
        break;
      }

      // optional int32 typeid = 3;
      case 3: {
        if (tag == 24) {
         parse_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.BuyGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.BuyGoods)
  return false;
#undef DO_
}

void BuyGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.BuyGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyGoods];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 typeid = 3;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.BuyGoods)
}

::google::protobuf::uint8* BuyGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.BuyGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyGoods];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 typeid = 3;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.BuyGoods)
  return target;
}

int BuyGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyGoods];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 typeid = 3;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyGoods::MergeFrom(const BuyGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyGoods::CopyFrom(const BuyGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyGoods::IsInitialized() const {

  return true;
}

void BuyGoods::Swap(BuyGoods* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(typeid__, other->typeid__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyGoods_descriptor_;
  metadata.reflection = BuyGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseGoods::kMsgnumFieldNumber;
const int UseGoods::kGoodsposFieldNumber;
#endif  // !_MSC_VER

UseGoods::UseGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.UseGoods)
}

void UseGoods::InitAsDefaultInstance() {
}

UseGoods::UseGoods(const UseGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.UseGoods)
}

void UseGoods::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16390;
  goodspos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseGoods::~UseGoods() {
  // @@protoc_insertion_point(destructor:GCToSS.UseGoods)
  SharedDtor();
}

void UseGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseGoods_descriptor_;
}

const UseGoods& UseGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

UseGoods* UseGoods::default_instance_ = NULL;

UseGoods* UseGoods::New() const {
  return new UseGoods;
}

void UseGoods::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16390;
    goodspos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.UseGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseGoods];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goodspos;
        break;
      }

      // optional int32 goodspos = 3;
      case 3: {
        if (tag == 24) {
         parse_goodspos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodspos_)));
          set_has_goodspos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.UseGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.UseGoods)
  return false;
#undef DO_
}

void UseGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.UseGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseGoods];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 goodspos = 3;
  if (has_goodspos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodspos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.UseGoods)
}

::google::protobuf::uint8* UseGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.UseGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseGoods];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 goodspos = 3;
  if (has_goodspos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goodspos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.UseGoods)
  return target;
}

int UseGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseGoods];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 goodspos = 3;
    if (has_goodspos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodspos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseGoods::MergeFrom(const UseGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_goodspos()) {
      set_goodspos(from.goodspos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseGoods::CopyFrom(const UseGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseGoods::IsInitialized() const {

  return true;
}

void UseGoods::Swap(UseGoods* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(goodspos_, other->goodspos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseGoods_descriptor_;
  metadata.reflection = UseGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellGoods::kMsgnumFieldNumber;
const int SellGoods::kGoodsposFieldNumber;
#endif  // !_MSC_VER

SellGoods::SellGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.SellGoods)
}

void SellGoods::InitAsDefaultInstance() {
}

SellGoods::SellGoods(const SellGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.SellGoods)
}

void SellGoods::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16391;
  goodspos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellGoods::~SellGoods() {
  // @@protoc_insertion_point(destructor:GCToSS.SellGoods)
  SharedDtor();
}

void SellGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellGoods_descriptor_;
}

const SellGoods& SellGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

SellGoods* SellGoods::default_instance_ = NULL;

SellGoods* SellGoods::New() const {
  return new SellGoods;
}

void SellGoods::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16391;
    goodspos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.SellGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSellGoods];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goodspos;
        break;
      }

      // optional int32 goodspos = 3;
      case 3: {
        if (tag == 24) {
         parse_goodspos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodspos_)));
          set_has_goodspos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.SellGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.SellGoods)
  return false;
#undef DO_
}

void SellGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.SellGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSellGoods];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 goodspos = 3;
  if (has_goodspos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodspos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.SellGoods)
}

::google::protobuf::uint8* SellGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.SellGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSellGoods];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 goodspos = 3;
  if (has_goodspos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goodspos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.SellGoods)
  return target;
}

int SellGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSellGoods];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 goodspos = 3;
    if (has_goodspos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodspos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellGoods::MergeFrom(const SellGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_goodspos()) {
      set_goodspos(from.goodspos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellGoods::CopyFrom(const SellGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellGoods::IsInitialized() const {

  return true;
}

void SellGoods::Swap(SellGoods* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(goodspos_, other->goodspos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellGoods_descriptor_;
  metadata.reflection = SellGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveGoods::kMsgnumFieldNumber;
const int MoveGoods::kFromposFieldNumber;
const int MoveGoods::kToposFieldNumber;
#endif  // !_MSC_VER

MoveGoods::MoveGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.MoveGoods)
}

void MoveGoods::InitAsDefaultInstance() {
}

MoveGoods::MoveGoods(const MoveGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.MoveGoods)
}

void MoveGoods::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16392;
  frompos_ = 0;
  topos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveGoods::~MoveGoods() {
  // @@protoc_insertion_point(destructor:GCToSS.MoveGoods)
  SharedDtor();
}

void MoveGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveGoods_descriptor_;
}

const MoveGoods& MoveGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

MoveGoods* MoveGoods::default_instance_ = NULL;

MoveGoods* MoveGoods::New() const {
  return new MoveGoods;
}

void MoveGoods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoveGoods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(frompos_, topos_);
    msgnum_ = 16392;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.MoveGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveGoods];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frompos;
        break;
      }

      // optional int32 frompos = 3;
      case 3: {
        if (tag == 24) {
         parse_frompos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frompos_)));
          set_has_frompos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_topos;
        break;
      }

      // optional int32 topos = 4;
      case 4: {
        if (tag == 32) {
         parse_topos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topos_)));
          set_has_topos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.MoveGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.MoveGoods)
  return false;
#undef DO_
}

void MoveGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.MoveGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveGoods];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 frompos = 3;
  if (has_frompos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frompos(), output);
  }

  // optional int32 topos = 4;
  if (has_topos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->topos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.MoveGoods)
}

::google::protobuf::uint8* MoveGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.MoveGoods)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveGoods];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 frompos = 3;
  if (has_frompos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frompos(), target);
  }

  // optional int32 topos = 4;
  if (has_topos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->topos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.MoveGoods)
  return target;
}

int MoveGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMoveGoods];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 frompos = 3;
    if (has_frompos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frompos());
    }

    // optional int32 topos = 4;
    if (has_topos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveGoods::MergeFrom(const MoveGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_frompos()) {
      set_frompos(from.frompos());
    }
    if (from.has_topos()) {
      set_topos(from.topos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveGoods::CopyFrom(const MoveGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveGoods::IsInitialized() const {

  return true;
}

void MoveGoods::Swap(MoveGoods* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(frompos_, other->frompos_);
    std::swap(topos_, other->topos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveGoods_descriptor_;
  metadata.reflection = MoveGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportBattleLoadingState::kMsgnumFieldNumber;
const int ReportBattleLoadingState::kLoadingnumFieldNumber;
#endif  // !_MSC_VER

ReportBattleLoadingState::ReportBattleLoadingState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.ReportBattleLoadingState)
}

void ReportBattleLoadingState::InitAsDefaultInstance() {
}

ReportBattleLoadingState::ReportBattleLoadingState(const ReportBattleLoadingState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.ReportBattleLoadingState)
}

void ReportBattleLoadingState::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16393;
  loadingnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportBattleLoadingState::~ReportBattleLoadingState() {
  // @@protoc_insertion_point(destructor:GCToSS.ReportBattleLoadingState)
  SharedDtor();
}

void ReportBattleLoadingState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportBattleLoadingState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBattleLoadingState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBattleLoadingState_descriptor_;
}

const ReportBattleLoadingState& ReportBattleLoadingState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

ReportBattleLoadingState* ReportBattleLoadingState::default_instance_ = NULL;

ReportBattleLoadingState* ReportBattleLoadingState::New() const {
  return new ReportBattleLoadingState;
}

void ReportBattleLoadingState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16393;
    loadingnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportBattleLoadingState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.ReportBattleLoadingState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportBattleLoadingState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loadingnum;
        break;
      }

      // optional int32 loadingnum = 3;
      case 3: {
        if (tag == 24) {
         parse_loadingnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadingnum_)));
          set_has_loadingnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.ReportBattleLoadingState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.ReportBattleLoadingState)
  return false;
#undef DO_
}

void ReportBattleLoadingState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.ReportBattleLoadingState)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportBattleLoadingState];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 loadingnum = 3;
  if (has_loadingnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loadingnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.ReportBattleLoadingState)
}

::google::protobuf::uint8* ReportBattleLoadingState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.ReportBattleLoadingState)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportBattleLoadingState];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 loadingnum = 3;
  if (has_loadingnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loadingnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.ReportBattleLoadingState)
  return target;
}

int ReportBattleLoadingState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportBattleLoadingState];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 loadingnum = 3;
    if (has_loadingnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loadingnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBattleLoadingState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportBattleLoadingState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportBattleLoadingState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportBattleLoadingState::MergeFrom(const ReportBattleLoadingState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_loadingnum()) {
      set_loadingnum(from.loadingnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportBattleLoadingState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBattleLoadingState::CopyFrom(const ReportBattleLoadingState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBattleLoadingState::IsInitialized() const {

  return true;
}

void ReportBattleLoadingState::Swap(ReportBattleLoadingState* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(loadingnum_, other->loadingnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportBattleLoadingState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBattleLoadingState_descriptor_;
  metadata.reflection = ReportBattleLoadingState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkill::kMsgnumFieldNumber;
const int UseSkill::kSkillidFieldNumber;
#endif  // !_MSC_VER

UseSkill::UseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.UseSkill)
}

void UseSkill::InitAsDefaultInstance() {
}

UseSkill::UseSkill(const UseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.UseSkill)
}

void UseSkill::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16395;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkill::~UseSkill() {
  // @@protoc_insertion_point(destructor:GCToSS.UseSkill)
  SharedDtor();
}

void UseSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkill_descriptor_;
}

const UseSkill& UseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

UseSkill* UseSkill::default_instance_ = NULL;

UseSkill* UseSkill::New() const {
  return new UseSkill;
}

void UseSkill::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16395;
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.UseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseSkill];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.UseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.UseSkill)
  return false;
#undef DO_
}

void UseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.UseSkill)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseSkill];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.UseSkill)
}

::google::protobuf::uint8* UseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.UseSkill)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseSkill];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.UseSkill)
  return target;
}

int UseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskUseSkill];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkill::MergeFrom(const UseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkill::CopyFrom(const UseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkill::IsInitialized() const {

  return true;
}

void UseSkill::Swap(UseSkill* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkill_descriptor_;
  metadata.reflection = UseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LockTar::kMsgnumFieldNumber;
const int LockTar::kGuidFieldNumber;
#endif  // !_MSC_VER

LockTar::LockTar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.LockTar)
}

void LockTar::InitAsDefaultInstance() {
}

LockTar::LockTar(const LockTar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.LockTar)
}

void LockTar::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16396;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LockTar::~LockTar() {
  // @@protoc_insertion_point(destructor:GCToSS.LockTar)
  SharedDtor();
}

void LockTar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LockTar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockTar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockTar_descriptor_;
}

const LockTar& LockTar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

LockTar* LockTar::default_instance_ = NULL;

LockTar* LockTar::New() const {
  return new LockTar;
}

void LockTar::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16396;
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LockTar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.LockTar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskLockTarget];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional int64 guid = 3;
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.LockTar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.LockTar)
  return false;
#undef DO_
}

void LockTar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.LockTar)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskLockTarget];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.LockTar)
}

::google::protobuf::uint8* LockTar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.LockTar)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskLockTarget];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.LockTar)
  return target;
}

int LockTar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskLockTarget];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int64 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockTar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LockTar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LockTar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LockTar::MergeFrom(const LockTar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LockTar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockTar::CopyFrom(const LockTar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockTar::IsInitialized() const {

  return true;
}

void LockTar::Swap(LockTar* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LockTar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockTar_descriptor_;
  metadata.reflection = LockTar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportAltarStrawSolder::kMsgnumFieldNumber;
const int ReportAltarStrawSolder::kTypeFieldNumber;
const int ReportAltarStrawSolder::kIndexFieldNumber;
#endif  // !_MSC_VER

ReportAltarStrawSolder::ReportAltarStrawSolder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.ReportAltarStrawSolder)
}

void ReportAltarStrawSolder::InitAsDefaultInstance() {
}

ReportAltarStrawSolder::ReportAltarStrawSolder(const ReportAltarStrawSolder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.ReportAltarStrawSolder)
}

void ReportAltarStrawSolder::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16397;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAltarStrawSolder::~ReportAltarStrawSolder() {
  // @@protoc_insertion_point(destructor:GCToSS.ReportAltarStrawSolder)
  SharedDtor();
}

void ReportAltarStrawSolder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportAltarStrawSolder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAltarStrawSolder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAltarStrawSolder_descriptor_;
}

const ReportAltarStrawSolder& ReportAltarStrawSolder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

ReportAltarStrawSolder* ReportAltarStrawSolder::default_instance_ = NULL;

ReportAltarStrawSolder* ReportAltarStrawSolder::New() const {
  return new ReportAltarStrawSolder;
}

void ReportAltarStrawSolder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportAltarStrawSolder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, index_);
    msgnum_ = 16397;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAltarStrawSolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.ReportAltarStrawSolder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportAltarStrawSolder];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.ReportAltarStrawSolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.ReportAltarStrawSolder)
  return false;
#undef DO_
}

void ReportAltarStrawSolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.ReportAltarStrawSolder)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportAltarStrawSolder];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.ReportAltarStrawSolder)
}

::google::protobuf::uint8* ReportAltarStrawSolder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.ReportAltarStrawSolder)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportAltarStrawSolder];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.ReportAltarStrawSolder)
  return target;
}

int ReportAltarStrawSolder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportAltarStrawSolder];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAltarStrawSolder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAltarStrawSolder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAltarStrawSolder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAltarStrawSolder::MergeFrom(const ReportAltarStrawSolder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAltarStrawSolder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAltarStrawSolder::CopyFrom(const ReportAltarStrawSolder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAltarStrawSolder::IsInitialized() const {

  return true;
}

void ReportAltarStrawSolder::Swap(ReportAltarStrawSolder* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAltarStrawSolder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAltarStrawSolder_descriptor_;
  metadata.reflection = ReportAltarStrawSolder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Absorb::kMsgnumFieldNumber;
const int Absorb::kRemoveidFieldNumber;
#endif  // !_MSC_VER

Absorb::Absorb()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.Absorb)
}

void Absorb::InitAsDefaultInstance() {
}

Absorb::Absorb(const Absorb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.Absorb)
}

void Absorb::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16398;
  removeid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Absorb::~Absorb() {
  // @@protoc_insertion_point(destructor:GCToSS.Absorb)
  SharedDtor();
}

void Absorb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Absorb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Absorb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Absorb_descriptor_;
}

const Absorb& Absorb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

Absorb* Absorb::default_instance_ = NULL;

Absorb* Absorb::New() const {
  return new Absorb;
}

void Absorb::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16398;
    removeid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Absorb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.Absorb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAbsorbMonster];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_removeid;
        break;
      }

      // optional int32 removeid = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_removeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &removeid_)));
          set_has_removeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.Absorb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.Absorb)
  return false;
#undef DO_
}

void Absorb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.Absorb)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAbsorbMonster];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 removeid = 2 [default = -1];
  if (has_removeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->removeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.Absorb)
}

::google::protobuf::uint8* Absorb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.Absorb)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAbsorbMonster];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 removeid = 2 [default = -1];
  if (has_removeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->removeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.Absorb)
  return target;
}

int Absorb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAbsorbMonster];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 removeid = 2 [default = -1];
    if (has_removeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->removeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Absorb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Absorb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Absorb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Absorb::MergeFrom(const Absorb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_removeid()) {
      set_removeid(from.removeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Absorb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Absorb::CopyFrom(const Absorb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Absorb::IsInitialized() const {

  return true;
}

void Absorb::Swap(Absorb* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(removeid_, other->removeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Absorb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Absorb_descriptor_;
  metadata.reflection = Absorb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GasExplosion::kMsgnumFieldNumber;
#endif  // !_MSC_VER

GasExplosion::GasExplosion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.GasExplosion)
}

void GasExplosion::InitAsDefaultInstance() {
}

GasExplosion::GasExplosion(const GasExplosion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.GasExplosion)
}

void GasExplosion::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16400;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GasExplosion::~GasExplosion() {
  // @@protoc_insertion_point(destructor:GCToSS.GasExplosion)
  SharedDtor();
}

void GasExplosion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GasExplosion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GasExplosion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GasExplosion_descriptor_;
}

const GasExplosion& GasExplosion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

GasExplosion* GasExplosion::default_instance_ = NULL;

GasExplosion* GasExplosion::New() const {
  return new GasExplosion;
}

void GasExplosion::Clear() {
  msgnum_ = 16400;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GasExplosion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.GasExplosion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGasExplosion];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.GasExplosion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.GasExplosion)
  return false;
#undef DO_
}

void GasExplosion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.GasExplosion)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGasExplosion];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.GasExplosion)
}

::google::protobuf::uint8* GasExplosion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.GasExplosion)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGasExplosion];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.GasExplosion)
  return target;
}

int GasExplosion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGasExplosion];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GasExplosion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GasExplosion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GasExplosion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GasExplosion::MergeFrom(const GasExplosion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GasExplosion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasExplosion::CopyFrom(const GasExplosion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasExplosion::IsInitialized() const {

  return true;
}

void GasExplosion::Swap(GasExplosion* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GasExplosion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GasExplosion_descriptor_;
  metadata.reflection = GasExplosion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuReborn::kMsgnumFieldNumber;
#endif  // !_MSC_VER

BuReborn::BuReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.BuReborn)
}

void BuReborn::InitAsDefaultInstance() {
}

BuReborn::BuReborn(const BuReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.BuReborn)
}

void BuReborn::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16401;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuReborn::~BuReborn() {
  // @@protoc_insertion_point(destructor:GCToSS.BuReborn)
  SharedDtor();
}

void BuReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuReborn_descriptor_;
}

const BuReborn& BuReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

BuReborn* BuReborn::default_instance_ = NULL;

BuReborn* BuReborn::New() const {
  return new BuReborn;
}

void BuReborn::Clear() {
  msgnum_ = 16401;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.BuReborn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyRebornHero];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.BuReborn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.BuReborn)
  return false;
#undef DO_
}

void BuReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.BuReborn)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyRebornHero];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.BuReborn)
}

::google::protobuf::uint8* BuReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.BuReborn)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyRebornHero];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.BuReborn)
  return target;
}

int BuReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBuyRebornHero];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuReborn::MergeFrom(const BuReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuReborn::CopyFrom(const BuReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuReborn::IsInitialized() const {

  return true;
}

void BuReborn::Swap(BuReborn* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuReborn_descriptor_;
  metadata.reflection = BuReborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCmd::kMsgnumFieldNumber;
const int GMCmd::kCmdFieldNumber;
#endif  // !_MSC_VER

GMCmd::GMCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.GMCmd)
}

void GMCmd::InitAsDefaultInstance() {
}

GMCmd::GMCmd(const GMCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.GMCmd)
}

void GMCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 16402;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCmd::~GMCmd() {
  // @@protoc_insertion_point(destructor:GCToSS.GMCmd)
  SharedDtor();
}

void GMCmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void GMCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCmd_descriptor_;
}

const GMCmd& GMCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

GMCmd* GMCmd::default_instance_ = NULL;

GMCmd* GMCmd::New() const {
  return new GMCmd;
}

void GMCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16402;
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.GMCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_GMCmd];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        break;
      }

      // optional string cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.GMCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.GMCmd)
  return false;
#undef DO_
}

void GMCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.GMCmd)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_GMCmd];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.GMCmd)
}

::google::protobuf::uint8* GMCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.GMCmd)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_GMCmd];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.GMCmd)
  return target;
}

int GMCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_GMCmd];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCmd::MergeFrom(const GMCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCmd::CopyFrom(const GMCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCmd::IsInitialized() const {

  return true;
}

void GMCmd::Swap(GMCmd* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCmd_descriptor_;
  metadata.reflection = GMCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepID::kMsgnumFieldNumber;
const int StepID::kStepidFieldNumber;
const int StepID::kTypeFieldNumber;
#endif  // !_MSC_VER

StepID::StepID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.StepID)
}

void StepID::InitAsDefaultInstance() {
}

StepID::StepID(const StepID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.StepID)
}

void StepID::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16404;
  stepid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepID::~StepID() {
  // @@protoc_insertion_point(destructor:GCToSS.StepID)
  SharedDtor();
}

void StepID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepID_descriptor_;
}

const StepID& StepID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

StepID* StepID::default_instance_ = NULL;

StepID* StepID::New() const {
  return new StepID;
}

void StepID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StepID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(stepid_, type_);
    msgnum_ = 16404;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.StepID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_StepId];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stepid;
        break;
      }

      // optional int32 stepid = 3;
      case 3: {
        if (tag == 24) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.StepID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.StepID)
  return false;
#undef DO_
}

void StepID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.StepID)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_StepId];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 stepid = 3;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stepid(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.StepID)
}

::google::protobuf::uint8* StepID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.StepID)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_StepId];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 stepid = 3;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stepid(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.StepID)
  return target;
}

int StepID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_StepId];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 stepid = 3;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepID::MergeFrom(const StepID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepID::CopyFrom(const StepID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepID::IsInitialized() const {

  return true;
}

void StepID::Swap(StepID* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(stepid_, other->stepid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepID_descriptor_;
  metadata.reflection = StepID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoAtk::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AutoAtk::AutoAtk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AutoAtk)
}

void AutoAtk::InitAsDefaultInstance() {
}

AutoAtk::AutoAtk(const AutoAtk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AutoAtk)
}

void AutoAtk::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16406;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoAtk::~AutoAtk() {
  // @@protoc_insertion_point(destructor:GCToSS.AutoAtk)
  SharedDtor();
}

void AutoAtk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoAtk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAtk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoAtk_descriptor_;
}

const AutoAtk& AutoAtk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AutoAtk* AutoAtk::default_instance_ = NULL;

AutoAtk* AutoAtk::New() const {
  return new AutoAtk;
}

void AutoAtk::Clear() {
  msgnum_ = 16406;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoAtk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AutoAtk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAutoAttack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AutoAtk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AutoAtk)
  return false;
#undef DO_
}

void AutoAtk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AutoAtk)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAutoAttack];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AutoAtk)
}

::google::protobuf::uint8* AutoAtk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AutoAtk)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAutoAttack];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AutoAtk)
  return target;
}

int AutoAtk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAutoAttack];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAtk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoAtk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoAtk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoAtk::MergeFrom(const AutoAtk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoAtk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAtk::CopyFrom(const AutoAtk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAtk::IsInitialized() const {

  return true;
}

void AutoAtk::Swap(AutoAtk* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoAtk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoAtk_descriptor_;
  metadata.reflection = AutoAtk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideJumpToHall::kMsgnumFieldNumber;
#endif  // !_MSC_VER

GuideJumpToHall::GuideJumpToHall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.GuideJumpToHall)
}

void GuideJumpToHall::InitAsDefaultInstance() {
}

GuideJumpToHall::GuideJumpToHall(const GuideJumpToHall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.GuideJumpToHall)
}

void GuideJumpToHall::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16407;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideJumpToHall::~GuideJumpToHall() {
  // @@protoc_insertion_point(destructor:GCToSS.GuideJumpToHall)
  SharedDtor();
}

void GuideJumpToHall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideJumpToHall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideJumpToHall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideJumpToHall_descriptor_;
}

const GuideJumpToHall& GuideJumpToHall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

GuideJumpToHall* GuideJumpToHall::default_instance_ = NULL;

GuideJumpToHall* GuideJumpToHall::New() const {
  return new GuideJumpToHall;
}

void GuideJumpToHall::Clear() {
  msgnum_ = 16407;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideJumpToHall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.GuideJumpToHall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGuideEndJumpToHall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.GuideJumpToHall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.GuideJumpToHall)
  return false;
#undef DO_
}

void GuideJumpToHall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.GuideJumpToHall)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGuideEndJumpToHall];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.GuideJumpToHall)
}

::google::protobuf::uint8* GuideJumpToHall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.GuideJumpToHall)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGuideEndJumpToHall];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.GuideJumpToHall)
  return target;
}

int GuideJumpToHall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskGuideEndJumpToHall];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideJumpToHall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideJumpToHall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideJumpToHall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideJumpToHall::MergeFrom(const GuideJumpToHall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideJumpToHall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideJumpToHall::CopyFrom(const GuideJumpToHall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideJumpToHall::IsInitialized() const {

  return true;
}

void GuideJumpToHall::Swap(GuideJumpToHall* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideJumpToHall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideJumpToHall_descriptor_;
  metadata.reflection = GuideJumpToHall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskReconnect::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskReconnect::AskReconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskReconnect)
}

void AskReconnect::InitAsDefaultInstance() {
}

AskReconnect::AskReconnect(const AskReconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskReconnect)
}

void AskReconnect::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16408;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskReconnect::~AskReconnect() {
  // @@protoc_insertion_point(destructor:GCToSS.AskReconnect)
  SharedDtor();
}

void AskReconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskReconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskReconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskReconnect_descriptor_;
}

const AskReconnect& AskReconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskReconnect* AskReconnect::default_instance_ = NULL;

AskReconnect* AskReconnect::New() const {
  return new AskReconnect;
}

void AskReconnect::Clear() {
  msgnum_ = 16408;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskReconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskReconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskReconnect];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskReconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskReconnect)
  return false;
#undef DO_
}

void AskReconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskReconnect)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskReconnect];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskReconnect)
}

::google::protobuf::uint8* AskReconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskReconnect)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskReconnect];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskReconnect)
  return target;
}

int AskReconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskReconnect];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskReconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskReconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskReconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskReconnect::MergeFrom(const AskReconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskReconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskReconnect::CopyFrom(const AskReconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskReconnect::IsInitialized() const {

  return true;
}

void AskReconnect::Swap(AskReconnect* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskReconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskReconnect_descriptor_;
  metadata.reflection = AskReconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kZFieldNumber;
#endif  // !_MSC_VER

Pos::Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.Pos)
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.Pos)
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:GCToSS.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_z;
        break;
      }

      // optional float z = 2;
      case 2: {
        if (tag == 21) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.Pos)
  return false;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.Pos)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.Pos)
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.Pos)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.Pos)
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float z = 2;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {

  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveTar::kMsgnumFieldNumber;
const int MoveTar::kPosFieldNumber;
#endif  // !_MSC_VER

MoveTar::MoveTar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.MoveTar)
}

void MoveTar::InitAsDefaultInstance() {
  pos_ = const_cast< ::GCToSS::Pos*>(&::GCToSS::Pos::default_instance());
}

MoveTar::MoveTar(const MoveTar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.MoveTar)
}

void MoveTar::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16409;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveTar::~MoveTar() {
  // @@protoc_insertion_point(destructor:GCToSS.MoveTar)
  SharedDtor();
}

void MoveTar::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MoveTar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveTar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveTar_descriptor_;
}

const MoveTar& MoveTar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

MoveTar* MoveTar::default_instance_ = NULL;

MoveTar* MoveTar::New() const {
  return new MoveTar;
}

void MoveTar::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16409;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GCToSS::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveTar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.MoveTar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMovePos];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .GCToSS.Pos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.MoveTar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.MoveTar)
  return false;
#undef DO_
}

void MoveTar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.MoveTar)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMovePos];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional .GCToSS.Pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.MoveTar)
}

::google::protobuf::uint8* MoveTar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.MoveTar)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMovePos];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional .GCToSS.Pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.MoveTar)
  return target;
}

int MoveTar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskMovePos];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional .GCToSS.Pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveTar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveTar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveTar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveTar::MergeFrom(const MoveTar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_pos()) {
      mutable_pos()->::GCToSS::Pos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveTar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTar::CopyFrom(const MoveTar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTar::IsInitialized() const {

  return true;
}

void MoveTar::Swap(MoveTar* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveTar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveTar_descriptor_;
  metadata.reflection = MoveTar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskBornNPC::kMsgnumFieldNumber;
const int AskBornNPC::kStepidFieldNumber;
const int AskBornNPC::kStateFieldNumber;
#endif  // !_MSC_VER

AskBornNPC::AskBornNPC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AskBornNPC)
}

void AskBornNPC::InitAsDefaultInstance() {
}

AskBornNPC::AskBornNPC(const AskBornNPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AskBornNPC)
}

void AskBornNPC::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16405;
  stepid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskBornNPC::~AskBornNPC() {
  // @@protoc_insertion_point(destructor:GCToSS.AskBornNPC)
  SharedDtor();
}

void AskBornNPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskBornNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskBornNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskBornNPC_descriptor_;
}

const AskBornNPC& AskBornNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AskBornNPC* AskBornNPC::default_instance_ = NULL;

AskBornNPC* AskBornNPC::New() const {
  return new AskBornNPC;
}

void AskBornNPC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskBornNPC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(stepid_, state_);
    msgnum_ = 16405;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskBornNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AskBornNPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBornNPC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stepid;
        break;
      }

      // optional int32 stepid = 2;
      case 2: {
        if (tag == 16) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AskBornNPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AskBornNPC)
  return false;
#undef DO_
}

void AskBornNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AskBornNPC)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBornNPC];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 stepid = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stepid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AskBornNPC)
}

::google::protobuf::uint8* AskBornNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AskBornNPC)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBornNPC];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 stepid = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stepid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AskBornNPC)
  return target;
}

int AskBornNPC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskBornNPC];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 stepid = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskBornNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskBornNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskBornNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskBornNPC::MergeFrom(const AskBornNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskBornNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBornNPC::CopyFrom(const AskBornNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBornNPC::IsInitialized() const {

  return true;
}

void AskBornNPC::Swap(AskBornNPC* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(stepid_, other->stepid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskBornNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskBornNPC_descriptor_;
  metadata.reflection = AskBornNPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlwaysAutoAtk::kMsgnumFieldNumber;
const int AlwaysAutoAtk::kFlagFieldNumber;
#endif  // !_MSC_VER

AlwaysAutoAtk::AlwaysAutoAtk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.AlwaysAutoAtk)
}

void AlwaysAutoAtk::InitAsDefaultInstance() {
}

AlwaysAutoAtk::AlwaysAutoAtk(const AlwaysAutoAtk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.AlwaysAutoAtk)
}

void AlwaysAutoAtk::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16410;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlwaysAutoAtk::~AlwaysAutoAtk() {
  // @@protoc_insertion_point(destructor:GCToSS.AlwaysAutoAtk)
  SharedDtor();
}

void AlwaysAutoAtk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlwaysAutoAtk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlwaysAutoAtk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlwaysAutoAtk_descriptor_;
}

const AlwaysAutoAtk& AlwaysAutoAtk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

AlwaysAutoAtk* AlwaysAutoAtk::default_instance_ = NULL;

AlwaysAutoAtk* AlwaysAutoAtk::New() const {
  return new AlwaysAutoAtk;
}

void AlwaysAutoAtk::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16410;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlwaysAutoAtk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.AlwaysAutoAtk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAlwaysAutoAtk];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional bool flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.AlwaysAutoAtk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.AlwaysAutoAtk)
  return false;
#undef DO_
}

void AlwaysAutoAtk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.AlwaysAutoAtk)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAlwaysAutoAtk];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.AlwaysAutoAtk)
}

::google::protobuf::uint8* AlwaysAutoAtk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.AlwaysAutoAtk)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAlwaysAutoAtk];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.AlwaysAutoAtk)
  return target;
}

int AlwaysAutoAtk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskAlwaysAutoAtk];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlwaysAutoAtk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlwaysAutoAtk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlwaysAutoAtk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlwaysAutoAtk::MergeFrom(const AlwaysAutoAtk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlwaysAutoAtk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlwaysAutoAtk::CopyFrom(const AlwaysAutoAtk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlwaysAutoAtk::IsInitialized() const {

  return true;
}

void AlwaysAutoAtk::Swap(AlwaysAutoAtk* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlwaysAutoAtk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlwaysAutoAtk_descriptor_;
  metadata.reflection = AlwaysAutoAtk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrySeleceHero::kMsgnumFieldNumber;
const int TrySeleceHero::kHeroidFieldNumber;
#endif  // !_MSC_VER

TrySeleceHero::TrySeleceHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.TrySeleceHero)
}

void TrySeleceHero::InitAsDefaultInstance() {
}

TrySeleceHero::TrySeleceHero(const TrySeleceHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.TrySeleceHero)
}

void TrySeleceHero::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16505;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrySeleceHero::~TrySeleceHero() {
  // @@protoc_insertion_point(destructor:GCToSS.TrySeleceHero)
  SharedDtor();
}

void TrySeleceHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrySeleceHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrySeleceHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrySeleceHero_descriptor_;
}

const TrySeleceHero& TrySeleceHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

TrySeleceHero* TrySeleceHero::default_instance_ = NULL;

TrySeleceHero* TrySeleceHero::New() const {
  return new TrySeleceHero;
}

void TrySeleceHero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16505;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrySeleceHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.TrySeleceHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskTrySelectHero];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.TrySeleceHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.TrySeleceHero)
  return false;
#undef DO_
}

void TrySeleceHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.TrySeleceHero)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskTrySelectHero];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.TrySeleceHero)
}

::google::protobuf::uint8* TrySeleceHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.TrySeleceHero)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskTrySelectHero];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.TrySeleceHero)
  return target;
}

int TrySeleceHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskTrySelectHero];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrySeleceHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrySeleceHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrySeleceHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrySeleceHero::MergeFrom(const TrySeleceHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrySeleceHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrySeleceHero::CopyFrom(const TrySeleceHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrySeleceHero::IsInitialized() const {

  return true;
}

void TrySeleceHero::Swap(TrySeleceHero* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrySeleceHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrySeleceHero_descriptor_;
  metadata.reflection = TrySeleceHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectHero::kMsgnumFieldNumber;
const int SelectHero::kHeroidFieldNumber;
#endif  // !_MSC_VER

SelectHero::SelectHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.SelectHero)
}

void SelectHero::InitAsDefaultInstance() {
}

SelectHero::SelectHero(const SelectHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.SelectHero)
}

void SelectHero::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16506;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectHero::~SelectHero() {
  // @@protoc_insertion_point(destructor:GCToSS.SelectHero)
  SharedDtor();
}

void SelectHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectHero_descriptor_;
}

const SelectHero& SelectHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

SelectHero* SelectHero::default_instance_ = NULL;

SelectHero* SelectHero::New() const {
  return new SelectHero;
}

void SelectHero::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16506;
    heroid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.SelectHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectHero];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.SelectHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.SelectHero)
  return false;
#undef DO_
}

void SelectHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.SelectHero)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectHero];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.SelectHero)
}

::google::protobuf::uint8* SelectHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.SelectHero)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectHero];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.SelectHero)
  return target;
}

int SelectHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectHero];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectHero::MergeFrom(const SelectHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectHero::CopyFrom(const SelectHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectHero::IsInitialized() const {

  return true;
}

void SelectHero::Swap(SelectHero* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectHero_descriptor_;
  metadata.reflection = SelectHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectRunePage::kMsgnumFieldNumber;
const int SelectRunePage::kPageindexFieldNumber;
#endif  // !_MSC_VER

SelectRunePage::SelectRunePage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.SelectRunePage)
}

void SelectRunePage::InitAsDefaultInstance() {
}

SelectRunePage::SelectRunePage(const SelectRunePage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.SelectRunePage)
}

void SelectRunePage::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16507;
  pageindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectRunePage::~SelectRunePage() {
  // @@protoc_insertion_point(destructor:GCToSS.SelectRunePage)
  SharedDtor();
}

void SelectRunePage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectRunePage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectRunePage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectRunePage_descriptor_;
}

const SelectRunePage& SelectRunePage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

SelectRunePage* SelectRunePage::default_instance_ = NULL;

SelectRunePage* SelectRunePage::New() const {
  return new SelectRunePage;
}

void SelectRunePage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 16507;
    pageindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectRunePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.SelectRunePage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectRunePage];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pageindex;
        break;
      }

      // optional int32 pageindex = 2;
      case 2: {
        if (tag == 16) {
         parse_pageindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageindex_)));
          set_has_pageindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.SelectRunePage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.SelectRunePage)
  return false;
#undef DO_
}

void SelectRunePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.SelectRunePage)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectRunePage];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 pageindex = 2;
  if (has_pageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pageindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.SelectRunePage)
}

::google::protobuf::uint8* SelectRunePage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.SelectRunePage)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectRunePage];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 pageindex = 2;
  if (has_pageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pageindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.SelectRunePage)
  return target;
}

int SelectRunePage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_AskSelectRunePage];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 pageindex = 2;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectRunePage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectRunePage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectRunePage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectRunePage::MergeFrom(const SelectRunePage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_pageindex()) {
      set_pageindex(from.pageindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectRunePage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRunePage::CopyFrom(const SelectRunePage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRunePage::IsInitialized() const {

  return true;
}

void SelectRunePage::Swap(SelectRunePage* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectRunePage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectRunePage_descriptor_;
  metadata.reflection = SelectRunePage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadComplete::kMsgnumFieldNumber;
#endif  // !_MSC_VER

LoadComplete::LoadComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToSS.LoadComplete)
}

void LoadComplete::InitAsDefaultInstance() {
}

LoadComplete::LoadComplete(const LoadComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToSS.LoadComplete)
}

void LoadComplete::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 16520;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadComplete::~LoadComplete() {
  // @@protoc_insertion_point(destructor:GCToSS.LoadComplete)
  SharedDtor();
}

void LoadComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadComplete_descriptor_;
}

const LoadComplete& LoadComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToSS_2eproto();
  return *default_instance_;
}

LoadComplete* LoadComplete::default_instance_ = NULL;

LoadComplete* LoadComplete::New() const {
  return new LoadComplete;
}

void LoadComplete::Clear() {
  msgnum_ = 16520;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToSS.LoadComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportLoadBattleComplete];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToSS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToSS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToSS.LoadComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToSS.LoadComplete)
  return false;
#undef DO_
}

void LoadComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToSS.LoadComplete)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportLoadBattleComplete];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToSS.LoadComplete)
}

::google::protobuf::uint8* LoadComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToSS.LoadComplete)
  // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportLoadBattleComplete];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToSS.LoadComplete)
  return target;
}

int LoadComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToSS.MsgNum msgnum = 1 [default = eMsgToGSToSSFromGC_ReportLoadBattleComplete];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadComplete::MergeFrom(const LoadComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadComplete::CopyFrom(const LoadComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadComplete::IsInitialized() const {

  return true;
}

void LoadComplete::Swap(LoadComplete* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadComplete_descriptor_;
  metadata.reflection = LoadComplete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GCToSS

// @@protoc_insertion_point(global_scope)
