// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ToLog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ToLog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ToLog {

namespace {

const ::google::protobuf::Descriptor* WriteLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ToLog_2eproto() {
  protobuf_AddDesc_ToLog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ToLog.proto");
  GOOGLE_CHECK(file != NULL);
  WriteLog_descriptor_ = file->message_type(0);
  static const int WriteLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLog, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLog, log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLog, log_str_),
  };
  WriteLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteLog_descriptor_,
      WriteLog::default_instance_,
      WriteLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteLog));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ToLog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteLog_descriptor_, &WriteLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ToLog_2eproto() {
  delete WriteLog::default_instance_;
  delete WriteLog_reflection_;
}

void protobuf_AddDesc_ToLog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ToLog.proto\022\005ToLog\"^\n\010WriteLog\022/\n\005msgi"
    "d\030\001 \001(\0162\014.ToLog.MsgID:\022eMsgToLog_WriteLo"
    "g\022\020\n\010log_type\030\002 \001(\005\022\017\n\007log_str\030\003 \001(\t*G\n\005"
    "MsgID\022\023\n\017eMsgToLog_Begin\020\000\022\026\n\022eMsgToLog_"
    "WriteLog\020\001\022\021\n\reMsgToLog_End\020d", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ToLog.proto", &protobuf_RegisterTypes);
  WriteLog::default_instance_ = new WriteLog();
  WriteLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ToLog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ToLog_2eproto {
  StaticDescriptorInitializer_ToLog_2eproto() {
    protobuf_AddDesc_ToLog_2eproto();
  }
} static_descriptor_initializer_ToLog_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WriteLog::kMsgidFieldNumber;
const int WriteLog::kLogTypeFieldNumber;
const int WriteLog::kLogStrFieldNumber;
#endif  // !_MSC_VER

WriteLog::WriteLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToLog.WriteLog)
}

void WriteLog::InitAsDefaultInstance() {
}

WriteLog::WriteLog(const WriteLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToLog.WriteLog)
}

void WriteLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 1;
  log_type_ = 0;
  log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteLog::~WriteLog() {
  // @@protoc_insertion_point(destructor:ToLog.WriteLog)
  SharedDtor();
}

void WriteLog::SharedDtor() {
  if (log_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_str_;
  }
  if (this != default_instance_) {
  }
}

void WriteLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteLog_descriptor_;
}

const WriteLog& WriteLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ToLog_2eproto();
  return *default_instance_;
}

WriteLog* WriteLog::default_instance_ = NULL;

WriteLog* WriteLog::New() const {
  return new WriteLog;
}

void WriteLog::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 1;
    log_type_ = 0;
    if (has_log_str()) {
      if (log_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToLog.WriteLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ToLog::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::ToLog::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_log_type;
        break;
      }

      // optional int32 log_type = 2;
      case 2: {
        if (tag == 16) {
         parse_log_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_type_)));
          set_has_log_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log_str;
        break;
      }

      // optional string log_str = 3;
      case 3: {
        if (tag == 26) {
         parse_log_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_str().data(), this->log_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToLog.WriteLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToLog.WriteLog)
  return false;
#undef DO_
}

void WriteLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToLog.WriteLog)
  // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 log_type = 2;
  if (has_log_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->log_type(), output);
  }

  // optional string log_str = 3;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToLog.WriteLog)
}

::google::protobuf::uint8* WriteLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToLog.WriteLog)
  // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 log_type = 2;
  if (has_log_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->log_type(), target);
  }

  // optional string log_str = 3;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToLog.WriteLog)
  return target;
}

int WriteLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 log_type = 2;
    if (has_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_type());
    }

    // optional string log_str = 3;
    if (has_log_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteLog::MergeFrom(const WriteLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_log_type()) {
      set_log_type(from.log_type());
    }
    if (from.has_log_str()) {
      set_log_str(from.log_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLog::CopyFrom(const WriteLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLog::IsInitialized() const {

  return true;
}

void WriteLog::Swap(WriteLog* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(log_type_, other->log_type_);
    std::swap(log_str_, other->log_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteLog_descriptor_;
  metadata.reflection = WriteLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ToLog

// @@protoc_insertion_point(global_scope)
