// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GCToCS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GCToCS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GCToCS {

namespace {

const ::google::protobuf::Descriptor* AskOneTaskRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskOneTaskRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDKReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDKReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurtUIEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurtUIEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurtUIEvent_UIEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurtUIEvent_UIEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRecoinRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRecoinRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackListOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackListOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCSGMCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCSGMCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOneMatchNeedOneRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOneMatchNeedOneRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskChangeheaderId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskChangeheaderId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNickName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNickName_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskCreateMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskCreateMatchTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddMatchTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRemoveMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRemoveMatchTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskInviteJoinMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskInviteJoinMatchTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskStartMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskStartMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskStopMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskStopMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMatchTeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMatchTeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskGoodscfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskGoodscfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskCSCreateGuideBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskCSCreateGuideBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AskCSCreateGuideBattle_guidetype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AskQuickBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskQuickBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskStopQuickBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskStopQuickBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskCreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskCreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskLeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskLeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskChangeRoomSeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskChangeRoomSeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskReadyRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskReadyRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskCancelRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskCancelRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskStartRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskStartRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskReEnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskReEnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskChatInRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskChatInRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskGetMailGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskGetMailGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskBuyGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskBuyGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAskGetCLReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAskGetCLReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskCurtNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskCurtNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddToSNSList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddToSNSList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskCanInviteFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskCanInviteFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddToSNSListByID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddToSNSListByID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRemoveFromSNSList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRemoveFromSNSList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSendMsgToUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSendMsgToUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskInviteFriendsToBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskInviteFriendsToBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskQueryUserByNickName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskQueryUserByNickName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCReplyAddFriendRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCReplyAddFriendRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideCSStepComp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideCSStepComp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCReplyInviteToBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCReplyInviteToBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyRunes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyRunes_reflection_ = NULL;
const ::google::protobuf::Descriptor* EuipRunes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EuipRunes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnEuipRunes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnEuipRunes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComposeRunes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposeRunes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectToGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComGuideStepID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComGuideStepID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRoomList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgNum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* notice_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GCToCS_2eproto() {
  protobuf_AddDesc_GCToCS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GCToCS.proto");
  GOOGLE_CHECK(file != NULL);
  AskOneTaskRewards_descriptor_ = file->message_type(0);
  static const int AskOneTaskRewards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskOneTaskRewards, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskOneTaskRewards, task_guid_),
  };
  AskOneTaskRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskOneTaskRewards_descriptor_,
      AskOneTaskRewards::default_instance_,
      AskOneTaskRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskOneTaskRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskOneTaskRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskOneTaskRewards));
  CDKReq_descriptor_ = file->message_type(1);
  static const int CDKReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKReq, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKReq, cdkstr_),
  };
  CDKReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDKReq_descriptor_,
      CDKReq::default_instance_,
      CDKReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDKReq));
  CurtUIEvent_descriptor_ = file->message_type(2);
  static const int CurtUIEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent, eventlist_),
  };
  CurtUIEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurtUIEvent_descriptor_,
      CurtUIEvent::default_instance_,
      CurtUIEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurtUIEvent));
  CurtUIEvent_UIEvent_descriptor_ = CurtUIEvent_descriptor_->nested_type(0);
  static const int CurtUIEvent_UIEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent_UIEvent, uiidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent_UIEvent, eventnum_),
  };
  CurtUIEvent_UIEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurtUIEvent_UIEvent_descriptor_,
      CurtUIEvent_UIEvent::default_instance_,
      CurtUIEvent_UIEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent_UIEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurtUIEvent_UIEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurtUIEvent_UIEvent));
  AskRecoinRune_descriptor_ = file->message_type(3);
  static const int AskRecoinRune_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRecoinRune, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRecoinRune, rune_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRecoinRune, pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRecoinRune, cost_),
  };
  AskRecoinRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRecoinRune_descriptor_,
      AskRecoinRune::default_instance_,
      AskRecoinRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRecoinRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRecoinRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRecoinRune));
  BlackListOnlineInfo_descriptor_ = file->message_type(4);
  static const int BlackListOnlineInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOnlineInfo, msgnum_),
  };
  BlackListOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackListOnlineInfo_descriptor_,
      BlackListOnlineInfo::default_instance_,
      BlackListOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackListOnlineInfo));
  AddCSGMCmd_descriptor_ = file->message_type(5);
  static const int AddCSGMCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCSGMCmd, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCSGMCmd, gmcmd_),
  };
  AddCSGMCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCSGMCmd_descriptor_,
      AddCSGMCmd::default_instance_,
      AddCSGMCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCSGMCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCSGMCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCSGMCmd));
  NotifyOneMatchNeedOneRet_descriptor_ = file->message_type(6);
  static const int NotifyOneMatchNeedOneRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOneRet, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOneRet, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOneRet, fightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOneRet, isaccept_),
  };
  NotifyOneMatchNeedOneRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOneMatchNeedOneRet_descriptor_,
      NotifyOneMatchNeedOneRet::default_instance_,
      NotifyOneMatchNeedOneRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOneRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOneRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOneMatchNeedOneRet));
  AskChangeheaderId_descriptor_ = file->message_type(7);
  static const int AskChangeheaderId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeheaderId, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeheaderId, newheaderid_),
  };
  AskChangeheaderId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskChangeheaderId_descriptor_,
      AskChangeheaderId::default_instance_,
      AskChangeheaderId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeheaderId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeheaderId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskChangeheaderId));
  ChangeNickName_descriptor_ = file->message_type(8);
  static const int ChangeNickName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, newnickname_),
  };
  ChangeNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNickName_descriptor_,
      ChangeNickName::default_instance_,
      ChangeNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNickName));
  AskCreateMatchTeam_descriptor_ = file->message_type(9);
  static const int AskCreateMatchTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateMatchTeam, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateMatchTeam, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateMatchTeam, mapid_),
  };
  AskCreateMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskCreateMatchTeam_descriptor_,
      AskCreateMatchTeam::default_instance_,
      AskCreateMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskCreateMatchTeam));
  AskAddMatchTeam_descriptor_ = file->message_type(10);
  static const int AskAddMatchTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMatchTeam, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMatchTeam, friendsnickname_),
  };
  AskAddMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddMatchTeam_descriptor_,
      AskAddMatchTeam::default_instance_,
      AskAddMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddMatchTeam));
  AskRemoveMatchTeam_descriptor_ = file->message_type(11);
  static const int AskRemoveMatchTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveMatchTeam, msgnum_),
  };
  AskRemoveMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRemoveMatchTeam_descriptor_,
      AskRemoveMatchTeam::default_instance_,
      AskRemoveMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRemoveMatchTeam));
  AskInviteJoinMatchTeam_descriptor_ = file->message_type(12);
  static const int AskInviteJoinMatchTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteJoinMatchTeam, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteJoinMatchTeam, friendsnickname_),
  };
  AskInviteJoinMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskInviteJoinMatchTeam_descriptor_,
      AskInviteJoinMatchTeam::default_instance_,
      AskInviteJoinMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteJoinMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteJoinMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskInviteJoinMatchTeam));
  AskStartMatch_descriptor_ = file->message_type(13);
  static const int AskStartMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStartMatch, msgnum_),
  };
  AskStartMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskStartMatch_descriptor_,
      AskStartMatch::default_instance_,
      AskStartMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStartMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStartMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskStartMatch));
  AskStopMatch_descriptor_ = file->message_type(14);
  static const int AskStopMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStopMatch, msgnum_),
  };
  AskStopMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskStopMatch_descriptor_,
      AskStopMatch::default_instance_,
      AskStopMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStopMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStopMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskStopMatch));
  RequestMatchTeamList_descriptor_ = file->message_type(15);
  static const int RequestMatchTeamList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMatchTeamList, msgnum_),
  };
  RequestMatchTeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMatchTeamList_descriptor_,
      RequestMatchTeamList::default_instance_,
      RequestMatchTeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMatchTeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMatchTeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMatchTeamList));
  AskGoodscfg_descriptor_ = file->message_type(16);
  static const int AskGoodscfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGoodscfg, msgnum_),
  };
  AskGoodscfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskGoodscfg_descriptor_,
      AskGoodscfg::default_instance_,
      AskGoodscfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGoodscfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGoodscfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskGoodscfg));
  AskCSCreateGuideBattle_descriptor_ = file->message_type(17);
  static const int AskCSCreateGuideBattle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCSCreateGuideBattle, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCSCreateGuideBattle, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCSCreateGuideBattle, ntype_),
  };
  AskCSCreateGuideBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskCSCreateGuideBattle_descriptor_,
      AskCSCreateGuideBattle::default_instance_,
      AskCSCreateGuideBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCSCreateGuideBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCSCreateGuideBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskCSCreateGuideBattle));
  AskCSCreateGuideBattle_guidetype_descriptor_ = AskCSCreateGuideBattle_descriptor_->enum_type(0);
  AskQuickBattle_descriptor_ = file->message_type(18);
  static const int AskQuickBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattle, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattle, mapid_),
  };
  AskQuickBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskQuickBattle_descriptor_,
      AskQuickBattle::default_instance_,
      AskQuickBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQuickBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskQuickBattle));
  AskStopQuickBattle_descriptor_ = file->message_type(19);
  static const int AskStopQuickBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStopQuickBattle, msgnum_),
  };
  AskStopQuickBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskStopQuickBattle_descriptor_,
      AskStopQuickBattle::default_instance_,
      AskStopQuickBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStopQuickBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStopQuickBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskStopQuickBattle));
  AskCreateRoom_descriptor_ = file->message_type(20);
  static const int AskCreateRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateRoom, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateRoom, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateRoom, passwd_),
  };
  AskCreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskCreateRoom_descriptor_,
      AskCreateRoom::default_instance_,
      AskCreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskCreateRoom));
  AskAddRoom_descriptor_ = file->message_type(21);
  static const int AskAddRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddRoom, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddRoom, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddRoom, passwd_),
  };
  AskAddRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddRoom_descriptor_,
      AskAddRoom::default_instance_,
      AskAddRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddRoom));
  AskLeaveRoom_descriptor_ = file->message_type(22);
  static const int AskLeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskLeaveRoom, msgnum_),
  };
  AskLeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskLeaveRoom_descriptor_,
      AskLeaveRoom::default_instance_,
      AskLeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskLeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskLeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskLeaveRoom));
  AskChangeRoomSeat_descriptor_ = file->message_type(23);
  static const int AskChangeRoomSeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeRoomSeat, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeRoomSeat, newpos_),
  };
  AskChangeRoomSeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskChangeRoomSeat_descriptor_,
      AskChangeRoomSeat::default_instance_,
      AskChangeRoomSeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeRoomSeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeRoomSeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskChangeRoomSeat));
  AskReadyRoom_descriptor_ = file->message_type(24);
  static const int AskReadyRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReadyRoom, msgnum_),
  };
  AskReadyRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskReadyRoom_descriptor_,
      AskReadyRoom::default_instance_,
      AskReadyRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReadyRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReadyRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskReadyRoom));
  AskCancelRoom_descriptor_ = file->message_type(25);
  static const int AskCancelRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCancelRoom, msgnum_),
  };
  AskCancelRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskCancelRoom_descriptor_,
      AskCancelRoom::default_instance_,
      AskCancelRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCancelRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCancelRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskCancelRoom));
  AskStartRoom_descriptor_ = file->message_type(26);
  static const int AskStartRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStartRoom, msgnum_),
  };
  AskStartRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskStartRoom_descriptor_,
      AskStartRoom::default_instance_,
      AskStartRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStartRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskStartRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskStartRoom));
  AskReEnterRoom_descriptor_ = file->message_type(27);
  static const int AskReEnterRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReEnterRoom, msgnum_),
  };
  AskReEnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskReEnterRoom_descriptor_,
      AskReEnterRoom::default_instance_,
      AskReEnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReEnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskReEnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskReEnterRoom));
  AskChatInRoom_descriptor_ = file->message_type(28);
  static const int AskChatInRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChatInRoom, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChatInRoom, chat_),
  };
  AskChatInRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskChatInRoom_descriptor_,
      AskChatInRoom::default_instance_,
      AskChatInRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChatInRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChatInRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskChatInRoom));
  AskGetMailGift_descriptor_ = file->message_type(29);
  static const int AskGetMailGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGetMailGift, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGetMailGift, mailid_),
  };
  AskGetMailGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskGetMailGift_descriptor_,
      AskGetMailGift::default_instance_,
      AskGetMailGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGetMailGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGetMailGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskGetMailGift));
  AskMailInfo_descriptor_ = file->message_type(30);
  static const int AskMailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMailInfo, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMailInfo, mailid_),
  };
  AskMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskMailInfo_descriptor_,
      AskMailInfo::default_instance_,
      AskMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskMailInfo));
  AskBuyGoods_descriptor_ = file->message_type(31);
  static const int AskBuyGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBuyGoods, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBuyGoods, commondityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBuyGoods, consumetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBuyGoods, num_),
  };
  AskBuyGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskBuyGoods_descriptor_,
      AskBuyGoods::default_instance_,
      AskBuyGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBuyGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBuyGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskBuyGoods));
  UserAskGetCLReward_descriptor_ = file->message_type(32);
  static const int UserAskGetCLReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAskGetCLReward, msgnum_),
  };
  UserAskGetCLReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAskGetCLReward_descriptor_,
      UserAskGetCLReward::default_instance_,
      UserAskGetCLReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAskGetCLReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAskGetCLReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAskGetCLReward));
  Notice_descriptor_ = file->message_type(33);
  static const int Notice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, notice_),
  };
  Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notice_descriptor_,
      Notice::default_instance_,
      Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notice));
  AskCurtNotice_descriptor_ = file->message_type(34);
  static const int AskCurtNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCurtNotice, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCurtNotice, type_),
  };
  AskCurtNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskCurtNotice_descriptor_,
      AskCurtNotice::default_instance_,
      AskCurtNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCurtNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCurtNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskCurtNotice));
  CompleteInfo_descriptor_ = file->message_type(35);
  static const int CompleteInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInfo, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInfo, sex_),
  };
  CompleteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompleteInfo_descriptor_,
      CompleteInfo::default_instance_,
      CompleteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompleteInfo));
  AskAddToSNSList_descriptor_ = file->message_type(36);
  static const int AskAddToSNSList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSList, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSList, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSList, type_),
  };
  AskAddToSNSList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddToSNSList_descriptor_,
      AskAddToSNSList::default_instance_,
      AskAddToSNSList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddToSNSList));
  AskCanInviteFriends_descriptor_ = file->message_type(37);
  static const int AskCanInviteFriends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCanInviteFriends, msgnum_),
  };
  AskCanInviteFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskCanInviteFriends_descriptor_,
      AskCanInviteFriends::default_instance_,
      AskCanInviteFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCanInviteFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskCanInviteFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskCanInviteFriends));
  AskAddToSNSListByID_descriptor_ = file->message_type(38);
  static const int AskAddToSNSListByID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSListByID, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSListByID, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSListByID, type_),
  };
  AskAddToSNSListByID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddToSNSListByID_descriptor_,
      AskAddToSNSListByID::default_instance_,
      AskAddToSNSListByID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSListByID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddToSNSListByID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddToSNSListByID));
  AskRemoveFromSNSList_descriptor_ = file->message_type(39);
  static const int AskRemoveFromSNSList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveFromSNSList, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveFromSNSList, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveFromSNSList, type_),
  };
  AskRemoveFromSNSList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRemoveFromSNSList_descriptor_,
      AskRemoveFromSNSList::default_instance_,
      AskRemoveFromSNSList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveFromSNSList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRemoveFromSNSList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRemoveFromSNSList));
  AskSendMsgToUser_descriptor_ = file->message_type(40);
  static const int AskSendMsgToUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSendMsgToUser, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSendMsgToUser, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSendMsgToUser, contents_),
  };
  AskSendMsgToUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSendMsgToUser_descriptor_,
      AskSendMsgToUser::default_instance_,
      AskSendMsgToUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSendMsgToUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSendMsgToUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSendMsgToUser));
  AskInviteFriendsToBattle_descriptor_ = file->message_type(41);
  static const int AskInviteFriendsToBattle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteFriendsToBattle, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteFriendsToBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteFriendsToBattle, guididx_),
  };
  AskInviteFriendsToBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskInviteFriendsToBattle_descriptor_,
      AskInviteFriendsToBattle::default_instance_,
      AskInviteFriendsToBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteFriendsToBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteFriendsToBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskInviteFriendsToBattle));
  AskQueryUserByNickName_descriptor_ = file->message_type(42);
  static const int AskQueryUserByNickName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQueryUserByNickName, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQueryUserByNickName, nickname_),
  };
  AskQueryUserByNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskQueryUserByNickName_descriptor_,
      AskQueryUserByNickName::default_instance_,
      AskQueryUserByNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQueryUserByNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskQueryUserByNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskQueryUserByNickName));
  GCReplyAddFriendRequst_descriptor_ = file->message_type(43);
  static const int GCReplyAddFriendRequst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyAddFriendRequst, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyAddFriendRequst, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyAddFriendRequst, reply_),
  };
  GCReplyAddFriendRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCReplyAddFriendRequst_descriptor_,
      GCReplyAddFriendRequst::default_instance_,
      GCReplyAddFriendRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyAddFriendRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyAddFriendRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCReplyAddFriendRequst));
  GuideCSStepComp_descriptor_ = file->message_type(44);
  static const int GuideCSStepComp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepComp, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepComp, guidepart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepComp, bcomp_),
  };
  GuideCSStepComp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideCSStepComp_descriptor_,
      GuideCSStepComp::default_instance_,
      GuideCSStepComp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepComp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepComp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideCSStepComp));
  GCReplyInviteToBattle_descriptor_ = file->message_type(45);
  static const int GCReplyInviteToBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyInviteToBattle, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyInviteToBattle, nickname_),
  };
  GCReplyInviteToBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCReplyInviteToBattle_descriptor_,
      GCReplyInviteToBattle::default_instance_,
      GCReplyInviteToBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyInviteToBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReplyInviteToBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCReplyInviteToBattle));
  Login_descriptor_ = file->message_type(46);
  static const int Login_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, sdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, equimentid_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  UserGameInfo_descriptor_ = file->message_type(47);
  static const int UserGameInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, msgnum_),
  };
  UserGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGameInfo_descriptor_,
      UserGameInfo::default_instance_,
      UserGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGameInfo));
  BuyRunes_descriptor_ = file->message_type(48);
  static const int BuyRunes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRunes, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRunes, typeid__),
  };
  BuyRunes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyRunes_descriptor_,
      BuyRunes::default_instance_,
      BuyRunes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRunes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRunes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyRunes));
  EuipRunes_descriptor_ = file->message_type(49);
  static const int EuipRunes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EuipRunes, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EuipRunes, runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EuipRunes, topos_),
  };
  EuipRunes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EuipRunes_descriptor_,
      EuipRunes::default_instance_,
      EuipRunes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EuipRunes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EuipRunes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EuipRunes));
  UnEuipRunes_descriptor_ = file->message_type(50);
  static const int UnEuipRunes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnEuipRunes, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnEuipRunes, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnEuipRunes, pos_),
  };
  UnEuipRunes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnEuipRunes_descriptor_,
      UnEuipRunes::default_instance_,
      UnEuipRunes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnEuipRunes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnEuipRunes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnEuipRunes));
  ComposeRunes_descriptor_ = file->message_type(51);
  static const int ComposeRunes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeRunes, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeRunes, runesid_),
  };
  ComposeRunes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposeRunes_descriptor_,
      ComposeRunes::default_instance_,
      ComposeRunes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeRunes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposeRunes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposeRunes));
  ReconnectToGame_descriptor_ = file->message_type(52);
  static const int ReconnectToGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectToGame, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectToGame, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectToGame, passwd_),
  };
  ReconnectToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectToGame_descriptor_,
      ReconnectToGame::default_instance_,
      ReconnectToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectToGame));
  ComGuideStepID_descriptor_ = file->message_type(53);
  static const int ComGuideStepID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComGuideStepID, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComGuideStepID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComGuideStepID, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComGuideStepID, state_),
  };
  ComGuideStepID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComGuideStepID_descriptor_,
      ComGuideStepID::default_instance_,
      ComGuideStepID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComGuideStepID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComGuideStepID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComGuideStepID));
  AskRoomList_descriptor_ = file->message_type(54);
  static const int AskRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomList, msgnum_),
  };
  AskRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRoomList_descriptor_,
      AskRoomList::default_instance_,
      AskRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRoomList));
  MsgNum_descriptor_ = file->enum_type(0);
  notice_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GCToCS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskOneTaskRewards_descriptor_, &AskOneTaskRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDKReq_descriptor_, &CDKReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurtUIEvent_descriptor_, &CurtUIEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurtUIEvent_UIEvent_descriptor_, &CurtUIEvent_UIEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRecoinRune_descriptor_, &AskRecoinRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackListOnlineInfo_descriptor_, &BlackListOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCSGMCmd_descriptor_, &AddCSGMCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOneMatchNeedOneRet_descriptor_, &NotifyOneMatchNeedOneRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskChangeheaderId_descriptor_, &AskChangeheaderId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNickName_descriptor_, &ChangeNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskCreateMatchTeam_descriptor_, &AskCreateMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddMatchTeam_descriptor_, &AskAddMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRemoveMatchTeam_descriptor_, &AskRemoveMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskInviteJoinMatchTeam_descriptor_, &AskInviteJoinMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskStartMatch_descriptor_, &AskStartMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskStopMatch_descriptor_, &AskStopMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMatchTeamList_descriptor_, &RequestMatchTeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskGoodscfg_descriptor_, &AskGoodscfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskCSCreateGuideBattle_descriptor_, &AskCSCreateGuideBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskQuickBattle_descriptor_, &AskQuickBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskStopQuickBattle_descriptor_, &AskStopQuickBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskCreateRoom_descriptor_, &AskCreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddRoom_descriptor_, &AskAddRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskLeaveRoom_descriptor_, &AskLeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskChangeRoomSeat_descriptor_, &AskChangeRoomSeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskReadyRoom_descriptor_, &AskReadyRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskCancelRoom_descriptor_, &AskCancelRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskStartRoom_descriptor_, &AskStartRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskReEnterRoom_descriptor_, &AskReEnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskChatInRoom_descriptor_, &AskChatInRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskGetMailGift_descriptor_, &AskGetMailGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskMailInfo_descriptor_, &AskMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskBuyGoods_descriptor_, &AskBuyGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAskGetCLReward_descriptor_, &UserAskGetCLReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notice_descriptor_, &Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskCurtNotice_descriptor_, &AskCurtNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompleteInfo_descriptor_, &CompleteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddToSNSList_descriptor_, &AskAddToSNSList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskCanInviteFriends_descriptor_, &AskCanInviteFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddToSNSListByID_descriptor_, &AskAddToSNSListByID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRemoveFromSNSList_descriptor_, &AskRemoveFromSNSList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSendMsgToUser_descriptor_, &AskSendMsgToUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskInviteFriendsToBattle_descriptor_, &AskInviteFriendsToBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskQueryUserByNickName_descriptor_, &AskQueryUserByNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCReplyAddFriendRequst_descriptor_, &GCReplyAddFriendRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideCSStepComp_descriptor_, &GuideCSStepComp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCReplyInviteToBattle_descriptor_, &GCReplyInviteToBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGameInfo_descriptor_, &UserGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyRunes_descriptor_, &BuyRunes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EuipRunes_descriptor_, &EuipRunes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnEuipRunes_descriptor_, &UnEuipRunes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposeRunes_descriptor_, &ComposeRunes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectToGame_descriptor_, &ReconnectToGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComGuideStepID_descriptor_, &ComGuideStepID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRoomList_descriptor_, &AskRoomList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GCToCS_2eproto() {
  delete AskOneTaskRewards::default_instance_;
  delete AskOneTaskRewards_reflection_;
  delete CDKReq::default_instance_;
  delete CDKReq_reflection_;
  delete CurtUIEvent::default_instance_;
  delete CurtUIEvent_reflection_;
  delete CurtUIEvent_UIEvent::default_instance_;
  delete CurtUIEvent_UIEvent_reflection_;
  delete AskRecoinRune::default_instance_;
  delete AskRecoinRune_reflection_;
  delete BlackListOnlineInfo::default_instance_;
  delete BlackListOnlineInfo_reflection_;
  delete AddCSGMCmd::default_instance_;
  delete AddCSGMCmd_reflection_;
  delete NotifyOneMatchNeedOneRet::default_instance_;
  delete NotifyOneMatchNeedOneRet_reflection_;
  delete AskChangeheaderId::default_instance_;
  delete AskChangeheaderId_reflection_;
  delete ChangeNickName::default_instance_;
  delete ChangeNickName_reflection_;
  delete AskCreateMatchTeam::default_instance_;
  delete AskCreateMatchTeam_reflection_;
  delete AskAddMatchTeam::default_instance_;
  delete AskAddMatchTeam_reflection_;
  delete AskRemoveMatchTeam::default_instance_;
  delete AskRemoveMatchTeam_reflection_;
  delete AskInviteJoinMatchTeam::default_instance_;
  delete AskInviteJoinMatchTeam_reflection_;
  delete AskStartMatch::default_instance_;
  delete AskStartMatch_reflection_;
  delete AskStopMatch::default_instance_;
  delete AskStopMatch_reflection_;
  delete RequestMatchTeamList::default_instance_;
  delete RequestMatchTeamList_reflection_;
  delete AskGoodscfg::default_instance_;
  delete AskGoodscfg_reflection_;
  delete AskCSCreateGuideBattle::default_instance_;
  delete AskCSCreateGuideBattle_reflection_;
  delete AskQuickBattle::default_instance_;
  delete AskQuickBattle_reflection_;
  delete AskStopQuickBattle::default_instance_;
  delete AskStopQuickBattle_reflection_;
  delete AskCreateRoom::default_instance_;
  delete AskCreateRoom_reflection_;
  delete AskAddRoom::default_instance_;
  delete AskAddRoom_reflection_;
  delete AskLeaveRoom::default_instance_;
  delete AskLeaveRoom_reflection_;
  delete AskChangeRoomSeat::default_instance_;
  delete AskChangeRoomSeat_reflection_;
  delete AskReadyRoom::default_instance_;
  delete AskReadyRoom_reflection_;
  delete AskCancelRoom::default_instance_;
  delete AskCancelRoom_reflection_;
  delete AskStartRoom::default_instance_;
  delete AskStartRoom_reflection_;
  delete AskReEnterRoom::default_instance_;
  delete AskReEnterRoom_reflection_;
  delete AskChatInRoom::default_instance_;
  delete AskChatInRoom_reflection_;
  delete AskGetMailGift::default_instance_;
  delete AskGetMailGift_reflection_;
  delete AskMailInfo::default_instance_;
  delete AskMailInfo_reflection_;
  delete AskBuyGoods::default_instance_;
  delete AskBuyGoods_reflection_;
  delete UserAskGetCLReward::default_instance_;
  delete UserAskGetCLReward_reflection_;
  delete Notice::default_instance_;
  delete Notice_reflection_;
  delete AskCurtNotice::default_instance_;
  delete AskCurtNotice_reflection_;
  delete CompleteInfo::default_instance_;
  delete CompleteInfo_reflection_;
  delete AskAddToSNSList::default_instance_;
  delete AskAddToSNSList_reflection_;
  delete AskCanInviteFriends::default_instance_;
  delete AskCanInviteFriends_reflection_;
  delete AskAddToSNSListByID::default_instance_;
  delete AskAddToSNSListByID_reflection_;
  delete AskRemoveFromSNSList::default_instance_;
  delete AskRemoveFromSNSList_reflection_;
  delete AskSendMsgToUser::default_instance_;
  delete AskSendMsgToUser_reflection_;
  delete AskInviteFriendsToBattle::default_instance_;
  delete AskInviteFriendsToBattle_reflection_;
  delete AskQueryUserByNickName::default_instance_;
  delete AskQueryUserByNickName_reflection_;
  delete GCReplyAddFriendRequst::default_instance_;
  delete GCReplyAddFriendRequst_reflection_;
  delete GuideCSStepComp::default_instance_;
  delete GuideCSStepComp_reflection_;
  delete GCReplyInviteToBattle::default_instance_;
  delete GCReplyInviteToBattle_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete UserGameInfo::default_instance_;
  delete UserGameInfo_reflection_;
  delete BuyRunes::default_instance_;
  delete BuyRunes_reflection_;
  delete EuipRunes::default_instance_;
  delete EuipRunes_reflection_;
  delete UnEuipRunes::default_instance_;
  delete UnEuipRunes_reflection_;
  delete ComposeRunes::default_instance_;
  delete ComposeRunes_reflection_;
  delete ReconnectToGame::default_instance_;
  delete ReconnectToGame_reflection_;
  delete ComGuideStepID::default_instance_;
  delete ComGuideStepID_reflection_;
  delete AskRoomList::default_instance_;
  delete AskRoomList_reflection_;
}

void protobuf_AddDesc_GCToCS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GCToCS.proto\022\006GCToCS\"l\n\021AskOneTaskRewa"
    "rds\022D\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:$eMs"
    "gToGSToCSFromGC_AskOneTaskRewards\022\021\n\ttas"
    "k_guid\030\002 \001(\r\"S\n\006CDKReq\0229\n\006msgnum\030\001 \001(\0162\016"
    ".GCToCS.MsgNum:\031eMsgToGSToCSFromGC_CDKRe"
    "q\022\016\n\006cdkstr\030\002 \001(\t\"\245\001\n\013CurtUIEvent\022:\n\006msg"
    "num\030\001 \001(\0162\016.GCToCS.MsgNum:\032eMsgToGSToCSF"
    "romGC_UIEvent\022.\n\teventlist\030\002 \003(\0132\033.GCToC"
    "S.CurtUIEvent.UIEvent\032*\n\007UIEvent\022\r\n\005uiid"
    "x\030\002 \001(\r\022\020\n\010eventNum\030\003 \001(\r\"\202\001\n\rAskRecoinR"
    "une\022@\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum: eMs"
    "gToGSToCSFromGC_AskRecoinRune\022\017\n\007rune_id"
    "\030\002 \001(\r\022\020\n\010pay_type\030\003 \001(\r\022\014\n\004cost\030\004 \001(\r\"`"
    "\n\023BlackListOnlineInfo\022I\n\006msgnum\030\001 \001(\0162\016."
    "GCToCS.MsgNum:)eMsgToGSToCSFromGC_AskBla"
    "ckListOnlineInfo\"U\n\nAddCSGMCmd\0228\n\006msgnum"
    "\030\001 \001(\0162\016.GCToCS.MsgNum:\030eMsgToGSToCSFrom"
    "GC_GmCmd\022\r\n\005gmcmd\030\002 \001(\t\"\231\001\n\030NotifyOneMat"
    "chNeedOneRet\022K\n\006msgnum\030\001 \001(\0162\016.GCToCS.Ms"
    "gNum:+eMsgToGSToCSFromGC_NotifyOneMatchN"
    "eedOneRet\022\r\n\005mapid\030\002 \001(\r\022\017\n\007fightid\030\003 \001("
    "\r\022\020\n\010isAccept\030\004 \001(\010\"n\n\021AskChangeheaderId"
    "\022D\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:$eMsgTo"
    "GSToCSFromGC_AskChangeheaderId\022\023\n\013newhea"
    "derid\030\002 \001(\r\"k\n\016ChangeNickName\022D\n\006msgnum\030"
    "\001 \001(\0162\016.GCToCS.MsgNum:$eMsgToGSToCSFromG"
    "C_AskChangeNickName\022\023\n\013newnickname\030\002 \001(\t"
    "\"}\n\022AskCreateMatchTeam\022E\n\006msgnum\030\001 \001(\0162\016"
    ".GCToCS.MsgNum:%eMsgToGSToCSFromGC_AskCr"
    "eateMatchTeam\022\021\n\tmatchtype\030\002 \001(\r\022\r\n\005mapi"
    "d\030\003 \001(\r\"n\n\017AskAddMatchTeam\022B\n\006msgnum\030\001 \001"
    "(\0162\016.GCToCS.MsgNum:\"eMsgToGSToCSFromGC_A"
    "skAddMatchTeam\022\027\n\017friendsNickName\030\002 \001(\t\""
    "[\n\022AskRemoveMatchTeam\022E\n\006msgnum\030\001 \001(\0162\016."
    "GCToCS.MsgNum:%eMsgToGSToCSFromGC_AskRem"
    "oveMatchTeam\"|\n\026AskInviteJoinMatchTeam\022I"
    "\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:)eMsgToGS"
    "ToCSFromGC_AskInviteJoinMatchTeam\022\027\n\017fri"
    "endsNickName\030\002 \001(\t\"Q\n\rAskStartMatch\022@\n\006m"
    "sgnum\030\001 \001(\0162\016.GCToCS.MsgNum: eMsgToGSToC"
    "SFromGC_AskStartMatch\"O\n\014AskStopMatch\022\?\n"
    "\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\037eMsgToGST"
    "oCSFromGC_AskStopMatch\"_\n\024RequestMatchTe"
    "amList\022G\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\'"
    "eMsgToGSToCSFromGC_RequestMatchTeamList\""
    "M\n\013AskGoodscfg\022>\n\006msgnum\030\001 \001(\0162\016.GCToCS."
    "MsgNum:\036eMsgToGSToCSFromGC_AskGoodscfg\"\322"
    "\001\n\026AskCSCreateGuideBattle\022A\n\006msgnum\030\001 \001("
    "\0162\016.GCToCS.MsgNum:!eMsgToGSToCSFromGC_As"
    "kGuideBattle\022\r\n\005mapid\030\002 \001(\005\0227\n\005ntype\030\003 \001"
    "(\0162(.GCToCS.AskCSCreateGuideBattle.guide"
    "type\"-\n\tguidetype\022\t\n\005first\020\001\022\n\n\006second\020\002"
    "\022\t\n\005other\020\003\"b\n\016AskQuickBattle\022A\n\006msgnum\030"
    "\001 \001(\0162\016.GCToCS.MsgNum:!eMsgToGSToCSFromG"
    "C_AskQuickBattle\022\r\n\005mapid\030\002 \001(\005\"[\n\022AskSt"
    "opQuickBattle\022E\n\006msgnum\030\001 \001(\0162\016.GCToCS.M"
    "sgNum:%eMsgToGSToCSFromGC_AskStopQuickBa"
    "ttle\"p\n\rAskCreateRoom\022@\n\006msgnum\030\001 \001(\0162\016."
    "GCToCS.MsgNum: eMsgToGSToCSFromGC_AskCre"
    "ateRoom\022\r\n\005mapid\030\002 \001(\005\022\016\n\006passwd\030\003 \001(\t\"m"
    "\n\nAskAddRoom\022=\n\006msgnum\030\001 \001(\0162\016.GCToCS.Ms"
    "gNum:\035eMsgToGSToCSFromGC_AskAddRoom\022\020\n\010b"
    "attleid\030\002 \001(\004\022\016\n\006passwd\030\003 \001(\t\"O\n\014AskLeav"
    "eRoom\022\?\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\037e"
    "MsgToGSToCSFromGC_AskLeaveRoom\"i\n\021AskCha"
    "ngeRoomSeat\022D\n\006msgnum\030\001 \001(\0162\016.GCToCS.Msg"
    "Num:$eMsgToGSToCSFromGC_AskChangeRoomSea"
    "t\022\016\n\006newpos\030\002 \001(\005\"O\n\014AskReadyRoom\022\?\n\006msg"
    "num\030\001 \001(\0162\016.GCToCS.MsgNum:\037eMsgToGSToCSF"
    "romGC_AskReadyRoom\"Q\n\rAskCancelRoom\022@\n\006m"
    "sgnum\030\001 \001(\0162\016.GCToCS.MsgNum: eMsgToGSToC"
    "SFromGC_AskCancelRoom\"O\n\014AskStartRoom\022\?\n"
    "\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\037eMsgToGST"
    "oCSFromGC_AskStartRoom\"S\n\016AskReEnterRoom"
    "\022A\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:!eMsgTo"
    "GSToCSFromGC_AskReEnterRoom\"_\n\rAskChatIn"
    "Room\022@\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum: eM"
    "sgToGSToCSFromGC_AskChatInRoom\022\014\n\004chat\030\002"
    " \001(\t\"c\n\016AskGetMailGift\022A\n\006msgnum\030\001 \001(\0162\016"
    ".GCToCS.MsgNum:!eMsgToGSToCSFromGC_AskGe"
    "tMailGift\022\016\n\006mailId\030\002 \001(\005\"]\n\013AskMailInfo"
    "\022>\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\036eMsgTo"
    "GSToCSFromGC_AskMailInfo\022\016\n\006mailId\030\002 \001(\005"
    "\"\205\001\n\013AskBuyGoods\022>\n\006msgnum\030\001 \001(\0162\016.GCToC"
    "S.MsgNum:\036eMsgToGSToCSFromGC_AskBuyGoods"
    "\022\024\n\014commondityid\030\002 \001(\005\022\023\n\013consumetype\030\003 "
    "\001(\005\022\013\n\003num\030\004 \001(\r\"[\n\022UserAskGetCLReward\022E"
    "\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:%eMsgToGS"
    "ToCSFromGC_UserAskGetCLReward\"v\n\006Notice\022"
    "9\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\031eMsgToG"
    "SToCSFromGC_Notice\022!\n\004type\030\002 \001(\0162\023.GCToC"
    "S.notice_type\022\016\n\006notice\030\003 \001(\t\"t\n\rAskCurt"
    "Notice\022@\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum: "
    "eMsgToGSToCSFromGC_AskCurtNotice\022!\n\004type"
    "\030\002 \001(\0162\023.GCToCS.notice_type\"\204\001\n\014Complete"
    "Info\022E\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:%eM"
    "sgToGSToCSFromGC_AskComleteUserInfo\022\020\n\010n"
    "ickname\030\002 \001(\t\022\016\n\006headid\030\003 \001(\005\022\013\n\003sex\030\004 \001"
    "(\005\"u\n\017AskAddToSNSList\022B\n\006msgnum\030\001 \001(\0162\016."
    "GCToCS.MsgNum:\"eMsgToGSToCSFromGC_AskAdd"
    "ToSNSList\022\020\n\010nickname\030\002 \001(\t\022\014\n\004type\030\003 \001("
    "\005\"]\n\023AskCanInviteFriends\022F\n\006msgnum\030\001 \001(\016"
    "2\016.GCToCS.MsgNum:&eMsgToGSToCSFromGC_Ask"
    "CanInviteFriends\"{\n\023AskAddToSNSListByID\022"
    "F\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:&eMsgToG"
    "SToCSFromGC_AskAddToSNSListByID\022\016\n\006useri"
    "d\030\002 \001(\004\022\014\n\004type\030\003 \001(\005\"~\n\024AskRemoveFromSN"
    "SList\022G\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\'e"
    "MsgToGSToCSFromGC_AskRemoveFromSNSList\022\017"
    "\n\007guididx\030\002 \001(\004\022\014\n\004type\030\003 \001(\005\"z\n\020AskSend"
    "MsgToUser\022C\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNu"
    "m:#eMsgToGSToCSFromGC_AskSendMsgToUser\022\017"
    "\n\007guididx\030\002 \001(\004\022\020\n\010contents\030\003 \001(\t\"\212\001\n\030As"
    "kInviteFriendsToBattle\022K\n\006msgnum\030\001 \001(\0162\016"
    ".GCToCS.MsgNum:+eMsgToGSToCSFromGC_AskIn"
    "viteFriendsToBattle\022\020\n\010battleid\030\002 \001(\005\022\017\n"
    "\007guididx\030\003 \001(\004\"u\n\026AskQueryUserByNickName"
    "\022I\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:)eMsgTo"
    "GSToCSFromGC_AskQueryUserByNickName\022\020\n\010n"
    "ickname\030\002 \001(\t\"\203\001\n\026GCReplyAddFriendRequst"
    "\022I\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:)eMsgTo"
    "GSToCSFromGC_GCReplyAddFriendRequst\022\017\n\007g"
    "uididx\030\002 \001(\004\022\r\n\005reply\030\003 \001(\005\"y\n\017GuideCSSt"
    "epComp\022D\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:$"
    "eMsgToGSToCSFromGC_CompCSGuideStepId\022\021\n\t"
    "guidepart\030\002 \001(\005\022\r\n\005bcomp\030\003 \001(\010\"s\n\025GCRepl"
    "yInviteToBattle\022H\n\006msgnum\030\001 \001(\0162\016.GCToCS"
    ".MsgNum:(eMsgToGSToCSFromGC_GCReplyInvit"
    "eToBattle\022\020\n\010nickname\030\002 \001(\t\"\250\001\n\005Login\022;\n"
    "\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\033eMsgToGST"
    "oCSFromGC_AskLogin\022\013\n\003sdk\030\002 \001(\005\022\020\n\010platf"
    "orm\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\016\n\006passwd\030\005 \001(\t\022"
    "\021\n\tipaddress\030\006 \001(\t\022\022\n\nequimentid\030\007 \001(\t\"R"
    "\n\014UserGameInfo\022B\n\006msgnum\030\001 \001(\0162\016.GCToCS."
    "MsgNum:\"eMsgToGSToCSFromGC_AskUserGameIn"
    "fo\"W\n\010BuyRunes\022;\n\006msgnum\030\001 \001(\0162\016.GCToCS."
    "MsgNum:\033eMsgToGSToCSFromGC_BUYRunes\022\016\n\006t"
    "ypeid\030\002 \001(\005\"h\n\tEuipRunes\022<\n\006msgnum\030\001 \001(\016"
    "2\016.GCToCS.MsgNum:\034eMsgToGSToCSFromGC_Eui"
    "pRunes\022\016\n\006runeid\030\002 \001(\r\022\r\n\005topos\030\003 \001(\005\"h\n"
    "\013UnEuipRunes\022>\n\006msgnum\030\001 \001(\0162\016.GCToCS.Ms"
    "gNum:\036eMsgToGSToCSFromGC_UnloadRunes\022\014\n\004"
    "page\030\002 \001(\005\022\013\n\003pos\030\003 \001(\005\"`\n\014ComposeRunes\022"
    "\?\n\006msgnum\030\001 \001(\0162\016.GCToCS.MsgNum:\037eMsgToG"
    "SToCSFromGC_ComposeRunes\022\017\n\007runesid\030\002 \003("
    "\r\"t\n\017ReconnectToGame\022C\n\006msgnum\030\001 \001(\0162\016.G"
    "CToCS.MsgNum:#eMsgToGSToCSFromGC_AskReco"
    "nnectGame\022\014\n\004name\030\002 \001(\t\022\016\n\006passwd\030\003 \001(\t\""
    "~\n\016ComGuideStepID\022A\n\006msgnum\030\001 \001(\0162\016.GCTo"
    "CS.MsgNum:!eMsgToGSToCSFromGC_AskGuideSt"
    "epId\022\014\n\004type\030\002 \001(\005\022\014\n\004step\030\003 \001(\005\022\r\n\005stat"
    "e\030\004 \001(\005\"M\n\013AskRoomList\022>\n\006msgnum\030\001 \001(\0162\016"
    ".GCToCS.MsgNum:\036eMsgToGSToCSFromGC_AskRo"
    "omList*\203\022\n\006MsgNum\022\035\n\030eMsgToGSToCSFromGC_"
    "Begin\020\377\?\022 \n\033eMsgToGSToCSFromGC_AskLogin\020"
    "\201@\022(\n#eMsgToGSToCSFromGC_AskReconnectGam"
    "e\020\202@\022*\n%eMsgToGSToCSFromGC_AskComleteUse"
    "rInfo\020\203@\022\'\n\"eMsgToGSToCSFromGC_AskUserGa"
    "meInfo\020\204@\022*\n%eMsgToGSToCSFromGC_UserAskG"
    "etCLReward\020\205@\022\036\n\031eMsgToGSToCSFromGC_Noti"
    "ce\020\210@\022%\n eMsgToGSToCSFromGC_AskCurtNotic"
    "e\020\211@\022\'\n\"eMsgToGSToCSFromGC_AskAddToSNSLi"
    "st\020\222@\022,\n\'eMsgToGSToCSFromGC_AskRemoveFro"
    "mSNSList\020\223@\022(\n#eMsgToGSToCSFromGC_AskSen"
    "dMsgToUser\020\224@\0220\n+eMsgToGSToCSFromGC_AskI"
    "nviteFriendsToBattle\020\225@\022.\n)eMsgToGSToCSF"
    "romGC_AskQueryUserByNickName\020\226@\022.\n)eMsgT"
    "oGSToCSFromGC_GCReplyAddFriendRequst\020\227@\022"
    "-\n(eMsgToGSToCSFromGC_GCReplyInviteToBat"
    "tle\020\230@\022+\n&eMsgToGSToCSFromGC_AskAddToSNS"
    "ListByID\020\231@\022+\n&eMsgToGSToCSFromGC_AskCan"
    "InviteFriends\020\232@\022.\n)eMsgToGSToCSFromGC_A"
    "skBlackListOnlineInfo\020\266B\022 \n\033eMsgToGSToCS"
    "FromGC_BUYRunes\020\234@\022!\n\034eMsgToGSToCSFromGC"
    "_EuipRunes\020\235@\022#\n\036eMsgToGSToCSFromGC_Unlo"
    "adRunes\020\236@\022$\n\037eMsgToGSToCSFromGC_Compose"
    "Runes\020\237@\022#\n\036eMsgToGSToCSFromGC_AskBuyGoo"
    "ds\020\240@\022%\n eMsgToGSToCSFromGC_AskRecoinRun"
    "e\020\267B\022#\n\036eMsgToGSToCSFromGC_AskMailInfo\020\246"
    "@\022&\n!eMsgToGSToCSFromGC_AskGetMailGift\020\247"
    "@\022&\n!eMsgToGSToCSFromGC_AskGuideBattle\020\260"
    "@\022&\n!eMsgToGSToCSFromGC_AskGuideStepId\020\261"
    "@\022)\n$eMsgToGSToCSFromGC_CompCSGuideStepI"
    "d\020\262@\022&\n!eMsgToGSToCSFromGC_AskQuickBattl"
    "e\020\272@\022*\n%eMsgToGSToCSFromGC_AskStopQuickB"
    "attle\020\273@\022%\n eMsgToGSToCSFromGC_AskCreate"
    "Room\020\304@\022\"\n\035eMsgToGSToCSFromGC_AskAddRoom"
    "\020\305@\022$\n\037eMsgToGSToCSFromGC_AskLeaveRoom\020\306"
    "@\022)\n$eMsgToGSToCSFromGC_AskChangeRoomSea"
    "t\020\307@\022$\n\037eMsgToGSToCSFromGC_AskReadyRoom\020"
    "\310@\022%\n eMsgToGSToCSFromGC_AskCancelRoom\020\311"
    "@\022$\n\037eMsgToGSToCSFromGC_AskStartRoom\020\312@\022"
    "%\n eMsgToGSToCSFromGC_AskChatInRoom\020\313@\022&"
    "\n!eMsgToGSToCSFromGC_AskReEnterRoom\020\314@\022#"
    "\n\036eMsgToGSToCSFromGC_AskRoomList\020\315@\022#\n\036e"
    "MsgToGSToCSFromGC_AskGoodscfg\020\316@\022*\n%eMsg"
    "ToGSToCSFromGC_AskCreateMatchTeam\020\330@\022\'\n\""
    "eMsgToGSToCSFromGC_AskAddMatchTeam\020\331@\022*\n"
    "%eMsgToGSToCSFromGC_AskRemoveMatchTeam\020\332"
    "@\022.\n)eMsgToGSToCSFromGC_AskInviteJoinMat"
    "chTeam\020\333@\022%\n eMsgToGSToCSFromGC_AskStart"
    "Match\020\334@\022$\n\037eMsgToGSToCSFromGC_AskStopMa"
    "tch\020\335@\022)\n$eMsgToGSToCSFromGC_AskChangeNi"
    "ckName\020\336@\022,\n\'eMsgToGSToCSFromGC_RequestM"
    "atchTeamList\020\337@\0220\n+eMsgToGSToCSFromGC_No"
    "tifyOneMatchNeedOneRet\020\340@\022)\n$eMsgToGSToC"
    "SFromGC_AskOneTaskRewards\020\342@\022)\n$eMsgToGS"
    "ToCSFromGC_AskChangeheaderId\020\264B\022\036\n\031eMsgT"
    "oGSToCSFromGC_CDKReq\020\271B\022\035\n\030eMsgToGSToCSF"
    "romGC_GmCmd\020\265B\022\037\n\032eMsgToGSToCSFromGC_UIE"
    "vent\020\346B\022\033\n\026eMsgToGSToCSFromGC_End\020\250F*@\n\013"
    "notice_type\022\r\n\ttype_none\020\000\022\n\n\006type_1\020\001\022\n"
    "\n\006type_2\020\002\022\n\n\006type_3\020\003", 8502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GCToCS.proto", &protobuf_RegisterTypes);
  AskOneTaskRewards::default_instance_ = new AskOneTaskRewards();
  CDKReq::default_instance_ = new CDKReq();
  CurtUIEvent::default_instance_ = new CurtUIEvent();
  CurtUIEvent_UIEvent::default_instance_ = new CurtUIEvent_UIEvent();
  AskRecoinRune::default_instance_ = new AskRecoinRune();
  BlackListOnlineInfo::default_instance_ = new BlackListOnlineInfo();
  AddCSGMCmd::default_instance_ = new AddCSGMCmd();
  NotifyOneMatchNeedOneRet::default_instance_ = new NotifyOneMatchNeedOneRet();
  AskChangeheaderId::default_instance_ = new AskChangeheaderId();
  ChangeNickName::default_instance_ = new ChangeNickName();
  AskCreateMatchTeam::default_instance_ = new AskCreateMatchTeam();
  AskAddMatchTeam::default_instance_ = new AskAddMatchTeam();
  AskRemoveMatchTeam::default_instance_ = new AskRemoveMatchTeam();
  AskInviteJoinMatchTeam::default_instance_ = new AskInviteJoinMatchTeam();
  AskStartMatch::default_instance_ = new AskStartMatch();
  AskStopMatch::default_instance_ = new AskStopMatch();
  RequestMatchTeamList::default_instance_ = new RequestMatchTeamList();
  AskGoodscfg::default_instance_ = new AskGoodscfg();
  AskCSCreateGuideBattle::default_instance_ = new AskCSCreateGuideBattle();
  AskQuickBattle::default_instance_ = new AskQuickBattle();
  AskStopQuickBattle::default_instance_ = new AskStopQuickBattle();
  AskCreateRoom::default_instance_ = new AskCreateRoom();
  AskAddRoom::default_instance_ = new AskAddRoom();
  AskLeaveRoom::default_instance_ = new AskLeaveRoom();
  AskChangeRoomSeat::default_instance_ = new AskChangeRoomSeat();
  AskReadyRoom::default_instance_ = new AskReadyRoom();
  AskCancelRoom::default_instance_ = new AskCancelRoom();
  AskStartRoom::default_instance_ = new AskStartRoom();
  AskReEnterRoom::default_instance_ = new AskReEnterRoom();
  AskChatInRoom::default_instance_ = new AskChatInRoom();
  AskGetMailGift::default_instance_ = new AskGetMailGift();
  AskMailInfo::default_instance_ = new AskMailInfo();
  AskBuyGoods::default_instance_ = new AskBuyGoods();
  UserAskGetCLReward::default_instance_ = new UserAskGetCLReward();
  Notice::default_instance_ = new Notice();
  AskCurtNotice::default_instance_ = new AskCurtNotice();
  CompleteInfo::default_instance_ = new CompleteInfo();
  AskAddToSNSList::default_instance_ = new AskAddToSNSList();
  AskCanInviteFriends::default_instance_ = new AskCanInviteFriends();
  AskAddToSNSListByID::default_instance_ = new AskAddToSNSListByID();
  AskRemoveFromSNSList::default_instance_ = new AskRemoveFromSNSList();
  AskSendMsgToUser::default_instance_ = new AskSendMsgToUser();
  AskInviteFriendsToBattle::default_instance_ = new AskInviteFriendsToBattle();
  AskQueryUserByNickName::default_instance_ = new AskQueryUserByNickName();
  GCReplyAddFriendRequst::default_instance_ = new GCReplyAddFriendRequst();
  GuideCSStepComp::default_instance_ = new GuideCSStepComp();
  GCReplyInviteToBattle::default_instance_ = new GCReplyInviteToBattle();
  Login::default_instance_ = new Login();
  UserGameInfo::default_instance_ = new UserGameInfo();
  BuyRunes::default_instance_ = new BuyRunes();
  EuipRunes::default_instance_ = new EuipRunes();
  UnEuipRunes::default_instance_ = new UnEuipRunes();
  ComposeRunes::default_instance_ = new ComposeRunes();
  ReconnectToGame::default_instance_ = new ReconnectToGame();
  ComGuideStepID::default_instance_ = new ComGuideStepID();
  AskRoomList::default_instance_ = new AskRoomList();
  AskOneTaskRewards::default_instance_->InitAsDefaultInstance();
  CDKReq::default_instance_->InitAsDefaultInstance();
  CurtUIEvent::default_instance_->InitAsDefaultInstance();
  CurtUIEvent_UIEvent::default_instance_->InitAsDefaultInstance();
  AskRecoinRune::default_instance_->InitAsDefaultInstance();
  BlackListOnlineInfo::default_instance_->InitAsDefaultInstance();
  AddCSGMCmd::default_instance_->InitAsDefaultInstance();
  NotifyOneMatchNeedOneRet::default_instance_->InitAsDefaultInstance();
  AskChangeheaderId::default_instance_->InitAsDefaultInstance();
  ChangeNickName::default_instance_->InitAsDefaultInstance();
  AskCreateMatchTeam::default_instance_->InitAsDefaultInstance();
  AskAddMatchTeam::default_instance_->InitAsDefaultInstance();
  AskRemoveMatchTeam::default_instance_->InitAsDefaultInstance();
  AskInviteJoinMatchTeam::default_instance_->InitAsDefaultInstance();
  AskStartMatch::default_instance_->InitAsDefaultInstance();
  AskStopMatch::default_instance_->InitAsDefaultInstance();
  RequestMatchTeamList::default_instance_->InitAsDefaultInstance();
  AskGoodscfg::default_instance_->InitAsDefaultInstance();
  AskCSCreateGuideBattle::default_instance_->InitAsDefaultInstance();
  AskQuickBattle::default_instance_->InitAsDefaultInstance();
  AskStopQuickBattle::default_instance_->InitAsDefaultInstance();
  AskCreateRoom::default_instance_->InitAsDefaultInstance();
  AskAddRoom::default_instance_->InitAsDefaultInstance();
  AskLeaveRoom::default_instance_->InitAsDefaultInstance();
  AskChangeRoomSeat::default_instance_->InitAsDefaultInstance();
  AskReadyRoom::default_instance_->InitAsDefaultInstance();
  AskCancelRoom::default_instance_->InitAsDefaultInstance();
  AskStartRoom::default_instance_->InitAsDefaultInstance();
  AskReEnterRoom::default_instance_->InitAsDefaultInstance();
  AskChatInRoom::default_instance_->InitAsDefaultInstance();
  AskGetMailGift::default_instance_->InitAsDefaultInstance();
  AskMailInfo::default_instance_->InitAsDefaultInstance();
  AskBuyGoods::default_instance_->InitAsDefaultInstance();
  UserAskGetCLReward::default_instance_->InitAsDefaultInstance();
  Notice::default_instance_->InitAsDefaultInstance();
  AskCurtNotice::default_instance_->InitAsDefaultInstance();
  CompleteInfo::default_instance_->InitAsDefaultInstance();
  AskAddToSNSList::default_instance_->InitAsDefaultInstance();
  AskCanInviteFriends::default_instance_->InitAsDefaultInstance();
  AskAddToSNSListByID::default_instance_->InitAsDefaultInstance();
  AskRemoveFromSNSList::default_instance_->InitAsDefaultInstance();
  AskSendMsgToUser::default_instance_->InitAsDefaultInstance();
  AskInviteFriendsToBattle::default_instance_->InitAsDefaultInstance();
  AskQueryUserByNickName::default_instance_->InitAsDefaultInstance();
  GCReplyAddFriendRequst::default_instance_->InitAsDefaultInstance();
  GuideCSStepComp::default_instance_->InitAsDefaultInstance();
  GCReplyInviteToBattle::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  UserGameInfo::default_instance_->InitAsDefaultInstance();
  BuyRunes::default_instance_->InitAsDefaultInstance();
  EuipRunes::default_instance_->InitAsDefaultInstance();
  UnEuipRunes::default_instance_->InitAsDefaultInstance();
  ComposeRunes::default_instance_->InitAsDefaultInstance();
  ReconnectToGame::default_instance_->InitAsDefaultInstance();
  ComGuideStepID::default_instance_->InitAsDefaultInstance();
  AskRoomList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GCToCS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GCToCS_2eproto {
  StaticDescriptorInitializer_GCToCS_2eproto() {
    protobuf_AddDesc_GCToCS_2eproto();
  }
} static_descriptor_initializer_GCToCS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgNum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNum_descriptor_;
}
bool MsgNum_IsValid(int value) {
  switch(value) {
    case 8191:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8200:
    case 8201:
    case 8210:
    case 8211:
    case 8212:
    case 8213:
    case 8214:
    case 8215:
    case 8216:
    case 8217:
    case 8218:
    case 8220:
    case 8221:
    case 8222:
    case 8223:
    case 8224:
    case 8230:
    case 8231:
    case 8240:
    case 8241:
    case 8242:
    case 8250:
    case 8251:
    case 8260:
    case 8261:
    case 8262:
    case 8263:
    case 8264:
    case 8265:
    case 8266:
    case 8267:
    case 8268:
    case 8269:
    case 8270:
    case 8280:
    case 8281:
    case 8282:
    case 8283:
    case 8284:
    case 8285:
    case 8286:
    case 8287:
    case 8288:
    case 8290:
    case 8500:
    case 8501:
    case 8502:
    case 8503:
    case 8505:
    case 8550:
    case 9000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* notice_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notice_type_descriptor_;
}
bool notice_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskOneTaskRewards::kMsgnumFieldNumber;
const int AskOneTaskRewards::kTaskGuidFieldNumber;
#endif  // !_MSC_VER

AskOneTaskRewards::AskOneTaskRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskOneTaskRewards)
}

void AskOneTaskRewards::InitAsDefaultInstance() {
}

AskOneTaskRewards::AskOneTaskRewards(const AskOneTaskRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskOneTaskRewards)
}

void AskOneTaskRewards::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8290;
  task_guid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskOneTaskRewards::~AskOneTaskRewards() {
  // @@protoc_insertion_point(destructor:GCToCS.AskOneTaskRewards)
  SharedDtor();
}

void AskOneTaskRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskOneTaskRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskOneTaskRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskOneTaskRewards_descriptor_;
}

const AskOneTaskRewards& AskOneTaskRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskOneTaskRewards* AskOneTaskRewards::default_instance_ = NULL;

AskOneTaskRewards* AskOneTaskRewards::New() const {
  return new AskOneTaskRewards;
}

void AskOneTaskRewards::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8290;
    task_guid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskOneTaskRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskOneTaskRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskOneTaskRewards];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_guid;
        break;
      }

      // optional uint32 task_guid = 2;
      case 2: {
        if (tag == 16) {
         parse_task_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_guid_)));
          set_has_task_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskOneTaskRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskOneTaskRewards)
  return false;
#undef DO_
}

void AskOneTaskRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskOneTaskRewards)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskOneTaskRewards];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskOneTaskRewards)
}

::google::protobuf::uint8* AskOneTaskRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskOneTaskRewards)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskOneTaskRewards];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskOneTaskRewards)
  return target;
}

int AskOneTaskRewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskOneTaskRewards];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 task_guid = 2;
    if (has_task_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskOneTaskRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskOneTaskRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskOneTaskRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskOneTaskRewards::MergeFrom(const AskOneTaskRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_task_guid()) {
      set_task_guid(from.task_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskOneTaskRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskOneTaskRewards::CopyFrom(const AskOneTaskRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskOneTaskRewards::IsInitialized() const {

  return true;
}

void AskOneTaskRewards::Swap(AskOneTaskRewards* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(task_guid_, other->task_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskOneTaskRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskOneTaskRewards_descriptor_;
  metadata.reflection = AskOneTaskRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDKReq::kMsgnumFieldNumber;
const int CDKReq::kCdkstrFieldNumber;
#endif  // !_MSC_VER

CDKReq::CDKReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.CDKReq)
}

void CDKReq::InitAsDefaultInstance() {
}

CDKReq::CDKReq(const CDKReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.CDKReq)
}

void CDKReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8505;
  cdkstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDKReq::~CDKReq() {
  // @@protoc_insertion_point(destructor:GCToCS.CDKReq)
  SharedDtor();
}

void CDKReq::SharedDtor() {
  if (cdkstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdkstr_;
  }
  if (this != default_instance_) {
  }
}

void CDKReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDKReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDKReq_descriptor_;
}

const CDKReq& CDKReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

CDKReq* CDKReq::default_instance_ = NULL;

CDKReq* CDKReq::New() const {
  return new CDKReq;
}

void CDKReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8505;
    if (has_cdkstr()) {
      if (cdkstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cdkstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDKReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.CDKReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CDKReq];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cdkstr;
        break;
      }

      // optional string cdkstr = 2;
      case 2: {
        if (tag == 18) {
         parse_cdkstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdkstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdkstr().data(), this->cdkstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdkstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.CDKReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.CDKReq)
  return false;
#undef DO_
}

void CDKReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.CDKReq)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CDKReq];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string cdkstr = 2;
  if (has_cdkstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdkstr().data(), this->cdkstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdkstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cdkstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.CDKReq)
}

::google::protobuf::uint8* CDKReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.CDKReq)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CDKReq];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string cdkstr = 2;
  if (has_cdkstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdkstr().data(), this->cdkstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdkstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cdkstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.CDKReq)
  return target;
}

int CDKReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CDKReq];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string cdkstr = 2;
    if (has_cdkstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdkstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDKReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDKReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDKReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDKReq::MergeFrom(const CDKReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_cdkstr()) {
      set_cdkstr(from.cdkstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDKReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDKReq::CopyFrom(const CDKReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDKReq::IsInitialized() const {

  return true;
}

void CDKReq::Swap(CDKReq* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(cdkstr_, other->cdkstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDKReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDKReq_descriptor_;
  metadata.reflection = CDKReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurtUIEvent_UIEvent::kUiidxFieldNumber;
const int CurtUIEvent_UIEvent::kEventNumFieldNumber;
#endif  // !_MSC_VER

CurtUIEvent_UIEvent::CurtUIEvent_UIEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.CurtUIEvent.UIEvent)
}

void CurtUIEvent_UIEvent::InitAsDefaultInstance() {
}

CurtUIEvent_UIEvent::CurtUIEvent_UIEvent(const CurtUIEvent_UIEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.CurtUIEvent.UIEvent)
}

void CurtUIEvent_UIEvent::SharedCtor() {
  _cached_size_ = 0;
  uiidx_ = 0u;
  eventnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurtUIEvent_UIEvent::~CurtUIEvent_UIEvent() {
  // @@protoc_insertion_point(destructor:GCToCS.CurtUIEvent.UIEvent)
  SharedDtor();
}

void CurtUIEvent_UIEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurtUIEvent_UIEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurtUIEvent_UIEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurtUIEvent_UIEvent_descriptor_;
}

const CurtUIEvent_UIEvent& CurtUIEvent_UIEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

CurtUIEvent_UIEvent* CurtUIEvent_UIEvent::default_instance_ = NULL;

CurtUIEvent_UIEvent* CurtUIEvent_UIEvent::New() const {
  return new CurtUIEvent_UIEvent;
}

void CurtUIEvent_UIEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurtUIEvent_UIEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uiidx_, eventnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurtUIEvent_UIEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.CurtUIEvent.UIEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiidx = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiidx_)));
          set_has_uiidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eventNum;
        break;
      }

      // optional uint32 eventNum = 3;
      case 3: {
        if (tag == 24) {
         parse_eventNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventnum_)));
          set_has_eventnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.CurtUIEvent.UIEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.CurtUIEvent.UIEvent)
  return false;
#undef DO_
}

void CurtUIEvent_UIEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.CurtUIEvent.UIEvent)
  // optional uint32 uiidx = 2;
  if (has_uiidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiidx(), output);
  }

  // optional uint32 eventNum = 3;
  if (has_eventnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eventnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.CurtUIEvent.UIEvent)
}

::google::protobuf::uint8* CurtUIEvent_UIEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.CurtUIEvent.UIEvent)
  // optional uint32 uiidx = 2;
  if (has_uiidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiidx(), target);
  }

  // optional uint32 eventNum = 3;
  if (has_eventnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eventnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.CurtUIEvent.UIEvent)
  return target;
}

int CurtUIEvent_UIEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiidx = 2;
    if (has_uiidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiidx());
    }

    // optional uint32 eventNum = 3;
    if (has_eventnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurtUIEvent_UIEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurtUIEvent_UIEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurtUIEvent_UIEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurtUIEvent_UIEvent::MergeFrom(const CurtUIEvent_UIEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiidx()) {
      set_uiidx(from.uiidx());
    }
    if (from.has_eventnum()) {
      set_eventnum(from.eventnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurtUIEvent_UIEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurtUIEvent_UIEvent::CopyFrom(const CurtUIEvent_UIEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurtUIEvent_UIEvent::IsInitialized() const {

  return true;
}

void CurtUIEvent_UIEvent::Swap(CurtUIEvent_UIEvent* other) {
  if (other != this) {
    std::swap(uiidx_, other->uiidx_);
    std::swap(eventnum_, other->eventnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurtUIEvent_UIEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurtUIEvent_UIEvent_descriptor_;
  metadata.reflection = CurtUIEvent_UIEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CurtUIEvent::kMsgnumFieldNumber;
const int CurtUIEvent::kEventlistFieldNumber;
#endif  // !_MSC_VER

CurtUIEvent::CurtUIEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.CurtUIEvent)
}

void CurtUIEvent::InitAsDefaultInstance() {
}

CurtUIEvent::CurtUIEvent(const CurtUIEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.CurtUIEvent)
}

void CurtUIEvent::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8550;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurtUIEvent::~CurtUIEvent() {
  // @@protoc_insertion_point(destructor:GCToCS.CurtUIEvent)
  SharedDtor();
}

void CurtUIEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurtUIEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurtUIEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurtUIEvent_descriptor_;
}

const CurtUIEvent& CurtUIEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

CurtUIEvent* CurtUIEvent::default_instance_ = NULL;

CurtUIEvent* CurtUIEvent::New() const {
  return new CurtUIEvent;
}

void CurtUIEvent::Clear() {
  msgnum_ = 8550;
  eventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurtUIEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.CurtUIEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UIEvent];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eventlist;
        break;
      }

      // repeated .GCToCS.CurtUIEvent.UIEvent eventlist = 2;
      case 2: {
        if (tag == 18) {
         parse_eventlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eventlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.CurtUIEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.CurtUIEvent)
  return false;
#undef DO_
}

void CurtUIEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.CurtUIEvent)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UIEvent];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // repeated .GCToCS.CurtUIEvent.UIEvent eventlist = 2;
  for (int i = 0; i < this->eventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.CurtUIEvent)
}

::google::protobuf::uint8* CurtUIEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.CurtUIEvent)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UIEvent];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // repeated .GCToCS.CurtUIEvent.UIEvent eventlist = 2;
  for (int i = 0; i < this->eventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.CurtUIEvent)
  return target;
}

int CurtUIEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UIEvent];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  // repeated .GCToCS.CurtUIEvent.UIEvent eventlist = 2;
  total_size += 1 * this->eventlist_size();
  for (int i = 0; i < this->eventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurtUIEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurtUIEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurtUIEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurtUIEvent::MergeFrom(const CurtUIEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventlist_.MergeFrom(from.eventlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurtUIEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurtUIEvent::CopyFrom(const CurtUIEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurtUIEvent::IsInitialized() const {

  return true;
}

void CurtUIEvent::Swap(CurtUIEvent* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    eventlist_.Swap(&other->eventlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurtUIEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurtUIEvent_descriptor_;
  metadata.reflection = CurtUIEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRecoinRune::kMsgnumFieldNumber;
const int AskRecoinRune::kRuneIdFieldNumber;
const int AskRecoinRune::kPayTypeFieldNumber;
const int AskRecoinRune::kCostFieldNumber;
#endif  // !_MSC_VER

AskRecoinRune::AskRecoinRune()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskRecoinRune)
}

void AskRecoinRune::InitAsDefaultInstance() {
}

AskRecoinRune::AskRecoinRune(const AskRecoinRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskRecoinRune)
}

void AskRecoinRune::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8503;
  rune_id_ = 0u;
  pay_type_ = 0u;
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRecoinRune::~AskRecoinRune() {
  // @@protoc_insertion_point(destructor:GCToCS.AskRecoinRune)
  SharedDtor();
}

void AskRecoinRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRecoinRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRecoinRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRecoinRune_descriptor_;
}

const AskRecoinRune& AskRecoinRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskRecoinRune* AskRecoinRune::default_instance_ = NULL;

AskRecoinRune* AskRecoinRune::New() const {
  return new AskRecoinRune;
}

void AskRecoinRune::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskRecoinRune*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rune_id_, cost_);
    msgnum_ = 8503;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRecoinRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskRecoinRune)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRecoinRune];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rune_id;
        break;
      }

      // optional uint32 rune_id = 2;
      case 2: {
        if (tag == 16) {
         parse_rune_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_id_)));
          set_has_rune_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pay_type;
        break;
      }

      // optional uint32 pay_type = 3;
      case 3: {
        if (tag == 24) {
         parse_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_type_)));
          set_has_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 4;
      case 4: {
        if (tag == 32) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskRecoinRune)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskRecoinRune)
  return false;
#undef DO_
}

void AskRecoinRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskRecoinRune)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRecoinRune];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 rune_id = 2;
  if (has_rune_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rune_id(), output);
  }

  // optional uint32 pay_type = 3;
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pay_type(), output);
  }

  // optional uint32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskRecoinRune)
}

::google::protobuf::uint8* AskRecoinRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskRecoinRune)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRecoinRune];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 rune_id = 2;
  if (has_rune_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rune_id(), target);
  }

  // optional uint32 pay_type = 3;
  if (has_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pay_type(), target);
  }

  // optional uint32 cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskRecoinRune)
  return target;
}

int AskRecoinRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRecoinRune];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 rune_id = 2;
    if (has_rune_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_id());
    }

    // optional uint32 pay_type = 3;
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_type());
    }

    // optional uint32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRecoinRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRecoinRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRecoinRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRecoinRune::MergeFrom(const AskRecoinRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_rune_id()) {
      set_rune_id(from.rune_id());
    }
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRecoinRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRecoinRune::CopyFrom(const AskRecoinRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRecoinRune::IsInitialized() const {

  return true;
}

void AskRecoinRune::Swap(AskRecoinRune* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(rune_id_, other->rune_id_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRecoinRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRecoinRune_descriptor_;
  metadata.reflection = AskRecoinRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlackListOnlineInfo::kMsgnumFieldNumber;
#endif  // !_MSC_VER

BlackListOnlineInfo::BlackListOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.BlackListOnlineInfo)
}

void BlackListOnlineInfo::InitAsDefaultInstance() {
}

BlackListOnlineInfo::BlackListOnlineInfo(const BlackListOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.BlackListOnlineInfo)
}

void BlackListOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8502;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackListOnlineInfo::~BlackListOnlineInfo() {
  // @@protoc_insertion_point(destructor:GCToCS.BlackListOnlineInfo)
  SharedDtor();
}

void BlackListOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlackListOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackListOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackListOnlineInfo_descriptor_;
}

const BlackListOnlineInfo& BlackListOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

BlackListOnlineInfo* BlackListOnlineInfo::default_instance_ = NULL;

BlackListOnlineInfo* BlackListOnlineInfo::New() const {
  return new BlackListOnlineInfo;
}

void BlackListOnlineInfo::Clear() {
  msgnum_ = 8502;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackListOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.BlackListOnlineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBlackListOnlineInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.BlackListOnlineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.BlackListOnlineInfo)
  return false;
#undef DO_
}

void BlackListOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.BlackListOnlineInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBlackListOnlineInfo];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.BlackListOnlineInfo)
}

::google::protobuf::uint8* BlackListOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.BlackListOnlineInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBlackListOnlineInfo];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.BlackListOnlineInfo)
  return target;
}

int BlackListOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBlackListOnlineInfo];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackListOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackListOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackListOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackListOnlineInfo::MergeFrom(const BlackListOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackListOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackListOnlineInfo::CopyFrom(const BlackListOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackListOnlineInfo::IsInitialized() const {

  return true;
}

void BlackListOnlineInfo::Swap(BlackListOnlineInfo* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackListOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackListOnlineInfo_descriptor_;
  metadata.reflection = BlackListOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCSGMCmd::kMsgnumFieldNumber;
const int AddCSGMCmd::kGmcmdFieldNumber;
#endif  // !_MSC_VER

AddCSGMCmd::AddCSGMCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AddCSGMCmd)
}

void AddCSGMCmd::InitAsDefaultInstance() {
}

AddCSGMCmd::AddCSGMCmd(const AddCSGMCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AddCSGMCmd)
}

void AddCSGMCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8501;
  gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCSGMCmd::~AddCSGMCmd() {
  // @@protoc_insertion_point(destructor:GCToCS.AddCSGMCmd)
  SharedDtor();
}

void AddCSGMCmd::SharedDtor() {
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcmd_;
  }
  if (this != default_instance_) {
  }
}

void AddCSGMCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCSGMCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCSGMCmd_descriptor_;
}

const AddCSGMCmd& AddCSGMCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AddCSGMCmd* AddCSGMCmd::default_instance_ = NULL;

AddCSGMCmd* AddCSGMCmd::New() const {
  return new AddCSGMCmd;
}

void AddCSGMCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8501;
    if (has_gmcmd()) {
      if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmcmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCSGMCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AddCSGMCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GmCmd];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gmcmd;
        break;
      }

      // optional string gmcmd = 2;
      case 2: {
        if (tag == 18) {
         parse_gmcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmcmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmcmd().data(), this->gmcmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmcmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AddCSGMCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AddCSGMCmd)
  return false;
#undef DO_
}

void AddCSGMCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AddCSGMCmd)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GmCmd];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string gmcmd = 2;
  if (has_gmcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcmd().data(), this->gmcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gmcmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AddCSGMCmd)
}

::google::protobuf::uint8* AddCSGMCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AddCSGMCmd)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GmCmd];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string gmcmd = 2;
  if (has_gmcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcmd().data(), this->gmcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gmcmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AddCSGMCmd)
  return target;
}

int AddCSGMCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GmCmd];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string gmcmd = 2;
    if (has_gmcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmcmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCSGMCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCSGMCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCSGMCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCSGMCmd::MergeFrom(const AddCSGMCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_gmcmd()) {
      set_gmcmd(from.gmcmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCSGMCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCSGMCmd::CopyFrom(const AddCSGMCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCSGMCmd::IsInitialized() const {

  return true;
}

void AddCSGMCmd::Swap(AddCSGMCmd* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(gmcmd_, other->gmcmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCSGMCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCSGMCmd_descriptor_;
  metadata.reflection = AddCSGMCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOneMatchNeedOneRet::kMsgnumFieldNumber;
const int NotifyOneMatchNeedOneRet::kMapidFieldNumber;
const int NotifyOneMatchNeedOneRet::kFightidFieldNumber;
const int NotifyOneMatchNeedOneRet::kIsAcceptFieldNumber;
#endif  // !_MSC_VER

NotifyOneMatchNeedOneRet::NotifyOneMatchNeedOneRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.NotifyOneMatchNeedOneRet)
}

void NotifyOneMatchNeedOneRet::InitAsDefaultInstance() {
}

NotifyOneMatchNeedOneRet::NotifyOneMatchNeedOneRet(const NotifyOneMatchNeedOneRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.NotifyOneMatchNeedOneRet)
}

void NotifyOneMatchNeedOneRet::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8288;
  mapid_ = 0u;
  fightid_ = 0u;
  isaccept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOneMatchNeedOneRet::~NotifyOneMatchNeedOneRet() {
  // @@protoc_insertion_point(destructor:GCToCS.NotifyOneMatchNeedOneRet)
  SharedDtor();
}

void NotifyOneMatchNeedOneRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyOneMatchNeedOneRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOneMatchNeedOneRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOneMatchNeedOneRet_descriptor_;
}

const NotifyOneMatchNeedOneRet& NotifyOneMatchNeedOneRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

NotifyOneMatchNeedOneRet* NotifyOneMatchNeedOneRet::default_instance_ = NULL;

NotifyOneMatchNeedOneRet* NotifyOneMatchNeedOneRet::New() const {
  return new NotifyOneMatchNeedOneRet;
}

void NotifyOneMatchNeedOneRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyOneMatchNeedOneRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mapid_, isaccept_);
    msgnum_ = 8288;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOneMatchNeedOneRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.NotifyOneMatchNeedOneRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fightid;
        break;
      }

      // optional uint32 fightid = 3;
      case 3: {
        if (tag == 24) {
         parse_fightid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightid_)));
          set_has_fightid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isAccept;
        break;
      }

      // optional bool isAccept = 4;
      case 4: {
        if (tag == 32) {
         parse_isAccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaccept_)));
          set_has_isaccept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.NotifyOneMatchNeedOneRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.NotifyOneMatchNeedOneRet)
  return false;
#undef DO_
}

void NotifyOneMatchNeedOneRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.NotifyOneMatchNeedOneRet)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint32 fightid = 3;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightid(), output);
  }

  // optional bool isAccept = 4;
  if (has_isaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isaccept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.NotifyOneMatchNeedOneRet)
}

::google::protobuf::uint8* NotifyOneMatchNeedOneRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.NotifyOneMatchNeedOneRet)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint32 fightid = 3;
  if (has_fightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightid(), target);
  }

  // optional bool isAccept = 4;
  if (has_isaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isaccept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.NotifyOneMatchNeedOneRet)
  return target;
}

int NotifyOneMatchNeedOneRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_NotifyOneMatchNeedOneRet];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 fightid = 3;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightid());
    }

    // optional bool isAccept = 4;
    if (has_isaccept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOneMatchNeedOneRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOneMatchNeedOneRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOneMatchNeedOneRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOneMatchNeedOneRet::MergeFrom(const NotifyOneMatchNeedOneRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
    if (from.has_isaccept()) {
      set_isaccept(from.isaccept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOneMatchNeedOneRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOneMatchNeedOneRet::CopyFrom(const NotifyOneMatchNeedOneRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOneMatchNeedOneRet::IsInitialized() const {

  return true;
}

void NotifyOneMatchNeedOneRet::Swap(NotifyOneMatchNeedOneRet* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(mapid_, other->mapid_);
    std::swap(fightid_, other->fightid_);
    std::swap(isaccept_, other->isaccept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOneMatchNeedOneRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOneMatchNeedOneRet_descriptor_;
  metadata.reflection = NotifyOneMatchNeedOneRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskChangeheaderId::kMsgnumFieldNumber;
const int AskChangeheaderId::kNewheaderidFieldNumber;
#endif  // !_MSC_VER

AskChangeheaderId::AskChangeheaderId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskChangeheaderId)
}

void AskChangeheaderId::InitAsDefaultInstance() {
}

AskChangeheaderId::AskChangeheaderId(const AskChangeheaderId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskChangeheaderId)
}

void AskChangeheaderId::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8500;
  newheaderid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskChangeheaderId::~AskChangeheaderId() {
  // @@protoc_insertion_point(destructor:GCToCS.AskChangeheaderId)
  SharedDtor();
}

void AskChangeheaderId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskChangeheaderId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskChangeheaderId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskChangeheaderId_descriptor_;
}

const AskChangeheaderId& AskChangeheaderId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskChangeheaderId* AskChangeheaderId::default_instance_ = NULL;

AskChangeheaderId* AskChangeheaderId::New() const {
  return new AskChangeheaderId;
}

void AskChangeheaderId::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8500;
    newheaderid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskChangeheaderId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskChangeheaderId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeheaderId];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newheaderid;
        break;
      }

      // optional uint32 newheaderid = 2;
      case 2: {
        if (tag == 16) {
         parse_newheaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newheaderid_)));
          set_has_newheaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskChangeheaderId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskChangeheaderId)
  return false;
#undef DO_
}

void AskChangeheaderId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskChangeheaderId)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeheaderId];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 newheaderid = 2;
  if (has_newheaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newheaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskChangeheaderId)
}

::google::protobuf::uint8* AskChangeheaderId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskChangeheaderId)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeheaderId];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 newheaderid = 2;
  if (has_newheaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newheaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskChangeheaderId)
  return target;
}

int AskChangeheaderId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeheaderId];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 newheaderid = 2;
    if (has_newheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newheaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskChangeheaderId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskChangeheaderId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskChangeheaderId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskChangeheaderId::MergeFrom(const AskChangeheaderId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_newheaderid()) {
      set_newheaderid(from.newheaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskChangeheaderId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskChangeheaderId::CopyFrom(const AskChangeheaderId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskChangeheaderId::IsInitialized() const {

  return true;
}

void AskChangeheaderId::Swap(AskChangeheaderId* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(newheaderid_, other->newheaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskChangeheaderId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskChangeheaderId_descriptor_;
  metadata.reflection = AskChangeheaderId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNickName::kMsgnumFieldNumber;
const int ChangeNickName::kNewnicknameFieldNumber;
#endif  // !_MSC_VER

ChangeNickName::ChangeNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.ChangeNickName)
}

void ChangeNickName::InitAsDefaultInstance() {
}

ChangeNickName::ChangeNickName(const ChangeNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.ChangeNickName)
}

void ChangeNickName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8286;
  newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNickName::~ChangeNickName() {
  // @@protoc_insertion_point(destructor:GCToCS.ChangeNickName)
  SharedDtor();
}

void ChangeNickName::SharedDtor() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNickName_descriptor_;
}

const ChangeNickName& ChangeNickName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

ChangeNickName* ChangeNickName::default_instance_ = NULL;

ChangeNickName* ChangeNickName::New() const {
  return new ChangeNickName;
}

void ChangeNickName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8286;
    if (has_newnickname()) {
      if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.ChangeNickName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeNickName];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newnickname;
        break;
      }

      // optional string newnickname = 2;
      case 2: {
        if (tag == 18) {
         parse_newnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newnickname().data(), this->newnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.ChangeNickName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.ChangeNickName)
  return false;
#undef DO_
}

void ChangeNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.ChangeNickName)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeNickName];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string newnickname = 2;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.ChangeNickName)
}

::google::protobuf::uint8* ChangeNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.ChangeNickName)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeNickName];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string newnickname = 2;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.ChangeNickName)
  return target;
}

int ChangeNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeNickName];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string newnickname = 2;
    if (has_newnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNickName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNickName::MergeFrom(const ChangeNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_newnickname()) {
      set_newnickname(from.newnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNickName::CopyFrom(const ChangeNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNickName::IsInitialized() const {

  return true;
}

void ChangeNickName::Swap(ChangeNickName* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(newnickname_, other->newnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNickName_descriptor_;
  metadata.reflection = ChangeNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskCreateMatchTeam::kMsgnumFieldNumber;
const int AskCreateMatchTeam::kMatchtypeFieldNumber;
const int AskCreateMatchTeam::kMapidFieldNumber;
#endif  // !_MSC_VER

AskCreateMatchTeam::AskCreateMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskCreateMatchTeam)
}

void AskCreateMatchTeam::InitAsDefaultInstance() {
}

AskCreateMatchTeam::AskCreateMatchTeam(const AskCreateMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskCreateMatchTeam)
}

void AskCreateMatchTeam::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8280;
  matchtype_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskCreateMatchTeam::~AskCreateMatchTeam() {
  // @@protoc_insertion_point(destructor:GCToCS.AskCreateMatchTeam)
  SharedDtor();
}

void AskCreateMatchTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskCreateMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskCreateMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCreateMatchTeam_descriptor_;
}

const AskCreateMatchTeam& AskCreateMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskCreateMatchTeam* AskCreateMatchTeam::default_instance_ = NULL;

AskCreateMatchTeam* AskCreateMatchTeam::New() const {
  return new AskCreateMatchTeam;
}

void AskCreateMatchTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskCreateMatchTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(matchtype_, mapid_);
    msgnum_ = 8280;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskCreateMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskCreateMatchTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateMatchTeam];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matchtype;
        break;
      }

      // optional uint32 matchtype = 2;
      case 2: {
        if (tag == 16) {
         parse_matchtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskCreateMatchTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskCreateMatchTeam)
  return false;
#undef DO_
}

void AskCreateMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskCreateMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateMatchTeam];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 matchtype = 2;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchtype(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskCreateMatchTeam)
}

::google::protobuf::uint8* AskCreateMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskCreateMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateMatchTeam];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 matchtype = 2;
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchtype(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskCreateMatchTeam)
  return target;
}

int AskCreateMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateMatchTeam];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 matchtype = 2;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchtype());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskCreateMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskCreateMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskCreateMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskCreateMatchTeam::MergeFrom(const AskCreateMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskCreateMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskCreateMatchTeam::CopyFrom(const AskCreateMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskCreateMatchTeam::IsInitialized() const {

  return true;
}

void AskCreateMatchTeam::Swap(AskCreateMatchTeam* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskCreateMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskCreateMatchTeam_descriptor_;
  metadata.reflection = AskCreateMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddMatchTeam::kMsgnumFieldNumber;
const int AskAddMatchTeam::kFriendsNickNameFieldNumber;
#endif  // !_MSC_VER

AskAddMatchTeam::AskAddMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskAddMatchTeam)
}

void AskAddMatchTeam::InitAsDefaultInstance() {
}

AskAddMatchTeam::AskAddMatchTeam(const AskAddMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskAddMatchTeam)
}

void AskAddMatchTeam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8281;
  friendsnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddMatchTeam::~AskAddMatchTeam() {
  // @@protoc_insertion_point(destructor:GCToCS.AskAddMatchTeam)
  SharedDtor();
}

void AskAddMatchTeam::SharedDtor() {
  if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendsnickname_;
  }
  if (this != default_instance_) {
  }
}

void AskAddMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddMatchTeam_descriptor_;
}

const AskAddMatchTeam& AskAddMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskAddMatchTeam* AskAddMatchTeam::default_instance_ = NULL;

AskAddMatchTeam* AskAddMatchTeam::New() const {
  return new AskAddMatchTeam;
}

void AskAddMatchTeam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8281;
    if (has_friendsnickname()) {
      if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendsnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskAddMatchTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddMatchTeam];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendsNickName;
        break;
      }

      // optional string friendsNickName = 2;
      case 2: {
        if (tag == 18) {
         parse_friendsNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendsnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendsnickname().data(), this->friendsnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "friendsnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskAddMatchTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskAddMatchTeam)
  return false;
#undef DO_
}

void AskAddMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskAddMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddMatchTeam];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string friendsNickName = 2;
  if (has_friendsnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendsnickname().data(), this->friendsnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendsnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->friendsnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskAddMatchTeam)
}

::google::protobuf::uint8* AskAddMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskAddMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddMatchTeam];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string friendsNickName = 2;
  if (has_friendsnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendsnickname().data(), this->friendsnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendsnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendsnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskAddMatchTeam)
  return target;
}

int AskAddMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddMatchTeam];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string friendsNickName = 2;
    if (has_friendsnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendsnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddMatchTeam::MergeFrom(const AskAddMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_friendsnickname()) {
      set_friendsnickname(from.friendsnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddMatchTeam::CopyFrom(const AskAddMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddMatchTeam::IsInitialized() const {

  return true;
}

void AskAddMatchTeam::Swap(AskAddMatchTeam* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(friendsnickname_, other->friendsnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddMatchTeam_descriptor_;
  metadata.reflection = AskAddMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRemoveMatchTeam::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskRemoveMatchTeam::AskRemoveMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskRemoveMatchTeam)
}

void AskRemoveMatchTeam::InitAsDefaultInstance() {
}

AskRemoveMatchTeam::AskRemoveMatchTeam(const AskRemoveMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskRemoveMatchTeam)
}

void AskRemoveMatchTeam::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8282;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRemoveMatchTeam::~AskRemoveMatchTeam() {
  // @@protoc_insertion_point(destructor:GCToCS.AskRemoveMatchTeam)
  SharedDtor();
}

void AskRemoveMatchTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRemoveMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRemoveMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRemoveMatchTeam_descriptor_;
}

const AskRemoveMatchTeam& AskRemoveMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskRemoveMatchTeam* AskRemoveMatchTeam::default_instance_ = NULL;

AskRemoveMatchTeam* AskRemoveMatchTeam::New() const {
  return new AskRemoveMatchTeam;
}

void AskRemoveMatchTeam::Clear() {
  msgnum_ = 8282;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRemoveMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskRemoveMatchTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveMatchTeam];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskRemoveMatchTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskRemoveMatchTeam)
  return false;
#undef DO_
}

void AskRemoveMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskRemoveMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveMatchTeam];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskRemoveMatchTeam)
}

::google::protobuf::uint8* AskRemoveMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskRemoveMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveMatchTeam];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskRemoveMatchTeam)
  return target;
}

int AskRemoveMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveMatchTeam];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRemoveMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRemoveMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRemoveMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRemoveMatchTeam::MergeFrom(const AskRemoveMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRemoveMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRemoveMatchTeam::CopyFrom(const AskRemoveMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRemoveMatchTeam::IsInitialized() const {

  return true;
}

void AskRemoveMatchTeam::Swap(AskRemoveMatchTeam* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRemoveMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRemoveMatchTeam_descriptor_;
  metadata.reflection = AskRemoveMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskInviteJoinMatchTeam::kMsgnumFieldNumber;
const int AskInviteJoinMatchTeam::kFriendsNickNameFieldNumber;
#endif  // !_MSC_VER

AskInviteJoinMatchTeam::AskInviteJoinMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskInviteJoinMatchTeam)
}

void AskInviteJoinMatchTeam::InitAsDefaultInstance() {
}

AskInviteJoinMatchTeam::AskInviteJoinMatchTeam(const AskInviteJoinMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskInviteJoinMatchTeam)
}

void AskInviteJoinMatchTeam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8283;
  friendsnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskInviteJoinMatchTeam::~AskInviteJoinMatchTeam() {
  // @@protoc_insertion_point(destructor:GCToCS.AskInviteJoinMatchTeam)
  SharedDtor();
}

void AskInviteJoinMatchTeam::SharedDtor() {
  if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendsnickname_;
  }
  if (this != default_instance_) {
  }
}

void AskInviteJoinMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskInviteJoinMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskInviteJoinMatchTeam_descriptor_;
}

const AskInviteJoinMatchTeam& AskInviteJoinMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskInviteJoinMatchTeam* AskInviteJoinMatchTeam::default_instance_ = NULL;

AskInviteJoinMatchTeam* AskInviteJoinMatchTeam::New() const {
  return new AskInviteJoinMatchTeam;
}

void AskInviteJoinMatchTeam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8283;
    if (has_friendsnickname()) {
      if (friendsnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendsnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskInviteJoinMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskInviteJoinMatchTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteJoinMatchTeam];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendsNickName;
        break;
      }

      // optional string friendsNickName = 2;
      case 2: {
        if (tag == 18) {
         parse_friendsNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendsnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendsnickname().data(), this->friendsnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "friendsnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskInviteJoinMatchTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskInviteJoinMatchTeam)
  return false;
#undef DO_
}

void AskInviteJoinMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskInviteJoinMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteJoinMatchTeam];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string friendsNickName = 2;
  if (has_friendsnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendsnickname().data(), this->friendsnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendsnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->friendsnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskInviteJoinMatchTeam)
}

::google::protobuf::uint8* AskInviteJoinMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskInviteJoinMatchTeam)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteJoinMatchTeam];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string friendsNickName = 2;
  if (has_friendsnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendsnickname().data(), this->friendsnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendsnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendsnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskInviteJoinMatchTeam)
  return target;
}

int AskInviteJoinMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteJoinMatchTeam];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string friendsNickName = 2;
    if (has_friendsnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendsnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskInviteJoinMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskInviteJoinMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskInviteJoinMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskInviteJoinMatchTeam::MergeFrom(const AskInviteJoinMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_friendsnickname()) {
      set_friendsnickname(from.friendsnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskInviteJoinMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskInviteJoinMatchTeam::CopyFrom(const AskInviteJoinMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskInviteJoinMatchTeam::IsInitialized() const {

  return true;
}

void AskInviteJoinMatchTeam::Swap(AskInviteJoinMatchTeam* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(friendsnickname_, other->friendsnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskInviteJoinMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskInviteJoinMatchTeam_descriptor_;
  metadata.reflection = AskInviteJoinMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskStartMatch::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskStartMatch::AskStartMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskStartMatch)
}

void AskStartMatch::InitAsDefaultInstance() {
}

AskStartMatch::AskStartMatch(const AskStartMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskStartMatch)
}

void AskStartMatch::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8284;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskStartMatch::~AskStartMatch() {
  // @@protoc_insertion_point(destructor:GCToCS.AskStartMatch)
  SharedDtor();
}

void AskStartMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskStartMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskStartMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskStartMatch_descriptor_;
}

const AskStartMatch& AskStartMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskStartMatch* AskStartMatch::default_instance_ = NULL;

AskStartMatch* AskStartMatch::New() const {
  return new AskStartMatch;
}

void AskStartMatch::Clear() {
  msgnum_ = 8284;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskStartMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskStartMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartMatch];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskStartMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskStartMatch)
  return false;
#undef DO_
}

void AskStartMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskStartMatch)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartMatch];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskStartMatch)
}

::google::protobuf::uint8* AskStartMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskStartMatch)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartMatch];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskStartMatch)
  return target;
}

int AskStartMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartMatch];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskStartMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskStartMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskStartMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskStartMatch::MergeFrom(const AskStartMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskStartMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskStartMatch::CopyFrom(const AskStartMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskStartMatch::IsInitialized() const {

  return true;
}

void AskStartMatch::Swap(AskStartMatch* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskStartMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskStartMatch_descriptor_;
  metadata.reflection = AskStartMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskStopMatch::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskStopMatch::AskStopMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskStopMatch)
}

void AskStopMatch::InitAsDefaultInstance() {
}

AskStopMatch::AskStopMatch(const AskStopMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskStopMatch)
}

void AskStopMatch::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8285;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskStopMatch::~AskStopMatch() {
  // @@protoc_insertion_point(destructor:GCToCS.AskStopMatch)
  SharedDtor();
}

void AskStopMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskStopMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskStopMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskStopMatch_descriptor_;
}

const AskStopMatch& AskStopMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskStopMatch* AskStopMatch::default_instance_ = NULL;

AskStopMatch* AskStopMatch::New() const {
  return new AskStopMatch;
}

void AskStopMatch::Clear() {
  msgnum_ = 8285;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskStopMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskStopMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopMatch];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskStopMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskStopMatch)
  return false;
#undef DO_
}

void AskStopMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskStopMatch)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopMatch];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskStopMatch)
}

::google::protobuf::uint8* AskStopMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskStopMatch)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopMatch];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskStopMatch)
  return target;
}

int AskStopMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopMatch];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskStopMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskStopMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskStopMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskStopMatch::MergeFrom(const AskStopMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskStopMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskStopMatch::CopyFrom(const AskStopMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskStopMatch::IsInitialized() const {

  return true;
}

void AskStopMatch::Swap(AskStopMatch* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskStopMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskStopMatch_descriptor_;
  metadata.reflection = AskStopMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMatchTeamList::kMsgnumFieldNumber;
#endif  // !_MSC_VER

RequestMatchTeamList::RequestMatchTeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.RequestMatchTeamList)
}

void RequestMatchTeamList::InitAsDefaultInstance() {
}

RequestMatchTeamList::RequestMatchTeamList(const RequestMatchTeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.RequestMatchTeamList)
}

void RequestMatchTeamList::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8287;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMatchTeamList::~RequestMatchTeamList() {
  // @@protoc_insertion_point(destructor:GCToCS.RequestMatchTeamList)
  SharedDtor();
}

void RequestMatchTeamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMatchTeamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMatchTeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMatchTeamList_descriptor_;
}

const RequestMatchTeamList& RequestMatchTeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

RequestMatchTeamList* RequestMatchTeamList::default_instance_ = NULL;

RequestMatchTeamList* RequestMatchTeamList::New() const {
  return new RequestMatchTeamList;
}

void RequestMatchTeamList::Clear() {
  msgnum_ = 8287;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMatchTeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.RequestMatchTeamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_RequestMatchTeamList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.RequestMatchTeamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.RequestMatchTeamList)
  return false;
#undef DO_
}

void RequestMatchTeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.RequestMatchTeamList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_RequestMatchTeamList];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.RequestMatchTeamList)
}

::google::protobuf::uint8* RequestMatchTeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.RequestMatchTeamList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_RequestMatchTeamList];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.RequestMatchTeamList)
  return target;
}

int RequestMatchTeamList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_RequestMatchTeamList];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMatchTeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMatchTeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMatchTeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMatchTeamList::MergeFrom(const RequestMatchTeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMatchTeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMatchTeamList::CopyFrom(const RequestMatchTeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMatchTeamList::IsInitialized() const {

  return true;
}

void RequestMatchTeamList::Swap(RequestMatchTeamList* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMatchTeamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMatchTeamList_descriptor_;
  metadata.reflection = RequestMatchTeamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskGoodscfg::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskGoodscfg::AskGoodscfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskGoodscfg)
}

void AskGoodscfg::InitAsDefaultInstance() {
}

AskGoodscfg::AskGoodscfg(const AskGoodscfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskGoodscfg)
}

void AskGoodscfg::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8270;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskGoodscfg::~AskGoodscfg() {
  // @@protoc_insertion_point(destructor:GCToCS.AskGoodscfg)
  SharedDtor();
}

void AskGoodscfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskGoodscfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskGoodscfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskGoodscfg_descriptor_;
}

const AskGoodscfg& AskGoodscfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskGoodscfg* AskGoodscfg::default_instance_ = NULL;

AskGoodscfg* AskGoodscfg::New() const {
  return new AskGoodscfg;
}

void AskGoodscfg::Clear() {
  msgnum_ = 8270;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskGoodscfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskGoodscfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGoodscfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskGoodscfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskGoodscfg)
  return false;
#undef DO_
}

void AskGoodscfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskGoodscfg)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGoodscfg];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskGoodscfg)
}

::google::protobuf::uint8* AskGoodscfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskGoodscfg)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGoodscfg];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskGoodscfg)
  return target;
}

int AskGoodscfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGoodscfg];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskGoodscfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskGoodscfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskGoodscfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskGoodscfg::MergeFrom(const AskGoodscfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskGoodscfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskGoodscfg::CopyFrom(const AskGoodscfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskGoodscfg::IsInitialized() const {

  return true;
}

void AskGoodscfg::Swap(AskGoodscfg* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskGoodscfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskGoodscfg_descriptor_;
  metadata.reflection = AskGoodscfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AskCSCreateGuideBattle_guidetype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCSCreateGuideBattle_guidetype_descriptor_;
}
bool AskCSCreateGuideBattle_guidetype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle::first;
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle::second;
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle::other;
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle::guidetype_MIN;
const AskCSCreateGuideBattle_guidetype AskCSCreateGuideBattle::guidetype_MAX;
const int AskCSCreateGuideBattle::guidetype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AskCSCreateGuideBattle::kMsgnumFieldNumber;
const int AskCSCreateGuideBattle::kMapidFieldNumber;
const int AskCSCreateGuideBattle::kNtypeFieldNumber;
#endif  // !_MSC_VER

AskCSCreateGuideBattle::AskCSCreateGuideBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskCSCreateGuideBattle)
}

void AskCSCreateGuideBattle::InitAsDefaultInstance() {
}

AskCSCreateGuideBattle::AskCSCreateGuideBattle(const AskCSCreateGuideBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskCSCreateGuideBattle)
}

void AskCSCreateGuideBattle::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8240;
  mapid_ = 0;
  ntype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskCSCreateGuideBattle::~AskCSCreateGuideBattle() {
  // @@protoc_insertion_point(destructor:GCToCS.AskCSCreateGuideBattle)
  SharedDtor();
}

void AskCSCreateGuideBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskCSCreateGuideBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskCSCreateGuideBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCSCreateGuideBattle_descriptor_;
}

const AskCSCreateGuideBattle& AskCSCreateGuideBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskCSCreateGuideBattle* AskCSCreateGuideBattle::default_instance_ = NULL;

AskCSCreateGuideBattle* AskCSCreateGuideBattle::New() const {
  return new AskCSCreateGuideBattle;
}

void AskCSCreateGuideBattle::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8240;
    mapid_ = 0;
    ntype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskCSCreateGuideBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskCSCreateGuideBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ntype;
        break;
      }

      // optional .GCToCS.AskCSCreateGuideBattle.guidetype ntype = 3;
      case 3: {
        if (tag == 24) {
         parse_ntype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::AskCSCreateGuideBattle_guidetype_IsValid(value)) {
            set_ntype(static_cast< ::GCToCS::AskCSCreateGuideBattle_guidetype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskCSCreateGuideBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskCSCreateGuideBattle)
  return false;
#undef DO_
}

void AskCSCreateGuideBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskCSCreateGuideBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional .GCToCS.AskCSCreateGuideBattle.guidetype ntype = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ntype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskCSCreateGuideBattle)
}

::google::protobuf::uint8* AskCSCreateGuideBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskCSCreateGuideBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional .GCToCS.AskCSCreateGuideBattle.guidetype ntype = 3;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ntype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskCSCreateGuideBattle)
  return target;
}

int AskCSCreateGuideBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional .GCToCS.AskCSCreateGuideBattle.guidetype ntype = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskCSCreateGuideBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskCSCreateGuideBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskCSCreateGuideBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskCSCreateGuideBattle::MergeFrom(const AskCSCreateGuideBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskCSCreateGuideBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskCSCreateGuideBattle::CopyFrom(const AskCSCreateGuideBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskCSCreateGuideBattle::IsInitialized() const {

  return true;
}

void AskCSCreateGuideBattle::Swap(AskCSCreateGuideBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(mapid_, other->mapid_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskCSCreateGuideBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskCSCreateGuideBattle_descriptor_;
  metadata.reflection = AskCSCreateGuideBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskQuickBattle::kMsgnumFieldNumber;
const int AskQuickBattle::kMapidFieldNumber;
#endif  // !_MSC_VER

AskQuickBattle::AskQuickBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskQuickBattle)
}

void AskQuickBattle::InitAsDefaultInstance() {
}

AskQuickBattle::AskQuickBattle(const AskQuickBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskQuickBattle)
}

void AskQuickBattle::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8250;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskQuickBattle::~AskQuickBattle() {
  // @@protoc_insertion_point(destructor:GCToCS.AskQuickBattle)
  SharedDtor();
}

void AskQuickBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskQuickBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskQuickBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskQuickBattle_descriptor_;
}

const AskQuickBattle& AskQuickBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskQuickBattle* AskQuickBattle::default_instance_ = NULL;

AskQuickBattle* AskQuickBattle::New() const {
  return new AskQuickBattle;
}

void AskQuickBattle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8250;
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskQuickBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskQuickBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQuickBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskQuickBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskQuickBattle)
  return false;
#undef DO_
}

void AskQuickBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskQuickBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQuickBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskQuickBattle)
}

::google::protobuf::uint8* AskQuickBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskQuickBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQuickBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskQuickBattle)
  return target;
}

int AskQuickBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQuickBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskQuickBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskQuickBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskQuickBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskQuickBattle::MergeFrom(const AskQuickBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskQuickBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskQuickBattle::CopyFrom(const AskQuickBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskQuickBattle::IsInitialized() const {

  return true;
}

void AskQuickBattle::Swap(AskQuickBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskQuickBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskQuickBattle_descriptor_;
  metadata.reflection = AskQuickBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskStopQuickBattle::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskStopQuickBattle::AskStopQuickBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskStopQuickBattle)
}

void AskStopQuickBattle::InitAsDefaultInstance() {
}

AskStopQuickBattle::AskStopQuickBattle(const AskStopQuickBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskStopQuickBattle)
}

void AskStopQuickBattle::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8251;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskStopQuickBattle::~AskStopQuickBattle() {
  // @@protoc_insertion_point(destructor:GCToCS.AskStopQuickBattle)
  SharedDtor();
}

void AskStopQuickBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskStopQuickBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskStopQuickBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskStopQuickBattle_descriptor_;
}

const AskStopQuickBattle& AskStopQuickBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskStopQuickBattle* AskStopQuickBattle::default_instance_ = NULL;

AskStopQuickBattle* AskStopQuickBattle::New() const {
  return new AskStopQuickBattle;
}

void AskStopQuickBattle::Clear() {
  msgnum_ = 8251;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskStopQuickBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskStopQuickBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopQuickBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskStopQuickBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskStopQuickBattle)
  return false;
#undef DO_
}

void AskStopQuickBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskStopQuickBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopQuickBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskStopQuickBattle)
}

::google::protobuf::uint8* AskStopQuickBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskStopQuickBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopQuickBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskStopQuickBattle)
  return target;
}

int AskStopQuickBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStopQuickBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskStopQuickBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskStopQuickBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskStopQuickBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskStopQuickBattle::MergeFrom(const AskStopQuickBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskStopQuickBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskStopQuickBattle::CopyFrom(const AskStopQuickBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskStopQuickBattle::IsInitialized() const {

  return true;
}

void AskStopQuickBattle::Swap(AskStopQuickBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskStopQuickBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskStopQuickBattle_descriptor_;
  metadata.reflection = AskStopQuickBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskCreateRoom::kMsgnumFieldNumber;
const int AskCreateRoom::kMapidFieldNumber;
const int AskCreateRoom::kPasswdFieldNumber;
#endif  // !_MSC_VER

AskCreateRoom::AskCreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskCreateRoom)
}

void AskCreateRoom::InitAsDefaultInstance() {
}

AskCreateRoom::AskCreateRoom(const AskCreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskCreateRoom)
}

void AskCreateRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8260;
  mapid_ = 0;
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskCreateRoom::~AskCreateRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskCreateRoom)
  SharedDtor();
}

void AskCreateRoom::SharedDtor() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void AskCreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskCreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCreateRoom_descriptor_;
}

const AskCreateRoom& AskCreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskCreateRoom* AskCreateRoom::default_instance_ = NULL;

AskCreateRoom* AskCreateRoom::New() const {
  return new AskCreateRoom;
}

void AskCreateRoom::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8260;
    mapid_ = 0;
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskCreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskCreateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (tag == 26) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskCreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskCreateRoom)
  return false;
#undef DO_
}

void AskCreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskCreateRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskCreateRoom)
}

::google::protobuf::uint8* AskCreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskCreateRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskCreateRoom)
  return target;
}

int AskCreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCreateRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskCreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskCreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskCreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskCreateRoom::MergeFrom(const AskCreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskCreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskCreateRoom::CopyFrom(const AskCreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskCreateRoom::IsInitialized() const {

  return true;
}

void AskCreateRoom::Swap(AskCreateRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(mapid_, other->mapid_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskCreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskCreateRoom_descriptor_;
  metadata.reflection = AskCreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddRoom::kMsgnumFieldNumber;
const int AskAddRoom::kBattleidFieldNumber;
const int AskAddRoom::kPasswdFieldNumber;
#endif  // !_MSC_VER

AskAddRoom::AskAddRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskAddRoom)
}

void AskAddRoom::InitAsDefaultInstance() {
}

AskAddRoom::AskAddRoom(const AskAddRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskAddRoom)
}

void AskAddRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8261;
  battleid_ = GOOGLE_ULONGLONG(0);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddRoom::~AskAddRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskAddRoom)
  SharedDtor();
}

void AskAddRoom::SharedDtor() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void AskAddRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddRoom_descriptor_;
}

const AskAddRoom& AskAddRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskAddRoom* AskAddRoom::default_instance_ = NULL;

AskAddRoom* AskAddRoom::New() const {
  return new AskAddRoom;
}

void AskAddRoom::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8261;
    battleid_ = GOOGLE_ULONGLONG(0);
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskAddRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (tag == 26) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskAddRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskAddRoom)
  return false;
#undef DO_
}

void AskAddRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskAddRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battleid(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskAddRoom)
}

::google::protobuf::uint8* AskAddRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskAddRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battleid(), target);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskAddRoom)
  return target;
}

int AskAddRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddRoom::MergeFrom(const AskAddRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddRoom::CopyFrom(const AskAddRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddRoom::IsInitialized() const {

  return true;
}

void AskAddRoom::Swap(AskAddRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(battleid_, other->battleid_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddRoom_descriptor_;
  metadata.reflection = AskAddRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskLeaveRoom::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskLeaveRoom::AskLeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskLeaveRoom)
}

void AskLeaveRoom::InitAsDefaultInstance() {
}

AskLeaveRoom::AskLeaveRoom(const AskLeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskLeaveRoom)
}

void AskLeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8262;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskLeaveRoom::~AskLeaveRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskLeaveRoom)
  SharedDtor();
}

void AskLeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskLeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskLeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskLeaveRoom_descriptor_;
}

const AskLeaveRoom& AskLeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskLeaveRoom* AskLeaveRoom::default_instance_ = NULL;

AskLeaveRoom* AskLeaveRoom::New() const {
  return new AskLeaveRoom;
}

void AskLeaveRoom::Clear() {
  msgnum_ = 8262;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskLeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskLeaveRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLeaveRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskLeaveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskLeaveRoom)
  return false;
#undef DO_
}

void AskLeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskLeaveRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLeaveRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskLeaveRoom)
}

::google::protobuf::uint8* AskLeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskLeaveRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLeaveRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskLeaveRoom)
  return target;
}

int AskLeaveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLeaveRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskLeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskLeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskLeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskLeaveRoom::MergeFrom(const AskLeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskLeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskLeaveRoom::CopyFrom(const AskLeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskLeaveRoom::IsInitialized() const {

  return true;
}

void AskLeaveRoom::Swap(AskLeaveRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskLeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskLeaveRoom_descriptor_;
  metadata.reflection = AskLeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskChangeRoomSeat::kMsgnumFieldNumber;
const int AskChangeRoomSeat::kNewposFieldNumber;
#endif  // !_MSC_VER

AskChangeRoomSeat::AskChangeRoomSeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskChangeRoomSeat)
}

void AskChangeRoomSeat::InitAsDefaultInstance() {
}

AskChangeRoomSeat::AskChangeRoomSeat(const AskChangeRoomSeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskChangeRoomSeat)
}

void AskChangeRoomSeat::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8263;
  newpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskChangeRoomSeat::~AskChangeRoomSeat() {
  // @@protoc_insertion_point(destructor:GCToCS.AskChangeRoomSeat)
  SharedDtor();
}

void AskChangeRoomSeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskChangeRoomSeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskChangeRoomSeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskChangeRoomSeat_descriptor_;
}

const AskChangeRoomSeat& AskChangeRoomSeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskChangeRoomSeat* AskChangeRoomSeat::default_instance_ = NULL;

AskChangeRoomSeat* AskChangeRoomSeat::New() const {
  return new AskChangeRoomSeat;
}

void AskChangeRoomSeat::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8263;
    newpos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskChangeRoomSeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskChangeRoomSeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeRoomSeat];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newpos;
        break;
      }

      // optional int32 newpos = 2;
      case 2: {
        if (tag == 16) {
         parse_newpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newpos_)));
          set_has_newpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskChangeRoomSeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskChangeRoomSeat)
  return false;
#undef DO_
}

void AskChangeRoomSeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskChangeRoomSeat)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeRoomSeat];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 newpos = 2;
  if (has_newpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskChangeRoomSeat)
}

::google::protobuf::uint8* AskChangeRoomSeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskChangeRoomSeat)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeRoomSeat];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 newpos = 2;
  if (has_newpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskChangeRoomSeat)
  return target;
}

int AskChangeRoomSeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChangeRoomSeat];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 newpos = 2;
    if (has_newpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskChangeRoomSeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskChangeRoomSeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskChangeRoomSeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskChangeRoomSeat::MergeFrom(const AskChangeRoomSeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_newpos()) {
      set_newpos(from.newpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskChangeRoomSeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskChangeRoomSeat::CopyFrom(const AskChangeRoomSeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskChangeRoomSeat::IsInitialized() const {

  return true;
}

void AskChangeRoomSeat::Swap(AskChangeRoomSeat* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(newpos_, other->newpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskChangeRoomSeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskChangeRoomSeat_descriptor_;
  metadata.reflection = AskChangeRoomSeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskReadyRoom::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskReadyRoom::AskReadyRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskReadyRoom)
}

void AskReadyRoom::InitAsDefaultInstance() {
}

AskReadyRoom::AskReadyRoom(const AskReadyRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskReadyRoom)
}

void AskReadyRoom::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8264;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskReadyRoom::~AskReadyRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskReadyRoom)
  SharedDtor();
}

void AskReadyRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskReadyRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskReadyRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskReadyRoom_descriptor_;
}

const AskReadyRoom& AskReadyRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskReadyRoom* AskReadyRoom::default_instance_ = NULL;

AskReadyRoom* AskReadyRoom::New() const {
  return new AskReadyRoom;
}

void AskReadyRoom::Clear() {
  msgnum_ = 8264;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskReadyRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskReadyRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReadyRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskReadyRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskReadyRoom)
  return false;
#undef DO_
}

void AskReadyRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskReadyRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReadyRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskReadyRoom)
}

::google::protobuf::uint8* AskReadyRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskReadyRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReadyRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskReadyRoom)
  return target;
}

int AskReadyRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReadyRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskReadyRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskReadyRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskReadyRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskReadyRoom::MergeFrom(const AskReadyRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskReadyRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskReadyRoom::CopyFrom(const AskReadyRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskReadyRoom::IsInitialized() const {

  return true;
}

void AskReadyRoom::Swap(AskReadyRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskReadyRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskReadyRoom_descriptor_;
  metadata.reflection = AskReadyRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskCancelRoom::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskCancelRoom::AskCancelRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskCancelRoom)
}

void AskCancelRoom::InitAsDefaultInstance() {
}

AskCancelRoom::AskCancelRoom(const AskCancelRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskCancelRoom)
}

void AskCancelRoom::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8265;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskCancelRoom::~AskCancelRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskCancelRoom)
  SharedDtor();
}

void AskCancelRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskCancelRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskCancelRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCancelRoom_descriptor_;
}

const AskCancelRoom& AskCancelRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskCancelRoom* AskCancelRoom::default_instance_ = NULL;

AskCancelRoom* AskCancelRoom::New() const {
  return new AskCancelRoom;
}

void AskCancelRoom::Clear() {
  msgnum_ = 8265;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskCancelRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskCancelRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCancelRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskCancelRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskCancelRoom)
  return false;
#undef DO_
}

void AskCancelRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskCancelRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCancelRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskCancelRoom)
}

::google::protobuf::uint8* AskCancelRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskCancelRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCancelRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskCancelRoom)
  return target;
}

int AskCancelRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCancelRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskCancelRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskCancelRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskCancelRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskCancelRoom::MergeFrom(const AskCancelRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskCancelRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskCancelRoom::CopyFrom(const AskCancelRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskCancelRoom::IsInitialized() const {

  return true;
}

void AskCancelRoom::Swap(AskCancelRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskCancelRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskCancelRoom_descriptor_;
  metadata.reflection = AskCancelRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskStartRoom::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskStartRoom::AskStartRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskStartRoom)
}

void AskStartRoom::InitAsDefaultInstance() {
}

AskStartRoom::AskStartRoom(const AskStartRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskStartRoom)
}

void AskStartRoom::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8266;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskStartRoom::~AskStartRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskStartRoom)
  SharedDtor();
}

void AskStartRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskStartRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskStartRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskStartRoom_descriptor_;
}

const AskStartRoom& AskStartRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskStartRoom* AskStartRoom::default_instance_ = NULL;

AskStartRoom* AskStartRoom::New() const {
  return new AskStartRoom;
}

void AskStartRoom::Clear() {
  msgnum_ = 8266;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskStartRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskStartRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskStartRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskStartRoom)
  return false;
#undef DO_
}

void AskStartRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskStartRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskStartRoom)
}

::google::protobuf::uint8* AskStartRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskStartRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskStartRoom)
  return target;
}

int AskStartRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskStartRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskStartRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskStartRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskStartRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskStartRoom::MergeFrom(const AskStartRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskStartRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskStartRoom::CopyFrom(const AskStartRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskStartRoom::IsInitialized() const {

  return true;
}

void AskStartRoom::Swap(AskStartRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskStartRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskStartRoom_descriptor_;
  metadata.reflection = AskStartRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskReEnterRoom::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskReEnterRoom::AskReEnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskReEnterRoom)
}

void AskReEnterRoom::InitAsDefaultInstance() {
}

AskReEnterRoom::AskReEnterRoom(const AskReEnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskReEnterRoom)
}

void AskReEnterRoom::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8268;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskReEnterRoom::~AskReEnterRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskReEnterRoom)
  SharedDtor();
}

void AskReEnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskReEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskReEnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskReEnterRoom_descriptor_;
}

const AskReEnterRoom& AskReEnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskReEnterRoom* AskReEnterRoom::default_instance_ = NULL;

AskReEnterRoom* AskReEnterRoom::New() const {
  return new AskReEnterRoom;
}

void AskReEnterRoom::Clear() {
  msgnum_ = 8268;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskReEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskReEnterRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReEnterRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskReEnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskReEnterRoom)
  return false;
#undef DO_
}

void AskReEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskReEnterRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReEnterRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskReEnterRoom)
}

::google::protobuf::uint8* AskReEnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskReEnterRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReEnterRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskReEnterRoom)
  return target;
}

int AskReEnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReEnterRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskReEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskReEnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskReEnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskReEnterRoom::MergeFrom(const AskReEnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskReEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskReEnterRoom::CopyFrom(const AskReEnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskReEnterRoom::IsInitialized() const {

  return true;
}

void AskReEnterRoom::Swap(AskReEnterRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskReEnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskReEnterRoom_descriptor_;
  metadata.reflection = AskReEnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskChatInRoom::kMsgnumFieldNumber;
const int AskChatInRoom::kChatFieldNumber;
#endif  // !_MSC_VER

AskChatInRoom::AskChatInRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskChatInRoom)
}

void AskChatInRoom::InitAsDefaultInstance() {
}

AskChatInRoom::AskChatInRoom(const AskChatInRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskChatInRoom)
}

void AskChatInRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8267;
  chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskChatInRoom::~AskChatInRoom() {
  // @@protoc_insertion_point(destructor:GCToCS.AskChatInRoom)
  SharedDtor();
}

void AskChatInRoom::SharedDtor() {
  if (chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chat_;
  }
  if (this != default_instance_) {
  }
}

void AskChatInRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskChatInRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskChatInRoom_descriptor_;
}

const AskChatInRoom& AskChatInRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskChatInRoom* AskChatInRoom::default_instance_ = NULL;

AskChatInRoom* AskChatInRoom::New() const {
  return new AskChatInRoom;
}

void AskChatInRoom::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8267;
    if (has_chat()) {
      if (chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chat_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskChatInRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskChatInRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChatInRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat;
        break;
      }

      // optional string chat = 2;
      case 2: {
        if (tag == 18) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat().data(), this->chat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskChatInRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskChatInRoom)
  return false;
#undef DO_
}

void AskChatInRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskChatInRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChatInRoom];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskChatInRoom)
}

::google::protobuf::uint8* AskChatInRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskChatInRoom)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChatInRoom];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskChatInRoom)
  return target;
}

int AskChatInRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskChatInRoom];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string chat = 2;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskChatInRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskChatInRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskChatInRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskChatInRoom::MergeFrom(const AskChatInRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskChatInRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskChatInRoom::CopyFrom(const AskChatInRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskChatInRoom::IsInitialized() const {

  return true;
}

void AskChatInRoom::Swap(AskChatInRoom* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskChatInRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskChatInRoom_descriptor_;
  metadata.reflection = AskChatInRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskGetMailGift::kMsgnumFieldNumber;
const int AskGetMailGift::kMailIdFieldNumber;
#endif  // !_MSC_VER

AskGetMailGift::AskGetMailGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskGetMailGift)
}

void AskGetMailGift::InitAsDefaultInstance() {
}

AskGetMailGift::AskGetMailGift(const AskGetMailGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskGetMailGift)
}

void AskGetMailGift::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8231;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskGetMailGift::~AskGetMailGift() {
  // @@protoc_insertion_point(destructor:GCToCS.AskGetMailGift)
  SharedDtor();
}

void AskGetMailGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskGetMailGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskGetMailGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskGetMailGift_descriptor_;
}

const AskGetMailGift& AskGetMailGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskGetMailGift* AskGetMailGift::default_instance_ = NULL;

AskGetMailGift* AskGetMailGift::New() const {
  return new AskGetMailGift;
}

void AskGetMailGift::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8231;
    mailid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskGetMailGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskGetMailGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGetMailGift];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }

      // optional int32 mailId = 2;
      case 2: {
        if (tag == 16) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskGetMailGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskGetMailGift)
  return false;
#undef DO_
}

void AskGetMailGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskGetMailGift)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGetMailGift];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskGetMailGift)
}

::google::protobuf::uint8* AskGetMailGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskGetMailGift)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGetMailGift];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskGetMailGift)
  return target;
}

int AskGetMailGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGetMailGift];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskGetMailGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskGetMailGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskGetMailGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskGetMailGift::MergeFrom(const AskGetMailGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskGetMailGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskGetMailGift::CopyFrom(const AskGetMailGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskGetMailGift::IsInitialized() const {

  return true;
}

void AskGetMailGift::Swap(AskGetMailGift* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskGetMailGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskGetMailGift_descriptor_;
  metadata.reflection = AskGetMailGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskMailInfo::kMsgnumFieldNumber;
const int AskMailInfo::kMailIdFieldNumber;
#endif  // !_MSC_VER

AskMailInfo::AskMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskMailInfo)
}

void AskMailInfo::InitAsDefaultInstance() {
}

AskMailInfo::AskMailInfo(const AskMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskMailInfo)
}

void AskMailInfo::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8230;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskMailInfo::~AskMailInfo() {
  // @@protoc_insertion_point(destructor:GCToCS.AskMailInfo)
  SharedDtor();
}

void AskMailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskMailInfo_descriptor_;
}

const AskMailInfo& AskMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskMailInfo* AskMailInfo::default_instance_ = NULL;

AskMailInfo* AskMailInfo::New() const {
  return new AskMailInfo;
}

void AskMailInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8230;
    mailid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskMailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskMailInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }

      // optional int32 mailId = 2;
      case 2: {
        if (tag == 16) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskMailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskMailInfo)
  return false;
#undef DO_
}

void AskMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskMailInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskMailInfo];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskMailInfo)
}

::google::protobuf::uint8* AskMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskMailInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskMailInfo];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskMailInfo)
  return target;
}

int AskMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskMailInfo];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskMailInfo::MergeFrom(const AskMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskMailInfo::CopyFrom(const AskMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskMailInfo::IsInitialized() const {

  return true;
}

void AskMailInfo::Swap(AskMailInfo* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskMailInfo_descriptor_;
  metadata.reflection = AskMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskBuyGoods::kMsgnumFieldNumber;
const int AskBuyGoods::kCommondityidFieldNumber;
const int AskBuyGoods::kConsumetypeFieldNumber;
const int AskBuyGoods::kNumFieldNumber;
#endif  // !_MSC_VER

AskBuyGoods::AskBuyGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskBuyGoods)
}

void AskBuyGoods::InitAsDefaultInstance() {
}

AskBuyGoods::AskBuyGoods(const AskBuyGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskBuyGoods)
}

void AskBuyGoods::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8224;
  commondityid_ = 0;
  consumetype_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskBuyGoods::~AskBuyGoods() {
  // @@protoc_insertion_point(destructor:GCToCS.AskBuyGoods)
  SharedDtor();
}

void AskBuyGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskBuyGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskBuyGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskBuyGoods_descriptor_;
}

const AskBuyGoods& AskBuyGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskBuyGoods* AskBuyGoods::default_instance_ = NULL;

AskBuyGoods* AskBuyGoods::New() const {
  return new AskBuyGoods;
}

void AskBuyGoods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskBuyGoods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(commondityid_, num_);
    msgnum_ = 8224;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskBuyGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskBuyGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBuyGoods];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commondityid;
        break;
      }

      // optional int32 commondityid = 2;
      case 2: {
        if (tag == 16) {
         parse_commondityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commondityid_)));
          set_has_commondityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consumetype;
        break;
      }

      // optional int32 consumetype = 3;
      case 3: {
        if (tag == 24) {
         parse_consumetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumetype_)));
          set_has_consumetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskBuyGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskBuyGoods)
  return false;
#undef DO_
}

void AskBuyGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskBuyGoods)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBuyGoods];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 commondityid = 2;
  if (has_commondityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->commondityid(), output);
  }

  // optional int32 consumetype = 3;
  if (has_consumetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consumetype(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskBuyGoods)
}

::google::protobuf::uint8* AskBuyGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskBuyGoods)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBuyGoods];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 commondityid = 2;
  if (has_commondityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->commondityid(), target);
  }

  // optional int32 consumetype = 3;
  if (has_consumetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consumetype(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskBuyGoods)
  return target;
}

int AskBuyGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskBuyGoods];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 commondityid = 2;
    if (has_commondityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commondityid());
    }

    // optional int32 consumetype = 3;
    if (has_consumetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumetype());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskBuyGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskBuyGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskBuyGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskBuyGoods::MergeFrom(const AskBuyGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_commondityid()) {
      set_commondityid(from.commondityid());
    }
    if (from.has_consumetype()) {
      set_consumetype(from.consumetype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskBuyGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBuyGoods::CopyFrom(const AskBuyGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBuyGoods::IsInitialized() const {

  return true;
}

void AskBuyGoods::Swap(AskBuyGoods* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(commondityid_, other->commondityid_);
    std::swap(consumetype_, other->consumetype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskBuyGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskBuyGoods_descriptor_;
  metadata.reflection = AskBuyGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAskGetCLReward::kMsgnumFieldNumber;
#endif  // !_MSC_VER

UserAskGetCLReward::UserAskGetCLReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.UserAskGetCLReward)
}

void UserAskGetCLReward::InitAsDefaultInstance() {
}

UserAskGetCLReward::UserAskGetCLReward(const UserAskGetCLReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.UserAskGetCLReward)
}

void UserAskGetCLReward::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8197;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAskGetCLReward::~UserAskGetCLReward() {
  // @@protoc_insertion_point(destructor:GCToCS.UserAskGetCLReward)
  SharedDtor();
}

void UserAskGetCLReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAskGetCLReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAskGetCLReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAskGetCLReward_descriptor_;
}

const UserAskGetCLReward& UserAskGetCLReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

UserAskGetCLReward* UserAskGetCLReward::default_instance_ = NULL;

UserAskGetCLReward* UserAskGetCLReward::New() const {
  return new UserAskGetCLReward;
}

void UserAskGetCLReward::Clear() {
  msgnum_ = 8197;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAskGetCLReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.UserAskGetCLReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UserAskGetCLReward];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.UserAskGetCLReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.UserAskGetCLReward)
  return false;
#undef DO_
}

void UserAskGetCLReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.UserAskGetCLReward)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UserAskGetCLReward];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.UserAskGetCLReward)
}

::google::protobuf::uint8* UserAskGetCLReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.UserAskGetCLReward)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UserAskGetCLReward];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.UserAskGetCLReward)
  return target;
}

int UserAskGetCLReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UserAskGetCLReward];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAskGetCLReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAskGetCLReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAskGetCLReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAskGetCLReward::MergeFrom(const UserAskGetCLReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAskGetCLReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAskGetCLReward::CopyFrom(const UserAskGetCLReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAskGetCLReward::IsInitialized() const {

  return true;
}

void UserAskGetCLReward::Swap(UserAskGetCLReward* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAskGetCLReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAskGetCLReward_descriptor_;
  metadata.reflection = UserAskGetCLReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notice::kMsgnumFieldNumber;
const int Notice::kTypeFieldNumber;
const int Notice::kNoticeFieldNumber;
#endif  // !_MSC_VER

Notice::Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.Notice)
}

void Notice::InitAsDefaultInstance() {
}

Notice::Notice(const Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.Notice)
}

void Notice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8200;
  type_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notice::~Notice() {
  // @@protoc_insertion_point(destructor:GCToCS.Notice)
  SharedDtor();
}

void Notice::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_descriptor_;
}

const Notice& Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

Notice* Notice::default_instance_ = NULL;

Notice* Notice::New() const {
  return new Notice;
}

void Notice::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8200;
    type_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.Notice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_Notice];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .GCToCS.notice_type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::notice_type_IsValid(value)) {
            set_type(static_cast< ::GCToCS::notice_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // optional string notice = 3;
      case 3: {
        if (tag == 26) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.Notice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.Notice)
  return false;
#undef DO_
}

void Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.Notice)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_Notice];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional .GCToCS.notice_type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.Notice)
}

::google::protobuf::uint8* Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.Notice)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_Notice];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional .GCToCS.notice_type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.Notice)
  return target;
}

int Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_Notice];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional .GCToCS.notice_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notice::MergeFrom(const Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notice::CopyFrom(const Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notice::IsInitialized() const {

  return true;
}

void Notice::Swap(Notice* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(type_, other->type_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notice_descriptor_;
  metadata.reflection = Notice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskCurtNotice::kMsgnumFieldNumber;
const int AskCurtNotice::kTypeFieldNumber;
#endif  // !_MSC_VER

AskCurtNotice::AskCurtNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskCurtNotice)
}

void AskCurtNotice::InitAsDefaultInstance() {
}

AskCurtNotice::AskCurtNotice(const AskCurtNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskCurtNotice)
}

void AskCurtNotice::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8201;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskCurtNotice::~AskCurtNotice() {
  // @@protoc_insertion_point(destructor:GCToCS.AskCurtNotice)
  SharedDtor();
}

void AskCurtNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskCurtNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskCurtNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCurtNotice_descriptor_;
}

const AskCurtNotice& AskCurtNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskCurtNotice* AskCurtNotice::default_instance_ = NULL;

AskCurtNotice* AskCurtNotice::New() const {
  return new AskCurtNotice;
}

void AskCurtNotice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8201;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskCurtNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskCurtNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCurtNotice];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .GCToCS.notice_type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::notice_type_IsValid(value)) {
            set_type(static_cast< ::GCToCS::notice_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskCurtNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskCurtNotice)
  return false;
#undef DO_
}

void AskCurtNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskCurtNotice)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCurtNotice];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional .GCToCS.notice_type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskCurtNotice)
}

::google::protobuf::uint8* AskCurtNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskCurtNotice)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCurtNotice];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional .GCToCS.notice_type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskCurtNotice)
  return target;
}

int AskCurtNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCurtNotice];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional .GCToCS.notice_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskCurtNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskCurtNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskCurtNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskCurtNotice::MergeFrom(const AskCurtNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskCurtNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskCurtNotice::CopyFrom(const AskCurtNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskCurtNotice::IsInitialized() const {

  return true;
}

void AskCurtNotice::Swap(AskCurtNotice* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskCurtNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskCurtNotice_descriptor_;
  metadata.reflection = AskCurtNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompleteInfo::kMsgnumFieldNumber;
const int CompleteInfo::kNicknameFieldNumber;
const int CompleteInfo::kHeadidFieldNumber;
const int CompleteInfo::kSexFieldNumber;
#endif  // !_MSC_VER

CompleteInfo::CompleteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.CompleteInfo)
}

void CompleteInfo::InitAsDefaultInstance() {
}

CompleteInfo::CompleteInfo(const CompleteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.CompleteInfo)
}

void CompleteInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8195;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headid_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompleteInfo::~CompleteInfo() {
  // @@protoc_insertion_point(destructor:GCToCS.CompleteInfo)
  SharedDtor();
}

void CompleteInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CompleteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteInfo_descriptor_;
}

const CompleteInfo& CompleteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

CompleteInfo* CompleteInfo::default_instance_ = NULL;

CompleteInfo* CompleteInfo::New() const {
  return new CompleteInfo;
}

void CompleteInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CompleteInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(headid_, sex_);
    msgnum_ = 8195;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompleteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.CompleteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskComleteUserInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // optional int32 headid = 3;
      case 3: {
        if (tag == 24) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.CompleteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.CompleteInfo)
  return false;
#undef DO_
}

void CompleteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.CompleteInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskComleteUserInfo];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.CompleteInfo)
}

::google::protobuf::uint8* CompleteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.CompleteInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskComleteUserInfo];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.CompleteInfo)
  return target;
}

int CompleteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskComleteUserInfo];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompleteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompleteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompleteInfo::MergeFrom(const CompleteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompleteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteInfo::CopyFrom(const CompleteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteInfo::IsInitialized() const {

  return true;
}

void CompleteInfo::Swap(CompleteInfo* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompleteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteInfo_descriptor_;
  metadata.reflection = CompleteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddToSNSList::kMsgnumFieldNumber;
const int AskAddToSNSList::kNicknameFieldNumber;
const int AskAddToSNSList::kTypeFieldNumber;
#endif  // !_MSC_VER

AskAddToSNSList::AskAddToSNSList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskAddToSNSList)
}

void AskAddToSNSList::InitAsDefaultInstance() {
}

AskAddToSNSList::AskAddToSNSList(const AskAddToSNSList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskAddToSNSList)
}

void AskAddToSNSList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8210;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddToSNSList::~AskAddToSNSList() {
  // @@protoc_insertion_point(destructor:GCToCS.AskAddToSNSList)
  SharedDtor();
}

void AskAddToSNSList::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void AskAddToSNSList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddToSNSList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddToSNSList_descriptor_;
}

const AskAddToSNSList& AskAddToSNSList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskAddToSNSList* AskAddToSNSList::default_instance_ = NULL;

AskAddToSNSList* AskAddToSNSList::New() const {
  return new AskAddToSNSList;
}

void AskAddToSNSList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8210;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddToSNSList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskAddToSNSList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskAddToSNSList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskAddToSNSList)
  return false;
#undef DO_
}

void AskAddToSNSList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskAddToSNSList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSList];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskAddToSNSList)
}

::google::protobuf::uint8* AskAddToSNSList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskAddToSNSList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSList];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskAddToSNSList)
  return target;
}

int AskAddToSNSList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSList];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddToSNSList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddToSNSList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddToSNSList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddToSNSList::MergeFrom(const AskAddToSNSList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddToSNSList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddToSNSList::CopyFrom(const AskAddToSNSList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddToSNSList::IsInitialized() const {

  return true;
}

void AskAddToSNSList::Swap(AskAddToSNSList* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(nickname_, other->nickname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddToSNSList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddToSNSList_descriptor_;
  metadata.reflection = AskAddToSNSList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskCanInviteFriends::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskCanInviteFriends::AskCanInviteFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskCanInviteFriends)
}

void AskCanInviteFriends::InitAsDefaultInstance() {
}

AskCanInviteFriends::AskCanInviteFriends(const AskCanInviteFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskCanInviteFriends)
}

void AskCanInviteFriends::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8218;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskCanInviteFriends::~AskCanInviteFriends() {
  // @@protoc_insertion_point(destructor:GCToCS.AskCanInviteFriends)
  SharedDtor();
}

void AskCanInviteFriends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskCanInviteFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskCanInviteFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskCanInviteFriends_descriptor_;
}

const AskCanInviteFriends& AskCanInviteFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskCanInviteFriends* AskCanInviteFriends::default_instance_ = NULL;

AskCanInviteFriends* AskCanInviteFriends::New() const {
  return new AskCanInviteFriends;
}

void AskCanInviteFriends::Clear() {
  msgnum_ = 8218;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskCanInviteFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskCanInviteFriends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCanInviteFriends];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskCanInviteFriends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskCanInviteFriends)
  return false;
#undef DO_
}

void AskCanInviteFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskCanInviteFriends)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCanInviteFriends];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskCanInviteFriends)
}

::google::protobuf::uint8* AskCanInviteFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskCanInviteFriends)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCanInviteFriends];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskCanInviteFriends)
  return target;
}

int AskCanInviteFriends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskCanInviteFriends];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskCanInviteFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskCanInviteFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskCanInviteFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskCanInviteFriends::MergeFrom(const AskCanInviteFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskCanInviteFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskCanInviteFriends::CopyFrom(const AskCanInviteFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskCanInviteFriends::IsInitialized() const {

  return true;
}

void AskCanInviteFriends::Swap(AskCanInviteFriends* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskCanInviteFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskCanInviteFriends_descriptor_;
  metadata.reflection = AskCanInviteFriends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddToSNSListByID::kMsgnumFieldNumber;
const int AskAddToSNSListByID::kUseridFieldNumber;
const int AskAddToSNSListByID::kTypeFieldNumber;
#endif  // !_MSC_VER

AskAddToSNSListByID::AskAddToSNSListByID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskAddToSNSListByID)
}

void AskAddToSNSListByID::InitAsDefaultInstance() {
}

AskAddToSNSListByID::AskAddToSNSListByID(const AskAddToSNSListByID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskAddToSNSListByID)
}

void AskAddToSNSListByID::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8217;
  userid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddToSNSListByID::~AskAddToSNSListByID() {
  // @@protoc_insertion_point(destructor:GCToCS.AskAddToSNSListByID)
  SharedDtor();
}

void AskAddToSNSListByID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskAddToSNSListByID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddToSNSListByID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddToSNSListByID_descriptor_;
}

const AskAddToSNSListByID& AskAddToSNSListByID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskAddToSNSListByID* AskAddToSNSListByID::default_instance_ = NULL;

AskAddToSNSListByID* AskAddToSNSListByID::New() const {
  return new AskAddToSNSListByID;
}

void AskAddToSNSListByID::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8217;
    userid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddToSNSListByID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskAddToSNSListByID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSListByID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskAddToSNSListByID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskAddToSNSListByID)
  return false;
#undef DO_
}

void AskAddToSNSListByID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskAddToSNSListByID)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSListByID];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskAddToSNSListByID)
}

::google::protobuf::uint8* AskAddToSNSListByID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskAddToSNSListByID)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSListByID];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskAddToSNSListByID)
  return target;
}

int AskAddToSNSListByID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskAddToSNSListByID];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddToSNSListByID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddToSNSListByID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddToSNSListByID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddToSNSListByID::MergeFrom(const AskAddToSNSListByID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddToSNSListByID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddToSNSListByID::CopyFrom(const AskAddToSNSListByID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddToSNSListByID::IsInitialized() const {

  return true;
}

void AskAddToSNSListByID::Swap(AskAddToSNSListByID* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddToSNSListByID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddToSNSListByID_descriptor_;
  metadata.reflection = AskAddToSNSListByID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRemoveFromSNSList::kMsgnumFieldNumber;
const int AskRemoveFromSNSList::kGuididxFieldNumber;
const int AskRemoveFromSNSList::kTypeFieldNumber;
#endif  // !_MSC_VER

AskRemoveFromSNSList::AskRemoveFromSNSList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskRemoveFromSNSList)
}

void AskRemoveFromSNSList::InitAsDefaultInstance() {
}

AskRemoveFromSNSList::AskRemoveFromSNSList(const AskRemoveFromSNSList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskRemoveFromSNSList)
}

void AskRemoveFromSNSList::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8211;
  guididx_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRemoveFromSNSList::~AskRemoveFromSNSList() {
  // @@protoc_insertion_point(destructor:GCToCS.AskRemoveFromSNSList)
  SharedDtor();
}

void AskRemoveFromSNSList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRemoveFromSNSList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRemoveFromSNSList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRemoveFromSNSList_descriptor_;
}

const AskRemoveFromSNSList& AskRemoveFromSNSList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskRemoveFromSNSList* AskRemoveFromSNSList::default_instance_ = NULL;

AskRemoveFromSNSList* AskRemoveFromSNSList::New() const {
  return new AskRemoveFromSNSList;
}

void AskRemoveFromSNSList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8211;
    guididx_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRemoveFromSNSList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskRemoveFromSNSList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveFromSNSList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 2;
      case 2: {
        if (tag == 16) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskRemoveFromSNSList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskRemoveFromSNSList)
  return false;
#undef DO_
}

void AskRemoveFromSNSList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskRemoveFromSNSList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveFromSNSList];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guididx(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskRemoveFromSNSList)
}

::google::protobuf::uint8* AskRemoveFromSNSList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskRemoveFromSNSList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveFromSNSList];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guididx(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskRemoveFromSNSList)
  return target;
}

int AskRemoveFromSNSList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRemoveFromSNSList];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 guididx = 2;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRemoveFromSNSList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRemoveFromSNSList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRemoveFromSNSList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRemoveFromSNSList::MergeFrom(const AskRemoveFromSNSList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRemoveFromSNSList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRemoveFromSNSList::CopyFrom(const AskRemoveFromSNSList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRemoveFromSNSList::IsInitialized() const {

  return true;
}

void AskRemoveFromSNSList::Swap(AskRemoveFromSNSList* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guididx_, other->guididx_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRemoveFromSNSList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRemoveFromSNSList_descriptor_;
  metadata.reflection = AskRemoveFromSNSList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSendMsgToUser::kMsgnumFieldNumber;
const int AskSendMsgToUser::kGuididxFieldNumber;
const int AskSendMsgToUser::kContentsFieldNumber;
#endif  // !_MSC_VER

AskSendMsgToUser::AskSendMsgToUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskSendMsgToUser)
}

void AskSendMsgToUser::InitAsDefaultInstance() {
}

AskSendMsgToUser::AskSendMsgToUser(const AskSendMsgToUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskSendMsgToUser)
}

void AskSendMsgToUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8212;
  guididx_ = GOOGLE_ULONGLONG(0);
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSendMsgToUser::~AskSendMsgToUser() {
  // @@protoc_insertion_point(destructor:GCToCS.AskSendMsgToUser)
  SharedDtor();
}

void AskSendMsgToUser::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void AskSendMsgToUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSendMsgToUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSendMsgToUser_descriptor_;
}

const AskSendMsgToUser& AskSendMsgToUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskSendMsgToUser* AskSendMsgToUser::default_instance_ = NULL;

AskSendMsgToUser* AskSendMsgToUser::New() const {
  return new AskSendMsgToUser;
}

void AskSendMsgToUser::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8212;
    guididx_ = GOOGLE_ULONGLONG(0);
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSendMsgToUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskSendMsgToUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskSendMsgToUser];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 2;
      case 2: {
        if (tag == 16) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contents;
        break;
      }

      // optional string contents = 3;
      case 3: {
        if (tag == 26) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contents().data(), this->contents().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contents");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskSendMsgToUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskSendMsgToUser)
  return false;
#undef DO_
}

void AskSendMsgToUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskSendMsgToUser)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskSendMsgToUser];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guididx(), output);
  }

  // optional string contents = 3;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contents");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskSendMsgToUser)
}

::google::protobuf::uint8* AskSendMsgToUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskSendMsgToUser)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskSendMsgToUser];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guididx(), target);
  }

  // optional string contents = 3;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contents");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskSendMsgToUser)
  return target;
}

int AskSendMsgToUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskSendMsgToUser];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 guididx = 2;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

    // optional string contents = 3;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSendMsgToUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSendMsgToUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSendMsgToUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSendMsgToUser::MergeFrom(const AskSendMsgToUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSendMsgToUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSendMsgToUser::CopyFrom(const AskSendMsgToUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSendMsgToUser::IsInitialized() const {

  return true;
}

void AskSendMsgToUser::Swap(AskSendMsgToUser* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guididx_, other->guididx_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSendMsgToUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSendMsgToUser_descriptor_;
  metadata.reflection = AskSendMsgToUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskInviteFriendsToBattle::kMsgnumFieldNumber;
const int AskInviteFriendsToBattle::kBattleidFieldNumber;
const int AskInviteFriendsToBattle::kGuididxFieldNumber;
#endif  // !_MSC_VER

AskInviteFriendsToBattle::AskInviteFriendsToBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskInviteFriendsToBattle)
}

void AskInviteFriendsToBattle::InitAsDefaultInstance() {
}

AskInviteFriendsToBattle::AskInviteFriendsToBattle(const AskInviteFriendsToBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskInviteFriendsToBattle)
}

void AskInviteFriendsToBattle::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8213;
  battleid_ = 0;
  guididx_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskInviteFriendsToBattle::~AskInviteFriendsToBattle() {
  // @@protoc_insertion_point(destructor:GCToCS.AskInviteFriendsToBattle)
  SharedDtor();
}

void AskInviteFriendsToBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskInviteFriendsToBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskInviteFriendsToBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskInviteFriendsToBattle_descriptor_;
}

const AskInviteFriendsToBattle& AskInviteFriendsToBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskInviteFriendsToBattle* AskInviteFriendsToBattle::default_instance_ = NULL;

AskInviteFriendsToBattle* AskInviteFriendsToBattle::New() const {
  return new AskInviteFriendsToBattle;
}

void AskInviteFriendsToBattle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskInviteFriendsToBattle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(battleid_, guididx_);
    msgnum_ = 8213;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskInviteFriendsToBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskInviteFriendsToBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteFriendsToBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional int32 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 3;
      case 3: {
        if (tag == 24) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskInviteFriendsToBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskInviteFriendsToBattle)
  return false;
#undef DO_
}

void AskInviteFriendsToBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskInviteFriendsToBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteFriendsToBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battleid(), output);
  }

  // optional uint64 guididx = 3;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guididx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskInviteFriendsToBattle)
}

::google::protobuf::uint8* AskInviteFriendsToBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskInviteFriendsToBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteFriendsToBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battleid(), target);
  }

  // optional uint64 guididx = 3;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guididx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskInviteFriendsToBattle)
  return target;
}

int AskInviteFriendsToBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskInviteFriendsToBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

    // optional uint64 guididx = 3;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskInviteFriendsToBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskInviteFriendsToBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskInviteFriendsToBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskInviteFriendsToBattle::MergeFrom(const AskInviteFriendsToBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskInviteFriendsToBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskInviteFriendsToBattle::CopyFrom(const AskInviteFriendsToBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskInviteFriendsToBattle::IsInitialized() const {

  return true;
}

void AskInviteFriendsToBattle::Swap(AskInviteFriendsToBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(battleid_, other->battleid_);
    std::swap(guididx_, other->guididx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskInviteFriendsToBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskInviteFriendsToBattle_descriptor_;
  metadata.reflection = AskInviteFriendsToBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskQueryUserByNickName::kMsgnumFieldNumber;
const int AskQueryUserByNickName::kNicknameFieldNumber;
#endif  // !_MSC_VER

AskQueryUserByNickName::AskQueryUserByNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskQueryUserByNickName)
}

void AskQueryUserByNickName::InitAsDefaultInstance() {
}

AskQueryUserByNickName::AskQueryUserByNickName(const AskQueryUserByNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskQueryUserByNickName)
}

void AskQueryUserByNickName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8214;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskQueryUserByNickName::~AskQueryUserByNickName() {
  // @@protoc_insertion_point(destructor:GCToCS.AskQueryUserByNickName)
  SharedDtor();
}

void AskQueryUserByNickName::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void AskQueryUserByNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskQueryUserByNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskQueryUserByNickName_descriptor_;
}

const AskQueryUserByNickName& AskQueryUserByNickName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskQueryUserByNickName* AskQueryUserByNickName::default_instance_ = NULL;

AskQueryUserByNickName* AskQueryUserByNickName::New() const {
  return new AskQueryUserByNickName;
}

void AskQueryUserByNickName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8214;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskQueryUserByNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskQueryUserByNickName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQueryUserByNickName];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskQueryUserByNickName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskQueryUserByNickName)
  return false;
#undef DO_
}

void AskQueryUserByNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskQueryUserByNickName)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQueryUserByNickName];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskQueryUserByNickName)
}

::google::protobuf::uint8* AskQueryUserByNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskQueryUserByNickName)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQueryUserByNickName];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskQueryUserByNickName)
  return target;
}

int AskQueryUserByNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskQueryUserByNickName];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskQueryUserByNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskQueryUserByNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskQueryUserByNickName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskQueryUserByNickName::MergeFrom(const AskQueryUserByNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskQueryUserByNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskQueryUserByNickName::CopyFrom(const AskQueryUserByNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskQueryUserByNickName::IsInitialized() const {

  return true;
}

void AskQueryUserByNickName::Swap(AskQueryUserByNickName* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskQueryUserByNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskQueryUserByNickName_descriptor_;
  metadata.reflection = AskQueryUserByNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCReplyAddFriendRequst::kMsgnumFieldNumber;
const int GCReplyAddFriendRequst::kGuididxFieldNumber;
const int GCReplyAddFriendRequst::kReplyFieldNumber;
#endif  // !_MSC_VER

GCReplyAddFriendRequst::GCReplyAddFriendRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.GCReplyAddFriendRequst)
}

void GCReplyAddFriendRequst::InitAsDefaultInstance() {
}

GCReplyAddFriendRequst::GCReplyAddFriendRequst(const GCReplyAddFriendRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.GCReplyAddFriendRequst)
}

void GCReplyAddFriendRequst::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8215;
  guididx_ = GOOGLE_ULONGLONG(0);
  reply_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCReplyAddFriendRequst::~GCReplyAddFriendRequst() {
  // @@protoc_insertion_point(destructor:GCToCS.GCReplyAddFriendRequst)
  SharedDtor();
}

void GCReplyAddFriendRequst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCReplyAddFriendRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCReplyAddFriendRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCReplyAddFriendRequst_descriptor_;
}

const GCReplyAddFriendRequst& GCReplyAddFriendRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

GCReplyAddFriendRequst* GCReplyAddFriendRequst::default_instance_ = NULL;

GCReplyAddFriendRequst* GCReplyAddFriendRequst::New() const {
  return new GCReplyAddFriendRequst;
}

void GCReplyAddFriendRequst::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8215;
    guididx_ = GOOGLE_ULONGLONG(0);
    reply_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCReplyAddFriendRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.GCReplyAddFriendRequst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyAddFriendRequst];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 2;
      case 2: {
        if (tag == 16) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reply;
        break;
      }

      // optional int32 reply = 3;
      case 3: {
        if (tag == 24) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.GCReplyAddFriendRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.GCReplyAddFriendRequst)
  return false;
#undef DO_
}

void GCReplyAddFriendRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.GCReplyAddFriendRequst)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyAddFriendRequst];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guididx(), output);
  }

  // optional int32 reply = 3;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.GCReplyAddFriendRequst)
}

::google::protobuf::uint8* GCReplyAddFriendRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.GCReplyAddFriendRequst)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyAddFriendRequst];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guididx(), target);
  }

  // optional int32 reply = 3;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.GCReplyAddFriendRequst)
  return target;
}

int GCReplyAddFriendRequst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyAddFriendRequst];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 guididx = 2;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

    // optional int32 reply = 3;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCReplyAddFriendRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCReplyAddFriendRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCReplyAddFriendRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCReplyAddFriendRequst::MergeFrom(const GCReplyAddFriendRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCReplyAddFriendRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCReplyAddFriendRequst::CopyFrom(const GCReplyAddFriendRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCReplyAddFriendRequst::IsInitialized() const {

  return true;
}

void GCReplyAddFriendRequst::Swap(GCReplyAddFriendRequst* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guididx_, other->guididx_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCReplyAddFriendRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCReplyAddFriendRequst_descriptor_;
  metadata.reflection = GCReplyAddFriendRequst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideCSStepComp::kMsgnumFieldNumber;
const int GuideCSStepComp::kGuidepartFieldNumber;
const int GuideCSStepComp::kBcompFieldNumber;
#endif  // !_MSC_VER

GuideCSStepComp::GuideCSStepComp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.GuideCSStepComp)
}

void GuideCSStepComp::InitAsDefaultInstance() {
}

GuideCSStepComp::GuideCSStepComp(const GuideCSStepComp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.GuideCSStepComp)
}

void GuideCSStepComp::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8242;
  guidepart_ = 0;
  bcomp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideCSStepComp::~GuideCSStepComp() {
  // @@protoc_insertion_point(destructor:GCToCS.GuideCSStepComp)
  SharedDtor();
}

void GuideCSStepComp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideCSStepComp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideCSStepComp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideCSStepComp_descriptor_;
}

const GuideCSStepComp& GuideCSStepComp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

GuideCSStepComp* GuideCSStepComp::default_instance_ = NULL;

GuideCSStepComp* GuideCSStepComp::New() const {
  return new GuideCSStepComp;
}

void GuideCSStepComp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuideCSStepComp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guidepart_, bcomp_);
    msgnum_ = 8242;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideCSStepComp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.GuideCSStepComp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CompCSGuideStepId];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guidepart;
        break;
      }

      // optional int32 guidepart = 2;
      case 2: {
        if (tag == 16) {
         parse_guidepart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guidepart_)));
          set_has_guidepart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bcomp;
        break;
      }

      // optional bool bcomp = 3;
      case 3: {
        if (tag == 24) {
         parse_bcomp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcomp_)));
          set_has_bcomp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.GuideCSStepComp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.GuideCSStepComp)
  return false;
#undef DO_
}

void GuideCSStepComp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.GuideCSStepComp)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CompCSGuideStepId];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 guidepart = 2;
  if (has_guidepart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guidepart(), output);
  }

  // optional bool bcomp = 3;
  if (has_bcomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bcomp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.GuideCSStepComp)
}

::google::protobuf::uint8* GuideCSStepComp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.GuideCSStepComp)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CompCSGuideStepId];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 guidepart = 2;
  if (has_guidepart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guidepart(), target);
  }

  // optional bool bcomp = 3;
  if (has_bcomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bcomp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.GuideCSStepComp)
  return target;
}

int GuideCSStepComp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_CompCSGuideStepId];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 guidepart = 2;
    if (has_guidepart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guidepart());
    }

    // optional bool bcomp = 3;
    if (has_bcomp()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideCSStepComp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideCSStepComp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideCSStepComp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideCSStepComp::MergeFrom(const GuideCSStepComp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guidepart()) {
      set_guidepart(from.guidepart());
    }
    if (from.has_bcomp()) {
      set_bcomp(from.bcomp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideCSStepComp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideCSStepComp::CopyFrom(const GuideCSStepComp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCSStepComp::IsInitialized() const {

  return true;
}

void GuideCSStepComp::Swap(GuideCSStepComp* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guidepart_, other->guidepart_);
    std::swap(bcomp_, other->bcomp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideCSStepComp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideCSStepComp_descriptor_;
  metadata.reflection = GuideCSStepComp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCReplyInviteToBattle::kMsgnumFieldNumber;
const int GCReplyInviteToBattle::kNicknameFieldNumber;
#endif  // !_MSC_VER

GCReplyInviteToBattle::GCReplyInviteToBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.GCReplyInviteToBattle)
}

void GCReplyInviteToBattle::InitAsDefaultInstance() {
}

GCReplyInviteToBattle::GCReplyInviteToBattle(const GCReplyInviteToBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.GCReplyInviteToBattle)
}

void GCReplyInviteToBattle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8216;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCReplyInviteToBattle::~GCReplyInviteToBattle() {
  // @@protoc_insertion_point(destructor:GCToCS.GCReplyInviteToBattle)
  SharedDtor();
}

void GCReplyInviteToBattle::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void GCReplyInviteToBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCReplyInviteToBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCReplyInviteToBattle_descriptor_;
}

const GCReplyInviteToBattle& GCReplyInviteToBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

GCReplyInviteToBattle* GCReplyInviteToBattle::default_instance_ = NULL;

GCReplyInviteToBattle* GCReplyInviteToBattle::New() const {
  return new GCReplyInviteToBattle;
}

void GCReplyInviteToBattle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8216;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCReplyInviteToBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.GCReplyInviteToBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyInviteToBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.GCReplyInviteToBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.GCReplyInviteToBattle)
  return false;
#undef DO_
}

void GCReplyInviteToBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.GCReplyInviteToBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyInviteToBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.GCReplyInviteToBattle)
}

::google::protobuf::uint8* GCReplyInviteToBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.GCReplyInviteToBattle)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyInviteToBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.GCReplyInviteToBattle)
  return target;
}

int GCReplyInviteToBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_GCReplyInviteToBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCReplyInviteToBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCReplyInviteToBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCReplyInviteToBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCReplyInviteToBattle::MergeFrom(const GCReplyInviteToBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCReplyInviteToBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCReplyInviteToBattle::CopyFrom(const GCReplyInviteToBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCReplyInviteToBattle::IsInitialized() const {

  return true;
}

void GCReplyInviteToBattle::Swap(GCReplyInviteToBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCReplyInviteToBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCReplyInviteToBattle_descriptor_;
  metadata.reflection = GCReplyInviteToBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kMsgnumFieldNumber;
const int Login::kSdkFieldNumber;
const int Login::kPlatformFieldNumber;
const int Login::kNameFieldNumber;
const int Login::kPasswdFieldNumber;
const int Login::kIpaddressFieldNumber;
const int Login::kEquimentidFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.Login)
}

void Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8193;
  sdk_ = 0;
  platform_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  equimentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:GCToCS.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipaddress_;
  }
  if (equimentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equimentid_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    msgnum_ = 8193;
    sdk_ = 0;
    platform_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipaddress_->clear();
      }
    }
    if (has_equimentid()) {
      if (equimentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equimentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLogin];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sdk;
        break;
      }

      // optional int32 sdk = 2;
      case 2: {
        if (tag == 16) {
         parse_sdk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdk_)));
          set_has_sdk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional int32 platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }

      // optional string passwd = 5;
      case 5: {
        if (tag == 42) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ipaddress;
        break;
      }

      // optional string ipaddress = 6;
      case 6: {
        if (tag == 50) {
         parse_ipaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_equimentid;
        break;
      }

      // optional string equimentid = 7;
      case 7: {
        if (tag == 58) {
         parse_equimentid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equimentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equimentid().data(), this->equimentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equimentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.Login)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLogin];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 sdk = 2;
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sdk(), output);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->passwd(), output);
  }

  // optional string ipaddress = 6;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ipaddress(), output);
  }

  // optional string equimentid = 7;
  if (has_equimentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equimentid().data(), this->equimentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equimentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->equimentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.Login)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLogin];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 sdk = 2;
  if (has_sdk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sdk(), target);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }

  // optional string ipaddress = 6;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ipaddress(), target);
  }

  // optional string equimentid = 7;
  if (has_equimentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equimentid().data(), this->equimentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equimentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->equimentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskLogin];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 sdk = 2;
    if (has_sdk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdk());
    }

    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional string ipaddress = 6;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional string equimentid = 7;
    if (has_equimentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equimentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_sdk()) {
      set_sdk(from.sdk());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_equimentid()) {
      set_equimentid(from.equimentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(sdk_, other->sdk_);
    std::swap(platform_, other->platform_);
    std::swap(name_, other->name_);
    std::swap(passwd_, other->passwd_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(equimentid_, other->equimentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGameInfo::kMsgnumFieldNumber;
#endif  // !_MSC_VER

UserGameInfo::UserGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.UserGameInfo)
}

void UserGameInfo::InitAsDefaultInstance() {
}

UserGameInfo::UserGameInfo(const UserGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.UserGameInfo)
}

void UserGameInfo::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8196;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGameInfo::~UserGameInfo() {
  // @@protoc_insertion_point(destructor:GCToCS.UserGameInfo)
  SharedDtor();
}

void UserGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGameInfo_descriptor_;
}

const UserGameInfo& UserGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

UserGameInfo* UserGameInfo::default_instance_ = NULL;

UserGameInfo* UserGameInfo::New() const {
  return new UserGameInfo;
}

void UserGameInfo::Clear() {
  msgnum_ = 8196;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.UserGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskUserGameInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.UserGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.UserGameInfo)
  return false;
#undef DO_
}

void UserGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.UserGameInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskUserGameInfo];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.UserGameInfo)
}

::google::protobuf::uint8* UserGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.UserGameInfo)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskUserGameInfo];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.UserGameInfo)
  return target;
}

int UserGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskUserGameInfo];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGameInfo::MergeFrom(const UserGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameInfo::CopyFrom(const UserGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameInfo::IsInitialized() const {

  return true;
}

void UserGameInfo::Swap(UserGameInfo* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGameInfo_descriptor_;
  metadata.reflection = UserGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyRunes::kMsgnumFieldNumber;
const int BuyRunes::kTypeidFieldNumber;
#endif  // !_MSC_VER

BuyRunes::BuyRunes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.BuyRunes)
}

void BuyRunes::InitAsDefaultInstance() {
}

BuyRunes::BuyRunes(const BuyRunes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.BuyRunes)
}

void BuyRunes::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8220;
  typeid__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyRunes::~BuyRunes() {
  // @@protoc_insertion_point(destructor:GCToCS.BuyRunes)
  SharedDtor();
}

void BuyRunes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyRunes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyRunes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyRunes_descriptor_;
}

const BuyRunes& BuyRunes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

BuyRunes* BuyRunes::default_instance_ = NULL;

BuyRunes* BuyRunes::New() const {
  return new BuyRunes;
}

void BuyRunes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 8220;
    typeid__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyRunes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.BuyRunes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_BUYRunes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_typeid;
        break;
      }

      // optional int32 typeid = 2;
      case 2: {
        if (tag == 16) {
         parse_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.BuyRunes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.BuyRunes)
  return false;
#undef DO_
}

void BuyRunes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.BuyRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_BUYRunes];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 typeid = 2;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.BuyRunes)
}

::google::protobuf::uint8* BuyRunes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.BuyRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_BUYRunes];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 typeid = 2;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.BuyRunes)
  return target;
}

int BuyRunes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_BUYRunes];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 typeid = 2;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyRunes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyRunes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyRunes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyRunes::MergeFrom(const BuyRunes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyRunes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyRunes::CopyFrom(const BuyRunes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyRunes::IsInitialized() const {

  return true;
}

void BuyRunes::Swap(BuyRunes* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(typeid__, other->typeid__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyRunes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyRunes_descriptor_;
  metadata.reflection = BuyRunes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EuipRunes::kMsgnumFieldNumber;
const int EuipRunes::kRuneidFieldNumber;
const int EuipRunes::kToposFieldNumber;
#endif  // !_MSC_VER

EuipRunes::EuipRunes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.EuipRunes)
}

void EuipRunes::InitAsDefaultInstance() {
}

EuipRunes::EuipRunes(const EuipRunes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.EuipRunes)
}

void EuipRunes::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8221;
  runeid_ = 0u;
  topos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EuipRunes::~EuipRunes() {
  // @@protoc_insertion_point(destructor:GCToCS.EuipRunes)
  SharedDtor();
}

void EuipRunes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EuipRunes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EuipRunes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EuipRunes_descriptor_;
}

const EuipRunes& EuipRunes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

EuipRunes* EuipRunes::default_instance_ = NULL;

EuipRunes* EuipRunes::New() const {
  return new EuipRunes;
}

void EuipRunes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EuipRunes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(runeid_, topos_);
    msgnum_ = 8221;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EuipRunes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.EuipRunes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_EuipRunes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_runeid;
        break;
      }

      // optional uint32 runeid = 2;
      case 2: {
        if (tag == 16) {
         parse_runeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runeid_)));
          set_has_runeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_topos;
        break;
      }

      // optional int32 topos = 3;
      case 3: {
        if (tag == 24) {
         parse_topos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topos_)));
          set_has_topos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.EuipRunes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.EuipRunes)
  return false;
#undef DO_
}

void EuipRunes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.EuipRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_EuipRunes];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint32 runeid = 2;
  if (has_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->runeid(), output);
  }

  // optional int32 topos = 3;
  if (has_topos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->topos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.EuipRunes)
}

::google::protobuf::uint8* EuipRunes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.EuipRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_EuipRunes];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint32 runeid = 2;
  if (has_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->runeid(), target);
  }

  // optional int32 topos = 3;
  if (has_topos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->topos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.EuipRunes)
  return target;
}

int EuipRunes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_EuipRunes];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint32 runeid = 2;
    if (has_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runeid());
    }

    // optional int32 topos = 3;
    if (has_topos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EuipRunes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EuipRunes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EuipRunes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EuipRunes::MergeFrom(const EuipRunes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_runeid()) {
      set_runeid(from.runeid());
    }
    if (from.has_topos()) {
      set_topos(from.topos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EuipRunes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EuipRunes::CopyFrom(const EuipRunes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EuipRunes::IsInitialized() const {

  return true;
}

void EuipRunes::Swap(EuipRunes* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(runeid_, other->runeid_);
    std::swap(topos_, other->topos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EuipRunes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EuipRunes_descriptor_;
  metadata.reflection = EuipRunes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnEuipRunes::kMsgnumFieldNumber;
const int UnEuipRunes::kPageFieldNumber;
const int UnEuipRunes::kPosFieldNumber;
#endif  // !_MSC_VER

UnEuipRunes::UnEuipRunes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.UnEuipRunes)
}

void UnEuipRunes::InitAsDefaultInstance() {
}

UnEuipRunes::UnEuipRunes(const UnEuipRunes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.UnEuipRunes)
}

void UnEuipRunes::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8222;
  page_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnEuipRunes::~UnEuipRunes() {
  // @@protoc_insertion_point(destructor:GCToCS.UnEuipRunes)
  SharedDtor();
}

void UnEuipRunes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnEuipRunes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnEuipRunes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnEuipRunes_descriptor_;
}

const UnEuipRunes& UnEuipRunes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

UnEuipRunes* UnEuipRunes::default_instance_ = NULL;

UnEuipRunes* UnEuipRunes::New() const {
  return new UnEuipRunes;
}

void UnEuipRunes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnEuipRunes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(page_, pos_);
    msgnum_ = 8222;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnEuipRunes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.UnEuipRunes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UnloadRunes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2;
      case 2: {
        if (tag == 16) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.UnEuipRunes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.UnEuipRunes)
  return false;
#undef DO_
}

void UnEuipRunes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.UnEuipRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UnloadRunes];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.UnEuipRunes)
}

::google::protobuf::uint8* UnEuipRunes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.UnEuipRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UnloadRunes];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.UnEuipRunes)
  return target;
}

int UnEuipRunes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_UnloadRunes];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnEuipRunes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnEuipRunes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnEuipRunes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnEuipRunes::MergeFrom(const UnEuipRunes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnEuipRunes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnEuipRunes::CopyFrom(const UnEuipRunes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnEuipRunes::IsInitialized() const {

  return true;
}

void UnEuipRunes::Swap(UnEuipRunes* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(page_, other->page_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnEuipRunes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnEuipRunes_descriptor_;
  metadata.reflection = UnEuipRunes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComposeRunes::kMsgnumFieldNumber;
const int ComposeRunes::kRunesidFieldNumber;
#endif  // !_MSC_VER

ComposeRunes::ComposeRunes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.ComposeRunes)
}

void ComposeRunes::InitAsDefaultInstance() {
}

ComposeRunes::ComposeRunes(const ComposeRunes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.ComposeRunes)
}

void ComposeRunes::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8223;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposeRunes::~ComposeRunes() {
  // @@protoc_insertion_point(destructor:GCToCS.ComposeRunes)
  SharedDtor();
}

void ComposeRunes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComposeRunes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposeRunes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposeRunes_descriptor_;
}

const ComposeRunes& ComposeRunes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

ComposeRunes* ComposeRunes::default_instance_ = NULL;

ComposeRunes* ComposeRunes::New() const {
  return new ComposeRunes;
}

void ComposeRunes::Clear() {
  msgnum_ = 8223;
  runesid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposeRunes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.ComposeRunes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_ComposeRunes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_runesid;
        break;
      }

      // repeated uint32 runesid = 2;
      case 2: {
        if (tag == 16) {
         parse_runesid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_runesid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_runesid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_runesid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.ComposeRunes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.ComposeRunes)
  return false;
#undef DO_
}

void ComposeRunes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.ComposeRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_ComposeRunes];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // repeated uint32 runesid = 2;
  for (int i = 0; i < this->runesid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->runesid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.ComposeRunes)
}

::google::protobuf::uint8* ComposeRunes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.ComposeRunes)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_ComposeRunes];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // repeated uint32 runesid = 2;
  for (int i = 0; i < this->runesid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->runesid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.ComposeRunes)
  return target;
}

int ComposeRunes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_ComposeRunes];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  // repeated uint32 runesid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->runesid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->runesid(i));
    }
    total_size += 1 * this->runesid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposeRunes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposeRunes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposeRunes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposeRunes::MergeFrom(const ComposeRunes& from) {
  GOOGLE_CHECK_NE(&from, this);
  runesid_.MergeFrom(from.runesid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposeRunes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposeRunes::CopyFrom(const ComposeRunes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposeRunes::IsInitialized() const {

  return true;
}

void ComposeRunes::Swap(ComposeRunes* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    runesid_.Swap(&other->runesid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposeRunes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposeRunes_descriptor_;
  metadata.reflection = ComposeRunes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectToGame::kMsgnumFieldNumber;
const int ReconnectToGame::kNameFieldNumber;
const int ReconnectToGame::kPasswdFieldNumber;
#endif  // !_MSC_VER

ReconnectToGame::ReconnectToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.ReconnectToGame)
}

void ReconnectToGame::InitAsDefaultInstance() {
}

ReconnectToGame::ReconnectToGame(const ReconnectToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.ReconnectToGame)
}

void ReconnectToGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 8194;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectToGame::~ReconnectToGame() {
  // @@protoc_insertion_point(destructor:GCToCS.ReconnectToGame)
  SharedDtor();
}

void ReconnectToGame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectToGame_descriptor_;
}

const ReconnectToGame& ReconnectToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

ReconnectToGame* ReconnectToGame::default_instance_ = NULL;

ReconnectToGame* ReconnectToGame::New() const {
  return new ReconnectToGame;
}

void ReconnectToGame::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 8194;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.ReconnectToGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReconnectGame];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (tag == 26) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.ReconnectToGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.ReconnectToGame)
  return false;
#undef DO_
}

void ReconnectToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.ReconnectToGame)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReconnectGame];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.ReconnectToGame)
}

::google::protobuf::uint8* ReconnectToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.ReconnectToGame)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReconnectGame];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.ReconnectToGame)
  return target;
}

int ReconnectToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskReconnectGame];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectToGame::MergeFrom(const ReconnectToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectToGame::CopyFrom(const ReconnectToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectToGame::IsInitialized() const {

  return true;
}

void ReconnectToGame::Swap(ReconnectToGame* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(name_, other->name_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectToGame_descriptor_;
  metadata.reflection = ReconnectToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComGuideStepID::kMsgnumFieldNumber;
const int ComGuideStepID::kTypeFieldNumber;
const int ComGuideStepID::kStepFieldNumber;
const int ComGuideStepID::kStateFieldNumber;
#endif  // !_MSC_VER

ComGuideStepID::ComGuideStepID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.ComGuideStepID)
}

void ComGuideStepID::InitAsDefaultInstance() {
}

ComGuideStepID::ComGuideStepID(const ComGuideStepID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.ComGuideStepID)
}

void ComGuideStepID::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8241;
  type_ = 0;
  step_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComGuideStepID::~ComGuideStepID() {
  // @@protoc_insertion_point(destructor:GCToCS.ComGuideStepID)
  SharedDtor();
}

void ComGuideStepID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComGuideStepID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComGuideStepID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComGuideStepID_descriptor_;
}

const ComGuideStepID& ComGuideStepID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

ComGuideStepID* ComGuideStepID::default_instance_ = NULL;

ComGuideStepID* ComGuideStepID::New() const {
  return new ComGuideStepID;
}

void ComGuideStepID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ComGuideStepID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, state_);
    msgnum_ = 8241;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComGuideStepID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.ComGuideStepID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideStepId];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // optional int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.ComGuideStepID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.ComGuideStepID)
  return false;
#undef DO_
}

void ComGuideStepID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.ComGuideStepID)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideStepId];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.ComGuideStepID)
}

::google::protobuf::uint8* ComGuideStepID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.ComGuideStepID)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideStepId];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.ComGuideStepID)
  return target;
}

int ComGuideStepID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskGuideStepId];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComGuideStepID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComGuideStepID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComGuideStepID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComGuideStepID::MergeFrom(const ComGuideStepID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComGuideStepID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComGuideStepID::CopyFrom(const ComGuideStepID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComGuideStepID::IsInitialized() const {

  return true;
}

void ComGuideStepID::Swap(ComGuideStepID* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(type_, other->type_);
    std::swap(step_, other->step_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComGuideStepID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComGuideStepID_descriptor_;
  metadata.reflection = ComGuideStepID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRoomList::kMsgnumFieldNumber;
#endif  // !_MSC_VER

AskRoomList::AskRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToCS.AskRoomList)
}

void AskRoomList::InitAsDefaultInstance() {
}

AskRoomList::AskRoomList(const AskRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToCS.AskRoomList)
}

void AskRoomList::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 8269;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRoomList::~AskRoomList() {
  // @@protoc_insertion_point(destructor:GCToCS.AskRoomList)
  SharedDtor();
}

void AskRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRoomList_descriptor_;
}

const AskRoomList& AskRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToCS_2eproto();
  return *default_instance_;
}

AskRoomList* AskRoomList::default_instance_ = NULL;

AskRoomList* AskRoomList::New() const {
  return new AskRoomList;
}

void AskRoomList::Clear() {
  msgnum_ = 8269;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToCS.AskRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRoomList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToCS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToCS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToCS.AskRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToCS.AskRoomList)
  return false;
#undef DO_
}

void AskRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToCS.AskRoomList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRoomList];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToCS.AskRoomList)
}

::google::protobuf::uint8* AskRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToCS.AskRoomList)
  // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRoomList];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToCS.AskRoomList)
  return target;
}

int AskRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToCS.MsgNum msgnum = 1 [default = eMsgToGSToCSFromGC_AskRoomList];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRoomList::MergeFrom(const AskRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRoomList::CopyFrom(const AskRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRoomList::IsInitialized() const {

  return true;
}

void AskRoomList::Swap(AskRoomList* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRoomList_descriptor_;
  metadata.reflection = AskRoomList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GCToCS

// @@protoc_insertion_point(global_scope)
