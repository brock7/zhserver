// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToRC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSToRC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CSToRC {

namespace {

const ::google::protobuf::Descriptor* QueryCDkeyInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCDkeyInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCDkeyInfoResp_CDKey_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCDkeyInfoResp_CDKey_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMailResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMailResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegistRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegistRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllNoticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllNoticeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNoticeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNoticeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteNoticeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteNoticeResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSToRC_2eproto() {
  protobuf_AddDesc_CSToRC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSToRC.proto");
  GOOGLE_CHECK(file != NULL);
  QueryCDkeyInfoResp_descriptor_ = file->message_type(0);
  static const int QueryCDkeyInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp, info_),
  };
  QueryCDkeyInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCDkeyInfoResp_descriptor_,
      QueryCDkeyInfoResp::default_instance_,
      QueryCDkeyInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCDkeyInfoResp));
  QueryCDkeyInfoResp_CDKey_Info_descriptor_ = QueryCDkeyInfoResp_descriptor_->nested_type(0);
  static const int QueryCDkeyInfoResp_CDKey_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, end_tiem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, code_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, code_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, type_),
  };
  QueryCDkeyInfoResp_CDKey_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCDkeyInfoResp_CDKey_Info_descriptor_,
      QueryCDkeyInfoResp_CDKey_Info::default_instance_,
      QueryCDkeyInfoResp_CDKey_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCDkeyInfoResp_CDKey_Info));
  AddMailResp_descriptor_ = file->message_type(1);
  static const int AddMailResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResp, rst_),
  };
  AddMailResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMailResp_descriptor_,
      AddMailResp::default_instance_,
      AddMailResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMailResp));
  AskRegistRsp_descriptor_ = file->message_type(2);
  static const int AskRegistRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegistRsp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegistRsp, rst_),
  };
  AskRegistRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegistRsp_descriptor_,
      AskRegistRsp::default_instance_,
      AskRegistRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegistRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegistRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegistRsp));
  AllServerInfo_descriptor_ = file->message_type(3);
  static const int AllServerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, roomusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, battleusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, loadfactory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, allusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, curttime_),
  };
  AllServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllServerInfo_descriptor_,
      AllServerInfo::default_instance_,
      AllServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllServerInfo));
  ServerUserInfo_descriptor_ = file->message_type(4);
  static const int ServerUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, allusernum_),
  };
  ServerUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUserInfo_descriptor_,
      ServerUserInfo::default_instance_,
      ServerUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUserInfo));
  NoticeInfo_descriptor_ = file->message_type(5);
  static const int NoticeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, notice_),
  };
  NoticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeInfo_descriptor_,
      NoticeInfo::default_instance_,
      NoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeInfo));
  AllNoticeInfo_descriptor_ = file->message_type(6);
  static const int AllNoticeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNoticeInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNoticeInfo, notices_),
  };
  AllNoticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllNoticeInfo_descriptor_,
      AllNoticeInfo::default_instance_,
      AllNoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNoticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllNoticeInfo));
  AddNoticeResp_descriptor_ = file->message_type(7);
  static const int AddNoticeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNoticeResp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNoticeResp, rst_),
  };
  AddNoticeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNoticeResp_descriptor_,
      AddNoticeResp::default_instance_,
      AddNoticeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNoticeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNoticeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNoticeResp));
  DeleteNoticeResp_descriptor_ = file->message_type(8);
  static const int DeleteNoticeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNoticeResp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNoticeResp, rst_),
  };
  DeleteNoticeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteNoticeResp_descriptor_,
      DeleteNoticeResp::default_instance_,
      DeleteNoticeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNoticeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNoticeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteNoticeResp));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSToRC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCDkeyInfoResp_descriptor_, &QueryCDkeyInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCDkeyInfoResp_CDKey_Info_descriptor_, &QueryCDkeyInfoResp_CDKey_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMailResp_descriptor_, &AddMailResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegistRsp_descriptor_, &AskRegistRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllServerInfo_descriptor_, &AllServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUserInfo_descriptor_, &ServerUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeInfo_descriptor_, &NoticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllNoticeInfo_descriptor_, &AllNoticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNoticeResp_descriptor_, &AddNoticeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteNoticeResp_descriptor_, &DeleteNoticeResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSToRC_2eproto() {
  delete QueryCDkeyInfoResp::default_instance_;
  delete QueryCDkeyInfoResp_reflection_;
  delete QueryCDkeyInfoResp_CDKey_Info::default_instance_;
  delete QueryCDkeyInfoResp_CDKey_Info_reflection_;
  delete AddMailResp::default_instance_;
  delete AddMailResp_reflection_;
  delete AskRegistRsp::default_instance_;
  delete AskRegistRsp_reflection_;
  delete AllServerInfo::default_instance_;
  delete AllServerInfo_reflection_;
  delete ServerUserInfo::default_instance_;
  delete ServerUserInfo_reflection_;
  delete NoticeInfo::default_instance_;
  delete NoticeInfo_reflection_;
  delete AllNoticeInfo::default_instance_;
  delete AllNoticeInfo_reflection_;
  delete AddNoticeResp::default_instance_;
  delete AddNoticeResp_reflection_;
  delete DeleteNoticeResp::default_instance_;
  delete DeleteNoticeResp_reflection_;
}

void protobuf_AddDesc_CSToRC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CSToRC.proto\022\006CSToRC\"\203\002\n\022QueryCDkeyInf"
    "oResp\0229\n\005msgid\030\001 \001(\0162\r.CSToRC.MsgID:\033eMs"
    "gCS2RC_AskQueryCDkeyResp\0223\n\004info\030\002 \003(\0132%"
    ".CSToRC.QueryCDkeyInfoResp.CDKey_Info\032}\n"
    "\nCDKey_Info\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\020"
    "\n\010platform\030\003 \001(\005\022\020\n\010end_tiem\030\004 \001(\003\022\020\n\010co"
    "de_num\030\005 \001(\005\022\020\n\010code_len\030\006 \001(\005\022\014\n\004type\030\007"
    " \001(\005\"U\n\013AddMailResp\0229\n\005msgid\030\001 \001(\0162\r.CST"
    "oRC.MsgID:\033eMsgCS2RC_AskAddOneMailResp\022\013"
    "\n\003rst\030\002 \001(\010\"Q\n\014AskRegistRsp\0224\n\005msgid\030\001 \001"
    "(\0162\r.CSToRC.MsgID:\026eMsgCS2RC_AskRegistRs"
    "p\022\013\n\003rst\030\002 \001(\010\"\301\001\n\rAllServerInfo\0225\n\005msgi"
    "d\030\001 \001(\0162\r.CSToRC.MsgID:\027eMsgCS2RC_AllSer"
    "verInfo\022\022\n\nservername\030\002 \001(\014\022\023\n\013roomUserN"
    "um\030\003 \001(\005\022\025\n\rbattleUserNum\030\004 \001(\005\022\023\n\013loadF"
    "actory\030\005 \001(\002\022\022\n\nallUserNum\030\006 \001(\005\022\020\n\010curt"
    "time\030\007 \001(\t\"\\\n\016ServerUserInfo\0226\n\005msgid\030\001 "
    "\001(\0162\r.CSToRC.MsgID:\030eMsgCS2RC_ServerUser"
    "Info\022\022\n\nallUserNum\030\002 \001(\005\"\034\n\nNoticeInfo\022\016"
    "\n\006notice\030\001 \001(\014\"k\n\rAllNoticeInfo\0225\n\005msgid"
    "\030\001 \001(\0162\r.CSToRC.MsgID:\027eMsgCS2RC_AllNoti"
    "ceInfo\022#\n\007notices\030\002 \003(\0132\022.CSToRC.NoticeI"
    "nfo\"S\n\rAddNoticeResp\0225\n\005msgid\030\001 \001(\0162\r.CS"
    "ToRC.MsgID:\027eMsgCS2RC_AddNoticeResp\022\013\n\003r"
    "st\030\002 \001(\010\"Y\n\020DeleteNoticeResp\0228\n\005msgid\030\001 "
    "\001(\0162\r.CSToRC.MsgID:\032eMsgCS2RC_DeleteNoti"
    "ceResp\022\013\n\003rst\030\002 \001(\010*\266\002\n\005MsgID\022\025\n\017eMsgCS2"
    "RC_Begin\020\334\205\002\022\034\n\026eMsgCS2RC_AskRegistRsp\020\335"
    "\205\002\022\035\n\027eMsgCS2RC_AllServerInfo\020\336\205\002\022\036\n\030eMs"
    "gCS2RC_ServerUserInfo\020\337\205\002\022\035\n\027eMsgCS2RC_A"
    "llNoticeInfo\020\340\205\002\022\035\n\027eMsgCS2RC_AddNoticeR"
    "esp\020\341\205\002\022 \n\032eMsgCS2RC_DeleteNoticeResp\020\342\205"
    "\002\022!\n\033eMsgCS2RC_AskAddOneMailResp\020\343\205\002\022!\n\033"
    "eMsgCS2RC_AskQueryCDkeyResp\020\344\205\002\022\023\n\reMsgC"
    "S2RC_End\020\317\211\002", 1372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSToRC.proto", &protobuf_RegisterTypes);
  QueryCDkeyInfoResp::default_instance_ = new QueryCDkeyInfoResp();
  QueryCDkeyInfoResp_CDKey_Info::default_instance_ = new QueryCDkeyInfoResp_CDKey_Info();
  AddMailResp::default_instance_ = new AddMailResp();
  AskRegistRsp::default_instance_ = new AskRegistRsp();
  AllServerInfo::default_instance_ = new AllServerInfo();
  ServerUserInfo::default_instance_ = new ServerUserInfo();
  NoticeInfo::default_instance_ = new NoticeInfo();
  AllNoticeInfo::default_instance_ = new AllNoticeInfo();
  AddNoticeResp::default_instance_ = new AddNoticeResp();
  DeleteNoticeResp::default_instance_ = new DeleteNoticeResp();
  QueryCDkeyInfoResp::default_instance_->InitAsDefaultInstance();
  QueryCDkeyInfoResp_CDKey_Info::default_instance_->InitAsDefaultInstance();
  AddMailResp::default_instance_->InitAsDefaultInstance();
  AskRegistRsp::default_instance_->InitAsDefaultInstance();
  AllServerInfo::default_instance_->InitAsDefaultInstance();
  ServerUserInfo::default_instance_->InitAsDefaultInstance();
  NoticeInfo::default_instance_->InitAsDefaultInstance();
  AllNoticeInfo::default_instance_->InitAsDefaultInstance();
  AddNoticeResp::default_instance_->InitAsDefaultInstance();
  DeleteNoticeResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSToRC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSToRC_2eproto {
  StaticDescriptorInitializer_CSToRC_2eproto() {
    protobuf_AddDesc_CSToRC_2eproto();
  }
} static_descriptor_initializer_CSToRC_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 33500:
    case 33501:
    case 33502:
    case 33503:
    case 33504:
    case 33505:
    case 33506:
    case 33507:
    case 33508:
    case 33999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCDkeyInfoResp_CDKey_Info::kIdFieldNumber;
const int QueryCDkeyInfoResp_CDKey_Info::kTitleFieldNumber;
const int QueryCDkeyInfoResp_CDKey_Info::kPlatformFieldNumber;
const int QueryCDkeyInfoResp_CDKey_Info::kEndTiemFieldNumber;
const int QueryCDkeyInfoResp_CDKey_Info::kCodeNumFieldNumber;
const int QueryCDkeyInfoResp_CDKey_Info::kCodeLenFieldNumber;
const int QueryCDkeyInfoResp_CDKey_Info::kTypeFieldNumber;
#endif  // !_MSC_VER

QueryCDkeyInfoResp_CDKey_Info::QueryCDkeyInfoResp_CDKey_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
}

void QueryCDkeyInfoResp_CDKey_Info::InitAsDefaultInstance() {
}

QueryCDkeyInfoResp_CDKey_Info::QueryCDkeyInfoResp_CDKey_Info(const QueryCDkeyInfoResp_CDKey_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
}

void QueryCDkeyInfoResp_CDKey_Info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = 0;
  end_tiem_ = GOOGLE_LONGLONG(0);
  code_num_ = 0;
  code_len_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCDkeyInfoResp_CDKey_Info::~QueryCDkeyInfoResp_CDKey_Info() {
  // @@protoc_insertion_point(destructor:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  SharedDtor();
}

void QueryCDkeyInfoResp_CDKey_Info::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void QueryCDkeyInfoResp_CDKey_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCDkeyInfoResp_CDKey_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCDkeyInfoResp_CDKey_Info_descriptor_;
}

const QueryCDkeyInfoResp_CDKey_Info& QueryCDkeyInfoResp_CDKey_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

QueryCDkeyInfoResp_CDKey_Info* QueryCDkeyInfoResp_CDKey_Info::default_instance_ = NULL;

QueryCDkeyInfoResp_CDKey_Info* QueryCDkeyInfoResp_CDKey_Info::New() const {
  return new QueryCDkeyInfoResp_CDKey_Info;
}

void QueryCDkeyInfoResp_CDKey_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryCDkeyInfoResp_CDKey_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, type_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCDkeyInfoResp_CDKey_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional int32 platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_tiem;
        break;
      }

      // optional int64 end_tiem = 4;
      case 4: {
        if (tag == 32) {
         parse_end_tiem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_tiem_)));
          set_has_end_tiem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_code_num;
        break;
      }

      // optional int32 code_num = 5;
      case 5: {
        if (tag == 40) {
         parse_code_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_num_)));
          set_has_code_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_code_len;
        break;
      }

      // optional int32 code_len = 6;
      case 6: {
        if (tag == 48) {
         parse_code_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_len_)));
          set_has_code_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  return false;
#undef DO_
}

void QueryCDkeyInfoResp_CDKey_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }

  // optional int64 end_tiem = 4;
  if (has_end_tiem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_tiem(), output);
  }

  // optional int32 code_num = 5;
  if (has_code_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->code_num(), output);
  }

  // optional int32 code_len = 6;
  if (has_code_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->code_len(), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
}

::google::protobuf::uint8* QueryCDkeyInfoResp_CDKey_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }

  // optional int64 end_tiem = 4;
  if (has_end_tiem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_tiem(), target);
  }

  // optional int32 code_num = 5;
  if (has_code_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->code_num(), target);
  }

  // optional int32 code_len = 6;
  if (has_code_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->code_len(), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  return target;
}

int QueryCDkeyInfoResp_CDKey_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional int64 end_tiem = 4;
    if (has_end_tiem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_tiem());
    }

    // optional int32 code_num = 5;
    if (has_code_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_num());
    }

    // optional int32 code_len = 6;
    if (has_code_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_len());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCDkeyInfoResp_CDKey_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCDkeyInfoResp_CDKey_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCDkeyInfoResp_CDKey_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCDkeyInfoResp_CDKey_Info::MergeFrom(const QueryCDkeyInfoResp_CDKey_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_end_tiem()) {
      set_end_tiem(from.end_tiem());
    }
    if (from.has_code_num()) {
      set_code_num(from.code_num());
    }
    if (from.has_code_len()) {
      set_code_len(from.code_len());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCDkeyInfoResp_CDKey_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCDkeyInfoResp_CDKey_Info::CopyFrom(const QueryCDkeyInfoResp_CDKey_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCDkeyInfoResp_CDKey_Info::IsInitialized() const {

  return true;
}

void QueryCDkeyInfoResp_CDKey_Info::Swap(QueryCDkeyInfoResp_CDKey_Info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(platform_, other->platform_);
    std::swap(end_tiem_, other->end_tiem_);
    std::swap(code_num_, other->code_num_);
    std::swap(code_len_, other->code_len_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCDkeyInfoResp_CDKey_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCDkeyInfoResp_CDKey_Info_descriptor_;
  metadata.reflection = QueryCDkeyInfoResp_CDKey_Info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryCDkeyInfoResp::kMsgidFieldNumber;
const int QueryCDkeyInfoResp::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryCDkeyInfoResp::QueryCDkeyInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.QueryCDkeyInfoResp)
}

void QueryCDkeyInfoResp::InitAsDefaultInstance() {
}

QueryCDkeyInfoResp::QueryCDkeyInfoResp(const QueryCDkeyInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.QueryCDkeyInfoResp)
}

void QueryCDkeyInfoResp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33508;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCDkeyInfoResp::~QueryCDkeyInfoResp() {
  // @@protoc_insertion_point(destructor:CSToRC.QueryCDkeyInfoResp)
  SharedDtor();
}

void QueryCDkeyInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCDkeyInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCDkeyInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCDkeyInfoResp_descriptor_;
}

const QueryCDkeyInfoResp& QueryCDkeyInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

QueryCDkeyInfoResp* QueryCDkeyInfoResp::default_instance_ = NULL;

QueryCDkeyInfoResp* QueryCDkeyInfoResp::New() const {
  return new QueryCDkeyInfoResp;
}

void QueryCDkeyInfoResp::Clear() {
  msgid_ = 33508;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCDkeyInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.QueryCDkeyInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.QueryCDkeyInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.QueryCDkeyInfoResp)
  return false;
#undef DO_
}

void QueryCDkeyInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.QueryCDkeyInfoResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.QueryCDkeyInfoResp)
}

::google::protobuf::uint8* QueryCDkeyInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.QueryCDkeyInfoResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.QueryCDkeyInfoResp)
  return target;
}

int QueryCDkeyInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCDkeyInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCDkeyInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCDkeyInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCDkeyInfoResp::MergeFrom(const QueryCDkeyInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCDkeyInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCDkeyInfoResp::CopyFrom(const QueryCDkeyInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCDkeyInfoResp::IsInitialized() const {

  return true;
}

void QueryCDkeyInfoResp::Swap(QueryCDkeyInfoResp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCDkeyInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCDkeyInfoResp_descriptor_;
  metadata.reflection = QueryCDkeyInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMailResp::kMsgidFieldNumber;
const int AddMailResp::kRstFieldNumber;
#endif  // !_MSC_VER

AddMailResp::AddMailResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.AddMailResp)
}

void AddMailResp::InitAsDefaultInstance() {
}

AddMailResp::AddMailResp(const AddMailResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.AddMailResp)
}

void AddMailResp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33507;
  rst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMailResp::~AddMailResp() {
  // @@protoc_insertion_point(destructor:CSToRC.AddMailResp)
  SharedDtor();
}

void AddMailResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMailResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMailResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMailResp_descriptor_;
}

const AddMailResp& AddMailResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

AddMailResp* AddMailResp::default_instance_ = NULL;

AddMailResp* AddMailResp::New() const {
  return new AddMailResp;
}

void AddMailResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33507;
    rst_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMailResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.AddMailResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rst;
        break;
      }

      // optional bool rst = 2;
      case 2: {
        if (tag == 16) {
         parse_rst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.AddMailResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.AddMailResp)
  return false;
#undef DO_
}

void AddMailResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.AddMailResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.AddMailResp)
}

::google::protobuf::uint8* AddMailResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AddMailResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AddMailResp)
  return target;
}

int AddMailResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool rst = 2;
    if (has_rst()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMailResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMailResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMailResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMailResp::MergeFrom(const AddMailResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rst()) {
      set_rst(from.rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMailResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMailResp::CopyFrom(const AddMailResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMailResp::IsInitialized() const {

  return true;
}

void AddMailResp::Swap(AddMailResp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rst_, other->rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMailResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMailResp_descriptor_;
  metadata.reflection = AddMailResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegistRsp::kMsgidFieldNumber;
const int AskRegistRsp::kRstFieldNumber;
#endif  // !_MSC_VER

AskRegistRsp::AskRegistRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.AskRegistRsp)
}

void AskRegistRsp::InitAsDefaultInstance() {
}

AskRegistRsp::AskRegistRsp(const AskRegistRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.AskRegistRsp)
}

void AskRegistRsp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33501;
  rst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegistRsp::~AskRegistRsp() {
  // @@protoc_insertion_point(destructor:CSToRC.AskRegistRsp)
  SharedDtor();
}

void AskRegistRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRegistRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegistRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegistRsp_descriptor_;
}

const AskRegistRsp& AskRegistRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

AskRegistRsp* AskRegistRsp::default_instance_ = NULL;

AskRegistRsp* AskRegistRsp::New() const {
  return new AskRegistRsp;
}

void AskRegistRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33501;
    rst_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegistRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.AskRegistRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rst;
        break;
      }

      // optional bool rst = 2;
      case 2: {
        if (tag == 16) {
         parse_rst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.AskRegistRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.AskRegistRsp)
  return false;
#undef DO_
}

void AskRegistRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.AskRegistRsp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.AskRegistRsp)
}

::google::protobuf::uint8* AskRegistRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AskRegistRsp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AskRegistRsp)
  return target;
}

int AskRegistRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool rst = 2;
    if (has_rst()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegistRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegistRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegistRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegistRsp::MergeFrom(const AskRegistRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rst()) {
      set_rst(from.rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegistRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegistRsp::CopyFrom(const AskRegistRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegistRsp::IsInitialized() const {

  return true;
}

void AskRegistRsp::Swap(AskRegistRsp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rst_, other->rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegistRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegistRsp_descriptor_;
  metadata.reflection = AskRegistRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllServerInfo::kMsgidFieldNumber;
const int AllServerInfo::kServernameFieldNumber;
const int AllServerInfo::kRoomUserNumFieldNumber;
const int AllServerInfo::kBattleUserNumFieldNumber;
const int AllServerInfo::kLoadFactoryFieldNumber;
const int AllServerInfo::kAllUserNumFieldNumber;
const int AllServerInfo::kCurttimeFieldNumber;
#endif  // !_MSC_VER

AllServerInfo::AllServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.AllServerInfo)
}

void AllServerInfo::InitAsDefaultInstance() {
}

AllServerInfo::AllServerInfo(const AllServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.AllServerInfo)
}

void AllServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 33502;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomusernum_ = 0;
  battleusernum_ = 0;
  loadfactory_ = 0;
  allusernum_ = 0;
  curttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllServerInfo::~AllServerInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.AllServerInfo)
  SharedDtor();
}

void AllServerInfo::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (curttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curttime_;
  }
  if (this != default_instance_) {
  }
}

void AllServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllServerInfo_descriptor_;
}

const AllServerInfo& AllServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

AllServerInfo* AllServerInfo::default_instance_ = NULL;

AllServerInfo* AllServerInfo::New() const {
  return new AllServerInfo;
}

void AllServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roomusernum_, loadfactory_);
    msgid_ = 33502;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
    allusernum_ = 0;
    if (has_curttime()) {
      if (curttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curttime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.AllServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servername;
        break;
      }

      // optional bytes servername = 2;
      case 2: {
        if (tag == 18) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_servername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomUserNum;
        break;
      }

      // optional int32 roomUserNum = 3;
      case 3: {
        if (tag == 24) {
         parse_roomUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomusernum_)));
          set_has_roomusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battleUserNum;
        break;
      }

      // optional int32 battleUserNum = 4;
      case 4: {
        if (tag == 32) {
         parse_battleUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleusernum_)));
          set_has_battleusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_loadFactory;
        break;
      }

      // optional float loadFactory = 5;
      case 5: {
        if (tag == 45) {
         parse_loadFactory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loadfactory_)));
          set_has_loadfactory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allUserNum;
        break;
      }

      // optional int32 allUserNum = 6;
      case 6: {
        if (tag == 48) {
         parse_allUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allusernum_)));
          set_has_allusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_curttime;
        break;
      }

      // optional string curttime = 7;
      case 7: {
        if (tag == 58) {
         parse_curttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curttime().data(), this->curttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.AllServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.AllServerInfo)
  return false;
#undef DO_
}

void AllServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.AllServerInfo)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bytes servername = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->servername(), output);
  }

  // optional int32 roomUserNum = 3;
  if (has_roomusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomusernum(), output);
  }

  // optional int32 battleUserNum = 4;
  if (has_battleusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battleusernum(), output);
  }

  // optional float loadFactory = 5;
  if (has_loadfactory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->loadfactory(), output);
  }

  // optional int32 allUserNum = 6;
  if (has_allusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allusernum(), output);
  }

  // optional string curttime = 7;
  if (has_curttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curttime().data(), this->curttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->curttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.AllServerInfo)
}

::google::protobuf::uint8* AllServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AllServerInfo)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bytes servername = 2;
  if (has_servername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->servername(), target);
  }

  // optional int32 roomUserNum = 3;
  if (has_roomusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomusernum(), target);
  }

  // optional int32 battleUserNum = 4;
  if (has_battleusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battleusernum(), target);
  }

  // optional float loadFactory = 5;
  if (has_loadfactory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->loadfactory(), target);
  }

  // optional int32 allUserNum = 6;
  if (has_allusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allusernum(), target);
  }

  // optional string curttime = 7;
  if (has_curttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curttime().data(), this->curttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->curttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AllServerInfo)
  return target;
}

int AllServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bytes servername = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->servername());
    }

    // optional int32 roomUserNum = 3;
    if (has_roomusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomusernum());
    }

    // optional int32 battleUserNum = 4;
    if (has_battleusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleusernum());
    }

    // optional float loadFactory = 5;
    if (has_loadfactory()) {
      total_size += 1 + 4;
    }

    // optional int32 allUserNum = 6;
    if (has_allusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allusernum());
    }

    // optional string curttime = 7;
    if (has_curttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllServerInfo::MergeFrom(const AllServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_roomusernum()) {
      set_roomusernum(from.roomusernum());
    }
    if (from.has_battleusernum()) {
      set_battleusernum(from.battleusernum());
    }
    if (from.has_loadfactory()) {
      set_loadfactory(from.loadfactory());
    }
    if (from.has_allusernum()) {
      set_allusernum(from.allusernum());
    }
    if (from.has_curttime()) {
      set_curttime(from.curttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllServerInfo::CopyFrom(const AllServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllServerInfo::IsInitialized() const {

  return true;
}

void AllServerInfo::Swap(AllServerInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(servername_, other->servername_);
    std::swap(roomusernum_, other->roomusernum_);
    std::swap(battleusernum_, other->battleusernum_);
    std::swap(loadfactory_, other->loadfactory_);
    std::swap(allusernum_, other->allusernum_);
    std::swap(curttime_, other->curttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllServerInfo_descriptor_;
  metadata.reflection = AllServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUserInfo::kMsgidFieldNumber;
const int ServerUserInfo::kAllUserNumFieldNumber;
#endif  // !_MSC_VER

ServerUserInfo::ServerUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.ServerUserInfo)
}

void ServerUserInfo::InitAsDefaultInstance() {
}

ServerUserInfo::ServerUserInfo(const ServerUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.ServerUserInfo)
}

void ServerUserInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33503;
  allusernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUserInfo::~ServerUserInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.ServerUserInfo)
  SharedDtor();
}

void ServerUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUserInfo_descriptor_;
}

const ServerUserInfo& ServerUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

ServerUserInfo* ServerUserInfo::default_instance_ = NULL;

ServerUserInfo* ServerUserInfo::New() const {
  return new ServerUserInfo;
}

void ServerUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33503;
    allusernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.ServerUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allUserNum;
        break;
      }

      // optional int32 allUserNum = 2;
      case 2: {
        if (tag == 16) {
         parse_allUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allusernum_)));
          set_has_allusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.ServerUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.ServerUserInfo)
  return false;
#undef DO_
}

void ServerUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.ServerUserInfo)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 allUserNum = 2;
  if (has_allusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allusernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.ServerUserInfo)
}

::google::protobuf::uint8* ServerUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.ServerUserInfo)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 allUserNum = 2;
  if (has_allusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allusernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.ServerUserInfo)
  return target;
}

int ServerUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 allUserNum = 2;
    if (has_allusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allusernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUserInfo::MergeFrom(const ServerUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_allusernum()) {
      set_allusernum(from.allusernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUserInfo::CopyFrom(const ServerUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserInfo::IsInitialized() const {

  return true;
}

void ServerUserInfo::Swap(ServerUserInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(allusernum_, other->allusernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUserInfo_descriptor_;
  metadata.reflection = ServerUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeInfo::kNoticeFieldNumber;
#endif  // !_MSC_VER

NoticeInfo::NoticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.NoticeInfo)
}

void NoticeInfo::InitAsDefaultInstance() {
}

NoticeInfo::NoticeInfo(const NoticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.NoticeInfo)
}

void NoticeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeInfo::~NoticeInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.NoticeInfo)
  SharedDtor();
}

void NoticeInfo::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void NoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeInfo_descriptor_;
}

const NoticeInfo& NoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

NoticeInfo* NoticeInfo::default_instance_ = NULL;

NoticeInfo* NoticeInfo::New() const {
  return new NoticeInfo;
}

void NoticeInfo::Clear() {
  if (has_notice()) {
    if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      notice_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.NoticeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes notice = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.NoticeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.NoticeInfo)
  return false;
#undef DO_
}

void NoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.NoticeInfo)
  // optional bytes notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.NoticeInfo)
}

::google::protobuf::uint8* NoticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.NoticeInfo)
  // optional bytes notice = 1;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.NoticeInfo)
  return target;
}

int NoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeInfo::MergeFrom(const NoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeInfo::CopyFrom(const NoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeInfo::IsInitialized() const {

  return true;
}

void NoticeInfo::Swap(NoticeInfo* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeInfo_descriptor_;
  metadata.reflection = NoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllNoticeInfo::kMsgidFieldNumber;
const int AllNoticeInfo::kNoticesFieldNumber;
#endif  // !_MSC_VER

AllNoticeInfo::AllNoticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.AllNoticeInfo)
}

void AllNoticeInfo::InitAsDefaultInstance() {
}

AllNoticeInfo::AllNoticeInfo(const AllNoticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.AllNoticeInfo)
}

void AllNoticeInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33504;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllNoticeInfo::~AllNoticeInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.AllNoticeInfo)
  SharedDtor();
}

void AllNoticeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllNoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllNoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllNoticeInfo_descriptor_;
}

const AllNoticeInfo& AllNoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

AllNoticeInfo* AllNoticeInfo::default_instance_ = NULL;

AllNoticeInfo* AllNoticeInfo::New() const {
  return new AllNoticeInfo;
}

void AllNoticeInfo::Clear() {
  msgid_ = 33504;
  notices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllNoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.AllNoticeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notices;
        break;
      }

      // repeated .CSToRC.NoticeInfo notices = 2;
      case 2: {
        if (tag == 18) {
         parse_notices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.AllNoticeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.AllNoticeInfo)
  return false;
#undef DO_
}

void AllNoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.AllNoticeInfo)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .CSToRC.NoticeInfo notices = 2;
  for (int i = 0; i < this->notices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.AllNoticeInfo)
}

::google::protobuf::uint8* AllNoticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AllNoticeInfo)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .CSToRC.NoticeInfo notices = 2;
  for (int i = 0; i < this->notices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AllNoticeInfo)
  return target;
}

int AllNoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .CSToRC.NoticeInfo notices = 2;
  total_size += 1 * this->notices_size();
  for (int i = 0; i < this->notices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllNoticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllNoticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllNoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllNoticeInfo::MergeFrom(const AllNoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  notices_.MergeFrom(from.notices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllNoticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllNoticeInfo::CopyFrom(const AllNoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllNoticeInfo::IsInitialized() const {

  return true;
}

void AllNoticeInfo::Swap(AllNoticeInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    notices_.Swap(&other->notices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllNoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllNoticeInfo_descriptor_;
  metadata.reflection = AllNoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNoticeResp::kMsgidFieldNumber;
const int AddNoticeResp::kRstFieldNumber;
#endif  // !_MSC_VER

AddNoticeResp::AddNoticeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.AddNoticeResp)
}

void AddNoticeResp::InitAsDefaultInstance() {
}

AddNoticeResp::AddNoticeResp(const AddNoticeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.AddNoticeResp)
}

void AddNoticeResp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33505;
  rst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNoticeResp::~AddNoticeResp() {
  // @@protoc_insertion_point(destructor:CSToRC.AddNoticeResp)
  SharedDtor();
}

void AddNoticeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddNoticeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNoticeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNoticeResp_descriptor_;
}

const AddNoticeResp& AddNoticeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

AddNoticeResp* AddNoticeResp::default_instance_ = NULL;

AddNoticeResp* AddNoticeResp::New() const {
  return new AddNoticeResp;
}

void AddNoticeResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33505;
    rst_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNoticeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.AddNoticeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rst;
        break;
      }

      // optional bool rst = 2;
      case 2: {
        if (tag == 16) {
         parse_rst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.AddNoticeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.AddNoticeResp)
  return false;
#undef DO_
}

void AddNoticeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.AddNoticeResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.AddNoticeResp)
}

::google::protobuf::uint8* AddNoticeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AddNoticeResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AddNoticeResp)
  return target;
}

int AddNoticeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool rst = 2;
    if (has_rst()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNoticeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNoticeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNoticeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNoticeResp::MergeFrom(const AddNoticeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rst()) {
      set_rst(from.rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNoticeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNoticeResp::CopyFrom(const AddNoticeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNoticeResp::IsInitialized() const {

  return true;
}

void AddNoticeResp::Swap(AddNoticeResp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rst_, other->rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNoticeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNoticeResp_descriptor_;
  metadata.reflection = AddNoticeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteNoticeResp::kMsgidFieldNumber;
const int DeleteNoticeResp::kRstFieldNumber;
#endif  // !_MSC_VER

DeleteNoticeResp::DeleteNoticeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToRC.DeleteNoticeResp)
}

void DeleteNoticeResp::InitAsDefaultInstance() {
}

DeleteNoticeResp::DeleteNoticeResp(const DeleteNoticeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToRC.DeleteNoticeResp)
}

void DeleteNoticeResp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33506;
  rst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteNoticeResp::~DeleteNoticeResp() {
  // @@protoc_insertion_point(destructor:CSToRC.DeleteNoticeResp)
  SharedDtor();
}

void DeleteNoticeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteNoticeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNoticeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteNoticeResp_descriptor_;
}

const DeleteNoticeResp& DeleteNoticeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToRC_2eproto();
  return *default_instance_;
}

DeleteNoticeResp* DeleteNoticeResp::default_instance_ = NULL;

DeleteNoticeResp* DeleteNoticeResp::New() const {
  return new DeleteNoticeResp;
}

void DeleteNoticeResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33506;
    rst_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteNoticeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToRC.DeleteNoticeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToRC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToRC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rst;
        break;
      }

      // optional bool rst = 2;
      case 2: {
        if (tag == 16) {
         parse_rst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToRC.DeleteNoticeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToRC.DeleteNoticeResp)
  return false;
#undef DO_
}

void DeleteNoticeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToRC.DeleteNoticeResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToRC.DeleteNoticeResp)
}

::google::protobuf::uint8* DeleteNoticeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.DeleteNoticeResp)
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool rst = 2;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.DeleteNoticeResp)
  return target;
}

int DeleteNoticeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool rst = 2;
    if (has_rst()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNoticeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteNoticeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteNoticeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteNoticeResp::MergeFrom(const DeleteNoticeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rst()) {
      set_rst(from.rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteNoticeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNoticeResp::CopyFrom(const DeleteNoticeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNoticeResp::IsInitialized() const {

  return true;
}

void DeleteNoticeResp::Swap(DeleteNoticeResp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rst_, other->rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteNoticeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteNoticeResp_descriptor_;
  metadata.reflection = DeleteNoticeResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSToRC

// @@protoc_insertion_point(global_scope)
