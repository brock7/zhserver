// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSToGS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SSToGS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SSToGS {

namespace {

const ::google::protobuf::Descriptor* AskPingRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPingRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegisteRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegisteRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderPostToGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderPostToGC_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderPostToGC_UserNetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderPostToGC_UserNetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderKickoutGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderKickoutGC_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SSToGS_2eproto() {
  protobuf_AddDesc_SSToGS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SSToGS.proto");
  GOOGLE_CHECK(file != NULL);
  AskPingRet_descriptor_ = file->message_type(0);
  static const int AskPingRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingRet, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingRet, time_),
  };
  AskPingRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPingRet_descriptor_,
      AskPingRet::default_instance_,
      AskPingRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPingRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPingRet));
  AskRegisteRet_descriptor_ = file->message_type(1);
  static const int AskRegisteRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, state_),
  };
  AskRegisteRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegisteRet_descriptor_,
      AskRegisteRet::default_instance_,
      AskRegisteRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegisteRet));
  OrderPostToGC_descriptor_ = file->message_type(2);
  static const int OrderPostToGC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, usernetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, othermsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, othermsg_),
  };
  OrderPostToGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderPostToGC_descriptor_,
      OrderPostToGC::default_instance_,
      OrderPostToGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderPostToGC));
  OrderPostToGC_UserNetInfo_descriptor_ = OrderPostToGC_descriptor_->nested_type(0);
  static const int OrderPostToGC_UserNetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, gcnid_),
  };
  OrderPostToGC_UserNetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderPostToGC_UserNetInfo_descriptor_,
      OrderPostToGC_UserNetInfo::default_instance_,
      OrderPostToGC_UserNetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderPostToGC_UserNetInfo));
  OrderKickoutGC_descriptor_ = file->message_type(3);
  static const int OrderKickoutGC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, gsnid_),
  };
  OrderKickoutGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderKickoutGC_descriptor_,
      OrderKickoutGC::default_instance_,
      OrderKickoutGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderKickoutGC));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SSToGS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPingRet_descriptor_, &AskPingRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegisteRet_descriptor_, &AskRegisteRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderPostToGC_descriptor_, &OrderPostToGC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderPostToGC_UserNetInfo_descriptor_, &OrderPostToGC_UserNetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderKickoutGC_descriptor_, &OrderKickoutGC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SSToGS_2eproto() {
  delete AskPingRet::default_instance_;
  delete AskPingRet_reflection_;
  delete AskRegisteRet::default_instance_;
  delete AskRegisteRet_reflection_;
  delete OrderPostToGC::default_instance_;
  delete OrderPostToGC_reflection_;
  delete OrderPostToGC_UserNetInfo::default_instance_;
  delete OrderPostToGC_UserNetInfo_reflection_;
  delete OrderKickoutGC::default_instance_;
  delete OrderKickoutGC_reflection_;
}

void protobuf_AddDesc_SSToGS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014SSToGS.proto\022\006SSToGS\"S\n\nAskPingRet\0227\n\005"
    "mgsid\030\001 \001(\0162\r.SSToGS.MsgID:\031eMsgToGSFrom"
    "SS_AskPingRet\022\014\n\004time\030\002 \001(\003\"Z\n\rAskRegist"
    "eRet\022:\n\005mgsid\030\001 \001(\0162\r.SSToGS.MsgID:\034eMsg"
    "ToGSFromSS_AskRegisteRet\022\r\n\005state\030\002 \001(\005\""
    "\325\001\n\rOrderPostToGC\022:\n\005msgid\030\001 \001(\0162\r.SSToG"
    "S.MsgID:\034eMsgToGSFromSS_OrderPostToGC\0226\n"
    "\013usernetinfo\030\002 \003(\0132!.SSToGS.OrderPostToG"
    "C.UserNetInfo\022\022\n\nothermsgid\030\003 \001(\005\022\020\n\010oth"
    "ermsg\030\004 \001(\t\032*\n\013UserNetInfo\022\014\n\004gsid\030\001 \001(\005"
    "\022\r\n\005gcnid\030\002 \001(\005\"\\\n\016OrderKickoutGC\022;\n\005mgs"
    "id\030\001 \001(\0162\r.SSToGS.MsgID:\035eMsgToGSFromSS_"
    "OrderKickoutGC\022\r\n\005gsnid\030\002 \001(\005*\313\001\n\005MsgID\022"
    "\032\n\024eMsgToGSFromSS_Begin\020\200\300\001\022\037\n\031eMsgToGSF"
    "romSS_AskPingRet\020\201\300\001\022\"\n\034eMsgToGSFromSS_A"
    "skRegisteRet\020\202\300\001\022\"\n\034eMsgToGSFromSS_Order"
    "PostToGC\020\203\300\001\022#\n\035eMsgToGSFromSS_OrderKick"
    "outGC\020\204\300\001\022\030\n\022eMsgToGSFromSS_End\020\250\303\001", 715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SSToGS.proto", &protobuf_RegisterTypes);
  AskPingRet::default_instance_ = new AskPingRet();
  AskRegisteRet::default_instance_ = new AskRegisteRet();
  OrderPostToGC::default_instance_ = new OrderPostToGC();
  OrderPostToGC_UserNetInfo::default_instance_ = new OrderPostToGC_UserNetInfo();
  OrderKickoutGC::default_instance_ = new OrderKickoutGC();
  AskPingRet::default_instance_->InitAsDefaultInstance();
  AskRegisteRet::default_instance_->InitAsDefaultInstance();
  OrderPostToGC::default_instance_->InitAsDefaultInstance();
  OrderPostToGC_UserNetInfo::default_instance_->InitAsDefaultInstance();
  OrderKickoutGC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SSToGS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SSToGS_2eproto {
  StaticDescriptorInitializer_SSToGS_2eproto() {
    protobuf_AddDesc_SSToGS_2eproto();
  }
} static_descriptor_initializer_SSToGS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 24576:
    case 24577:
    case 24578:
    case 24579:
    case 24580:
    case 25000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskPingRet::kMgsidFieldNumber;
const int AskPingRet::kTimeFieldNumber;
#endif  // !_MSC_VER

AskPingRet::AskPingRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToGS.AskPingRet)
}

void AskPingRet::InitAsDefaultInstance() {
}

AskPingRet::AskPingRet(const AskPingRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToGS.AskPingRet)
}

void AskPingRet::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 24577;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPingRet::~AskPingRet() {
  // @@protoc_insertion_point(destructor:SSToGS.AskPingRet)
  SharedDtor();
}

void AskPingRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPingRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPingRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPingRet_descriptor_;
}

const AskPingRet& AskPingRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToGS_2eproto();
  return *default_instance_;
}

AskPingRet* AskPingRet::default_instance_ = NULL;

AskPingRet* AskPingRet::New() const {
  return new AskPingRet;
}

void AskPingRet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 24577;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPingRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToGS.AskPingRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskPingRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToGS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToGS.AskPingRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToGS.AskPingRet)
  return false;
#undef DO_
}

void AskPingRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToGS.AskPingRet)
  // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskPingRet];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToGS.AskPingRet)
}

::google::protobuf::uint8* AskPingRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToGS.AskPingRet)
  // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskPingRet];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToGS.AskPingRet)
  return target;
}

int AskPingRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskPingRet];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPingRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPingRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPingRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPingRet::MergeFrom(const AskPingRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPingRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPingRet::CopyFrom(const AskPingRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPingRet::IsInitialized() const {

  return true;
}

void AskPingRet::Swap(AskPingRet* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPingRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPingRet_descriptor_;
  metadata.reflection = AskPingRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegisteRet::kMgsidFieldNumber;
const int AskRegisteRet::kStateFieldNumber;
#endif  // !_MSC_VER

AskRegisteRet::AskRegisteRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToGS.AskRegisteRet)
}

void AskRegisteRet::InitAsDefaultInstance() {
}

AskRegisteRet::AskRegisteRet(const AskRegisteRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToGS.AskRegisteRet)
}

void AskRegisteRet::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 24578;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegisteRet::~AskRegisteRet() {
  // @@protoc_insertion_point(destructor:SSToGS.AskRegisteRet)
  SharedDtor();
}

void AskRegisteRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRegisteRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegisteRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegisteRet_descriptor_;
}

const AskRegisteRet& AskRegisteRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToGS_2eproto();
  return *default_instance_;
}

AskRegisteRet* AskRegisteRet::default_instance_ = NULL;

AskRegisteRet* AskRegisteRet::New() const {
  return new AskRegisteRet;
}

void AskRegisteRet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 24578;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegisteRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToGS.AskRegisteRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskRegisteRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToGS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToGS.AskRegisteRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToGS.AskRegisteRet)
  return false;
#undef DO_
}

void AskRegisteRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToGS.AskRegisteRet)
  // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskRegisteRet];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToGS.AskRegisteRet)
}

::google::protobuf::uint8* AskRegisteRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToGS.AskRegisteRet)
  // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskRegisteRet];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToGS.AskRegisteRet)
  return target;
}

int AskRegisteRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_AskRegisteRet];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegisteRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegisteRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegisteRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegisteRet::MergeFrom(const AskRegisteRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegisteRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegisteRet::CopyFrom(const AskRegisteRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegisteRet::IsInitialized() const {

  return true;
}

void AskRegisteRet::Swap(AskRegisteRet* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegisteRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegisteRet_descriptor_;
  metadata.reflection = AskRegisteRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderPostToGC_UserNetInfo::kGsidFieldNumber;
const int OrderPostToGC_UserNetInfo::kGcnidFieldNumber;
#endif  // !_MSC_VER

OrderPostToGC_UserNetInfo::OrderPostToGC_UserNetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToGS.OrderPostToGC.UserNetInfo)
}

void OrderPostToGC_UserNetInfo::InitAsDefaultInstance() {
}

OrderPostToGC_UserNetInfo::OrderPostToGC_UserNetInfo(const OrderPostToGC_UserNetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToGS.OrderPostToGC.UserNetInfo)
}

void OrderPostToGC_UserNetInfo::SharedCtor() {
  _cached_size_ = 0;
  gsid_ = 0;
  gcnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderPostToGC_UserNetInfo::~OrderPostToGC_UserNetInfo() {
  // @@protoc_insertion_point(destructor:SSToGS.OrderPostToGC.UserNetInfo)
  SharedDtor();
}

void OrderPostToGC_UserNetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderPostToGC_UserNetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderPostToGC_UserNetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderPostToGC_UserNetInfo_descriptor_;
}

const OrderPostToGC_UserNetInfo& OrderPostToGC_UserNetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToGS_2eproto();
  return *default_instance_;
}

OrderPostToGC_UserNetInfo* OrderPostToGC_UserNetInfo::default_instance_ = NULL;

OrderPostToGC_UserNetInfo* OrderPostToGC_UserNetInfo::New() const {
  return new OrderPostToGC_UserNetInfo;
}

void OrderPostToGC_UserNetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderPostToGC_UserNetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gsid_, gcnid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderPostToGC_UserNetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToGS.OrderPostToGC.UserNetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gcnid;
        break;
      }

      // optional int32 gcnid = 2;
      case 2: {
        if (tag == 16) {
         parse_gcnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnid_)));
          set_has_gcnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToGS.OrderPostToGC.UserNetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToGS.OrderPostToGC.UserNetInfo)
  return false;
#undef DO_
}

void OrderPostToGC_UserNetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToGS.OrderPostToGC.UserNetInfo)
  // optional int32 gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gsid(), output);
  }

  // optional int32 gcnid = 2;
  if (has_gcnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gcnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToGS.OrderPostToGC.UserNetInfo)
}

::google::protobuf::uint8* OrderPostToGC_UserNetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToGS.OrderPostToGC.UserNetInfo)
  // optional int32 gsid = 1;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gsid(), target);
  }

  // optional int32 gcnid = 2;
  if (has_gcnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gcnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToGS.OrderPostToGC.UserNetInfo)
  return target;
}

int OrderPostToGC_UserNetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gsid = 1;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnid = 2;
    if (has_gcnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderPostToGC_UserNetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderPostToGC_UserNetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderPostToGC_UserNetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderPostToGC_UserNetInfo::MergeFrom(const OrderPostToGC_UserNetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnid()) {
      set_gcnid(from.gcnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderPostToGC_UserNetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderPostToGC_UserNetInfo::CopyFrom(const OrderPostToGC_UserNetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPostToGC_UserNetInfo::IsInitialized() const {

  return true;
}

void OrderPostToGC_UserNetInfo::Swap(OrderPostToGC_UserNetInfo* other) {
  if (other != this) {
    std::swap(gsid_, other->gsid_);
    std::swap(gcnid_, other->gcnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderPostToGC_UserNetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderPostToGC_UserNetInfo_descriptor_;
  metadata.reflection = OrderPostToGC_UserNetInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OrderPostToGC::kMsgidFieldNumber;
const int OrderPostToGC::kUsernetinfoFieldNumber;
const int OrderPostToGC::kOthermsgidFieldNumber;
const int OrderPostToGC::kOthermsgFieldNumber;
#endif  // !_MSC_VER

OrderPostToGC::OrderPostToGC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToGS.OrderPostToGC)
}

void OrderPostToGC::InitAsDefaultInstance() {
}

OrderPostToGC::OrderPostToGC(const OrderPostToGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToGS.OrderPostToGC)
}

void OrderPostToGC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 24579;
  othermsgid_ = 0;
  othermsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderPostToGC::~OrderPostToGC() {
  // @@protoc_insertion_point(destructor:SSToGS.OrderPostToGC)
  SharedDtor();
}

void OrderPostToGC::SharedDtor() {
  if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othermsg_;
  }
  if (this != default_instance_) {
  }
}

void OrderPostToGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderPostToGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderPostToGC_descriptor_;
}

const OrderPostToGC& OrderPostToGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToGS_2eproto();
  return *default_instance_;
}

OrderPostToGC* OrderPostToGC::default_instance_ = NULL;

OrderPostToGC* OrderPostToGC::New() const {
  return new OrderPostToGC;
}

void OrderPostToGC::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    msgid_ = 24579;
    othermsgid_ = 0;
    if (has_othermsg()) {
      if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othermsg_->clear();
      }
    }
  }
  usernetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderPostToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToGS.OrderPostToGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToGS.MsgID msgid = 1 [default = eMsgToGSFromSS_OrderPostToGC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::SSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_usernetinfo;
        break;
      }

      // repeated .SSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_usernetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_usernetinfo;
        if (input->ExpectTag(24)) goto parse_othermsgid;
        break;
      }

      // optional int32 othermsgid = 3;
      case 3: {
        if (tag == 24) {
         parse_othermsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othermsgid_)));
          set_has_othermsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_othermsg;
        break;
      }

      // optional string othermsg = 4;
      case 4: {
        if (tag == 34) {
         parse_othermsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othermsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->othermsg().data(), this->othermsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "othermsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToGS.OrderPostToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToGS.OrderPostToGC)
  return false;
#undef DO_
}

void OrderPostToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToGS.OrderPostToGC)
  // optional .SSToGS.MsgID msgid = 1 [default = eMsgToGSFromSS_OrderPostToGC];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .SSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
  for (int i = 0; i < this->usernetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usernetinfo(i), output);
  }

  // optional int32 othermsgid = 3;
  if (has_othermsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->othermsgid(), output);
  }

  // optional string othermsg = 4;
  if (has_othermsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othermsg().data(), this->othermsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "othermsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->othermsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToGS.OrderPostToGC)
}

::google::protobuf::uint8* OrderPostToGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToGS.OrderPostToGC)
  // optional .SSToGS.MsgID msgid = 1 [default = eMsgToGSFromSS_OrderPostToGC];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .SSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
  for (int i = 0; i < this->usernetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usernetinfo(i), target);
  }

  // optional int32 othermsgid = 3;
  if (has_othermsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->othermsgid(), target);
  }

  // optional string othermsg = 4;
  if (has_othermsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othermsg().data(), this->othermsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "othermsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->othermsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToGS.OrderPostToGC)
  return target;
}

int OrderPostToGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToGS.MsgID msgid = 1 [default = eMsgToGSFromSS_OrderPostToGC];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 othermsgid = 3;
    if (has_othermsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othermsgid());
    }

    // optional string othermsg = 4;
    if (has_othermsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othermsg());
    }

  }
  // repeated .SSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
  total_size += 1 * this->usernetinfo_size();
  for (int i = 0; i < this->usernetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usernetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderPostToGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderPostToGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderPostToGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderPostToGC::MergeFrom(const OrderPostToGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  usernetinfo_.MergeFrom(from.usernetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_othermsgid()) {
      set_othermsgid(from.othermsgid());
    }
    if (from.has_othermsg()) {
      set_othermsg(from.othermsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderPostToGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderPostToGC::CopyFrom(const OrderPostToGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPostToGC::IsInitialized() const {

  return true;
}

void OrderPostToGC::Swap(OrderPostToGC* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    usernetinfo_.Swap(&other->usernetinfo_);
    std::swap(othermsgid_, other->othermsgid_);
    std::swap(othermsg_, other->othermsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderPostToGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderPostToGC_descriptor_;
  metadata.reflection = OrderPostToGC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderKickoutGC::kMgsidFieldNumber;
const int OrderKickoutGC::kGsnidFieldNumber;
#endif  // !_MSC_VER

OrderKickoutGC::OrderKickoutGC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToGS.OrderKickoutGC)
}

void OrderKickoutGC::InitAsDefaultInstance() {
}

OrderKickoutGC::OrderKickoutGC(const OrderKickoutGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToGS.OrderKickoutGC)
}

void OrderKickoutGC::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 24580;
  gsnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderKickoutGC::~OrderKickoutGC() {
  // @@protoc_insertion_point(destructor:SSToGS.OrderKickoutGC)
  SharedDtor();
}

void OrderKickoutGC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderKickoutGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderKickoutGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderKickoutGC_descriptor_;
}

const OrderKickoutGC& OrderKickoutGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToGS_2eproto();
  return *default_instance_;
}

OrderKickoutGC* OrderKickoutGC::default_instance_ = NULL;

OrderKickoutGC* OrderKickoutGC::New() const {
  return new OrderKickoutGC;
}

void OrderKickoutGC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 24580;
    gsnid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderKickoutGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToGS.OrderKickoutGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_OrderKickoutGC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToGS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gsnid;
        break;
      }

      // optional int32 gsnid = 2;
      case 2: {
        if (tag == 16) {
         parse_gsnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsnid_)));
          set_has_gsnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToGS.OrderKickoutGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToGS.OrderKickoutGC)
  return false;
#undef DO_
}

void OrderKickoutGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToGS.OrderKickoutGC)
  // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_OrderKickoutGC];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 gsnid = 2;
  if (has_gsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gsnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToGS.OrderKickoutGC)
}

::google::protobuf::uint8* OrderKickoutGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToGS.OrderKickoutGC)
  // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_OrderKickoutGC];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 gsnid = 2;
  if (has_gsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gsnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToGS.OrderKickoutGC)
  return target;
}

int OrderKickoutGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToGS.MsgID mgsid = 1 [default = eMsgToGSFromSS_OrderKickoutGC];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 gsnid = 2;
    if (has_gsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderKickoutGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderKickoutGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderKickoutGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderKickoutGC::MergeFrom(const OrderKickoutGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_gsnid()) {
      set_gsnid(from.gsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderKickoutGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderKickoutGC::CopyFrom(const OrderKickoutGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderKickoutGC::IsInitialized() const {

  return true;
}

void OrderKickoutGC::Swap(OrderKickoutGC* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(gsnid_, other->gsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderKickoutGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderKickoutGC_descriptor_;
  metadata.reflection = OrderKickoutGC_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSToGS

// @@protoc_insertion_point(global_scope)
