// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToCS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GSToCS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GSToCS {

namespace {

const ::google::protobuf::Descriptor* UserOffLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOffLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Asking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Asking_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportGetSomeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportGetSomeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegiste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegiste_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportGCMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportGCMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GSToCS_2eproto() {
  protobuf_AddDesc_GSToCS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GSToCS.proto");
  GOOGLE_CHECK(file != NULL);
  UserOffLine_descriptor_ = file->message_type(0);
  static const int UserOffLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffLine, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffLine, usernetid_),
  };
  UserOffLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOffLine_descriptor_,
      UserOffLine::default_instance_,
      UserOffLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOffLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOffLine));
  Asking_descriptor_ = file->message_type(1);
  static const int Asking_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asking, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asking, time_),
  };
  Asking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Asking_descriptor_,
      Asking::default_instance_,
      Asking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Asking));
  ReportGetSomeMsg_descriptor_ = file->message_type(2);
  static const int ReportGetSomeMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGetSomeMsg, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGetSomeMsg, gotmsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGetSomeMsg, otherval_),
  };
  ReportGetSomeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportGetSomeMsg_descriptor_,
      ReportGetSomeMsg::default_instance_,
      ReportGetSomeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGetSomeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGetSomeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportGetSomeMsg));
  AskRegiste_descriptor_ = file->message_type(3);
  static const int AskRegiste_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, usepwd_),
  };
  AskRegiste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegiste_descriptor_,
      AskRegiste::default_instance_,
      AskRegiste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegiste));
  ReportGCMsg_descriptor_ = file->message_type(4);
  static const int ReportGCMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGCMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGCMsg, nsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGCMsg, othermsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGCMsg, othermsg_),
  };
  ReportGCMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportGCMsg_descriptor_,
      ReportGCMsg::default_instance_,
      ReportGCMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGCMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGCMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportGCMsg));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GSToCS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOffLine_descriptor_, &UserOffLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Asking_descriptor_, &Asking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportGetSomeMsg_descriptor_, &ReportGetSomeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegiste_descriptor_, &AskRegiste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportGCMsg_descriptor_, &ReportGCMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GSToCS_2eproto() {
  delete UserOffLine::default_instance_;
  delete UserOffLine_reflection_;
  delete Asking::default_instance_;
  delete Asking_reflection_;
  delete ReportGetSomeMsg::default_instance_;
  delete ReportGetSomeMsg_reflection_;
  delete AskRegiste::default_instance_;
  delete AskRegiste_reflection_;
  delete ReportGCMsg::default_instance_;
  delete ReportGCMsg_reflection_;
}

void protobuf_AddDesc_GSToCS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GSToCS.proto\022\006GSToCS\"Z\n\013UserOffLine\0228\n"
    "\005mgsid\030\001 \001(\0162\r.GSToCS.MsgID:\032eMsgToCSFro"
    "mGS_UserOffLine\022\021\n\tusernetid\030\002 \001(\005\"L\n\006As"
    "king\0224\n\005mgsid\030\001 \001(\0162\r.GSToCS.MsgID:\026eMsg"
    "ToCSFromGS_AskPing\022\014\n\004time\030\002 \001(\003\"u\n\020Repo"
    "rtGetSomeMsg\022=\n\005mgsid\030\001 \001(\0162\r.GSToCS.Msg"
    "ID:\037eMsgToCSFromGS_ReportGetSomeMsg\022\020\n\010g"
    "otmsgid\030\002 \001(\005\022\020\n\010otherval\030\003 \001(\004\"}\n\nAskRe"
    "giste\0227\n\005msgid\030\001 \001(\0162\r.GSToCS.MsgID:\031eMs"
    "gToCSFromGS_AskRegiste\022\014\n\004gsid\030\002 \001(\005\022\n\n\002"
    "ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\016\n\006usepwd\030\005 \001(\t\"{"
    "\n\013ReportGCMsg\0228\n\005msgid\030\001 \001(\0162\r.GSToCS.Ms"
    "gID:\032eMsgToCSFromGS_ReportGCMsg\022\014\n\004nsid\030"
    "\002 \001(\005\022\022\n\nothermsgid\030\003 \001(\005\022\020\n\010othermsg\030\004 "
    "\001(\014*\340\001\n\005MsgID\022\031\n\024eMsgToCSFromGS_Begin\020\200@"
    "\022\033\n\026eMsgToCSFromGS_AskPing\020\201@\022\036\n\031eMsgToC"
    "SFromGS_AskRegiste\020\202@\022\037\n\032eMsgToCSFromGS_"
    "ReportGCMsg\020\203@\022$\n\037eMsgToCSFromGS_ReportG"
    "etSomeMsg\020\204@\022\037\n\032eMsgToCSFromGS_UserOffLi"
    "ne\020\205@\022\027\n\022eMsgToCSFromGS_End\020\210@", 790);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GSToCS.proto", &protobuf_RegisterTypes);
  UserOffLine::default_instance_ = new UserOffLine();
  Asking::default_instance_ = new Asking();
  ReportGetSomeMsg::default_instance_ = new ReportGetSomeMsg();
  AskRegiste::default_instance_ = new AskRegiste();
  ReportGCMsg::default_instance_ = new ReportGCMsg();
  UserOffLine::default_instance_->InitAsDefaultInstance();
  Asking::default_instance_->InitAsDefaultInstance();
  ReportGetSomeMsg::default_instance_->InitAsDefaultInstance();
  AskRegiste::default_instance_->InitAsDefaultInstance();
  ReportGCMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GSToCS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GSToCS_2eproto {
  StaticDescriptorInitializer_GSToCS_2eproto() {
    protobuf_AddDesc_GSToCS_2eproto();
  }
} static_descriptor_initializer_GSToCS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8200:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserOffLine::kMgsidFieldNumber;
const int UserOffLine::kUsernetidFieldNumber;
#endif  // !_MSC_VER

UserOffLine::UserOffLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToCS.UserOffLine)
}

void UserOffLine::InitAsDefaultInstance() {
}

UserOffLine::UserOffLine(const UserOffLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToCS.UserOffLine)
}

void UserOffLine::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8197;
  usernetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOffLine::~UserOffLine() {
  // @@protoc_insertion_point(destructor:GSToCS.UserOffLine)
  SharedDtor();
}

void UserOffLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOffLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOffLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOffLine_descriptor_;
}

const UserOffLine& UserOffLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToCS_2eproto();
  return *default_instance_;
}

UserOffLine* UserOffLine::default_instance_ = NULL;

UserOffLine* UserOffLine::New() const {
  return new UserOffLine;
}

void UserOffLine::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 8197;
    usernetid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOffLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToCS.UserOffLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_UserOffLine];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::GSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_usernetid;
        break;
      }

      // optional int32 usernetid = 2;
      case 2: {
        if (tag == 16) {
         parse_usernetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernetid_)));
          set_has_usernetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToCS.UserOffLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToCS.UserOffLine)
  return false;
#undef DO_
}

void UserOffLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToCS.UserOffLine)
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_UserOffLine];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 usernetid = 2;
  if (has_usernetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usernetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToCS.UserOffLine)
}

::google::protobuf::uint8* UserOffLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToCS.UserOffLine)
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_UserOffLine];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 usernetid = 2;
  if (has_usernetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usernetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToCS.UserOffLine)
  return target;
}

int UserOffLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_UserOffLine];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 usernetid = 2;
    if (has_usernetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOffLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOffLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOffLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOffLine::MergeFrom(const UserOffLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_usernetid()) {
      set_usernetid(from.usernetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOffLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOffLine::CopyFrom(const UserOffLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOffLine::IsInitialized() const {

  return true;
}

void UserOffLine::Swap(UserOffLine* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(usernetid_, other->usernetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOffLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOffLine_descriptor_;
  metadata.reflection = UserOffLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Asking::kMgsidFieldNumber;
const int Asking::kTimeFieldNumber;
#endif  // !_MSC_VER

Asking::Asking()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToCS.Asking)
}

void Asking::InitAsDefaultInstance() {
}

Asking::Asking(const Asking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToCS.Asking)
}

void Asking::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8193;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Asking::~Asking() {
  // @@protoc_insertion_point(destructor:GSToCS.Asking)
  SharedDtor();
}

void Asking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Asking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Asking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Asking_descriptor_;
}

const Asking& Asking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToCS_2eproto();
  return *default_instance_;
}

Asking* Asking::default_instance_ = NULL;

Asking* Asking::New() const {
  return new Asking;
}

void Asking::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 8193;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Asking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToCS.Asking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_AskPing];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::GSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToCS.Asking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToCS.Asking)
  return false;
#undef DO_
}

void Asking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToCS.Asking)
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_AskPing];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToCS.Asking)
}

::google::protobuf::uint8* Asking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToCS.Asking)
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_AskPing];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToCS.Asking)
  return target;
}

int Asking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_AskPing];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Asking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Asking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Asking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Asking::MergeFrom(const Asking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Asking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asking::CopyFrom(const Asking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asking::IsInitialized() const {

  return true;
}

void Asking::Swap(Asking* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Asking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Asking_descriptor_;
  metadata.reflection = Asking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportGetSomeMsg::kMgsidFieldNumber;
const int ReportGetSomeMsg::kGotmsgidFieldNumber;
const int ReportGetSomeMsg::kOthervalFieldNumber;
#endif  // !_MSC_VER

ReportGetSomeMsg::ReportGetSomeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToCS.ReportGetSomeMsg)
}

void ReportGetSomeMsg::InitAsDefaultInstance() {
}

ReportGetSomeMsg::ReportGetSomeMsg(const ReportGetSomeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToCS.ReportGetSomeMsg)
}

void ReportGetSomeMsg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8196;
  gotmsgid_ = 0;
  otherval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGetSomeMsg::~ReportGetSomeMsg() {
  // @@protoc_insertion_point(destructor:GSToCS.ReportGetSomeMsg)
  SharedDtor();
}

void ReportGetSomeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportGetSomeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportGetSomeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGetSomeMsg_descriptor_;
}

const ReportGetSomeMsg& ReportGetSomeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToCS_2eproto();
  return *default_instance_;
}

ReportGetSomeMsg* ReportGetSomeMsg::default_instance_ = NULL;

ReportGetSomeMsg* ReportGetSomeMsg::New() const {
  return new ReportGetSomeMsg;
}

void ReportGetSomeMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportGetSomeMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gotmsgid_, otherval_);
    mgsid_ = 8196;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportGetSomeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToCS.ReportGetSomeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_ReportGetSomeMsg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::GSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gotmsgid;
        break;
      }

      // optional int32 gotmsgid = 2;
      case 2: {
        if (tag == 16) {
         parse_gotmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gotmsgid_)));
          set_has_gotmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_otherval;
        break;
      }

      // optional uint64 otherval = 3;
      case 3: {
        if (tag == 24) {
         parse_otherval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherval_)));
          set_has_otherval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToCS.ReportGetSomeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToCS.ReportGetSomeMsg)
  return false;
#undef DO_
}

void ReportGetSomeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToCS.ReportGetSomeMsg)
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_ReportGetSomeMsg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 gotmsgid = 2;
  if (has_gotmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gotmsgid(), output);
  }

  // optional uint64 otherval = 3;
  if (has_otherval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->otherval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToCS.ReportGetSomeMsg)
}

::google::protobuf::uint8* ReportGetSomeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToCS.ReportGetSomeMsg)
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_ReportGetSomeMsg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 gotmsgid = 2;
  if (has_gotmsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gotmsgid(), target);
  }

  // optional uint64 otherval = 3;
  if (has_otherval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->otherval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToCS.ReportGetSomeMsg)
  return target;
}

int ReportGetSomeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_ReportGetSomeMsg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 gotmsgid = 2;
    if (has_gotmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gotmsgid());
    }

    // optional uint64 otherval = 3;
    if (has_otherval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGetSomeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportGetSomeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportGetSomeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportGetSomeMsg::MergeFrom(const ReportGetSomeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_gotmsgid()) {
      set_gotmsgid(from.gotmsgid());
    }
    if (from.has_otherval()) {
      set_otherval(from.otherval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportGetSomeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportGetSomeMsg::CopyFrom(const ReportGetSomeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGetSomeMsg::IsInitialized() const {

  return true;
}

void ReportGetSomeMsg::Swap(ReportGetSomeMsg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(gotmsgid_, other->gotmsgid_);
    std::swap(otherval_, other->otherval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportGetSomeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportGetSomeMsg_descriptor_;
  metadata.reflection = ReportGetSomeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegiste::kMsgidFieldNumber;
const int AskRegiste::kGsidFieldNumber;
const int AskRegiste::kIpFieldNumber;
const int AskRegiste::kPortFieldNumber;
const int AskRegiste::kUsepwdFieldNumber;
#endif  // !_MSC_VER

AskRegiste::AskRegiste()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToCS.AskRegiste)
}

void AskRegiste::InitAsDefaultInstance() {
}

AskRegiste::AskRegiste(const AskRegiste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToCS.AskRegiste)
}

void AskRegiste::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 8194;
  gsid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  usepwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegiste::~AskRegiste() {
  // @@protoc_insertion_point(destructor:GSToCS.AskRegiste)
  SharedDtor();
}

void AskRegiste::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (usepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usepwd_;
  }
  if (this != default_instance_) {
  }
}

void AskRegiste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegiste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegiste_descriptor_;
}

const AskRegiste& AskRegiste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToCS_2eproto();
  return *default_instance_;
}

AskRegiste* AskRegiste::default_instance_ = NULL;

AskRegiste* AskRegiste::New() const {
  return new AskRegiste;
}

void AskRegiste::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgid_ = 8194;
    gsid_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_usepwd()) {
      if (usepwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usepwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegiste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToCS.AskRegiste)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_AskRegiste];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 2;
      case 2: {
        if (tag == 16) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_usepwd;
        break;
      }

      // optional string usepwd = 5;
      case 5: {
        if (tag == 42) {
         parse_usepwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usepwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usepwd().data(), this->usepwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usepwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToCS.AskRegiste)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToCS.AskRegiste)
  return false;
#undef DO_
}

void AskRegiste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToCS.AskRegiste)
  // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_AskRegiste];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gsid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional string usepwd = 5;
  if (has_usepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usepwd().data(), this->usepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usepwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->usepwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToCS.AskRegiste)
}

::google::protobuf::uint8* AskRegiste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToCS.AskRegiste)
  // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_AskRegiste];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 gsid = 2;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gsid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional string usepwd = 5;
  if (has_usepwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usepwd().data(), this->usepwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usepwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->usepwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToCS.AskRegiste)
  return target;
}

int AskRegiste::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_AskRegiste];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string usepwd = 5;
    if (has_usepwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usepwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegiste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegiste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegiste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegiste::MergeFrom(const AskRegiste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_usepwd()) {
      set_usepwd(from.usepwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegiste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegiste::CopyFrom(const AskRegiste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegiste::IsInitialized() const {

  return true;
}

void AskRegiste::Swap(AskRegiste* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gsid_, other->gsid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(usepwd_, other->usepwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegiste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegiste_descriptor_;
  metadata.reflection = AskRegiste_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportGCMsg::kMsgidFieldNumber;
const int ReportGCMsg::kNsidFieldNumber;
const int ReportGCMsg::kOthermsgidFieldNumber;
const int ReportGCMsg::kOthermsgFieldNumber;
#endif  // !_MSC_VER

ReportGCMsg::ReportGCMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToCS.ReportGCMsg)
}

void ReportGCMsg::InitAsDefaultInstance() {
}

ReportGCMsg::ReportGCMsg(const ReportGCMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToCS.ReportGCMsg)
}

void ReportGCMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 8195;
  nsid_ = 0;
  othermsgid_ = 0;
  othermsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGCMsg::~ReportGCMsg() {
  // @@protoc_insertion_point(destructor:GSToCS.ReportGCMsg)
  SharedDtor();
}

void ReportGCMsg::SharedDtor() {
  if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othermsg_;
  }
  if (this != default_instance_) {
  }
}

void ReportGCMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportGCMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGCMsg_descriptor_;
}

const ReportGCMsg& ReportGCMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToCS_2eproto();
  return *default_instance_;
}

ReportGCMsg* ReportGCMsg::default_instance_ = NULL;

ReportGCMsg* ReportGCMsg::New() const {
  return new ReportGCMsg;
}

void ReportGCMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgid_ = 8195;
    nsid_ = 0;
    othermsgid_ = 0;
    if (has_othermsg()) {
      if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othermsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportGCMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToCS.ReportGCMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_ReportGCMsg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nsid;
        break;
      }

      // optional int32 nsid = 2;
      case 2: {
        if (tag == 16) {
         parse_nsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsid_)));
          set_has_nsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_othermsgid;
        break;
      }

      // optional int32 othermsgid = 3;
      case 3: {
        if (tag == 24) {
         parse_othermsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othermsgid_)));
          set_has_othermsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_othermsg;
        break;
      }

      // optional bytes othermsg = 4;
      case 4: {
        if (tag == 34) {
         parse_othermsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_othermsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToCS.ReportGCMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToCS.ReportGCMsg)
  return false;
#undef DO_
}

void ReportGCMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToCS.ReportGCMsg)
  // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_ReportGCMsg];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 nsid = 2;
  if (has_nsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nsid(), output);
  }

  // optional int32 othermsgid = 3;
  if (has_othermsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->othermsgid(), output);
  }

  // optional bytes othermsg = 4;
  if (has_othermsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->othermsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToCS.ReportGCMsg)
}

::google::protobuf::uint8* ReportGCMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToCS.ReportGCMsg)
  // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_ReportGCMsg];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 nsid = 2;
  if (has_nsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nsid(), target);
  }

  // optional int32 othermsgid = 3;
  if (has_othermsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->othermsgid(), target);
  }

  // optional bytes othermsg = 4;
  if (has_othermsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->othermsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToCS.ReportGCMsg)
  return target;
}

int ReportGCMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_ReportGCMsg];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 nsid = 2;
    if (has_nsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsid());
    }

    // optional int32 othermsgid = 3;
    if (has_othermsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othermsgid());
    }

    // optional bytes othermsg = 4;
    if (has_othermsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->othermsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGCMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportGCMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportGCMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportGCMsg::MergeFrom(const ReportGCMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_nsid()) {
      set_nsid(from.nsid());
    }
    if (from.has_othermsgid()) {
      set_othermsgid(from.othermsgid());
    }
    if (from.has_othermsg()) {
      set_othermsg(from.othermsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportGCMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportGCMsg::CopyFrom(const ReportGCMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGCMsg::IsInitialized() const {

  return true;
}

void ReportGCMsg::Swap(ReportGCMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(nsid_, other->nsid_);
    std::swap(othermsgid_, other->othermsgid_);
    std::swap(othermsg_, other->othermsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportGCMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportGCMsg_descriptor_;
  metadata.reflection = ReportGCMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GSToCS

// @@protoc_insertion_point(global_scope)
