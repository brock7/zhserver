// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCToCS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RCToCS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RCToCS {

namespace {

const ::google::protobuf::Descriptor* QueryCDKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCDKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCDKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCDKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCDKey_giftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCDKey_giftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskServerUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskServerUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskNoticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskNoticeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskDeleteNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskDeleteNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RCToCS_2eproto() {
  protobuf_AddDesc_RCToCS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RCToCS.proto");
  GOOGLE_CHECK(file != NULL);
  QueryCDKey_descriptor_ = file->message_type(0);
  static const int QueryCDKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDKey, msgid_),
  };
  QueryCDKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCDKey_descriptor_,
      QueryCDKey::default_instance_,
      QueryCDKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCDKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCDKey));
  CreateCDKey_descriptor_ = file->message_type(1);
  static const int CreateCDKey_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, gift_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, code_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, cdkey_),
  };
  CreateCDKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateCDKey_descriptor_,
      CreateCDKey::default_instance_,
      CreateCDKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateCDKey));
  CreateCDKey_giftInfo_descriptor_ = CreateCDKey_descriptor_->nested_type(0);
  static const int CreateCDKey_giftInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey_giftInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey_giftInfo, item_num_),
  };
  CreateCDKey_giftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateCDKey_giftInfo_descriptor_,
      CreateCDKey_giftInfo::default_instance_,
      CreateCDKey_giftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey_giftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCDKey_giftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateCDKey_giftInfo));
  AskAddMailReq_descriptor_ = file->message_type(2);
  static const int AskAddMailReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, sdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, day_),
  };
  AskAddMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddMailReq_descriptor_,
      AskAddMailReq::default_instance_,
      AskAddMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddMailReq));
  AskRegist_descriptor_ = file->message_type(3);
  static const int AskRegist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegist, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegist, key_),
  };
  AskRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegist_descriptor_,
      AskRegist::default_instance_,
      AskRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegist));
  AskServerInfo_descriptor_ = file->message_type(4);
  static const int AskServerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskServerInfo, msgid_),
  };
  AskServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskServerInfo_descriptor_,
      AskServerInfo::default_instance_,
      AskServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskServerInfo));
  AskServerUserInfo_descriptor_ = file->message_type(5);
  static const int AskServerUserInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskServerUserInfo, msgid_),
  };
  AskServerUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskServerUserInfo_descriptor_,
      AskServerUserInfo::default_instance_,
      AskServerUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskServerUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskServerUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskServerUserInfo));
  AskNoticeInfo_descriptor_ = file->message_type(6);
  static const int AskNoticeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskNoticeInfo, msgid_),
  };
  AskNoticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskNoticeInfo_descriptor_,
      AskNoticeInfo::default_instance_,
      AskNoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskNoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskNoticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskNoticeInfo));
  AskAddNotice_descriptor_ = file->message_type(7);
  static const int AskAddNotice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, noticemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, star_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, end_time_),
  };
  AskAddNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddNotice_descriptor_,
      AskAddNotice::default_instance_,
      AskAddNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddNotice));
  AskDeleteNotice_descriptor_ = file->message_type(8);
  static const int AskDeleteNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDeleteNotice, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDeleteNotice, noticeid_),
  };
  AskDeleteNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskDeleteNotice_descriptor_,
      AskDeleteNotice::default_instance_,
      AskDeleteNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDeleteNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDeleteNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskDeleteNotice));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RCToCS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCDKey_descriptor_, &QueryCDKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateCDKey_descriptor_, &CreateCDKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateCDKey_giftInfo_descriptor_, &CreateCDKey_giftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddMailReq_descriptor_, &AskAddMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegist_descriptor_, &AskRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskServerInfo_descriptor_, &AskServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskServerUserInfo_descriptor_, &AskServerUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskNoticeInfo_descriptor_, &AskNoticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddNotice_descriptor_, &AskAddNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskDeleteNotice_descriptor_, &AskDeleteNotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RCToCS_2eproto() {
  delete QueryCDKey::default_instance_;
  delete QueryCDKey_reflection_;
  delete CreateCDKey::default_instance_;
  delete CreateCDKey_reflection_;
  delete CreateCDKey_giftInfo::default_instance_;
  delete CreateCDKey_giftInfo_reflection_;
  delete AskAddMailReq::default_instance_;
  delete AskAddMailReq_reflection_;
  delete AskRegist::default_instance_;
  delete AskRegist_reflection_;
  delete AskServerInfo::default_instance_;
  delete AskServerInfo_reflection_;
  delete AskServerUserInfo::default_instance_;
  delete AskServerUserInfo_reflection_;
  delete AskNoticeInfo::default_instance_;
  delete AskNoticeInfo_reflection_;
  delete AskAddNotice::default_instance_;
  delete AskAddNotice_reflection_;
  delete AskDeleteNotice::default_instance_;
  delete AskDeleteNotice_reflection_;
}

void protobuf_AddDesc_RCToCS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014RCToCS.proto\022\006RCToCS\"C\n\nQueryCDKey\0225\n\005"
    "msgid\030\001 \001(\0162\r.RCToCS.MsgID:\027eMsgRC2CS_As"
    "kQueryCDkey\"\230\002\n\013CreateCDKey\0226\n\005msgid\030\001 \001"
    "(\0162\r.RCToCS.MsgID:\030eMsgRC2CS_AskCreateCD"
    "Key\022\r\n\005title\030\002 \001(\t\022\020\n\010platform\030\003 \001(\005\022\020\n\010"
    "end_time\030\004 \001(\004\022\017\n\007content\030\005 \001(\t\022\021\n\tgift_"
    "type\030\006 \001(\005\022*\n\004gift\030\007 \003(\0132\034.RCToCS.Create"
    "CDKey.giftInfo\022\020\n\010code_len\030\010 \001(\005\022\r\n\005cdke"
    "y\030\t \003(\t\032-\n\010giftInfo\022\017\n\007item_id\030\001 \001(\005\022\020\n\010"
    "item_num\030\002 \001(\005\"\345\001\n\rAskAddMailReq\0225\n\005msgi"
    "d\030\001 \001(\0162\r.RCToCS.MsgID:\027eMsgRC2CS_AskAdd"
    "OneMail\022\014\n\004type\030\002 \001(\005\022\013\n\003sdk\030\003 \001(\005\022\r\n\005ti"
    "tle\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\014\n\004gift\030\006 \001(\t"
    "\022\022\n\ncreatetime\030\007 \001(\t\022\017\n\007endtime\030\010 \001(\t\022\016\n"
    "\006sender\030\t \001(\t\022\022\n\nuserIdlist\030\n \003(\003\022\013\n\003day"
    "\030\013 \001(\005\"K\n\tAskRegist\0221\n\005msgid\030\001 \001(\0162\r.RCT"
    "oCS.MsgID:\023eMsgRC2CS_AskRegist\022\013\n\003key\030\002 "
    "\001(\014\"F\n\rAskServerInfo\0225\n\005msgid\030\001 \001(\0162\r.RC"
    "ToCS.MsgID:\027eMsgRC2CS_AskServerInfo\"N\n\021A"
    "skServerUserInfo\0229\n\005msgid\030\001 \001(\0162\r.RCToCS"
    ".MsgID:\033eMsgRC2CS_AskServerUserInfo\"F\n\rA"
    "skNoticeInfo\0225\n\005msgid\030\001 \001(\0162\r.RCToCS.Msg"
    "ID:\027eMsgRC2CS_AskNoticeInfo\"\314\001\n\014AskAddNo"
    "tice\0224\n\005msgid\030\001 \001(\0162\r.RCToCS.MsgID:\026eMsg"
    "RC2CS_AskAddNotice\022\020\n\010platform\030\002 \001(\005\022\r\n\005"
    "title\030\003 \001(\014\022\014\n\004flag\030\004 \001(\005\022\r\n\005state\030\005 \001(\005"
    "\022\020\n\010priority\030\006 \001(\005\022\021\n\tnoticeMsg\030\007 \001(\014\022\021\n"
    "\tstar_time\030\010 \001(\004\022\020\n\010end_time\030\t \001(\004\"\\\n\017As"
    "kDeleteNotice\0227\n\005msgid\030\001 \001(\0162\r.RCToCS.Ms"
    "gID:\031eMsgRC2CS_AskDeleteNotice\022\020\n\010notice"
    "Id\030\002 \001(\005*\314\002\n\005MsgID\022\025\n\017eMsgRC2CS_Begin\020\350\201"
    "\002\022\031\n\023eMsgRC2CS_AskRegist\020\351\201\002\022\035\n\027eMsgRC2C"
    "S_AskServerInfo\020\352\201\002\022!\n\033eMsgRC2CS_AskServ"
    "erUserInfo\020\353\201\002\022\035\n\027eMsgRC2CS_AskNoticeInf"
    "o\020\354\201\002\022\034\n\026eMsgRC2CS_AskAddNotice\020\355\201\002\022\037\n\031e"
    "MsgRC2CS_AskDeleteNotice\020\356\201\002\022\035\n\027eMsgRC2C"
    "S_AskAddOneMail\020\357\201\002\022\036\n\030eMsgRC2CS_AskCrea"
    "teCDKey\020\360\201\002\022\035\n\027eMsgRC2CS_AskQueryCDkey\020\361"
    "\201\002\022\023\n\reMsgRC2CS_End\020\333\205\002", 1543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RCToCS.proto", &protobuf_RegisterTypes);
  QueryCDKey::default_instance_ = new QueryCDKey();
  CreateCDKey::default_instance_ = new CreateCDKey();
  CreateCDKey_giftInfo::default_instance_ = new CreateCDKey_giftInfo();
  AskAddMailReq::default_instance_ = new AskAddMailReq();
  AskRegist::default_instance_ = new AskRegist();
  AskServerInfo::default_instance_ = new AskServerInfo();
  AskServerUserInfo::default_instance_ = new AskServerUserInfo();
  AskNoticeInfo::default_instance_ = new AskNoticeInfo();
  AskAddNotice::default_instance_ = new AskAddNotice();
  AskDeleteNotice::default_instance_ = new AskDeleteNotice();
  QueryCDKey::default_instance_->InitAsDefaultInstance();
  CreateCDKey::default_instance_->InitAsDefaultInstance();
  CreateCDKey_giftInfo::default_instance_->InitAsDefaultInstance();
  AskAddMailReq::default_instance_->InitAsDefaultInstance();
  AskRegist::default_instance_->InitAsDefaultInstance();
  AskServerInfo::default_instance_->InitAsDefaultInstance();
  AskServerUserInfo::default_instance_->InitAsDefaultInstance();
  AskNoticeInfo::default_instance_->InitAsDefaultInstance();
  AskAddNotice::default_instance_->InitAsDefaultInstance();
  AskDeleteNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RCToCS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RCToCS_2eproto {
  StaticDescriptorInitializer_RCToCS_2eproto() {
    protobuf_AddDesc_RCToCS_2eproto();
  }
} static_descriptor_initializer_RCToCS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 33000:
    case 33001:
    case 33002:
    case 33003:
    case 33004:
    case 33005:
    case 33006:
    case 33007:
    case 33008:
    case 33009:
    case 33499:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCDKey::kMsgidFieldNumber;
#endif  // !_MSC_VER

QueryCDKey::QueryCDKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.QueryCDKey)
}

void QueryCDKey::InitAsDefaultInstance() {
}

QueryCDKey::QueryCDKey(const QueryCDKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.QueryCDKey)
}

void QueryCDKey::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCDKey::~QueryCDKey() {
  // @@protoc_insertion_point(destructor:RCToCS.QueryCDKey)
  SharedDtor();
}

void QueryCDKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCDKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCDKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCDKey_descriptor_;
}

const QueryCDKey& QueryCDKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

QueryCDKey* QueryCDKey::default_instance_ = NULL;

QueryCDKey* QueryCDKey::New() const {
  return new QueryCDKey;
}

void QueryCDKey::Clear() {
  msgid_ = 33009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCDKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.QueryCDKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskQueryCDkey];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.QueryCDKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.QueryCDKey)
  return false;
#undef DO_
}

void QueryCDKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.QueryCDKey)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskQueryCDkey];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.QueryCDKey)
}

::google::protobuf::uint8* QueryCDKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.QueryCDKey)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskQueryCDkey];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.QueryCDKey)
  return target;
}

int QueryCDKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskQueryCDkey];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCDKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCDKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCDKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCDKey::MergeFrom(const QueryCDKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCDKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCDKey::CopyFrom(const QueryCDKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCDKey::IsInitialized() const {

  return true;
}

void QueryCDKey::Swap(QueryCDKey* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCDKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCDKey_descriptor_;
  metadata.reflection = QueryCDKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateCDKey_giftInfo::kItemIdFieldNumber;
const int CreateCDKey_giftInfo::kItemNumFieldNumber;
#endif  // !_MSC_VER

CreateCDKey_giftInfo::CreateCDKey_giftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.CreateCDKey.giftInfo)
}

void CreateCDKey_giftInfo::InitAsDefaultInstance() {
}

CreateCDKey_giftInfo::CreateCDKey_giftInfo(const CreateCDKey_giftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.CreateCDKey.giftInfo)
}

void CreateCDKey_giftInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCDKey_giftInfo::~CreateCDKey_giftInfo() {
  // @@protoc_insertion_point(destructor:RCToCS.CreateCDKey.giftInfo)
  SharedDtor();
}

void CreateCDKey_giftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateCDKey_giftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCDKey_giftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCDKey_giftInfo_descriptor_;
}

const CreateCDKey_giftInfo& CreateCDKey_giftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

CreateCDKey_giftInfo* CreateCDKey_giftInfo::default_instance_ = NULL;

CreateCDKey_giftInfo* CreateCDKey_giftInfo::New() const {
  return new CreateCDKey_giftInfo;
}

void CreateCDKey_giftInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateCDKey_giftInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, item_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateCDKey_giftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.CreateCDKey.giftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 2;
      case 2: {
        if (tag == 16) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.CreateCDKey.giftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.CreateCDKey.giftInfo)
  return false;
#undef DO_
}

void CreateCDKey_giftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.CreateCDKey.giftInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.CreateCDKey.giftInfo)
}

::google::protobuf::uint8* CreateCDKey_giftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.CreateCDKey.giftInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.CreateCDKey.giftInfo)
  return target;
}

int CreateCDKey_giftInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCDKey_giftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateCDKey_giftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateCDKey_giftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCDKey_giftInfo::MergeFrom(const CreateCDKey_giftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateCDKey_giftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCDKey_giftInfo::CopyFrom(const CreateCDKey_giftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCDKey_giftInfo::IsInitialized() const {

  return true;
}

void CreateCDKey_giftInfo::Swap(CreateCDKey_giftInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateCDKey_giftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCDKey_giftInfo_descriptor_;
  metadata.reflection = CreateCDKey_giftInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreateCDKey::kMsgidFieldNumber;
const int CreateCDKey::kTitleFieldNumber;
const int CreateCDKey::kPlatformFieldNumber;
const int CreateCDKey::kEndTimeFieldNumber;
const int CreateCDKey::kContentFieldNumber;
const int CreateCDKey::kGiftTypeFieldNumber;
const int CreateCDKey::kGiftFieldNumber;
const int CreateCDKey::kCodeLenFieldNumber;
const int CreateCDKey::kCdkeyFieldNumber;
#endif  // !_MSC_VER

CreateCDKey::CreateCDKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.CreateCDKey)
}

void CreateCDKey::InitAsDefaultInstance() {
}

CreateCDKey::CreateCDKey(const CreateCDKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.CreateCDKey)
}

void CreateCDKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 33008;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = 0;
  end_time_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gift_type_ = 0;
  code_len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCDKey::~CreateCDKey() {
  // @@protoc_insertion_point(destructor:RCToCS.CreateCDKey)
  SharedDtor();
}

void CreateCDKey::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CreateCDKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCDKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCDKey_descriptor_;
}

const CreateCDKey& CreateCDKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

CreateCDKey* CreateCDKey::default_instance_ = NULL;

CreateCDKey* CreateCDKey::New() const {
  return new CreateCDKey;
}

void CreateCDKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateCDKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(platform_, end_time_);
    ZR_(gift_type_, code_len_);
    msgid_ = 33008;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gift_.Clear();
  cdkey_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateCDKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.CreateCDKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskCreateCDKey];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional int32 platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gift_type;
        break;
      }

      // optional int32 gift_type = 6;
      case 6: {
        if (tag == 48) {
         parse_gift_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_type_)));
          set_has_gift_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gift;
        break;
      }

      // repeated .RCToCS.CreateCDKey.giftInfo gift = 7;
      case 7: {
        if (tag == 58) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gift;
        if (input->ExpectTag(64)) goto parse_code_len;
        break;
      }

      // optional int32 code_len = 8;
      case 8: {
        if (tag == 64) {
         parse_code_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_len_)));
          set_has_code_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cdkey;
        break;
      }

      // repeated string cdkey = 9;
      case 9: {
        if (tag == 74) {
         parse_cdkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cdkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdkey(this->cdkey_size() - 1).data(),
            this->cdkey(this->cdkey_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cdkey;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.CreateCDKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.CreateCDKey)
  return false;
#undef DO_
}

void CreateCDKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.CreateCDKey)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskCreateCDKey];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }

  // optional uint64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_time(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional int32 gift_type = 6;
  if (has_gift_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gift_type(), output);
  }

  // repeated .RCToCS.CreateCDKey.giftInfo gift = 7;
  for (int i = 0; i < this->gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gift(i), output);
  }

  // optional int32 code_len = 8;
  if (has_code_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->code_len(), output);
  }

  // repeated string cdkey = 9;
  for (int i = 0; i < this->cdkey_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cdkey(i).data(), this->cdkey(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cdkey");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cdkey(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.CreateCDKey)
}

::google::protobuf::uint8* CreateCDKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.CreateCDKey)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskCreateCDKey];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }

  // optional uint64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_time(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional int32 gift_type = 6;
  if (has_gift_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gift_type(), target);
  }

  // repeated .RCToCS.CreateCDKey.giftInfo gift = 7;
  for (int i = 0; i < this->gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gift(i), target);
  }

  // optional int32 code_len = 8;
  if (has_code_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->code_len(), target);
  }

  // repeated string cdkey = 9;
  for (int i = 0; i < this->cdkey_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdkey(i).data(), this->cdkey(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdkey");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->cdkey(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.CreateCDKey)
  return target;
}

int CreateCDKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskCreateCDKey];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional uint64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gift_type = 6;
    if (has_gift_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_type());
    }

    // optional int32 code_len = 8;
    if (has_code_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_len());
    }

  }
  // repeated .RCToCS.CreateCDKey.giftInfo gift = 7;
  total_size += 1 * this->gift_size();
  for (int i = 0; i < this->gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift(i));
  }

  // repeated string cdkey = 9;
  total_size += 1 * this->cdkey_size();
  for (int i = 0; i < this->cdkey_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cdkey(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCDKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateCDKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateCDKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCDKey::MergeFrom(const CreateCDKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_.MergeFrom(from.gift_);
  cdkey_.MergeFrom(from.cdkey_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gift_type()) {
      set_gift_type(from.gift_type());
    }
    if (from.has_code_len()) {
      set_code_len(from.code_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateCDKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCDKey::CopyFrom(const CreateCDKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCDKey::IsInitialized() const {

  return true;
}

void CreateCDKey::Swap(CreateCDKey* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(title_, other->title_);
    std::swap(platform_, other->platform_);
    std::swap(end_time_, other->end_time_);
    std::swap(content_, other->content_);
    std::swap(gift_type_, other->gift_type_);
    gift_.Swap(&other->gift_);
    std::swap(code_len_, other->code_len_);
    cdkey_.Swap(&other->cdkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateCDKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCDKey_descriptor_;
  metadata.reflection = CreateCDKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddMailReq::kMsgidFieldNumber;
const int AskAddMailReq::kTypeFieldNumber;
const int AskAddMailReq::kSdkFieldNumber;
const int AskAddMailReq::kTitleFieldNumber;
const int AskAddMailReq::kContentFieldNumber;
const int AskAddMailReq::kGiftFieldNumber;
const int AskAddMailReq::kCreatetimeFieldNumber;
const int AskAddMailReq::kEndtimeFieldNumber;
const int AskAddMailReq::kSenderFieldNumber;
const int AskAddMailReq::kUserIdlistFieldNumber;
const int AskAddMailReq::kDayFieldNumber;
#endif  // !_MSC_VER

AskAddMailReq::AskAddMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskAddMailReq)
}

void AskAddMailReq::InitAsDefaultInstance() {
}

AskAddMailReq::AskAddMailReq(const AskAddMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskAddMailReq)
}

void AskAddMailReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 33007;
  type_ = 0;
  sdk_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddMailReq::~AskAddMailReq() {
  // @@protoc_insertion_point(destructor:RCToCS.AskAddMailReq)
  SharedDtor();
}

void AskAddMailReq::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gift_;
  }
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void AskAddMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddMailReq_descriptor_;
}

const AskAddMailReq& AskAddMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskAddMailReq* AskAddMailReq::default_instance_ = NULL;

AskAddMailReq* AskAddMailReq::New() const {
  return new AskAddMailReq;
}

void AskAddMailReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    msgid_ = 33007;
    type_ = 0;
    sdk_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_gift()) {
      if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gift_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1280) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    day_ = 0;
  }
  useridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskAddMailReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddOneMail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sdk;
        break;
      }

      // optional int32 sdk = 3;
      case 3: {
        if (tag == 24) {
         parse_sdk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdk_)));
          set_has_sdk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (tag == 34) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gift;
        break;
      }

      // optional string gift = 6;
      case 6: {
        if (tag == 50) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gift().data(), this->gift().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gift");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_createtime;
        break;
      }

      // optional string createtime = 7;
      case 7: {
        if (tag == 58) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_endtime;
        break;
      }

      // optional string endtime = 8;
      case 8: {
        if (tag == 66) {
         parse_endtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sender;
        break;
      }

      // optional string sender = 9;
      case 9: {
        if (tag == 74) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_userIdlist;
        break;
      }

      // repeated int64 userIdlist = 10;
      case 10: {
        if (tag == 80) {
         parse_userIdlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_useridlist())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_userIdlist;
        if (input->ExpectTag(88)) goto parse_day;
        break;
      }

      // optional int32 day = 11;
      case 11: {
        if (tag == 88) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskAddMailReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskAddMailReq)
  return false;
#undef DO_
}

void AskAddMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskAddMailReq)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddOneMail];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 sdk = 3;
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sdk(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional string gift = 6;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gift().data(), this->gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gift");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gift(), output);
  }

  // optional string createtime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->createtime(), output);
  }

  // optional string endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->endtime(), output);
  }

  // optional string sender = 9;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sender(), output);
  }

  // repeated int64 userIdlist = 10;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->useridlist(i), output);
  }

  // optional int32 day = 11;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskAddMailReq)
}

::google::protobuf::uint8* AskAddMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskAddMailReq)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddOneMail];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 sdk = 3;
  if (has_sdk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sdk(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional string gift = 6;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gift().data(), this->gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gift");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gift(), target);
  }

  // optional string createtime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createtime(), target);
  }

  // optional string endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->endtime(), target);
  }

  // optional string sender = 9;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sender(), target);
  }

  // repeated int64 userIdlist = 10;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->useridlist(i), target);
  }

  // optional int32 day = 11;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskAddMailReq)
  return target;
}

int AskAddMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddOneMail];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 sdk = 3;
    if (has_sdk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdk());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string gift = 6;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift());
    }

    // optional string createtime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional string endtime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sender = 9;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional int32 day = 11;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  // repeated int64 userIdlist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddMailReq::MergeFrom(const AskAddMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sdk()) {
      set_sdk(from.sdk());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddMailReq::CopyFrom(const AskAddMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddMailReq::IsInitialized() const {

  return true;
}

void AskAddMailReq::Swap(AskAddMailReq* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(sdk_, other->sdk_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(gift_, other->gift_);
    std::swap(createtime_, other->createtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(sender_, other->sender_);
    useridlist_.Swap(&other->useridlist_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddMailReq_descriptor_;
  metadata.reflection = AskAddMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegist::kMsgidFieldNumber;
const int AskRegist::kKeyFieldNumber;
#endif  // !_MSC_VER

AskRegist::AskRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskRegist)
}

void AskRegist::InitAsDefaultInstance() {
}

AskRegist::AskRegist(const AskRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskRegist)
}

void AskRegist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 33001;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegist::~AskRegist() {
  // @@protoc_insertion_point(destructor:RCToCS.AskRegist)
  SharedDtor();
}

void AskRegist::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void AskRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegist_descriptor_;
}

const AskRegist& AskRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskRegist* AskRegist::default_instance_ = NULL;

AskRegist* AskRegist::New() const {
  return new AskRegist;
}

void AskRegist::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33001;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskRegist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskRegist];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskRegist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskRegist)
  return false;
#undef DO_
}

void AskRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskRegist)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskRegist];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskRegist)
}

::google::protobuf::uint8* AskRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskRegist)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskRegist];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskRegist)
  return target;
}

int AskRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskRegist];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegist::MergeFrom(const AskRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegist::CopyFrom(const AskRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegist::IsInitialized() const {

  return true;
}

void AskRegist::Swap(AskRegist* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegist_descriptor_;
  metadata.reflection = AskRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskServerInfo::kMsgidFieldNumber;
#endif  // !_MSC_VER

AskServerInfo::AskServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskServerInfo)
}

void AskServerInfo::InitAsDefaultInstance() {
}

AskServerInfo::AskServerInfo(const AskServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskServerInfo)
}

void AskServerInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskServerInfo::~AskServerInfo() {
  // @@protoc_insertion_point(destructor:RCToCS.AskServerInfo)
  SharedDtor();
}

void AskServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskServerInfo_descriptor_;
}

const AskServerInfo& AskServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskServerInfo* AskServerInfo::default_instance_ = NULL;

AskServerInfo* AskServerInfo::New() const {
  return new AskServerInfo;
}

void AskServerInfo::Clear() {
  msgid_ = 33002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskServerInfo)
  return false;
#undef DO_
}

void AskServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskServerInfo)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskServerInfo)
}

::google::protobuf::uint8* AskServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskServerInfo)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskServerInfo)
  return target;
}

int AskServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskServerInfo::MergeFrom(const AskServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskServerInfo::CopyFrom(const AskServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskServerInfo::IsInitialized() const {

  return true;
}

void AskServerInfo::Swap(AskServerInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskServerInfo_descriptor_;
  metadata.reflection = AskServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskServerUserInfo::kMsgidFieldNumber;
#endif  // !_MSC_VER

AskServerUserInfo::AskServerUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskServerUserInfo)
}

void AskServerUserInfo::InitAsDefaultInstance() {
}

AskServerUserInfo::AskServerUserInfo(const AskServerUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskServerUserInfo)
}

void AskServerUserInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskServerUserInfo::~AskServerUserInfo() {
  // @@protoc_insertion_point(destructor:RCToCS.AskServerUserInfo)
  SharedDtor();
}

void AskServerUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskServerUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskServerUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskServerUserInfo_descriptor_;
}

const AskServerUserInfo& AskServerUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskServerUserInfo* AskServerUserInfo::default_instance_ = NULL;

AskServerUserInfo* AskServerUserInfo::New() const {
  return new AskServerUserInfo;
}

void AskServerUserInfo::Clear() {
  msgid_ = 33003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskServerUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskServerUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerUserInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskServerUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskServerUserInfo)
  return false;
#undef DO_
}

void AskServerUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskServerUserInfo)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerUserInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskServerUserInfo)
}

::google::protobuf::uint8* AskServerUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskServerUserInfo)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerUserInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskServerUserInfo)
  return target;
}

int AskServerUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerUserInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskServerUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskServerUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskServerUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskServerUserInfo::MergeFrom(const AskServerUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskServerUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskServerUserInfo::CopyFrom(const AskServerUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskServerUserInfo::IsInitialized() const {

  return true;
}

void AskServerUserInfo::Swap(AskServerUserInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskServerUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskServerUserInfo_descriptor_;
  metadata.reflection = AskServerUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskNoticeInfo::kMsgidFieldNumber;
#endif  // !_MSC_VER

AskNoticeInfo::AskNoticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskNoticeInfo)
}

void AskNoticeInfo::InitAsDefaultInstance() {
}

AskNoticeInfo::AskNoticeInfo(const AskNoticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskNoticeInfo)
}

void AskNoticeInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33004;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskNoticeInfo::~AskNoticeInfo() {
  // @@protoc_insertion_point(destructor:RCToCS.AskNoticeInfo)
  SharedDtor();
}

void AskNoticeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskNoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskNoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskNoticeInfo_descriptor_;
}

const AskNoticeInfo& AskNoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskNoticeInfo* AskNoticeInfo::default_instance_ = NULL;

AskNoticeInfo* AskNoticeInfo::New() const {
  return new AskNoticeInfo;
}

void AskNoticeInfo::Clear() {
  msgid_ = 33004;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskNoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskNoticeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskNoticeInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskNoticeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskNoticeInfo)
  return false;
#undef DO_
}

void AskNoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskNoticeInfo)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskNoticeInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskNoticeInfo)
}

::google::protobuf::uint8* AskNoticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskNoticeInfo)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskNoticeInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskNoticeInfo)
  return target;
}

int AskNoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskNoticeInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskNoticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskNoticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskNoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskNoticeInfo::MergeFrom(const AskNoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskNoticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskNoticeInfo::CopyFrom(const AskNoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskNoticeInfo::IsInitialized() const {

  return true;
}

void AskNoticeInfo::Swap(AskNoticeInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskNoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskNoticeInfo_descriptor_;
  metadata.reflection = AskNoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddNotice::kMsgidFieldNumber;
const int AskAddNotice::kPlatformFieldNumber;
const int AskAddNotice::kTitleFieldNumber;
const int AskAddNotice::kFlagFieldNumber;
const int AskAddNotice::kStateFieldNumber;
const int AskAddNotice::kPriorityFieldNumber;
const int AskAddNotice::kNoticeMsgFieldNumber;
const int AskAddNotice::kStarTimeFieldNumber;
const int AskAddNotice::kEndTimeFieldNumber;
#endif  // !_MSC_VER

AskAddNotice::AskAddNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskAddNotice)
}

void AskAddNotice::InitAsDefaultInstance() {
}

AskAddNotice::AskAddNotice(const AskAddNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskAddNotice)
}

void AskAddNotice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 33005;
  platform_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  state_ = 0;
  priority_ = 0;
  noticemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddNotice::~AskAddNotice() {
  // @@protoc_insertion_point(destructor:RCToCS.AskAddNotice)
  SharedDtor();
}

void AskAddNotice::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (noticemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noticemsg_;
  }
  if (this != default_instance_) {
  }
}

void AskAddNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddNotice_descriptor_;
}

const AskAddNotice& AskAddNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskAddNotice* AskAddNotice::default_instance_ = NULL;

AskAddNotice* AskAddNotice::New() const {
  return new AskAddNotice;
}

void AskAddNotice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskAddNotice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(flag_, state_);
    msgid_ = 33005;
    platform_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    priority_ = 0;
    if (has_noticemsg()) {
      if (noticemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        noticemsg_->clear();
      }
    }
    star_time_ = GOOGLE_ULONGLONG(0);
  }
  end_time_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskAddNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddNotice];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // optional int32 platform = 2;
      case 2: {
        if (tag == 16) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional bytes title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6;
      case 6: {
        if (tag == 48) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_noticeMsg;
        break;
      }

      // optional bytes noticeMsg = 7;
      case 7: {
        if (tag == 58) {
         parse_noticeMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_noticemsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_star_time;
        break;
      }

      // optional uint64 star_time = 8;
      case 8: {
        if (tag == 64) {
         parse_star_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &star_time_)));
          set_has_star_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 9;
      case 9: {
        if (tag == 72) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskAddNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskAddNotice)
  return false;
#undef DO_
}

void AskAddNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskAddNotice)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddNotice];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // optional bytes title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->title(), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional int32 priority = 6;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // optional bytes noticeMsg = 7;
  if (has_noticemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->noticemsg(), output);
  }

  // optional uint64 star_time = 8;
  if (has_star_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->star_time(), output);
  }

  // optional uint64 end_time = 9;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskAddNotice)
}

::google::protobuf::uint8* AskAddNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskAddNotice)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddNotice];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // optional bytes title = 3;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->title(), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional int32 priority = 6;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // optional bytes noticeMsg = 7;
  if (has_noticemsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->noticemsg(), target);
  }

  // optional uint64 star_time = 8;
  if (has_star_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->star_time(), target);
  }

  // optional uint64 end_time = 9;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskAddNotice)
  return target;
}

int AskAddNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddNotice];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional bytes title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bytes noticeMsg = 7;
    if (has_noticemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->noticemsg());
    }

    // optional uint64 star_time = 8;
    if (has_star_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->star_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 end_time = 9;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddNotice::MergeFrom(const AskAddNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_noticemsg()) {
      set_noticemsg(from.noticemsg());
    }
    if (from.has_star_time()) {
      set_star_time(from.star_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddNotice::CopyFrom(const AskAddNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddNotice::IsInitialized() const {

  return true;
}

void AskAddNotice::Swap(AskAddNotice* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(platform_, other->platform_);
    std::swap(title_, other->title_);
    std::swap(flag_, other->flag_);
    std::swap(state_, other->state_);
    std::swap(priority_, other->priority_);
    std::swap(noticemsg_, other->noticemsg_);
    std::swap(star_time_, other->star_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddNotice_descriptor_;
  metadata.reflection = AskAddNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskDeleteNotice::kMsgidFieldNumber;
const int AskDeleteNotice::kNoticeIdFieldNumber;
#endif  // !_MSC_VER

AskDeleteNotice::AskDeleteNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RCToCS.AskDeleteNotice)
}

void AskDeleteNotice::InitAsDefaultInstance() {
}

AskDeleteNotice::AskDeleteNotice(const AskDeleteNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RCToCS.AskDeleteNotice)
}

void AskDeleteNotice::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 33006;
  noticeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskDeleteNotice::~AskDeleteNotice() {
  // @@protoc_insertion_point(destructor:RCToCS.AskDeleteNotice)
  SharedDtor();
}

void AskDeleteNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskDeleteNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskDeleteNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskDeleteNotice_descriptor_;
}

const AskDeleteNotice& AskDeleteNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RCToCS_2eproto();
  return *default_instance_;
}

AskDeleteNotice* AskDeleteNotice::default_instance_ = NULL;

AskDeleteNotice* AskDeleteNotice::New() const {
  return new AskDeleteNotice;
}

void AskDeleteNotice::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 33006;
    noticeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskDeleteNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RCToCS.AskDeleteNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskDeleteNotice];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RCToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::RCToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_noticeId;
        break;
      }

      // optional int32 noticeId = 2;
      case 2: {
        if (tag == 16) {
         parse_noticeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RCToCS.AskDeleteNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RCToCS.AskDeleteNotice)
  return false;
#undef DO_
}

void AskDeleteNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RCToCS.AskDeleteNotice)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskDeleteNotice];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 noticeId = 2;
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->noticeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RCToCS.AskDeleteNotice)
}

::google::protobuf::uint8* AskDeleteNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RCToCS.AskDeleteNotice)
  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskDeleteNotice];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 noticeId = 2;
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->noticeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RCToCS.AskDeleteNotice)
  return target;
}

int AskDeleteNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskDeleteNotice];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 noticeId = 2;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskDeleteNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskDeleteNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskDeleteNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskDeleteNotice::MergeFrom(const AskDeleteNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskDeleteNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskDeleteNotice::CopyFrom(const AskDeleteNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskDeleteNotice::IsInitialized() const {

  return true;
}

void AskDeleteNotice::Swap(AskDeleteNotice* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(noticeid_, other->noticeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskDeleteNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskDeleteNotice_descriptor_;
  metadata.reflection = AskDeleteNotice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RCToCS

// @@protoc_insertion_point(global_scope)
