// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ToLog.proto

#ifndef PROTOBUF_ToLog_2eproto__INCLUDED
#define PROTOBUF_ToLog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ToLog {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ToLog_2eproto();
void protobuf_AssignDesc_ToLog_2eproto();
void protobuf_ShutdownFile_ToLog_2eproto();

class WriteLog;

enum MsgID {
  eMsgToLog_Begin = 0,
  eMsgToLog_WriteLog = 1,
  eMsgToLog_End = 100
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgToLog_Begin;
const MsgID MsgID_MAX = eMsgToLog_End;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class WriteLog : public ::google::protobuf::Message {
 public:
  WriteLog();
  virtual ~WriteLog();

  WriteLog(const WriteLog& from);

  inline WriteLog& operator=(const WriteLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteLog& default_instance();

  void Swap(WriteLog* other);

  // implements Message ----------------------------------------------

  WriteLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteLog& from);
  void MergeFrom(const WriteLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::ToLog::MsgID msgid() const;
  inline void set_msgid(::ToLog::MsgID value);

  // optional int32 log_type = 2;
  inline bool has_log_type() const;
  inline void clear_log_type();
  static const int kLogTypeFieldNumber = 2;
  inline ::google::protobuf::int32 log_type() const;
  inline void set_log_type(::google::protobuf::int32 value);

  // optional string log_str = 3;
  inline bool has_log_str() const;
  inline void clear_log_str();
  static const int kLogStrFieldNumber = 3;
  inline const ::std::string& log_str() const;
  inline void set_log_str(const ::std::string& value);
  inline void set_log_str(const char* value);
  inline void set_log_str(const char* value, size_t size);
  inline ::std::string* mutable_log_str();
  inline ::std::string* release_log_str();
  inline void set_allocated_log_str(::std::string* log_str);

  // @@protoc_insertion_point(class_scope:ToLog.WriteLog)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_log_type();
  inline void clear_has_log_type();
  inline void set_has_log_str();
  inline void clear_has_log_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 log_type_;
  ::std::string* log_str_;
  friend void  protobuf_AddDesc_ToLog_2eproto();
  friend void protobuf_AssignDesc_ToLog_2eproto();
  friend void protobuf_ShutdownFile_ToLog_2eproto();

  void InitAsDefaultInstance();
  static WriteLog* default_instance_;
};
// ===================================================================


// ===================================================================

// WriteLog

// optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
inline bool WriteLog::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteLog::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteLog::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteLog::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::ToLog::MsgID WriteLog::msgid() const {
  // @@protoc_insertion_point(field_get:ToLog.WriteLog.msgid)
  return static_cast< ::ToLog::MsgID >(msgid_);
}
inline void WriteLog::set_msgid(::ToLog::MsgID value) {
  assert(::ToLog::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:ToLog.WriteLog.msgid)
}

// optional int32 log_type = 2;
inline bool WriteLog::has_log_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteLog::set_has_log_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteLog::clear_has_log_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteLog::clear_log_type() {
  log_type_ = 0;
  clear_has_log_type();
}
inline ::google::protobuf::int32 WriteLog::log_type() const {
  // @@protoc_insertion_point(field_get:ToLog.WriteLog.log_type)
  return log_type_;
}
inline void WriteLog::set_log_type(::google::protobuf::int32 value) {
  set_has_log_type();
  log_type_ = value;
  // @@protoc_insertion_point(field_set:ToLog.WriteLog.log_type)
}

// optional string log_str = 3;
inline bool WriteLog::has_log_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteLog::set_has_log_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteLog::clear_has_log_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteLog::clear_log_str() {
  if (log_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_str_->clear();
  }
  clear_has_log_str();
}
inline const ::std::string& WriteLog::log_str() const {
  // @@protoc_insertion_point(field_get:ToLog.WriteLog.log_str)
  return *log_str_;
}
inline void WriteLog::set_log_str(const ::std::string& value) {
  set_has_log_str();
  if (log_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_str_ = new ::std::string;
  }
  log_str_->assign(value);
  // @@protoc_insertion_point(field_set:ToLog.WriteLog.log_str)
}
inline void WriteLog::set_log_str(const char* value) {
  set_has_log_str();
  if (log_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_str_ = new ::std::string;
  }
  log_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:ToLog.WriteLog.log_str)
}
inline void WriteLog::set_log_str(const char* value, size_t size) {
  set_has_log_str();
  if (log_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_str_ = new ::std::string;
  }
  log_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ToLog.WriteLog.log_str)
}
inline ::std::string* WriteLog::mutable_log_str() {
  set_has_log_str();
  if (log_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ToLog.WriteLog.log_str)
  return log_str_;
}
inline ::std::string* WriteLog::release_log_str() {
  clear_has_log_str();
  if (log_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_str_;
    log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WriteLog::set_allocated_log_str(::std::string* log_str) {
  if (log_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_str_;
  }
  if (log_str) {
    set_has_log_str();
    log_str_ = log_str;
  } else {
    clear_has_log_str();
    log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ToLog.WriteLog.log_str)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ToLog

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ToLog::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ToLog::MsgID>() {
  return ::ToLog::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ToLog_2eproto__INCLUDED
