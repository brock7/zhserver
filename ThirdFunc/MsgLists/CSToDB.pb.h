// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToDB.proto

#ifndef PROTOBUF_CSToDB_2eproto__INCLUDED
#define PROTOBUF_CSToDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CSToDB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSToDB_2eproto();
void protobuf_AssignDesc_CSToDB_2eproto();
void protobuf_ShutdownFile_CSToDB_2eproto();

class UpdateCDKeyInfo;
class InsertCDKeyInfo;
class CDKeyEvents;
class UpdateUserMail;
class StoreUserdata;
class StoreUserdata_SUserHeroDBData;
class StoreUserdata_SUserRelationshipInfo;
class StoreUserdata_SUserItemInfo;
class StoreUserdata_UserMailDBData;
class QueryNotice;
class ExeSQL_Call;
class ChangeNickName;
class AlterItem;
class DeleteNotice;
class InsertNotice;
class AlterSNSList;
class QueryObjIdxReq;
class NicknameConflict;
class BuyGoods;
class GameMailInfo;
class UpdateGameMail;
class InsertUser;
class UpdateUser;
class CheckNameReq;
class QueryUserReq;

enum MsgID {
  eCheckNickNameDBCallBack = 100,
  eQueryUser_DBCallBack = 101,
  eLogStore_DBCallBack = 102,
  eUpdateUser_DBCallBack = 103,
  eInsertUser_DBCallBack = 104,
  eUpdateGameMail_DBCallBack = 105,
  eBuyGoods_DBCallBack = 106,
  eNicknameConflict_DBCallBack = 107,
  eQueryObjId_DBCallBack = 108,
  eAlterSNSList_DBCall = 109,
  eInsertNotice_DBCall = 110,
  eDeleteNotice_DBCall = 111,
  eAlterItem_DBCall = 112,
  eChangeNickName_DBCall = 113,
  eExeSQL_Call = 114,
  eQueryNotice_DBCall = 115,
  eStoreUserData = 116,
  eUpdateUserGameMail_DBCallBack = 117,
  eInsertCDKeyEvents = 118,
  eInsertCDKeyInfo = 119,
  eUpdateCDKeyInfo = 120
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eCheckNickNameDBCallBack;
const MsgID MsgID_MAX = eUpdateCDKeyInfo;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
enum MailType {
  mailType_None = 0,
  mailType_1 = 1,
  mailType_2 = 2,
  mailType_3 = 3,
  mailType_4 = 4
};
bool MailType_IsValid(int value);
const MailType MailType_MIN = mailType_None;
const MailType MailType_MAX = mailType_4;
const int MailType_ARRAYSIZE = MailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MailType_descriptor();
inline const ::std::string& MailType_Name(MailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailType_descriptor(), value);
}
inline bool MailType_Parse(
    const ::std::string& name, MailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailType>(
    MailType_descriptor(), name, value);
}
enum EMailCurtState {
  eMailState_None = 0,
  eMailState_New = 1,
  eMailState_LookedButNotGotGift = 2,
  eMailState_Look = 3,
  eMailState_Del = 4
};
bool EMailCurtState_IsValid(int value);
const EMailCurtState EMailCurtState_MIN = eMailState_None;
const EMailCurtState EMailCurtState_MAX = eMailState_Del;
const int EMailCurtState_ARRAYSIZE = EMailCurtState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMailCurtState_descriptor();
inline const ::std::string& EMailCurtState_Name(EMailCurtState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMailCurtState_descriptor(), value);
}
inline bool EMailCurtState_Parse(
    const ::std::string& name, EMailCurtState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMailCurtState>(
    EMailCurtState_descriptor(), name, value);
}
// ===================================================================

class UpdateCDKeyInfo : public ::google::protobuf::Message {
 public:
  UpdateCDKeyInfo();
  virtual ~UpdateCDKeyInfo();

  UpdateCDKeyInfo(const UpdateCDKeyInfo& from);

  inline UpdateCDKeyInfo& operator=(const UpdateCDKeyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateCDKeyInfo& default_instance();

  void Swap(UpdateCDKeyInfo* other);

  // implements Message ----------------------------------------------

  UpdateCDKeyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateCDKeyInfo& from);
  void MergeFrom(const UpdateCDKeyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eUpdateCDKeyInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string sql_str = 2;
  inline bool has_sql_str() const;
  inline void clear_sql_str();
  static const int kSqlStrFieldNumber = 2;
  inline const ::std::string& sql_str() const;
  inline void set_sql_str(const ::std::string& value);
  inline void set_sql_str(const char* value);
  inline void set_sql_str(const char* value, size_t size);
  inline ::std::string* mutable_sql_str();
  inline ::std::string* release_sql_str();
  inline void set_allocated_sql_str(::std::string* sql_str);

  // @@protoc_insertion_point(class_scope:CSToDB.UpdateCDKeyInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sql_str();
  inline void clear_has_sql_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_str_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static UpdateCDKeyInfo* default_instance_;
};
// -------------------------------------------------------------------

class InsertCDKeyInfo : public ::google::protobuf::Message {
 public:
  InsertCDKeyInfo();
  virtual ~InsertCDKeyInfo();

  InsertCDKeyInfo(const InsertCDKeyInfo& from);

  inline InsertCDKeyInfo& operator=(const InsertCDKeyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertCDKeyInfo& default_instance();

  void Swap(InsertCDKeyInfo* other);

  // implements Message ----------------------------------------------

  InsertCDKeyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertCDKeyInfo& from);
  void MergeFrom(const InsertCDKeyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string sql_str = 2;
  inline bool has_sql_str() const;
  inline void clear_sql_str();
  static const int kSqlStrFieldNumber = 2;
  inline const ::std::string& sql_str() const;
  inline void set_sql_str(const ::std::string& value);
  inline void set_sql_str(const char* value);
  inline void set_sql_str(const char* value, size_t size);
  inline ::std::string* mutable_sql_str();
  inline ::std::string* release_sql_str();
  inline void set_allocated_sql_str(::std::string* sql_str);

  // @@protoc_insertion_point(class_scope:CSToDB.InsertCDKeyInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sql_str();
  inline void clear_has_sql_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_str_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static InsertCDKeyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDKeyEvents : public ::google::protobuf::Message {
 public:
  CDKeyEvents();
  virtual ~CDKeyEvents();

  CDKeyEvents(const CDKeyEvents& from);

  inline CDKeyEvents& operator=(const CDKeyEvents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDKeyEvents& default_instance();

  void Swap(CDKeyEvents* other);

  // implements Message ----------------------------------------------

  CDKeyEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDKeyEvents& from);
  void MergeFrom(const CDKeyEvents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyEvents];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string sql_str = 2;
  inline bool has_sql_str() const;
  inline void clear_sql_str();
  static const int kSqlStrFieldNumber = 2;
  inline const ::std::string& sql_str() const;
  inline void set_sql_str(const ::std::string& value);
  inline void set_sql_str(const char* value);
  inline void set_sql_str(const char* value, size_t size);
  inline ::std::string* mutable_sql_str();
  inline ::std::string* release_sql_str();
  inline void set_allocated_sql_str(::std::string* sql_str);

  // @@protoc_insertion_point(class_scope:CSToDB.CDKeyEvents)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sql_str();
  inline void clear_has_sql_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_str_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static CDKeyEvents* default_instance_;
};
// -------------------------------------------------------------------

class UpdateUserMail : public ::google::protobuf::Message {
 public:
  UpdateUserMail();
  virtual ~UpdateUserMail();

  UpdateUserMail(const UpdateUserMail& from);

  inline UpdateUserMail& operator=(const UpdateUserMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUserMail& default_instance();

  void Swap(UpdateUserMail* other);

  // implements Message ----------------------------------------------

  UpdateUserMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateUserMail& from);
  void MergeFrom(const UpdateUserMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eUpdateUserGameMail_DBCallBack];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional int64 objid = 2;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjidFieldNumber = 2;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // optional int32 mailid = 3;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 3;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // optional int32 cstate = 4;
  inline bool has_cstate() const;
  inline void clear_cstate();
  static const int kCstateFieldNumber = 4;
  inline ::google::protobuf::int32 cstate() const;
  inline void set_cstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSToDB.UpdateUserMail)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_cstate();
  inline void clear_has_cstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 objid_;
  int msgid_;
  ::google::protobuf::int32 mailid_;
  ::google::protobuf::int32 cstate_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static UpdateUserMail* default_instance_;
};
// -------------------------------------------------------------------

class StoreUserdata_SUserHeroDBData : public ::google::protobuf::Message {
 public:
  StoreUserdata_SUserHeroDBData();
  virtual ~StoreUserdata_SUserHeroDBData();

  StoreUserdata_SUserHeroDBData(const StoreUserdata_SUserHeroDBData& from);

  inline StoreUserdata_SUserHeroDBData& operator=(const StoreUserdata_SUserHeroDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreUserdata_SUserHeroDBData& default_instance();

  void Swap(StoreUserdata_SUserHeroDBData* other);

  // implements Message ----------------------------------------------

  StoreUserdata_SUserHeroDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreUserdata_SUserHeroDBData& from);
  void MergeFrom(const StoreUserdata_SUserHeroDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 un32HeroID = 1;
  inline bool has_un32heroid() const;
  inline void clear_un32heroid();
  static const int kUn32HeroIDFieldNumber = 1;
  inline ::google::protobuf::int32 un32heroid() const;
  inline void set_un32heroid(::google::protobuf::int32 value);

  // optional int64 endTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 buyTime = 3;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 3;
  inline ::google::protobuf::int64 buytime() const;
  inline void set_buytime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CSToDB.StoreUserdata.SUserHeroDBData)
 private:
  inline void set_has_un32heroid();
  inline void clear_has_un32heroid();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 buytime_;
  ::google::protobuf::int32 un32heroid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static StoreUserdata_SUserHeroDBData* default_instance_;
};
// -------------------------------------------------------------------

class StoreUserdata_SUserRelationshipInfo : public ::google::protobuf::Message {
 public:
  StoreUserdata_SUserRelationshipInfo();
  virtual ~StoreUserdata_SUserRelationshipInfo();

  StoreUserdata_SUserRelationshipInfo(const StoreUserdata_SUserRelationshipInfo& from);

  inline StoreUserdata_SUserRelationshipInfo& operator=(const StoreUserdata_SUserRelationshipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreUserdata_SUserRelationshipInfo& default_instance();

  void Swap(StoreUserdata_SUserRelationshipInfo* other);

  // implements Message ----------------------------------------------

  StoreUserdata_SUserRelationshipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreUserdata_SUserRelationshipInfo& from);
  void MergeFrom(const StoreUserdata_SUserRelationshipInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stNickName = 1;
  inline bool has_stnickname() const;
  inline void clear_stnickname();
  static const int kStNickNameFieldNumber = 1;
  inline const ::std::string& stnickname() const;
  inline void set_stnickname(const ::std::string& value);
  inline void set_stnickname(const char* value);
  inline void set_stnickname(const char* value, size_t size);
  inline ::std::string* mutable_stnickname();
  inline ::std::string* release_stnickname();
  inline void set_allocated_stnickname(::std::string* stnickname);

  // optional int32 nHeadId = 2;
  inline bool has_nheadid() const;
  inline void clear_nheadid();
  static const int kNHeadIdFieldNumber = 2;
  inline ::google::protobuf::int32 nheadid() const;
  inline void set_nheadid(::google::protobuf::int32 value);

  // optional int64 guididx = 3;
  inline bool has_guididx() const;
  inline void clear_guididx();
  static const int kGuididxFieldNumber = 3;
  inline ::google::protobuf::int64 guididx() const;
  inline void set_guididx(::google::protobuf::int64 value);

  // optional int32 eRelationShip = 4;
  inline bool has_erelationship() const;
  inline void clear_erelationship();
  static const int kERelationShipFieldNumber = 4;
  inline ::google::protobuf::int32 erelationship() const;
  inline void set_erelationship(::google::protobuf::int32 value);

  // optional int64 tMilSec = 5;
  inline bool has_tmilsec() const;
  inline void clear_tmilsec();
  static const int kTMilSecFieldNumber = 5;
  inline ::google::protobuf::int64 tmilsec() const;
  inline void set_tmilsec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CSToDB.StoreUserdata.SUserRelationshipInfo)
 private:
  inline void set_has_stnickname();
  inline void clear_has_stnickname();
  inline void set_has_nheadid();
  inline void clear_has_nheadid();
  inline void set_has_guididx();
  inline void clear_has_guididx();
  inline void set_has_erelationship();
  inline void clear_has_erelationship();
  inline void set_has_tmilsec();
  inline void clear_has_tmilsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stnickname_;
  ::google::protobuf::int64 guididx_;
  ::google::protobuf::int32 nheadid_;
  ::google::protobuf::int32 erelationship_;
  ::google::protobuf::int64 tmilsec_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static StoreUserdata_SUserRelationshipInfo* default_instance_;
};
// -------------------------------------------------------------------

class StoreUserdata_SUserItemInfo : public ::google::protobuf::Message {
 public:
  StoreUserdata_SUserItemInfo();
  virtual ~StoreUserdata_SUserItemInfo();

  StoreUserdata_SUserItemInfo(const StoreUserdata_SUserItemInfo& from);

  inline StoreUserdata_SUserItemInfo& operator=(const StoreUserdata_SUserItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreUserdata_SUserItemInfo& default_instance();

  void Swap(StoreUserdata_SUserItemInfo* other);

  // implements Message ----------------------------------------------

  StoreUserdata_SUserItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreUserdata_SUserItemInfo& from);
  void MergeFrom(const StoreUserdata_SUserItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional bool ifusing = 2;
  inline bool has_ifusing() const;
  inline void clear_ifusing();
  static const int kIfusingFieldNumber = 2;
  inline bool ifusing() const;
  inline void set_ifusing(bool value);

  // optional int32 item_num = 3;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);

  // optional int64 buy_time = 4;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 4;
  inline ::google::protobuf::int64 buy_time() const;
  inline void set_buy_time(::google::protobuf::int64 value);

  // optional int64 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);

  // optional int32 n32EffectValue = 7;
  inline bool has_n32effectvalue() const;
  inline void clear_n32effectvalue();
  static const int kN32EffectValueFieldNumber = 7;
  inline ::google::protobuf::int32 n32effectvalue() const;
  inline void set_n32effectvalue(::google::protobuf::int32 value);

  // optional int32 n32EffectID = 8;
  inline bool has_n32effectid() const;
  inline void clear_n32effectid();
  static const int kN32EffectIDFieldNumber = 8;
  inline ::google::protobuf::int32 n32effectid() const;
  inline void set_n32effectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSToDB.StoreUserdata.SUserItemInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_ifusing();
  inline void clear_has_ifusing();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_n32effectvalue();
  inline void clear_has_n32effectvalue();
  inline void set_has_n32effectid();
  inline void clear_has_n32effectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 item_id_;
  bool ifusing_;
  ::google::protobuf::int64 buy_time_;
  ::google::protobuf::int32 item_num_;
  ::google::protobuf::int32 n32effectvalue_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 n32effectid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static StoreUserdata_SUserItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class StoreUserdata_UserMailDBData : public ::google::protobuf::Message {
 public:
  StoreUserdata_UserMailDBData();
  virtual ~StoreUserdata_UserMailDBData();

  StoreUserdata_UserMailDBData(const StoreUserdata_UserMailDBData& from);

  inline StoreUserdata_UserMailDBData& operator=(const StoreUserdata_UserMailDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreUserdata_UserMailDBData& default_instance();

  void Swap(StoreUserdata_UserMailDBData* other);

  // implements Message ----------------------------------------------

  StoreUserdata_UserMailDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreUserdata_UserMailDBData& from);
  void MergeFrom(const StoreUserdata_UserMailDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // optional int32 mState = 2;
  inline bool has_mstate() const;
  inline void clear_mstate();
  static const int kMStateFieldNumber = 2;
  inline ::google::protobuf::int32 mstate() const;
  inline void set_mstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSToDB.StoreUserdata.UserMailDBData)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_mstate();
  inline void clear_has_mstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 mailid_;
  ::google::protobuf::int32 mstate_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static StoreUserdata_UserMailDBData* default_instance_;
};
// -------------------------------------------------------------------

class StoreUserdata : public ::google::protobuf::Message {
 public:
  StoreUserdata();
  virtual ~StoreUserdata();

  StoreUserdata(const StoreUserdata& from);

  inline StoreUserdata& operator=(const StoreUserdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreUserdata& default_instance();

  void Swap(StoreUserdata* other);

  // implements Message ----------------------------------------------

  StoreUserdata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreUserdata& from);
  void MergeFrom(const StoreUserdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StoreUserdata_SUserHeroDBData SUserHeroDBData;
  typedef StoreUserdata_SUserRelationshipInfo SUserRelationshipInfo;
  typedef StoreUserdata_SUserItemInfo SUserItemInfo;
  typedef StoreUserdata_UserMailDBData UserMailDBData;

  // accessors -------------------------------------------------------

  // optional int64 un64ObjIdx = 1;
  inline bool has_un64objidx() const;
  inline void clear_un64objidx();
  static const int kUn64ObjIdxFieldNumber = 1;
  inline ::google::protobuf::int64 un64objidx() const;
  inline void set_un64objidx(::google::protobuf::int64 value);

  // optional int32 eUserPlatform = 2;
  inline bool has_euserplatform() const;
  inline void clear_euserplatform();
  static const int kEUserPlatformFieldNumber = 2;
  inline ::google::protobuf::int32 euserplatform() const;
  inline void set_euserplatform(::google::protobuf::int32 value);

  // optional int32 un32HeaderID = 3;
  inline bool has_un32headerid() const;
  inline void clear_un32headerid();
  static const int kUn32HeaderIDFieldNumber = 3;
  inline ::google::protobuf::int32 un32headerid() const;
  inline void set_un32headerid(::google::protobuf::int32 value);

  // optional int32 n8Sex = 4;
  inline bool has_n8sex() const;
  inline void clear_n8sex();
  static const int kN8SexFieldNumber = 4;
  inline ::google::protobuf::int32 n8sex() const;
  inline void set_n8sex(::google::protobuf::int32 value);

  // optional int64 n64Diamond = 5;
  inline bool has_n64diamond() const;
  inline void clear_n64diamond();
  static const int kN64DiamondFieldNumber = 5;
  inline ::google::protobuf::int64 n64diamond() const;
  inline void set_n64diamond(::google::protobuf::int64 value);

  // optional int64 n64Gold = 6;
  inline bool has_n64gold() const;
  inline void clear_n64gold();
  static const int kN64GoldFieldNumber = 6;
  inline ::google::protobuf::int64 n64gold() const;
  inline void set_n64gold(::google::protobuf::int64 value);

  // optional int64 tRegisteUTCMillisec = 7;
  inline bool has_tregisteutcmillisec() const;
  inline void clear_tregisteutcmillisec();
  static const int kTRegisteUTCMillisecFieldNumber = 7;
  inline ::google::protobuf::int64 tregisteutcmillisec() const;
  inline void set_tregisteutcmillisec(::google::protobuf::int64 value);

  // optional int64 tLastLoginUTCMillisec = 8;
  inline bool has_tlastloginutcmillisec() const;
  inline void clear_tlastloginutcmillisec();
  static const int kTLastLoginUTCMillisecFieldNumber = 8;
  inline ::google::protobuf::int64 tlastloginutcmillisec() const;
  inline void set_tlastloginutcmillisec(::google::protobuf::int64 value);

  // optional int64 tLastLogOutUTCTime = 9;
  inline bool has_tlastlogoututctime() const;
  inline void clear_tlastlogoututctime();
  static const int kTLastLogOutUTCTimeFieldNumber = 9;
  inline ::google::protobuf::int64 tlastlogoututctime() const;
  inline void set_tlastlogoututctime(::google::protobuf::int64 value);

  // optional int64 n64Score = 10;
  inline bool has_n64score() const;
  inline void clear_n64score();
  static const int kN64ScoreFieldNumber = 10;
  inline ::google::protobuf::int64 n64score() const;
  inline void set_n64score(::google::protobuf::int64 value);

  // optional int32 un32TotalGameInns = 11;
  inline bool has_un32totalgameinns() const;
  inline void clear_un32totalgameinns();
  static const int kUn32TotalGameInnsFieldNumber = 11;
  inline ::google::protobuf::int32 un32totalgameinns() const;
  inline void set_un32totalgameinns(::google::protobuf::int32 value);

  // optional int32 un32TotalWinInns = 12;
  inline bool has_un32totalwininns() const;
  inline void clear_un32totalwininns();
  static const int kUn32TotalWinInnsFieldNumber = 12;
  inline ::google::protobuf::int32 un32totalwininns() const;
  inline void set_un32totalwininns(::google::protobuf::int32 value);

  // optional int32 un32TotalHeroKills = 13;
  inline bool has_un32totalherokills() const;
  inline void clear_un32totalherokills();
  static const int kUn32TotalHeroKillsFieldNumber = 13;
  inline ::google::protobuf::int32 un32totalherokills() const;
  inline void set_un32totalherokills(::google::protobuf::int32 value);

  // optional int32 un32TotalDestoryBuildings = 14;
  inline bool has_un32totaldestorybuildings() const;
  inline void clear_un32totaldestorybuildings();
  static const int kUn32TotalDestoryBuildingsFieldNumber = 14;
  inline ::google::protobuf::int32 un32totaldestorybuildings() const;
  inline void set_un32totaldestorybuildings(::google::protobuf::int32 value);

  // optional int32 un32TotalDeadTimes = 15;
  inline bool has_un32totaldeadtimes() const;
  inline void clear_un32totaldeadtimes();
  static const int kUn32TotalDeadTimesFieldNumber = 15;
  inline ::google::protobuf::int32 un32totaldeadtimes() const;
  inline void set_un32totaldeadtimes(::google::protobuf::int32 value);

  // optional int32 un32TotalAssist = 16;
  inline bool has_un32totalassist() const;
  inline void clear_un32totalassist();
  static const int kUn32TotalAssistFieldNumber = 16;
  inline ::google::protobuf::int32 un32totalassist() const;
  inline void set_un32totalassist(::google::protobuf::int32 value);

  // optional int32 un16UserLv = 17;
  inline bool has_un16userlv() const;
  inline void clear_un16userlv();
  static const int kUn16UserLvFieldNumber = 17;
  inline ::google::protobuf::int32 un16userlv() const;
  inline void set_un16userlv(::google::protobuf::int32 value);

  // optional int32 un32UserCurLvExp = 18;
  inline bool has_un32usercurlvexp() const;
  inline void clear_un32usercurlvexp();
  static const int kUn32UserCurLvExpFieldNumber = 18;
  inline ::google::protobuf::int32 un32usercurlvexp() const;
  inline void set_un32usercurlvexp(::google::protobuf::int32 value);

  // optional int64 tLastFirstWinTime = 19;
  inline bool has_tlastfirstwintime() const;
  inline void clear_tlastfirstwintime();
  static const int kTLastFirstWinTimeFieldNumber = 19;
  inline ::google::protobuf::int64 tlastfirstwintime() const;
  inline void set_tlastfirstwintime(::google::protobuf::int64 value);

  // optional int32 un16Cldays = 20;
  inline bool has_un16cldays() const;
  inline void clear_un16cldays();
  static const int kUn16CldaysFieldNumber = 20;
  inline ::google::protobuf::int32 un16cldays() const;
  inline void set_un16cldays(::google::protobuf::int32 value);

  // optional string tLastGetLoginReward = 21;
  inline bool has_tlastgetloginreward() const;
  inline void clear_tlastgetloginreward();
  static const int kTLastGetLoginRewardFieldNumber = 21;
  inline const ::std::string& tlastgetloginreward() const;
  inline void set_tlastgetloginreward(const ::std::string& value);
  inline void set_tlastgetloginreward(const char* value);
  inline void set_tlastgetloginreward(const char* value, size_t size);
  inline ::std::string* mutable_tlastgetloginreward();
  inline ::std::string* release_tlastgetloginreward();
  inline void set_allocated_tlastgetloginreward(::std::string* tlastgetloginreward);

  // optional int32 un16VipLv = 22;
  inline bool has_un16viplv() const;
  inline void clear_un16viplv();
  static const int kUn16VipLvFieldNumber = 22;
  inline ::google::protobuf::int32 un16viplv() const;
  inline void set_un16viplv(::google::protobuf::int32 value);

  // optional int32 vipScore = 23;
  inline bool has_vipscore() const;
  inline void clear_vipscore();
  static const int kVipScoreFieldNumber = 23;
  inline ::google::protobuf::int32 vipscore() const;
  inline void set_vipscore(::google::protobuf::int32 value);

  // optional string mGuideSteps = 24;
  inline bool has_mguidesteps() const;
  inline void clear_mguidesteps();
  static const int kMGuideStepsFieldNumber = 24;
  inline const ::std::string& mguidesteps() const;
  inline void set_mguidesteps(const ::std::string& value);
  inline void set_mguidesteps(const char* value);
  inline void set_mguidesteps(const char* value, size_t size);
  inline ::std::string* mutable_mguidesteps();
  inline ::std::string* release_mguidesteps();
  inline void set_allocated_mguidesteps(::std::string* mguidesteps);

  // repeated .CSToDB.StoreUserdata.SUserHeroDBData sSUserHeroDBData = 25;
  inline int ssuserherodbdata_size() const;
  inline void clear_ssuserherodbdata();
  static const int kSSUserHeroDBDataFieldNumber = 25;
  inline const ::CSToDB::StoreUserdata_SUserHeroDBData& ssuserherodbdata(int index) const;
  inline ::CSToDB::StoreUserdata_SUserHeroDBData* mutable_ssuserherodbdata(int index);
  inline ::CSToDB::StoreUserdata_SUserHeroDBData* add_ssuserherodbdata();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserHeroDBData >&
      ssuserherodbdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserHeroDBData >*
      mutable_ssuserherodbdata();

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo friendList = 26;
  inline int friendlist_size() const;
  inline void clear_friendlist();
  static const int kFriendListFieldNumber = 26;
  inline const ::CSToDB::StoreUserdata_SUserRelationshipInfo& friendlist(int index) const;
  inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* mutable_friendlist(int index);
  inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* add_friendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >&
      friendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >*
      mutable_friendlist();

  // repeated .CSToDB.StoreUserdata.SUserRelationshipInfo blackList = 27;
  inline int blacklist_size() const;
  inline void clear_blacklist();
  static const int kBlackListFieldNumber = 27;
  inline const ::CSToDB::StoreUserdata_SUserRelationshipInfo& blacklist(int index) const;
  inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* mutable_blacklist(int index);
  inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* add_blacklist();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >&
      blacklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >*
      mutable_blacklist();

  // repeated .CSToDB.StoreUserdata.SUserItemInfo itemlist = 28;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemlistFieldNumber = 28;
  inline const ::CSToDB::StoreUserdata_SUserItemInfo& itemlist(int index) const;
  inline ::CSToDB::StoreUserdata_SUserItemInfo* mutable_itemlist(int index);
  inline ::CSToDB::StoreUserdata_SUserItemInfo* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserItemInfo >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserItemInfo >*
      mutable_itemlist();

  // repeated .CSToDB.StoreUserdata.UserMailDBData mailList = 29;
  inline int maillist_size() const;
  inline void clear_maillist();
  static const int kMailListFieldNumber = 29;
  inline const ::CSToDB::StoreUserdata_UserMailDBData& maillist(int index) const;
  inline ::CSToDB::StoreUserdata_UserMailDBData* mutable_maillist(int index);
  inline ::CSToDB::StoreUserdata_UserMailDBData* add_maillist();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_UserMailDBData >&
      maillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_UserMailDBData >*
      mutable_maillist();

  // optional string nickname = 30;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 30;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string username = 31;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 31;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string pwd = 32;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 32;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // optional string runestr = 33;
  inline bool has_runestr() const;
  inline void clear_runestr();
  static const int kRunestrFieldNumber = 33;
  inline const ::std::string& runestr() const;
  inline void set_runestr(const ::std::string& value);
  inline void set_runestr(const char* value);
  inline void set_runestr(const char* value, size_t size);
  inline ::std::string* mutable_runestr();
  inline ::std::string* release_runestr();
  inline void set_allocated_runestr(::std::string* runestr);

  // optional string slotstr = 34;
  inline bool has_slotstr() const;
  inline void clear_slotstr();
  static const int kSlotstrFieldNumber = 34;
  inline const ::std::string& slotstr() const;
  inline void set_slotstr(const ::std::string& value);
  inline void set_slotstr(const char* value);
  inline void set_slotstr(const char* value, size_t size);
  inline ::std::string* mutable_slotstr();
  inline ::std::string* release_slotstr();
  inline void set_allocated_slotstr(::std::string* slotstr);

  // @@protoc_insertion_point(class_scope:CSToDB.StoreUserdata)
 private:
  inline void set_has_un64objidx();
  inline void clear_has_un64objidx();
  inline void set_has_euserplatform();
  inline void clear_has_euserplatform();
  inline void set_has_un32headerid();
  inline void clear_has_un32headerid();
  inline void set_has_n8sex();
  inline void clear_has_n8sex();
  inline void set_has_n64diamond();
  inline void clear_has_n64diamond();
  inline void set_has_n64gold();
  inline void clear_has_n64gold();
  inline void set_has_tregisteutcmillisec();
  inline void clear_has_tregisteutcmillisec();
  inline void set_has_tlastloginutcmillisec();
  inline void clear_has_tlastloginutcmillisec();
  inline void set_has_tlastlogoututctime();
  inline void clear_has_tlastlogoututctime();
  inline void set_has_n64score();
  inline void clear_has_n64score();
  inline void set_has_un32totalgameinns();
  inline void clear_has_un32totalgameinns();
  inline void set_has_un32totalwininns();
  inline void clear_has_un32totalwininns();
  inline void set_has_un32totalherokills();
  inline void clear_has_un32totalherokills();
  inline void set_has_un32totaldestorybuildings();
  inline void clear_has_un32totaldestorybuildings();
  inline void set_has_un32totaldeadtimes();
  inline void clear_has_un32totaldeadtimes();
  inline void set_has_un32totalassist();
  inline void clear_has_un32totalassist();
  inline void set_has_un16userlv();
  inline void clear_has_un16userlv();
  inline void set_has_un32usercurlvexp();
  inline void clear_has_un32usercurlvexp();
  inline void set_has_tlastfirstwintime();
  inline void clear_has_tlastfirstwintime();
  inline void set_has_un16cldays();
  inline void clear_has_un16cldays();
  inline void set_has_tlastgetloginreward();
  inline void clear_has_tlastgetloginreward();
  inline void set_has_un16viplv();
  inline void clear_has_un16viplv();
  inline void set_has_vipscore();
  inline void clear_has_vipscore();
  inline void set_has_mguidesteps();
  inline void clear_has_mguidesteps();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_runestr();
  inline void clear_has_runestr();
  inline void set_has_slotstr();
  inline void clear_has_slotstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int64 un64objidx_;
  ::google::protobuf::int32 euserplatform_;
  ::google::protobuf::int32 un32headerid_;
  ::google::protobuf::int64 n64diamond_;
  ::google::protobuf::int64 n64gold_;
  ::google::protobuf::int64 tregisteutcmillisec_;
  ::google::protobuf::int32 n8sex_;
  ::google::protobuf::int32 un32totalgameinns_;
  ::google::protobuf::int64 tlastloginutcmillisec_;
  ::google::protobuf::int64 tlastlogoututctime_;
  ::google::protobuf::int64 n64score_;
  ::google::protobuf::int32 un32totalwininns_;
  ::google::protobuf::int32 un32totalherokills_;
  ::google::protobuf::int32 un32totaldestorybuildings_;
  ::google::protobuf::int32 un32totaldeadtimes_;
  ::google::protobuf::int32 un32totalassist_;
  ::google::protobuf::int32 un16userlv_;
  ::google::protobuf::int64 tlastfirstwintime_;
  ::google::protobuf::int32 un32usercurlvexp_;
  ::google::protobuf::int32 un16cldays_;
  ::std::string* tlastgetloginreward_;
  ::google::protobuf::int32 un16viplv_;
  ::google::protobuf::int32 vipscore_;
  ::std::string* mguidesteps_;
  ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserHeroDBData > ssuserherodbdata_;
  ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo > friendlist_;
  ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo > blacklist_;
  ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserItemInfo > itemlist_;
  ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_UserMailDBData > maillist_;
  ::std::string* nickname_;
  ::std::string* username_;
  ::std::string* pwd_;
  ::std::string* runestr_;
  ::std::string* slotstr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static StoreUserdata* default_instance_;
};
// -------------------------------------------------------------------

class QueryNotice : public ::google::protobuf::Message {
 public:
  QueryNotice();
  virtual ~QueryNotice();

  QueryNotice(const QueryNotice& from);

  inline QueryNotice& operator=(const QueryNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNotice& default_instance();

  void Swap(QueryNotice* other);

  // implements Message ----------------------------------------------

  QueryNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNotice& from);
  void MergeFrom(const QueryNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eQueryNotice_DBCall];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // @@protoc_insertion_point(class_scope:CSToDB.QueryNotice)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static QueryNotice* default_instance_;
};
// -------------------------------------------------------------------

class ExeSQL_Call : public ::google::protobuf::Message {
 public:
  ExeSQL_Call();
  virtual ~ExeSQL_Call();

  ExeSQL_Call(const ExeSQL_Call& from);

  inline ExeSQL_Call& operator=(const ExeSQL_Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExeSQL_Call& default_instance();

  void Swap(ExeSQL_Call* other);

  // implements Message ----------------------------------------------

  ExeSQL_Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExeSQL_Call& from);
  void MergeFrom(const ExeSQL_Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eExeSQL_Call];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string sql = 2;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 2;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  inline void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:CSToDB.ExeSQL_Call)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static ExeSQL_Call* default_instance_;
};
// -------------------------------------------------------------------

class ChangeNickName : public ::google::protobuf::Message {
 public:
  ChangeNickName();
  virtual ~ChangeNickName();

  ChangeNickName(const ChangeNickName& from);

  inline ChangeNickName& operator=(const ChangeNickName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeNickName& default_instance();

  void Swap(ChangeNickName* other);

  // implements Message ----------------------------------------------

  ChangeNickName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeNickName& from);
  void MergeFrom(const ChangeNickName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eChangeNickName_DBCall];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CSToDB.ChangeNickName)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::int64 guid_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static ChangeNickName* default_instance_;
};
// -------------------------------------------------------------------

class AlterItem : public ::google::protobuf::Message {
 public:
  AlterItem();
  virtual ~AlterItem();

  AlterItem(const AlterItem& from);

  inline AlterItem& operator=(const AlterItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlterItem& default_instance();

  void Swap(AlterItem* other);

  // implements Message ----------------------------------------------

  AlterItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlterItem& from);
  void MergeFrom(const AlterItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eAlterItem_DBCall];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional string sql_str = 2;
  inline bool has_sql_str() const;
  inline void clear_sql_str();
  static const int kSqlStrFieldNumber = 2;
  inline const ::std::string& sql_str() const;
  inline void set_sql_str(const ::std::string& value);
  inline void set_sql_str(const char* value);
  inline void set_sql_str(const char* value, size_t size);
  inline ::std::string* mutable_sql_str();
  inline ::std::string* release_sql_str();
  inline void set_allocated_sql_str(::std::string* sql_str);

  // @@protoc_insertion_point(class_scope:CSToDB.AlterItem)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_sql_str();
  inline void clear_has_sql_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_str_;
  int mgsid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static AlterItem* default_instance_;
};
// -------------------------------------------------------------------

class DeleteNotice : public ::google::protobuf::Message {
 public:
  DeleteNotice();
  virtual ~DeleteNotice();

  DeleteNotice(const DeleteNotice& from);

  inline DeleteNotice& operator=(const DeleteNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNotice& default_instance();

  void Swap(DeleteNotice* other);

  // implements Message ----------------------------------------------

  DeleteNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteNotice& from);
  void MergeFrom(const DeleteNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eDeleteNotice_DBCall];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSToDB.DeleteNotice)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static DeleteNotice* default_instance_;
};
// -------------------------------------------------------------------

class InsertNotice : public ::google::protobuf::Message {
 public:
  InsertNotice();
  virtual ~InsertNotice();

  InsertNotice(const InsertNotice& from);

  inline InsertNotice& operator=(const InsertNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertNotice& default_instance();

  void Swap(InsertNotice* other);

  // implements Message ----------------------------------------------

  InsertNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertNotice& from);
  void MergeFrom(const InsertNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eInsertNotice_DBCall];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional string sql_str = 2;
  inline bool has_sql_str() const;
  inline void clear_sql_str();
  static const int kSqlStrFieldNumber = 2;
  inline const ::std::string& sql_str() const;
  inline void set_sql_str(const ::std::string& value);
  inline void set_sql_str(const char* value);
  inline void set_sql_str(const char* value, size_t size);
  inline ::std::string* mutable_sql_str();
  inline ::std::string* release_sql_str();
  inline void set_allocated_sql_str(::std::string* sql_str);

  // @@protoc_insertion_point(class_scope:CSToDB.InsertNotice)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_sql_str();
  inline void clear_has_sql_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_str_;
  int mgsid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static InsertNotice* default_instance_;
};
// -------------------------------------------------------------------

class AlterSNSList : public ::google::protobuf::Message {
 public:
  AlterSNSList();
  virtual ~AlterSNSList();

  AlterSNSList(const AlterSNSList& from);

  inline AlterSNSList& operator=(const AlterSNSList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlterSNSList& default_instance();

  void Swap(AlterSNSList* other);

  // implements Message ----------------------------------------------

  AlterSNSList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlterSNSList& from);
  void MergeFrom(const AlterSNSList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eAlterSNSList_DBCall];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 related_id = 3;
  inline bool has_related_id() const;
  inline void clear_related_id();
  static const int kRelatedIdFieldNumber = 3;
  inline ::google::protobuf::uint64 related_id() const;
  inline void set_related_id(::google::protobuf::uint64 value);

  // optional uint32 related = 4;
  inline bool has_related() const;
  inline void clear_related();
  static const int kRelatedFieldNumber = 4;
  inline ::google::protobuf::uint32 related() const;
  inline void set_related(::google::protobuf::uint32 value);

  // optional uint32 opration = 5;
  inline bool has_opration() const;
  inline void clear_opration();
  static const int kOprationFieldNumber = 5;
  inline ::google::protobuf::uint32 opration() const;
  inline void set_opration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSToDB.AlterSNSList)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_related_id();
  inline void clear_has_related_id();
  inline void set_has_related();
  inline void clear_has_related();
  inline void set_has_opration();
  inline void clear_has_opration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  int mgsid_;
  ::google::protobuf::uint32 related_;
  ::google::protobuf::uint64 related_id_;
  ::google::protobuf::uint32 opration_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static AlterSNSList* default_instance_;
};
// -------------------------------------------------------------------

class QueryObjIdxReq : public ::google::protobuf::Message {
 public:
  QueryObjIdxReq();
  virtual ~QueryObjIdxReq();

  QueryObjIdxReq(const QueryObjIdxReq& from);

  inline QueryObjIdxReq& operator=(const QueryObjIdxReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryObjIdxReq& default_instance();

  void Swap(QueryObjIdxReq* other);

  // implements Message ----------------------------------------------

  QueryObjIdxReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryObjIdxReq& from);
  void MergeFrom(const QueryObjIdxReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eQueryObjId_DBCallBack];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string Logininfo = 2;
  inline bool has_logininfo() const;
  inline void clear_logininfo();
  static const int kLogininfoFieldNumber = 2;
  inline const ::std::string& logininfo() const;
  inline void set_logininfo(const ::std::string& value);
  inline void set_logininfo(const char* value);
  inline void set_logininfo(const char* value, size_t size);
  inline ::std::string* mutable_logininfo();
  inline ::std::string* release_logininfo();
  inline void set_allocated_logininfo(::std::string* logininfo);

  // optional int32 gsid = 3;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 3;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 gcnetid = 4;
  inline bool has_gcnetid() const;
  inline void clear_gcnetid();
  static const int kGcnetidFieldNumber = 4;
  inline ::google::protobuf::int32 gcnetid() const;
  inline void set_gcnetid(::google::protobuf::int32 value);

  // optional int32 csid = 5;
  inline bool has_csid() const;
  inline void clear_csid();
  static const int kCsidFieldNumber = 5;
  inline ::google::protobuf::int32 csid() const;
  inline void set_csid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSToDB.QueryObjIdxReq)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_logininfo();
  inline void clear_has_logininfo();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_gcnetid();
  inline void clear_has_gcnetid();
  inline void set_has_csid();
  inline void clear_has_csid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* logininfo_;
  int msgid_;
  ::google::protobuf::int32 gsid_;
  ::google::protobuf::int32 gcnetid_;
  ::google::protobuf::int32 csid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static QueryObjIdxReq* default_instance_;
};
// -------------------------------------------------------------------

class NicknameConflict : public ::google::protobuf::Message {
 public:
  NicknameConflict();
  virtual ~NicknameConflict();

  NicknameConflict(const NicknameConflict& from);

  inline NicknameConflict& operator=(const NicknameConflict& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NicknameConflict& default_instance();

  void Swap(NicknameConflict* other);

  // implements Message ----------------------------------------------

  NicknameConflict* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NicknameConflict& from);
  void MergeFrom(const NicknameConflict& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eNicknameConflict_DBCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional string newnickname = 2;
  inline bool has_newnickname() const;
  inline void clear_newnickname();
  static const int kNewnicknameFieldNumber = 2;
  inline const ::std::string& newnickname() const;
  inline void set_newnickname(const ::std::string& value);
  inline void set_newnickname(const char* value);
  inline void set_newnickname(const char* value, size_t size);
  inline ::std::string* mutable_newnickname();
  inline ::std::string* release_newnickname();
  inline void set_allocated_newnickname(::std::string* newnickname);

  // optional int32 gsid = 3;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 3;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 gcnetid = 4;
  inline bool has_gcnetid() const;
  inline void clear_gcnetid();
  static const int kGcnetidFieldNumber = 4;
  inline ::google::protobuf::int32 gcnetid() const;
  inline void set_gcnetid(::google::protobuf::int32 value);

  // optional uint64 guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional int32 sdkid = 6;
  inline bool has_sdkid() const;
  inline void clear_sdkid();
  static const int kSdkidFieldNumber = 6;
  inline ::google::protobuf::int32 sdkid() const;
  inline void set_sdkid(::google::protobuf::int32 value);

  // optional int32 csid = 7;
  inline bool has_csid() const;
  inline void clear_csid();
  static const int kCsidFieldNumber = 7;
  inline ::google::protobuf::int32 csid() const;
  inline void set_csid(::google::protobuf::int32 value);

  // optional string cdk = 8;
  inline bool has_cdk() const;
  inline void clear_cdk();
  static const int kCdkFieldNumber = 8;
  inline const ::std::string& cdk() const;
  inline void set_cdk(const ::std::string& value);
  inline void set_cdk(const char* value);
  inline void set_cdk(const char* value, size_t size);
  inline ::std::string* mutable_cdk();
  inline ::std::string* release_cdk();
  inline void set_allocated_cdk(::std::string* cdk);

  // optional string oldnickname = 9;
  inline bool has_oldnickname() const;
  inline void clear_oldnickname();
  static const int kOldnicknameFieldNumber = 9;
  inline const ::std::string& oldnickname() const;
  inline void set_oldnickname(const ::std::string& value);
  inline void set_oldnickname(const char* value);
  inline void set_oldnickname(const char* value, size_t size);
  inline ::std::string* mutable_oldnickname();
  inline ::std::string* release_oldnickname();
  inline void set_allocated_oldnickname(::std::string* oldnickname);

  // @@protoc_insertion_point(class_scope:CSToDB.NicknameConflict)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_newnickname();
  inline void clear_has_newnickname();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_gcnetid();
  inline void clear_has_gcnetid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_sdkid();
  inline void clear_has_sdkid();
  inline void set_has_csid();
  inline void clear_has_csid();
  inline void set_has_cdk();
  inline void clear_has_cdk();
  inline void set_has_oldnickname();
  inline void clear_has_oldnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* newnickname_;
  int mgsid_;
  ::google::protobuf::int32 gsid_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 gcnetid_;
  ::google::protobuf::int32 sdkid_;
  ::std::string* cdk_;
  ::std::string* oldnickname_;
  ::google::protobuf::int32 csid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static NicknameConflict* default_instance_;
};
// -------------------------------------------------------------------

class BuyGoods : public ::google::protobuf::Message {
 public:
  BuyGoods();
  virtual ~BuyGoods();

  BuyGoods(const BuyGoods& from);

  inline BuyGoods& operator=(const BuyGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyGoods& default_instance();

  void Swap(BuyGoods* other);

  // implements Message ----------------------------------------------

  BuyGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyGoods& from);
  void MergeFrom(const BuyGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eBuyGoods_DBCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional string buygoodsmag = 2;
  inline bool has_buygoodsmag() const;
  inline void clear_buygoodsmag();
  static const int kBuygoodsmagFieldNumber = 2;
  inline const ::std::string& buygoodsmag() const;
  inline void set_buygoodsmag(const ::std::string& value);
  inline void set_buygoodsmag(const char* value);
  inline void set_buygoodsmag(const char* value, size_t size);
  inline ::std::string* mutable_buygoodsmag();
  inline ::std::string* release_buygoodsmag();
  inline void set_allocated_buygoodsmag(::std::string* buygoodsmag);

  // @@protoc_insertion_point(class_scope:CSToDB.BuyGoods)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_buygoodsmag();
  inline void clear_has_buygoodsmag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* buygoodsmag_;
  int mgsid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static BuyGoods* default_instance_;
};
// -------------------------------------------------------------------

class GameMailInfo : public ::google::protobuf::Message {
 public:
  GameMailInfo();
  virtual ~GameMailInfo();

  GameMailInfo(const GameMailInfo& from);

  inline GameMailInfo& operator=(const GameMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameMailInfo& default_instance();

  void Swap(GameMailInfo* other);

  // implements Message ----------------------------------------------

  GameMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameMailInfo& from);
  void MergeFrom(const GameMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MailType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::CSToDB::MailType type() const;
  inline void set_type(::CSToDB::MailType value);

  // optional int32 mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // optional int64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional .CSToDB.EMailCurtState curtstate = 4;
  inline bool has_curtstate() const;
  inline void clear_curtstate();
  static const int kCurtstateFieldNumber = 4;
  inline ::CSToDB::EMailCurtState curtstate() const;
  inline void set_curtstate(::CSToDB::EMailCurtState value);

  // optional int32 sdkidx = 5;
  inline bool has_sdkidx() const;
  inline void clear_sdkidx();
  static const int kSdkidxFieldNumber = 5;
  inline ::google::protobuf::int32 sdkidx() const;
  inline void set_sdkidx(::google::protobuf::int32 value);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string giftstr = 8;
  inline bool has_giftstr() const;
  inline void clear_giftstr();
  static const int kGiftstrFieldNumber = 8;
  inline const ::std::string& giftstr() const;
  inline void set_giftstr(const ::std::string& value);
  inline void set_giftstr(const char* value);
  inline void set_giftstr(const char* value, size_t size);
  inline ::std::string* mutable_giftstr();
  inline ::std::string* release_giftstr();
  inline void set_allocated_giftstr(::std::string* giftstr);

  // optional string createtime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 9;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional string overtime = 10;
  inline bool has_overtime() const;
  inline void clear_overtime();
  static const int kOvertimeFieldNumber = 10;
  inline const ::std::string& overtime() const;
  inline void set_overtime(const ::std::string& value);
  inline void set_overtime(const char* value);
  inline void set_overtime(const char* value, size_t size);
  inline ::std::string* mutable_overtime();
  inline ::std::string* release_overtime();
  inline void set_allocated_overtime(::std::string* overtime);

  // optional string sender = 11;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 11;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // @@protoc_insertion_point(class_scope:CSToDB.GameMailInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_curtstate();
  inline void clear_has_curtstate();
  inline void set_has_sdkidx();
  inline void clear_has_sdkidx();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_giftstr();
  inline void clear_has_giftstr();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_overtime();
  inline void clear_has_overtime();
  inline void set_has_sender();
  inline void clear_has_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 mailid_;
  ::google::protobuf::int64 userid_;
  int curtstate_;
  ::google::protobuf::int32 sdkidx_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* giftstr_;
  ::std::string* createtime_;
  ::std::string* overtime_;
  ::std::string* sender_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static GameMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateGameMail : public ::google::protobuf::Message {
 public:
  UpdateGameMail();
  virtual ~UpdateGameMail();

  UpdateGameMail(const UpdateGameMail& from);

  inline UpdateGameMail& operator=(const UpdateGameMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGameMail& default_instance();

  void Swap(UpdateGameMail* other);

  // implements Message ----------------------------------------------

  UpdateGameMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateGameMail& from);
  void MergeFrom(const UpdateGameMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateGameMail_DBCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // repeated .CSToDB.GameMailInfo maillist = 2;
  inline int maillist_size() const;
  inline void clear_maillist();
  static const int kMaillistFieldNumber = 2;
  inline const ::CSToDB::GameMailInfo& maillist(int index) const;
  inline ::CSToDB::GameMailInfo* mutable_maillist(int index);
  inline ::CSToDB::GameMailInfo* add_maillist();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::GameMailInfo >&
      maillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToDB::GameMailInfo >*
      mutable_maillist();

  // @@protoc_insertion_point(class_scope:CSToDB.UpdateGameMail)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSToDB::GameMailInfo > maillist_;
  int mgsid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static UpdateGameMail* default_instance_;
};
// -------------------------------------------------------------------

class InsertUser : public ::google::protobuf::Message {
 public:
  InsertUser();
  virtual ~InsertUser();

  InsertUser(const InsertUser& from);

  inline InsertUser& operator=(const InsertUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertUser& default_instance();

  void Swap(InsertUser* other);

  // implements Message ----------------------------------------------

  InsertUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertUser& from);
  void MergeFrom(const InsertUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eInsertUser_DBCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional int64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);

  // optional string sqlstr = 3;
  inline bool has_sqlstr() const;
  inline void clear_sqlstr();
  static const int kSqlstrFieldNumber = 3;
  inline const ::std::string& sqlstr() const;
  inline void set_sqlstr(const ::std::string& value);
  inline void set_sqlstr(const char* value);
  inline void set_sqlstr(const char* value, size_t size);
  inline ::std::string* mutable_sqlstr();
  inline ::std::string* release_sqlstr();
  inline void set_allocated_sqlstr(::std::string* sqlstr);

  // @@protoc_insertion_point(class_scope:CSToDB.InsertUser)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_sqlstr();
  inline void clear_has_sqlstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 guid_;
  ::std::string* sqlstr_;
  int mgsid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static InsertUser* default_instance_;
};
// -------------------------------------------------------------------

class UpdateUser : public ::google::protobuf::Message {
 public:
  UpdateUser();
  virtual ~UpdateUser();

  UpdateUser(const UpdateUser& from);

  inline UpdateUser& operator=(const UpdateUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUser& default_instance();

  void Swap(UpdateUser* other);

  // implements Message ----------------------------------------------

  UpdateUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateUser& from);
  void MergeFrom(const UpdateUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eUpdateUser_DBCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional int64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);

  // optional string sqlstr = 3;
  inline bool has_sqlstr() const;
  inline void clear_sqlstr();
  static const int kSqlstrFieldNumber = 3;
  inline const ::std::string& sqlstr() const;
  inline void set_sqlstr(const ::std::string& value);
  inline void set_sqlstr(const char* value);
  inline void set_sqlstr(const char* value, size_t size);
  inline ::std::string* mutable_sqlstr();
  inline ::std::string* release_sqlstr();
  inline void set_allocated_sqlstr(::std::string* sqlstr);

  // @@protoc_insertion_point(class_scope:CSToDB.UpdateUser)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_sqlstr();
  inline void clear_has_sqlstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 guid_;
  ::std::string* sqlstr_;
  int mgsid_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static UpdateUser* default_instance_;
};
// -------------------------------------------------------------------

class CheckNameReq : public ::google::protobuf::Message {
 public:
  CheckNameReq();
  virtual ~CheckNameReq();

  CheckNameReq(const CheckNameReq& from);

  inline CheckNameReq& operator=(const CheckNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckNameReq& default_instance();

  void Swap(CheckNameReq* other);

  // implements Message ----------------------------------------------

  CheckNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckNameReq& from);
  void MergeFrom(const CheckNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID mgsid = 1 [default = eCheckNickNameDBCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::CSToDB::MsgID mgsid() const;
  inline void set_mgsid(::CSToDB::MsgID value);

  // optional int32 gsid = 2;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 2;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 gcnetid = 3;
  inline bool has_gcnetid() const;
  inline void clear_gcnetid();
  static const int kGcnetidFieldNumber = 3;
  inline ::google::protobuf::int32 gcnetid() const;
  inline void set_gcnetid(::google::protobuf::int32 value);

  // optional int32 gsnetid = 4;
  inline bool has_gsnetid() const;
  inline void clear_gsnetid();
  static const int kGsnetidFieldNumber = 4;
  inline ::google::protobuf::int32 gsnetid() const;
  inline void set_gsnetid(::google::protobuf::int32 value);

  // optional int32 sdkid = 5;
  inline bool has_sdkid() const;
  inline void clear_sdkid();
  static const int kSdkidFieldNumber = 5;
  inline ::google::protobuf::int32 sdkid() const;
  inline void set_sdkid(::google::protobuf::int32 value);

  // optional int32 csid = 6;
  inline bool has_csid() const;
  inline void clear_csid();
  static const int kCsidFieldNumber = 6;
  inline ::google::protobuf::int32 csid() const;
  inline void set_csid(::google::protobuf::int32 value);

  // optional string cdk = 7;
  inline bool has_cdk() const;
  inline void clear_cdk();
  static const int kCdkFieldNumber = 7;
  inline const ::std::string& cdk() const;
  inline void set_cdk(const ::std::string& value);
  inline void set_cdk(const char* value);
  inline void set_cdk(const char* value, size_t size);
  inline ::std::string* mutable_cdk();
  inline ::std::string* release_cdk();
  inline void set_allocated_cdk(::std::string* cdk);

  // optional string completeInfo = 8;
  inline bool has_completeinfo() const;
  inline void clear_completeinfo();
  static const int kCompleteInfoFieldNumber = 8;
  inline const ::std::string& completeinfo() const;
  inline void set_completeinfo(const ::std::string& value);
  inline void set_completeinfo(const char* value);
  inline void set_completeinfo(const char* value, size_t size);
  inline ::std::string* mutable_completeinfo();
  inline ::std::string* release_completeinfo();
  inline void set_allocated_completeinfo(::std::string* completeinfo);

  // @@protoc_insertion_point(class_scope:CSToDB.CheckNameReq)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_gcnetid();
  inline void clear_has_gcnetid();
  inline void set_has_gsnetid();
  inline void clear_has_gsnetid();
  inline void set_has_sdkid();
  inline void clear_has_sdkid();
  inline void set_has_csid();
  inline void clear_has_csid();
  inline void set_has_cdk();
  inline void clear_has_cdk();
  inline void set_has_completeinfo();
  inline void clear_has_completeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::int32 gsid_;
  ::google::protobuf::int32 gcnetid_;
  ::google::protobuf::int32 gsnetid_;
  ::google::protobuf::int32 sdkid_;
  ::google::protobuf::int32 csid_;
  ::std::string* cdk_;
  ::std::string* completeinfo_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static CheckNameReq* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserReq : public ::google::protobuf::Message {
 public:
  QueryUserReq();
  virtual ~QueryUserReq();

  QueryUserReq(const QueryUserReq& from);

  inline QueryUserReq& operator=(const QueryUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserReq& default_instance();

  void Swap(QueryUserReq* other);

  // implements Message ----------------------------------------------

  QueryUserReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserReq& from);
  void MergeFrom(const QueryUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToDB.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToDB::MsgID msgid() const;
  inline void set_msgid(::CSToDB::MsgID value);

  // optional string Logininfo = 2;
  inline bool has_logininfo() const;
  inline void clear_logininfo();
  static const int kLogininfoFieldNumber = 2;
  inline const ::std::string& logininfo() const;
  inline void set_logininfo(const ::std::string& value);
  inline void set_logininfo(const char* value);
  inline void set_logininfo(const char* value, size_t size);
  inline ::std::string* mutable_logininfo();
  inline ::std::string* release_logininfo();
  inline void set_allocated_logininfo(::std::string* logininfo);

  // optional int32 gsid = 3;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 3;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 gcnetid = 4;
  inline bool has_gcnetid() const;
  inline void clear_gcnetid();
  static const int kGcnetidFieldNumber = 4;
  inline ::google::protobuf::int32 gcnetid() const;
  inline void set_gcnetid(::google::protobuf::int32 value);

  // optional int32 csid = 5;
  inline bool has_csid() const;
  inline void clear_csid();
  static const int kCsidFieldNumber = 5;
  inline ::google::protobuf::int32 csid() const;
  inline void set_csid(::google::protobuf::int32 value);

  // optional int64 objid = 6;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjidFieldNumber = 6;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // optional string uname = 7;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 7;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // @@protoc_insertion_point(class_scope:CSToDB.QueryUserReq)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_logininfo();
  inline void clear_has_logininfo();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_gcnetid();
  inline void clear_has_gcnetid();
  inline void set_has_csid();
  inline void clear_has_csid();
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_uname();
  inline void clear_has_uname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* logininfo_;
  int msgid_;
  ::google::protobuf::int32 gsid_;
  ::google::protobuf::int32 gcnetid_;
  ::google::protobuf::int32 csid_;
  ::google::protobuf::int64 objid_;
  ::std::string* uname_;
  friend void  protobuf_AddDesc_CSToDB_2eproto();
  friend void protobuf_AssignDesc_CSToDB_2eproto();
  friend void protobuf_ShutdownFile_CSToDB_2eproto();

  void InitAsDefaultInstance();
  static QueryUserReq* default_instance_;
};
// ===================================================================


// ===================================================================

// UpdateCDKeyInfo

// optional .CSToDB.MsgID msgid = 1 [default = eUpdateCDKeyInfo];
inline bool UpdateCDKeyInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateCDKeyInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateCDKeyInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateCDKeyInfo::clear_msgid() {
  msgid_ = 120;
  clear_has_msgid();
}
inline ::CSToDB::MsgID UpdateCDKeyInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateCDKeyInfo.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void UpdateCDKeyInfo::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateCDKeyInfo.msgid)
}

// optional string sql_str = 2;
inline bool UpdateCDKeyInfo::has_sql_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateCDKeyInfo::set_has_sql_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateCDKeyInfo::clear_has_sql_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateCDKeyInfo::clear_sql_str() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_->clear();
  }
  clear_has_sql_str();
}
inline const ::std::string& UpdateCDKeyInfo::sql_str() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateCDKeyInfo.sql_str)
  return *sql_str_;
}
inline void UpdateCDKeyInfo::set_sql_str(const ::std::string& value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.UpdateCDKeyInfo.sql_str)
}
inline void UpdateCDKeyInfo::set_sql_str(const char* value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.UpdateCDKeyInfo.sql_str)
}
inline void UpdateCDKeyInfo::set_sql_str(const char* value, size_t size) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.UpdateCDKeyInfo.sql_str)
}
inline ::std::string* UpdateCDKeyInfo::mutable_sql_str() {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.UpdateCDKeyInfo.sql_str)
  return sql_str_;
}
inline ::std::string* UpdateCDKeyInfo::release_sql_str() {
  clear_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_str_;
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateCDKeyInfo::set_allocated_sql_str(::std::string* sql_str) {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (sql_str) {
    set_has_sql_str();
    sql_str_ = sql_str;
  } else {
    clear_has_sql_str();
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.UpdateCDKeyInfo.sql_str)
}

// -------------------------------------------------------------------

// InsertCDKeyInfo

// optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyInfo];
inline bool InsertCDKeyInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsertCDKeyInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsertCDKeyInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsertCDKeyInfo::clear_msgid() {
  msgid_ = 119;
  clear_has_msgid();
}
inline ::CSToDB::MsgID InsertCDKeyInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertCDKeyInfo.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void InsertCDKeyInfo::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.InsertCDKeyInfo.msgid)
}

// optional string sql_str = 2;
inline bool InsertCDKeyInfo::has_sql_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsertCDKeyInfo::set_has_sql_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsertCDKeyInfo::clear_has_sql_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsertCDKeyInfo::clear_sql_str() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_->clear();
  }
  clear_has_sql_str();
}
inline const ::std::string& InsertCDKeyInfo::sql_str() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertCDKeyInfo.sql_str)
  return *sql_str_;
}
inline void InsertCDKeyInfo::set_sql_str(const ::std::string& value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.InsertCDKeyInfo.sql_str)
}
inline void InsertCDKeyInfo::set_sql_str(const char* value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.InsertCDKeyInfo.sql_str)
}
inline void InsertCDKeyInfo::set_sql_str(const char* value, size_t size) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.InsertCDKeyInfo.sql_str)
}
inline ::std::string* InsertCDKeyInfo::mutable_sql_str() {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.InsertCDKeyInfo.sql_str)
  return sql_str_;
}
inline ::std::string* InsertCDKeyInfo::release_sql_str() {
  clear_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_str_;
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InsertCDKeyInfo::set_allocated_sql_str(::std::string* sql_str) {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (sql_str) {
    set_has_sql_str();
    sql_str_ = sql_str;
  } else {
    clear_has_sql_str();
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.InsertCDKeyInfo.sql_str)
}

// -------------------------------------------------------------------

// CDKeyEvents

// optional .CSToDB.MsgID msgid = 1 [default = eInsertCDKeyEvents];
inline bool CDKeyEvents::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDKeyEvents::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDKeyEvents::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDKeyEvents::clear_msgid() {
  msgid_ = 118;
  clear_has_msgid();
}
inline ::CSToDB::MsgID CDKeyEvents::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CDKeyEvents.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void CDKeyEvents::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CDKeyEvents.msgid)
}

// optional string sql_str = 2;
inline bool CDKeyEvents::has_sql_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDKeyEvents::set_has_sql_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDKeyEvents::clear_has_sql_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDKeyEvents::clear_sql_str() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_->clear();
  }
  clear_has_sql_str();
}
inline const ::std::string& CDKeyEvents::sql_str() const {
  // @@protoc_insertion_point(field_get:CSToDB.CDKeyEvents.sql_str)
  return *sql_str_;
}
inline void CDKeyEvents::set_sql_str(const ::std::string& value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.CDKeyEvents.sql_str)
}
inline void CDKeyEvents::set_sql_str(const char* value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.CDKeyEvents.sql_str)
}
inline void CDKeyEvents::set_sql_str(const char* value, size_t size) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.CDKeyEvents.sql_str)
}
inline ::std::string* CDKeyEvents::mutable_sql_str() {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.CDKeyEvents.sql_str)
  return sql_str_;
}
inline ::std::string* CDKeyEvents::release_sql_str() {
  clear_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_str_;
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDKeyEvents::set_allocated_sql_str(::std::string* sql_str) {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (sql_str) {
    set_has_sql_str();
    sql_str_ = sql_str;
  } else {
    clear_has_sql_str();
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.CDKeyEvents.sql_str)
}

// -------------------------------------------------------------------

// UpdateUserMail

// optional .CSToDB.MsgID msgid = 1 [default = eUpdateUserGameMail_DBCallBack];
inline bool UpdateUserMail::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateUserMail::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateUserMail::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateUserMail::clear_msgid() {
  msgid_ = 117;
  clear_has_msgid();
}
inline ::CSToDB::MsgID UpdateUserMail::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUserMail.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void UpdateUserMail::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUserMail.msgid)
}

// optional int64 objid = 2;
inline bool UpdateUserMail::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateUserMail::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateUserMail::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateUserMail::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 UpdateUserMail::objid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUserMail.objid)
  return objid_;
}
inline void UpdateUserMail::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUserMail.objid)
}

// optional int32 mailid = 3;
inline bool UpdateUserMail::has_mailid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateUserMail::set_has_mailid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateUserMail::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateUserMail::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 UpdateUserMail::mailid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUserMail.mailid)
  return mailid_;
}
inline void UpdateUserMail::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUserMail.mailid)
}

// optional int32 cstate = 4;
inline bool UpdateUserMail::has_cstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateUserMail::set_has_cstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateUserMail::clear_has_cstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateUserMail::clear_cstate() {
  cstate_ = 0;
  clear_has_cstate();
}
inline ::google::protobuf::int32 UpdateUserMail::cstate() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUserMail.cstate)
  return cstate_;
}
inline void UpdateUserMail::set_cstate(::google::protobuf::int32 value) {
  set_has_cstate();
  cstate_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUserMail.cstate)
}

// -------------------------------------------------------------------

// StoreUserdata_SUserHeroDBData

// optional int32 un32HeroID = 1;
inline bool StoreUserdata_SUserHeroDBData::has_un32heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreUserdata_SUserHeroDBData::set_has_un32heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreUserdata_SUserHeroDBData::clear_has_un32heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreUserdata_SUserHeroDBData::clear_un32heroid() {
  un32heroid_ = 0;
  clear_has_un32heroid();
}
inline ::google::protobuf::int32 StoreUserdata_SUserHeroDBData::un32heroid() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserHeroDBData.un32HeroID)
  return un32heroid_;
}
inline void StoreUserdata_SUserHeroDBData::set_un32heroid(::google::protobuf::int32 value) {
  set_has_un32heroid();
  un32heroid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserHeroDBData.un32HeroID)
}

// optional int64 endTime = 2;
inline bool StoreUserdata_SUserHeroDBData::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreUserdata_SUserHeroDBData::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreUserdata_SUserHeroDBData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreUserdata_SUserHeroDBData::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 StoreUserdata_SUserHeroDBData::endtime() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserHeroDBData.endTime)
  return endtime_;
}
inline void StoreUserdata_SUserHeroDBData::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserHeroDBData.endTime)
}

// optional int64 buyTime = 3;
inline bool StoreUserdata_SUserHeroDBData::has_buytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreUserdata_SUserHeroDBData::set_has_buytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreUserdata_SUserHeroDBData::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreUserdata_SUserHeroDBData::clear_buytime() {
  buytime_ = GOOGLE_LONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::int64 StoreUserdata_SUserHeroDBData::buytime() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserHeroDBData.buyTime)
  return buytime_;
}
inline void StoreUserdata_SUserHeroDBData::set_buytime(::google::protobuf::int64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserHeroDBData.buyTime)
}

// -------------------------------------------------------------------

// StoreUserdata_SUserRelationshipInfo

// optional string stNickName = 1;
inline bool StoreUserdata_SUserRelationshipInfo::has_stnickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreUserdata_SUserRelationshipInfo::set_has_stnickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_has_stnickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_stnickname() {
  if (stnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stnickname_->clear();
  }
  clear_has_stnickname();
}
inline const ::std::string& StoreUserdata_SUserRelationshipInfo::stnickname() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserRelationshipInfo.stNickName)
  return *stnickname_;
}
inline void StoreUserdata_SUserRelationshipInfo::set_stnickname(const ::std::string& value) {
  set_has_stnickname();
  if (stnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stnickname_ = new ::std::string;
  }
  stnickname_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserRelationshipInfo.stNickName)
}
inline void StoreUserdata_SUserRelationshipInfo::set_stnickname(const char* value) {
  set_has_stnickname();
  if (stnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stnickname_ = new ::std::string;
  }
  stnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.SUserRelationshipInfo.stNickName)
}
inline void StoreUserdata_SUserRelationshipInfo::set_stnickname(const char* value, size_t size) {
  set_has_stnickname();
  if (stnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stnickname_ = new ::std::string;
  }
  stnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.SUserRelationshipInfo.stNickName)
}
inline ::std::string* StoreUserdata_SUserRelationshipInfo::mutable_stnickname() {
  set_has_stnickname();
  if (stnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.SUserRelationshipInfo.stNickName)
  return stnickname_;
}
inline ::std::string* StoreUserdata_SUserRelationshipInfo::release_stnickname() {
  clear_has_stnickname();
  if (stnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stnickname_;
    stnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata_SUserRelationshipInfo::set_allocated_stnickname(::std::string* stnickname) {
  if (stnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stnickname_;
  }
  if (stnickname) {
    set_has_stnickname();
    stnickname_ = stnickname;
  } else {
    clear_has_stnickname();
    stnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.SUserRelationshipInfo.stNickName)
}

// optional int32 nHeadId = 2;
inline bool StoreUserdata_SUserRelationshipInfo::has_nheadid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreUserdata_SUserRelationshipInfo::set_has_nheadid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_has_nheadid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_nheadid() {
  nheadid_ = 0;
  clear_has_nheadid();
}
inline ::google::protobuf::int32 StoreUserdata_SUserRelationshipInfo::nheadid() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserRelationshipInfo.nHeadId)
  return nheadid_;
}
inline void StoreUserdata_SUserRelationshipInfo::set_nheadid(::google::protobuf::int32 value) {
  set_has_nheadid();
  nheadid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserRelationshipInfo.nHeadId)
}

// optional int64 guididx = 3;
inline bool StoreUserdata_SUserRelationshipInfo::has_guididx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreUserdata_SUserRelationshipInfo::set_has_guididx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_has_guididx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_guididx() {
  guididx_ = GOOGLE_LONGLONG(0);
  clear_has_guididx();
}
inline ::google::protobuf::int64 StoreUserdata_SUserRelationshipInfo::guididx() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserRelationshipInfo.guididx)
  return guididx_;
}
inline void StoreUserdata_SUserRelationshipInfo::set_guididx(::google::protobuf::int64 value) {
  set_has_guididx();
  guididx_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserRelationshipInfo.guididx)
}

// optional int32 eRelationShip = 4;
inline bool StoreUserdata_SUserRelationshipInfo::has_erelationship() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreUserdata_SUserRelationshipInfo::set_has_erelationship() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_has_erelationship() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_erelationship() {
  erelationship_ = 0;
  clear_has_erelationship();
}
inline ::google::protobuf::int32 StoreUserdata_SUserRelationshipInfo::erelationship() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserRelationshipInfo.eRelationShip)
  return erelationship_;
}
inline void StoreUserdata_SUserRelationshipInfo::set_erelationship(::google::protobuf::int32 value) {
  set_has_erelationship();
  erelationship_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserRelationshipInfo.eRelationShip)
}

// optional int64 tMilSec = 5;
inline bool StoreUserdata_SUserRelationshipInfo::has_tmilsec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoreUserdata_SUserRelationshipInfo::set_has_tmilsec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_has_tmilsec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoreUserdata_SUserRelationshipInfo::clear_tmilsec() {
  tmilsec_ = GOOGLE_LONGLONG(0);
  clear_has_tmilsec();
}
inline ::google::protobuf::int64 StoreUserdata_SUserRelationshipInfo::tmilsec() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserRelationshipInfo.tMilSec)
  return tmilsec_;
}
inline void StoreUserdata_SUserRelationshipInfo::set_tmilsec(::google::protobuf::int64 value) {
  set_has_tmilsec();
  tmilsec_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserRelationshipInfo.tMilSec)
}

// -------------------------------------------------------------------

// StoreUserdata_SUserItemInfo

// optional int32 item_id = 1;
inline bool StoreUserdata_SUserItemInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreUserdata_SUserItemInfo::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 StoreUserdata_SUserItemInfo::item_id() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.item_id)
  return item_id_;
}
inline void StoreUserdata_SUserItemInfo::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.item_id)
}

// optional bool ifusing = 2;
inline bool StoreUserdata_SUserItemInfo::has_ifusing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_ifusing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_ifusing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreUserdata_SUserItemInfo::clear_ifusing() {
  ifusing_ = false;
  clear_has_ifusing();
}
inline bool StoreUserdata_SUserItemInfo::ifusing() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.ifusing)
  return ifusing_;
}
inline void StoreUserdata_SUserItemInfo::set_ifusing(bool value) {
  set_has_ifusing();
  ifusing_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.ifusing)
}

// optional int32 item_num = 3;
inline bool StoreUserdata_SUserItemInfo::has_item_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_item_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreUserdata_SUserItemInfo::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 StoreUserdata_SUserItemInfo::item_num() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.item_num)
  return item_num_;
}
inline void StoreUserdata_SUserItemInfo::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.item_num)
}

// optional int64 buy_time = 4;
inline bool StoreUserdata_SUserItemInfo::has_buy_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_buy_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreUserdata_SUserItemInfo::clear_buy_time() {
  buy_time_ = GOOGLE_LONGLONG(0);
  clear_has_buy_time();
}
inline ::google::protobuf::int64 StoreUserdata_SUserItemInfo::buy_time() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.buy_time)
  return buy_time_;
}
inline void StoreUserdata_SUserItemInfo::set_buy_time(::google::protobuf::int64 value) {
  set_has_buy_time();
  buy_time_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.buy_time)
}

// optional int64 end_time = 6;
inline bool StoreUserdata_SUserItemInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoreUserdata_SUserItemInfo::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 StoreUserdata_SUserItemInfo::end_time() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.end_time)
  return end_time_;
}
inline void StoreUserdata_SUserItemInfo::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.end_time)
}

// optional int32 n32EffectValue = 7;
inline bool StoreUserdata_SUserItemInfo::has_n32effectvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_n32effectvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_n32effectvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StoreUserdata_SUserItemInfo::clear_n32effectvalue() {
  n32effectvalue_ = 0;
  clear_has_n32effectvalue();
}
inline ::google::protobuf::int32 StoreUserdata_SUserItemInfo::n32effectvalue() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.n32EffectValue)
  return n32effectvalue_;
}
inline void StoreUserdata_SUserItemInfo::set_n32effectvalue(::google::protobuf::int32 value) {
  set_has_n32effectvalue();
  n32effectvalue_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.n32EffectValue)
}

// optional int32 n32EffectID = 8;
inline bool StoreUserdata_SUserItemInfo::has_n32effectid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StoreUserdata_SUserItemInfo::set_has_n32effectid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StoreUserdata_SUserItemInfo::clear_has_n32effectid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StoreUserdata_SUserItemInfo::clear_n32effectid() {
  n32effectid_ = 0;
  clear_has_n32effectid();
}
inline ::google::protobuf::int32 StoreUserdata_SUserItemInfo::n32effectid() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.SUserItemInfo.n32EffectID)
  return n32effectid_;
}
inline void StoreUserdata_SUserItemInfo::set_n32effectid(::google::protobuf::int32 value) {
  set_has_n32effectid();
  n32effectid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.SUserItemInfo.n32EffectID)
}

// -------------------------------------------------------------------

// StoreUserdata_UserMailDBData

// optional int32 mailId = 1;
inline bool StoreUserdata_UserMailDBData::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreUserdata_UserMailDBData::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreUserdata_UserMailDBData::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreUserdata_UserMailDBData::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 StoreUserdata_UserMailDBData::mailid() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.UserMailDBData.mailId)
  return mailid_;
}
inline void StoreUserdata_UserMailDBData::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.UserMailDBData.mailId)
}

// optional int32 mState = 2;
inline bool StoreUserdata_UserMailDBData::has_mstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreUserdata_UserMailDBData::set_has_mstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreUserdata_UserMailDBData::clear_has_mstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreUserdata_UserMailDBData::clear_mstate() {
  mstate_ = 0;
  clear_has_mstate();
}
inline ::google::protobuf::int32 StoreUserdata_UserMailDBData::mstate() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.UserMailDBData.mState)
  return mstate_;
}
inline void StoreUserdata_UserMailDBData::set_mstate(::google::protobuf::int32 value) {
  set_has_mstate();
  mstate_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.UserMailDBData.mState)
}

// -------------------------------------------------------------------

// StoreUserdata

// optional int64 un64ObjIdx = 1;
inline bool StoreUserdata::has_un64objidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreUserdata::set_has_un64objidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreUserdata::clear_has_un64objidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreUserdata::clear_un64objidx() {
  un64objidx_ = GOOGLE_LONGLONG(0);
  clear_has_un64objidx();
}
inline ::google::protobuf::int64 StoreUserdata::un64objidx() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un64ObjIdx)
  return un64objidx_;
}
inline void StoreUserdata::set_un64objidx(::google::protobuf::int64 value) {
  set_has_un64objidx();
  un64objidx_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un64ObjIdx)
}

// optional int32 eUserPlatform = 2;
inline bool StoreUserdata::has_euserplatform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreUserdata::set_has_euserplatform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreUserdata::clear_has_euserplatform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreUserdata::clear_euserplatform() {
  euserplatform_ = 0;
  clear_has_euserplatform();
}
inline ::google::protobuf::int32 StoreUserdata::euserplatform() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.eUserPlatform)
  return euserplatform_;
}
inline void StoreUserdata::set_euserplatform(::google::protobuf::int32 value) {
  set_has_euserplatform();
  euserplatform_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.eUserPlatform)
}

// optional int32 un32HeaderID = 3;
inline bool StoreUserdata::has_un32headerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreUserdata::set_has_un32headerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreUserdata::clear_has_un32headerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreUserdata::clear_un32headerid() {
  un32headerid_ = 0;
  clear_has_un32headerid();
}
inline ::google::protobuf::int32 StoreUserdata::un32headerid() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32HeaderID)
  return un32headerid_;
}
inline void StoreUserdata::set_un32headerid(::google::protobuf::int32 value) {
  set_has_un32headerid();
  un32headerid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32HeaderID)
}

// optional int32 n8Sex = 4;
inline bool StoreUserdata::has_n8sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreUserdata::set_has_n8sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreUserdata::clear_has_n8sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreUserdata::clear_n8sex() {
  n8sex_ = 0;
  clear_has_n8sex();
}
inline ::google::protobuf::int32 StoreUserdata::n8sex() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.n8Sex)
  return n8sex_;
}
inline void StoreUserdata::set_n8sex(::google::protobuf::int32 value) {
  set_has_n8sex();
  n8sex_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.n8Sex)
}

// optional int64 n64Diamond = 5;
inline bool StoreUserdata::has_n64diamond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoreUserdata::set_has_n64diamond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StoreUserdata::clear_has_n64diamond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StoreUserdata::clear_n64diamond() {
  n64diamond_ = GOOGLE_LONGLONG(0);
  clear_has_n64diamond();
}
inline ::google::protobuf::int64 StoreUserdata::n64diamond() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.n64Diamond)
  return n64diamond_;
}
inline void StoreUserdata::set_n64diamond(::google::protobuf::int64 value) {
  set_has_n64diamond();
  n64diamond_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.n64Diamond)
}

// optional int64 n64Gold = 6;
inline bool StoreUserdata::has_n64gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StoreUserdata::set_has_n64gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StoreUserdata::clear_has_n64gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StoreUserdata::clear_n64gold() {
  n64gold_ = GOOGLE_LONGLONG(0);
  clear_has_n64gold();
}
inline ::google::protobuf::int64 StoreUserdata::n64gold() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.n64Gold)
  return n64gold_;
}
inline void StoreUserdata::set_n64gold(::google::protobuf::int64 value) {
  set_has_n64gold();
  n64gold_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.n64Gold)
}

// optional int64 tRegisteUTCMillisec = 7;
inline bool StoreUserdata::has_tregisteutcmillisec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StoreUserdata::set_has_tregisteutcmillisec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StoreUserdata::clear_has_tregisteutcmillisec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StoreUserdata::clear_tregisteutcmillisec() {
  tregisteutcmillisec_ = GOOGLE_LONGLONG(0);
  clear_has_tregisteutcmillisec();
}
inline ::google::protobuf::int64 StoreUserdata::tregisteutcmillisec() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.tRegisteUTCMillisec)
  return tregisteutcmillisec_;
}
inline void StoreUserdata::set_tregisteutcmillisec(::google::protobuf::int64 value) {
  set_has_tregisteutcmillisec();
  tregisteutcmillisec_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.tRegisteUTCMillisec)
}

// optional int64 tLastLoginUTCMillisec = 8;
inline bool StoreUserdata::has_tlastloginutcmillisec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StoreUserdata::set_has_tlastloginutcmillisec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StoreUserdata::clear_has_tlastloginutcmillisec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StoreUserdata::clear_tlastloginutcmillisec() {
  tlastloginutcmillisec_ = GOOGLE_LONGLONG(0);
  clear_has_tlastloginutcmillisec();
}
inline ::google::protobuf::int64 StoreUserdata::tlastloginutcmillisec() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.tLastLoginUTCMillisec)
  return tlastloginutcmillisec_;
}
inline void StoreUserdata::set_tlastloginutcmillisec(::google::protobuf::int64 value) {
  set_has_tlastloginutcmillisec();
  tlastloginutcmillisec_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.tLastLoginUTCMillisec)
}

// optional int64 tLastLogOutUTCTime = 9;
inline bool StoreUserdata::has_tlastlogoututctime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StoreUserdata::set_has_tlastlogoututctime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StoreUserdata::clear_has_tlastlogoututctime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StoreUserdata::clear_tlastlogoututctime() {
  tlastlogoututctime_ = GOOGLE_LONGLONG(0);
  clear_has_tlastlogoututctime();
}
inline ::google::protobuf::int64 StoreUserdata::tlastlogoututctime() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.tLastLogOutUTCTime)
  return tlastlogoututctime_;
}
inline void StoreUserdata::set_tlastlogoututctime(::google::protobuf::int64 value) {
  set_has_tlastlogoututctime();
  tlastlogoututctime_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.tLastLogOutUTCTime)
}

// optional int64 n64Score = 10;
inline bool StoreUserdata::has_n64score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StoreUserdata::set_has_n64score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StoreUserdata::clear_has_n64score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StoreUserdata::clear_n64score() {
  n64score_ = GOOGLE_LONGLONG(0);
  clear_has_n64score();
}
inline ::google::protobuf::int64 StoreUserdata::n64score() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.n64Score)
  return n64score_;
}
inline void StoreUserdata::set_n64score(::google::protobuf::int64 value) {
  set_has_n64score();
  n64score_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.n64Score)
}

// optional int32 un32TotalGameInns = 11;
inline bool StoreUserdata::has_un32totalgameinns() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StoreUserdata::set_has_un32totalgameinns() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StoreUserdata::clear_has_un32totalgameinns() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StoreUserdata::clear_un32totalgameinns() {
  un32totalgameinns_ = 0;
  clear_has_un32totalgameinns();
}
inline ::google::protobuf::int32 StoreUserdata::un32totalgameinns() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32TotalGameInns)
  return un32totalgameinns_;
}
inline void StoreUserdata::set_un32totalgameinns(::google::protobuf::int32 value) {
  set_has_un32totalgameinns();
  un32totalgameinns_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32TotalGameInns)
}

// optional int32 un32TotalWinInns = 12;
inline bool StoreUserdata::has_un32totalwininns() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StoreUserdata::set_has_un32totalwininns() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StoreUserdata::clear_has_un32totalwininns() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StoreUserdata::clear_un32totalwininns() {
  un32totalwininns_ = 0;
  clear_has_un32totalwininns();
}
inline ::google::protobuf::int32 StoreUserdata::un32totalwininns() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32TotalWinInns)
  return un32totalwininns_;
}
inline void StoreUserdata::set_un32totalwininns(::google::protobuf::int32 value) {
  set_has_un32totalwininns();
  un32totalwininns_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32TotalWinInns)
}

// optional int32 un32TotalHeroKills = 13;
inline bool StoreUserdata::has_un32totalherokills() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StoreUserdata::set_has_un32totalherokills() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StoreUserdata::clear_has_un32totalherokills() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StoreUserdata::clear_un32totalherokills() {
  un32totalherokills_ = 0;
  clear_has_un32totalherokills();
}
inline ::google::protobuf::int32 StoreUserdata::un32totalherokills() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32TotalHeroKills)
  return un32totalherokills_;
}
inline void StoreUserdata::set_un32totalherokills(::google::protobuf::int32 value) {
  set_has_un32totalherokills();
  un32totalherokills_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32TotalHeroKills)
}

// optional int32 un32TotalDestoryBuildings = 14;
inline bool StoreUserdata::has_un32totaldestorybuildings() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StoreUserdata::set_has_un32totaldestorybuildings() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StoreUserdata::clear_has_un32totaldestorybuildings() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StoreUserdata::clear_un32totaldestorybuildings() {
  un32totaldestorybuildings_ = 0;
  clear_has_un32totaldestorybuildings();
}
inline ::google::protobuf::int32 StoreUserdata::un32totaldestorybuildings() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32TotalDestoryBuildings)
  return un32totaldestorybuildings_;
}
inline void StoreUserdata::set_un32totaldestorybuildings(::google::protobuf::int32 value) {
  set_has_un32totaldestorybuildings();
  un32totaldestorybuildings_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32TotalDestoryBuildings)
}

// optional int32 un32TotalDeadTimes = 15;
inline bool StoreUserdata::has_un32totaldeadtimes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StoreUserdata::set_has_un32totaldeadtimes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StoreUserdata::clear_has_un32totaldeadtimes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StoreUserdata::clear_un32totaldeadtimes() {
  un32totaldeadtimes_ = 0;
  clear_has_un32totaldeadtimes();
}
inline ::google::protobuf::int32 StoreUserdata::un32totaldeadtimes() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32TotalDeadTimes)
  return un32totaldeadtimes_;
}
inline void StoreUserdata::set_un32totaldeadtimes(::google::protobuf::int32 value) {
  set_has_un32totaldeadtimes();
  un32totaldeadtimes_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32TotalDeadTimes)
}

// optional int32 un32TotalAssist = 16;
inline bool StoreUserdata::has_un32totalassist() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StoreUserdata::set_has_un32totalassist() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StoreUserdata::clear_has_un32totalassist() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StoreUserdata::clear_un32totalassist() {
  un32totalassist_ = 0;
  clear_has_un32totalassist();
}
inline ::google::protobuf::int32 StoreUserdata::un32totalassist() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32TotalAssist)
  return un32totalassist_;
}
inline void StoreUserdata::set_un32totalassist(::google::protobuf::int32 value) {
  set_has_un32totalassist();
  un32totalassist_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32TotalAssist)
}

// optional int32 un16UserLv = 17;
inline bool StoreUserdata::has_un16userlv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StoreUserdata::set_has_un16userlv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StoreUserdata::clear_has_un16userlv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StoreUserdata::clear_un16userlv() {
  un16userlv_ = 0;
  clear_has_un16userlv();
}
inline ::google::protobuf::int32 StoreUserdata::un16userlv() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un16UserLv)
  return un16userlv_;
}
inline void StoreUserdata::set_un16userlv(::google::protobuf::int32 value) {
  set_has_un16userlv();
  un16userlv_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un16UserLv)
}

// optional int32 un32UserCurLvExp = 18;
inline bool StoreUserdata::has_un32usercurlvexp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StoreUserdata::set_has_un32usercurlvexp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StoreUserdata::clear_has_un32usercurlvexp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StoreUserdata::clear_un32usercurlvexp() {
  un32usercurlvexp_ = 0;
  clear_has_un32usercurlvexp();
}
inline ::google::protobuf::int32 StoreUserdata::un32usercurlvexp() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un32UserCurLvExp)
  return un32usercurlvexp_;
}
inline void StoreUserdata::set_un32usercurlvexp(::google::protobuf::int32 value) {
  set_has_un32usercurlvexp();
  un32usercurlvexp_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un32UserCurLvExp)
}

// optional int64 tLastFirstWinTime = 19;
inline bool StoreUserdata::has_tlastfirstwintime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StoreUserdata::set_has_tlastfirstwintime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StoreUserdata::clear_has_tlastfirstwintime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StoreUserdata::clear_tlastfirstwintime() {
  tlastfirstwintime_ = GOOGLE_LONGLONG(0);
  clear_has_tlastfirstwintime();
}
inline ::google::protobuf::int64 StoreUserdata::tlastfirstwintime() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.tLastFirstWinTime)
  return tlastfirstwintime_;
}
inline void StoreUserdata::set_tlastfirstwintime(::google::protobuf::int64 value) {
  set_has_tlastfirstwintime();
  tlastfirstwintime_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.tLastFirstWinTime)
}

// optional int32 un16Cldays = 20;
inline bool StoreUserdata::has_un16cldays() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StoreUserdata::set_has_un16cldays() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StoreUserdata::clear_has_un16cldays() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StoreUserdata::clear_un16cldays() {
  un16cldays_ = 0;
  clear_has_un16cldays();
}
inline ::google::protobuf::int32 StoreUserdata::un16cldays() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un16Cldays)
  return un16cldays_;
}
inline void StoreUserdata::set_un16cldays(::google::protobuf::int32 value) {
  set_has_un16cldays();
  un16cldays_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un16Cldays)
}

// optional string tLastGetLoginReward = 21;
inline bool StoreUserdata::has_tlastgetloginreward() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void StoreUserdata::set_has_tlastgetloginreward() {
  _has_bits_[0] |= 0x00100000u;
}
inline void StoreUserdata::clear_has_tlastgetloginreward() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void StoreUserdata::clear_tlastgetloginreward() {
  if (tlastgetloginreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tlastgetloginreward_->clear();
  }
  clear_has_tlastgetloginreward();
}
inline const ::std::string& StoreUserdata::tlastgetloginreward() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.tLastGetLoginReward)
  return *tlastgetloginreward_;
}
inline void StoreUserdata::set_tlastgetloginreward(const ::std::string& value) {
  set_has_tlastgetloginreward();
  if (tlastgetloginreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tlastgetloginreward_ = new ::std::string;
  }
  tlastgetloginreward_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.tLastGetLoginReward)
}
inline void StoreUserdata::set_tlastgetloginreward(const char* value) {
  set_has_tlastgetloginreward();
  if (tlastgetloginreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tlastgetloginreward_ = new ::std::string;
  }
  tlastgetloginreward_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.tLastGetLoginReward)
}
inline void StoreUserdata::set_tlastgetloginreward(const char* value, size_t size) {
  set_has_tlastgetloginreward();
  if (tlastgetloginreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tlastgetloginreward_ = new ::std::string;
  }
  tlastgetloginreward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.tLastGetLoginReward)
}
inline ::std::string* StoreUserdata::mutable_tlastgetloginreward() {
  set_has_tlastgetloginreward();
  if (tlastgetloginreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tlastgetloginreward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.tLastGetLoginReward)
  return tlastgetloginreward_;
}
inline ::std::string* StoreUserdata::release_tlastgetloginreward() {
  clear_has_tlastgetloginreward();
  if (tlastgetloginreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tlastgetloginreward_;
    tlastgetloginreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_tlastgetloginreward(::std::string* tlastgetloginreward) {
  if (tlastgetloginreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tlastgetloginreward_;
  }
  if (tlastgetloginreward) {
    set_has_tlastgetloginreward();
    tlastgetloginreward_ = tlastgetloginreward;
  } else {
    clear_has_tlastgetloginreward();
    tlastgetloginreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.tLastGetLoginReward)
}

// optional int32 un16VipLv = 22;
inline bool StoreUserdata::has_un16viplv() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void StoreUserdata::set_has_un16viplv() {
  _has_bits_[0] |= 0x00200000u;
}
inline void StoreUserdata::clear_has_un16viplv() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void StoreUserdata::clear_un16viplv() {
  un16viplv_ = 0;
  clear_has_un16viplv();
}
inline ::google::protobuf::int32 StoreUserdata::un16viplv() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.un16VipLv)
  return un16viplv_;
}
inline void StoreUserdata::set_un16viplv(::google::protobuf::int32 value) {
  set_has_un16viplv();
  un16viplv_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.un16VipLv)
}

// optional int32 vipScore = 23;
inline bool StoreUserdata::has_vipscore() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void StoreUserdata::set_has_vipscore() {
  _has_bits_[0] |= 0x00400000u;
}
inline void StoreUserdata::clear_has_vipscore() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void StoreUserdata::clear_vipscore() {
  vipscore_ = 0;
  clear_has_vipscore();
}
inline ::google::protobuf::int32 StoreUserdata::vipscore() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.vipScore)
  return vipscore_;
}
inline void StoreUserdata::set_vipscore(::google::protobuf::int32 value) {
  set_has_vipscore();
  vipscore_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.vipScore)
}

// optional string mGuideSteps = 24;
inline bool StoreUserdata::has_mguidesteps() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void StoreUserdata::set_has_mguidesteps() {
  _has_bits_[0] |= 0x00800000u;
}
inline void StoreUserdata::clear_has_mguidesteps() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void StoreUserdata::clear_mguidesteps() {
  if (mguidesteps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mguidesteps_->clear();
  }
  clear_has_mguidesteps();
}
inline const ::std::string& StoreUserdata::mguidesteps() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.mGuideSteps)
  return *mguidesteps_;
}
inline void StoreUserdata::set_mguidesteps(const ::std::string& value) {
  set_has_mguidesteps();
  if (mguidesteps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mguidesteps_ = new ::std::string;
  }
  mguidesteps_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.mGuideSteps)
}
inline void StoreUserdata::set_mguidesteps(const char* value) {
  set_has_mguidesteps();
  if (mguidesteps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mguidesteps_ = new ::std::string;
  }
  mguidesteps_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.mGuideSteps)
}
inline void StoreUserdata::set_mguidesteps(const char* value, size_t size) {
  set_has_mguidesteps();
  if (mguidesteps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mguidesteps_ = new ::std::string;
  }
  mguidesteps_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.mGuideSteps)
}
inline ::std::string* StoreUserdata::mutable_mguidesteps() {
  set_has_mguidesteps();
  if (mguidesteps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mguidesteps_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.mGuideSteps)
  return mguidesteps_;
}
inline ::std::string* StoreUserdata::release_mguidesteps() {
  clear_has_mguidesteps();
  if (mguidesteps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mguidesteps_;
    mguidesteps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_mguidesteps(::std::string* mguidesteps) {
  if (mguidesteps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mguidesteps_;
  }
  if (mguidesteps) {
    set_has_mguidesteps();
    mguidesteps_ = mguidesteps;
  } else {
    clear_has_mguidesteps();
    mguidesteps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.mGuideSteps)
}

// repeated .CSToDB.StoreUserdata.SUserHeroDBData sSUserHeroDBData = 25;
inline int StoreUserdata::ssuserherodbdata_size() const {
  return ssuserherodbdata_.size();
}
inline void StoreUserdata::clear_ssuserherodbdata() {
  ssuserherodbdata_.Clear();
}
inline const ::CSToDB::StoreUserdata_SUserHeroDBData& StoreUserdata::ssuserherodbdata(int index) const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.sSUserHeroDBData)
  return ssuserherodbdata_.Get(index);
}
inline ::CSToDB::StoreUserdata_SUserHeroDBData* StoreUserdata::mutable_ssuserherodbdata(int index) {
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.sSUserHeroDBData)
  return ssuserherodbdata_.Mutable(index);
}
inline ::CSToDB::StoreUserdata_SUserHeroDBData* StoreUserdata::add_ssuserherodbdata() {
  // @@protoc_insertion_point(field_add:CSToDB.StoreUserdata.sSUserHeroDBData)
  return ssuserherodbdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserHeroDBData >&
StoreUserdata::ssuserherodbdata() const {
  // @@protoc_insertion_point(field_list:CSToDB.StoreUserdata.sSUserHeroDBData)
  return ssuserherodbdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserHeroDBData >*
StoreUserdata::mutable_ssuserherodbdata() {
  // @@protoc_insertion_point(field_mutable_list:CSToDB.StoreUserdata.sSUserHeroDBData)
  return &ssuserherodbdata_;
}

// repeated .CSToDB.StoreUserdata.SUserRelationshipInfo friendList = 26;
inline int StoreUserdata::friendlist_size() const {
  return friendlist_.size();
}
inline void StoreUserdata::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::CSToDB::StoreUserdata_SUserRelationshipInfo& StoreUserdata::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.friendList)
  return friendlist_.Get(index);
}
inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* StoreUserdata::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.friendList)
  return friendlist_.Mutable(index);
}
inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* StoreUserdata::add_friendlist() {
  // @@protoc_insertion_point(field_add:CSToDB.StoreUserdata.friendList)
  return friendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >&
StoreUserdata::friendlist() const {
  // @@protoc_insertion_point(field_list:CSToDB.StoreUserdata.friendList)
  return friendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >*
StoreUserdata::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:CSToDB.StoreUserdata.friendList)
  return &friendlist_;
}

// repeated .CSToDB.StoreUserdata.SUserRelationshipInfo blackList = 27;
inline int StoreUserdata::blacklist_size() const {
  return blacklist_.size();
}
inline void StoreUserdata::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::CSToDB::StoreUserdata_SUserRelationshipInfo& StoreUserdata::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.blackList)
  return blacklist_.Get(index);
}
inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* StoreUserdata::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.blackList)
  return blacklist_.Mutable(index);
}
inline ::CSToDB::StoreUserdata_SUserRelationshipInfo* StoreUserdata::add_blacklist() {
  // @@protoc_insertion_point(field_add:CSToDB.StoreUserdata.blackList)
  return blacklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >&
StoreUserdata::blacklist() const {
  // @@protoc_insertion_point(field_list:CSToDB.StoreUserdata.blackList)
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserRelationshipInfo >*
StoreUserdata::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:CSToDB.StoreUserdata.blackList)
  return &blacklist_;
}

// repeated .CSToDB.StoreUserdata.SUserItemInfo itemlist = 28;
inline int StoreUserdata::itemlist_size() const {
  return itemlist_.size();
}
inline void StoreUserdata::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::CSToDB::StoreUserdata_SUserItemInfo& StoreUserdata::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.itemlist)
  return itemlist_.Get(index);
}
inline ::CSToDB::StoreUserdata_SUserItemInfo* StoreUserdata::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.itemlist)
  return itemlist_.Mutable(index);
}
inline ::CSToDB::StoreUserdata_SUserItemInfo* StoreUserdata::add_itemlist() {
  // @@protoc_insertion_point(field_add:CSToDB.StoreUserdata.itemlist)
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserItemInfo >&
StoreUserdata::itemlist() const {
  // @@protoc_insertion_point(field_list:CSToDB.StoreUserdata.itemlist)
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_SUserItemInfo >*
StoreUserdata::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:CSToDB.StoreUserdata.itemlist)
  return &itemlist_;
}

// repeated .CSToDB.StoreUserdata.UserMailDBData mailList = 29;
inline int StoreUserdata::maillist_size() const {
  return maillist_.size();
}
inline void StoreUserdata::clear_maillist() {
  maillist_.Clear();
}
inline const ::CSToDB::StoreUserdata_UserMailDBData& StoreUserdata::maillist(int index) const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.mailList)
  return maillist_.Get(index);
}
inline ::CSToDB::StoreUserdata_UserMailDBData* StoreUserdata::mutable_maillist(int index) {
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.mailList)
  return maillist_.Mutable(index);
}
inline ::CSToDB::StoreUserdata_UserMailDBData* StoreUserdata::add_maillist() {
  // @@protoc_insertion_point(field_add:CSToDB.StoreUserdata.mailList)
  return maillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_UserMailDBData >&
StoreUserdata::maillist() const {
  // @@protoc_insertion_point(field_list:CSToDB.StoreUserdata.mailList)
  return maillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToDB::StoreUserdata_UserMailDBData >*
StoreUserdata::mutable_maillist() {
  // @@protoc_insertion_point(field_mutable_list:CSToDB.StoreUserdata.mailList)
  return &maillist_;
}

// optional string nickname = 30;
inline bool StoreUserdata::has_nickname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void StoreUserdata::set_has_nickname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void StoreUserdata::clear_has_nickname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void StoreUserdata::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& StoreUserdata::nickname() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.nickname)
  return *nickname_;
}
inline void StoreUserdata::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.nickname)
}
inline void StoreUserdata::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.nickname)
}
inline void StoreUserdata::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.nickname)
}
inline ::std::string* StoreUserdata::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.nickname)
  return nickname_;
}
inline ::std::string* StoreUserdata::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.nickname)
}

// optional string username = 31;
inline bool StoreUserdata::has_username() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void StoreUserdata::set_has_username() {
  _has_bits_[0] |= 0x40000000u;
}
inline void StoreUserdata::clear_has_username() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void StoreUserdata::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& StoreUserdata::username() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.username)
  return *username_;
}
inline void StoreUserdata::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.username)
}
inline void StoreUserdata::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.username)
}
inline void StoreUserdata::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.username)
}
inline ::std::string* StoreUserdata::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.username)
  return username_;
}
inline ::std::string* StoreUserdata::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.username)
}

// optional string pwd = 32;
inline bool StoreUserdata::has_pwd() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void StoreUserdata::set_has_pwd() {
  _has_bits_[0] |= 0x80000000u;
}
inline void StoreUserdata::clear_has_pwd() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void StoreUserdata::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& StoreUserdata::pwd() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.pwd)
  return *pwd_;
}
inline void StoreUserdata::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.pwd)
}
inline void StoreUserdata::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.pwd)
}
inline void StoreUserdata::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.pwd)
}
inline ::std::string* StoreUserdata::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.pwd)
  return pwd_;
}
inline ::std::string* StoreUserdata::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.pwd)
}

// optional string runestr = 33;
inline bool StoreUserdata::has_runestr() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void StoreUserdata::set_has_runestr() {
  _has_bits_[1] |= 0x00000001u;
}
inline void StoreUserdata::clear_has_runestr() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void StoreUserdata::clear_runestr() {
  if (runestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    runestr_->clear();
  }
  clear_has_runestr();
}
inline const ::std::string& StoreUserdata::runestr() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.runestr)
  return *runestr_;
}
inline void StoreUserdata::set_runestr(const ::std::string& value) {
  set_has_runestr();
  if (runestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    runestr_ = new ::std::string;
  }
  runestr_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.runestr)
}
inline void StoreUserdata::set_runestr(const char* value) {
  set_has_runestr();
  if (runestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    runestr_ = new ::std::string;
  }
  runestr_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.runestr)
}
inline void StoreUserdata::set_runestr(const char* value, size_t size) {
  set_has_runestr();
  if (runestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    runestr_ = new ::std::string;
  }
  runestr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.runestr)
}
inline ::std::string* StoreUserdata::mutable_runestr() {
  set_has_runestr();
  if (runestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    runestr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.runestr)
  return runestr_;
}
inline ::std::string* StoreUserdata::release_runestr() {
  clear_has_runestr();
  if (runestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = runestr_;
    runestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_runestr(::std::string* runestr) {
  if (runestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete runestr_;
  }
  if (runestr) {
    set_has_runestr();
    runestr_ = runestr;
  } else {
    clear_has_runestr();
    runestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.runestr)
}

// optional string slotstr = 34;
inline bool StoreUserdata::has_slotstr() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void StoreUserdata::set_has_slotstr() {
  _has_bits_[1] |= 0x00000002u;
}
inline void StoreUserdata::clear_has_slotstr() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void StoreUserdata::clear_slotstr() {
  if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_->clear();
  }
  clear_has_slotstr();
}
inline const ::std::string& StoreUserdata::slotstr() const {
  // @@protoc_insertion_point(field_get:CSToDB.StoreUserdata.slotstr)
  return *slotstr_;
}
inline void StoreUserdata::set_slotstr(const ::std::string& value) {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  slotstr_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.StoreUserdata.slotstr)
}
inline void StoreUserdata::set_slotstr(const char* value) {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  slotstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.StoreUserdata.slotstr)
}
inline void StoreUserdata::set_slotstr(const char* value, size_t size) {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  slotstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.StoreUserdata.slotstr)
}
inline ::std::string* StoreUserdata::mutable_slotstr() {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.StoreUserdata.slotstr)
  return slotstr_;
}
inline ::std::string* StoreUserdata::release_slotstr() {
  clear_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = slotstr_;
    slotstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreUserdata::set_allocated_slotstr(::std::string* slotstr) {
  if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slotstr_;
  }
  if (slotstr) {
    set_has_slotstr();
    slotstr_ = slotstr;
  } else {
    clear_has_slotstr();
    slotstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.StoreUserdata.slotstr)
}

// -------------------------------------------------------------------

// QueryNotice

// optional .CSToDB.MsgID msgid = 1 [default = eQueryNotice_DBCall];
inline bool QueryNotice::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryNotice::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryNotice::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryNotice::clear_msgid() {
  msgid_ = 115;
  clear_has_msgid();
}
inline ::CSToDB::MsgID QueryNotice::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryNotice.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void QueryNotice::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryNotice.msgid)
}

// -------------------------------------------------------------------

// ExeSQL_Call

// optional .CSToDB.MsgID msgid = 1 [default = eExeSQL_Call];
inline bool ExeSQL_Call::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExeSQL_Call::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExeSQL_Call::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExeSQL_Call::clear_msgid() {
  msgid_ = 114;
  clear_has_msgid();
}
inline ::CSToDB::MsgID ExeSQL_Call::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.ExeSQL_Call.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void ExeSQL_Call::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.ExeSQL_Call.msgid)
}

// optional string sql = 2;
inline bool ExeSQL_Call::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExeSQL_Call::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExeSQL_Call::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExeSQL_Call::clear_sql() {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& ExeSQL_Call::sql() const {
  // @@protoc_insertion_point(field_get:CSToDB.ExeSQL_Call.sql)
  return *sql_;
}
inline void ExeSQL_Call::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.ExeSQL_Call.sql)
}
inline void ExeSQL_Call::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.ExeSQL_Call.sql)
}
inline void ExeSQL_Call::set_sql(const char* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.ExeSQL_Call.sql)
}
inline ::std::string* ExeSQL_Call::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.ExeSQL_Call.sql)
  return sql_;
}
inline ::std::string* ExeSQL_Call::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExeSQL_Call::set_allocated_sql(::std::string* sql) {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_;
  }
  if (sql) {
    set_has_sql();
    sql_ = sql;
  } else {
    clear_has_sql();
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.ExeSQL_Call.sql)
}

// -------------------------------------------------------------------

// ChangeNickName

// optional .CSToDB.MsgID msgid = 1 [default = eChangeNickName_DBCall];
inline bool ChangeNickName::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeNickName::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeNickName::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeNickName::clear_msgid() {
  msgid_ = 113;
  clear_has_msgid();
}
inline ::CSToDB::MsgID ChangeNickName::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.ChangeNickName.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void ChangeNickName::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.ChangeNickName.msgid)
}

// optional string nickname = 2;
inline bool ChangeNickName::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeNickName::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeNickName::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeNickName::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ChangeNickName::nickname() const {
  // @@protoc_insertion_point(field_get:CSToDB.ChangeNickName.nickname)
  return *nickname_;
}
inline void ChangeNickName::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.ChangeNickName.nickname)
}
inline void ChangeNickName::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.ChangeNickName.nickname)
}
inline void ChangeNickName::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.ChangeNickName.nickname)
}
inline ::std::string* ChangeNickName::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.ChangeNickName.nickname)
  return nickname_;
}
inline ::std::string* ChangeNickName::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeNickName::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.ChangeNickName.nickname)
}

// optional int64 guid = 3;
inline bool ChangeNickName::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeNickName::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeNickName::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeNickName::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 ChangeNickName::guid() const {
  // @@protoc_insertion_point(field_get:CSToDB.ChangeNickName.guid)
  return guid_;
}
inline void ChangeNickName::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.ChangeNickName.guid)
}

// -------------------------------------------------------------------

// AlterItem

// optional .CSToDB.MsgID mgsid = 1 [default = eAlterItem_DBCall];
inline bool AlterItem::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlterItem::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlterItem::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlterItem::clear_mgsid() {
  mgsid_ = 112;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID AlterItem::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterItem.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void AlterItem::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.AlterItem.mgsid)
}

// optional string sql_str = 2;
inline bool AlterItem::has_sql_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlterItem::set_has_sql_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlterItem::clear_has_sql_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlterItem::clear_sql_str() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_->clear();
  }
  clear_has_sql_str();
}
inline const ::std::string& AlterItem::sql_str() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterItem.sql_str)
  return *sql_str_;
}
inline void AlterItem::set_sql_str(const ::std::string& value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.AlterItem.sql_str)
}
inline void AlterItem::set_sql_str(const char* value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.AlterItem.sql_str)
}
inline void AlterItem::set_sql_str(const char* value, size_t size) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.AlterItem.sql_str)
}
inline ::std::string* AlterItem::mutable_sql_str() {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.AlterItem.sql_str)
  return sql_str_;
}
inline ::std::string* AlterItem::release_sql_str() {
  clear_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_str_;
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlterItem::set_allocated_sql_str(::std::string* sql_str) {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (sql_str) {
    set_has_sql_str();
    sql_str_ = sql_str;
  } else {
    clear_has_sql_str();
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.AlterItem.sql_str)
}

// -------------------------------------------------------------------

// DeleteNotice

// optional .CSToDB.MsgID mgsid = 1 [default = eDeleteNotice_DBCall];
inline bool DeleteNotice::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteNotice::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteNotice::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteNotice::clear_mgsid() {
  mgsid_ = 111;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID DeleteNotice::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.DeleteNotice.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void DeleteNotice::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.DeleteNotice.mgsid)
}

// optional uint32 id = 2;
inline bool DeleteNotice::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteNotice::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteNotice::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteNotice::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DeleteNotice::id() const {
  // @@protoc_insertion_point(field_get:CSToDB.DeleteNotice.id)
  return id_;
}
inline void DeleteNotice::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.DeleteNotice.id)
}

// -------------------------------------------------------------------

// InsertNotice

// optional .CSToDB.MsgID mgsid = 1 [default = eInsertNotice_DBCall];
inline bool InsertNotice::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsertNotice::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsertNotice::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsertNotice::clear_mgsid() {
  mgsid_ = 110;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID InsertNotice::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertNotice.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void InsertNotice::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.InsertNotice.mgsid)
}

// optional string sql_str = 2;
inline bool InsertNotice::has_sql_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsertNotice::set_has_sql_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsertNotice::clear_has_sql_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsertNotice::clear_sql_str() {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_->clear();
  }
  clear_has_sql_str();
}
inline const ::std::string& InsertNotice::sql_str() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertNotice.sql_str)
  return *sql_str_;
}
inline void InsertNotice::set_sql_str(const ::std::string& value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.InsertNotice.sql_str)
}
inline void InsertNotice::set_sql_str(const char* value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.InsertNotice.sql_str)
}
inline void InsertNotice::set_sql_str(const char* value, size_t size) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.InsertNotice.sql_str)
}
inline ::std::string* InsertNotice::mutable_sql_str() {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.InsertNotice.sql_str)
  return sql_str_;
}
inline ::std::string* InsertNotice::release_sql_str() {
  clear_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_str_;
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InsertNotice::set_allocated_sql_str(::std::string* sql_str) {
  if (sql_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_str_;
  }
  if (sql_str) {
    set_has_sql_str();
    sql_str_ = sql_str;
  } else {
    clear_has_sql_str();
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.InsertNotice.sql_str)
}

// -------------------------------------------------------------------

// AlterSNSList

// optional .CSToDB.MsgID mgsid = 1 [default = eAlterSNSList_DBCall];
inline bool AlterSNSList::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlterSNSList::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlterSNSList::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlterSNSList::clear_mgsid() {
  mgsid_ = 109;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID AlterSNSList::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterSNSList.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void AlterSNSList::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.AlterSNSList.mgsid)
}

// optional uint64 user_id = 2;
inline bool AlterSNSList::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlterSNSList::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlterSNSList::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlterSNSList::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 AlterSNSList::user_id() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterSNSList.user_id)
  return user_id_;
}
inline void AlterSNSList::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.AlterSNSList.user_id)
}

// optional uint64 related_id = 3;
inline bool AlterSNSList::has_related_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlterSNSList::set_has_related_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlterSNSList::clear_has_related_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlterSNSList::clear_related_id() {
  related_id_ = GOOGLE_ULONGLONG(0);
  clear_has_related_id();
}
inline ::google::protobuf::uint64 AlterSNSList::related_id() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterSNSList.related_id)
  return related_id_;
}
inline void AlterSNSList::set_related_id(::google::protobuf::uint64 value) {
  set_has_related_id();
  related_id_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.AlterSNSList.related_id)
}

// optional uint32 related = 4;
inline bool AlterSNSList::has_related() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlterSNSList::set_has_related() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlterSNSList::clear_has_related() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlterSNSList::clear_related() {
  related_ = 0u;
  clear_has_related();
}
inline ::google::protobuf::uint32 AlterSNSList::related() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterSNSList.related)
  return related_;
}
inline void AlterSNSList::set_related(::google::protobuf::uint32 value) {
  set_has_related();
  related_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.AlterSNSList.related)
}

// optional uint32 opration = 5;
inline bool AlterSNSList::has_opration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlterSNSList::set_has_opration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlterSNSList::clear_has_opration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlterSNSList::clear_opration() {
  opration_ = 0u;
  clear_has_opration();
}
inline ::google::protobuf::uint32 AlterSNSList::opration() const {
  // @@protoc_insertion_point(field_get:CSToDB.AlterSNSList.opration)
  return opration_;
}
inline void AlterSNSList::set_opration(::google::protobuf::uint32 value) {
  set_has_opration();
  opration_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.AlterSNSList.opration)
}

// -------------------------------------------------------------------

// QueryObjIdxReq

// optional .CSToDB.MsgID msgid = 1 [default = eQueryObjId_DBCallBack];
inline bool QueryObjIdxReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryObjIdxReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryObjIdxReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryObjIdxReq::clear_msgid() {
  msgid_ = 108;
  clear_has_msgid();
}
inline ::CSToDB::MsgID QueryObjIdxReq::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryObjIdxReq.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void QueryObjIdxReq::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryObjIdxReq.msgid)
}

// optional string Logininfo = 2;
inline bool QueryObjIdxReq::has_logininfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryObjIdxReq::set_has_logininfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryObjIdxReq::clear_has_logininfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryObjIdxReq::clear_logininfo() {
  if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_->clear();
  }
  clear_has_logininfo();
}
inline const ::std::string& QueryObjIdxReq::logininfo() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryObjIdxReq.Logininfo)
  return *logininfo_;
}
inline void QueryObjIdxReq::set_logininfo(const ::std::string& value) {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  logininfo_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.QueryObjIdxReq.Logininfo)
}
inline void QueryObjIdxReq::set_logininfo(const char* value) {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  logininfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.QueryObjIdxReq.Logininfo)
}
inline void QueryObjIdxReq::set_logininfo(const char* value, size_t size) {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  logininfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.QueryObjIdxReq.Logininfo)
}
inline ::std::string* QueryObjIdxReq::mutable_logininfo() {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.QueryObjIdxReq.Logininfo)
  return logininfo_;
}
inline ::std::string* QueryObjIdxReq::release_logininfo() {
  clear_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logininfo_;
    logininfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryObjIdxReq::set_allocated_logininfo(::std::string* logininfo) {
  if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logininfo_;
  }
  if (logininfo) {
    set_has_logininfo();
    logininfo_ = logininfo;
  } else {
    clear_has_logininfo();
    logininfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.QueryObjIdxReq.Logininfo)
}

// optional int32 gsid = 3;
inline bool QueryObjIdxReq::has_gsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryObjIdxReq::set_has_gsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryObjIdxReq::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryObjIdxReq::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 QueryObjIdxReq::gsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryObjIdxReq.gsid)
  return gsid_;
}
inline void QueryObjIdxReq::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryObjIdxReq.gsid)
}

// optional int32 gcnetid = 4;
inline bool QueryObjIdxReq::has_gcnetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryObjIdxReq::set_has_gcnetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryObjIdxReq::clear_has_gcnetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryObjIdxReq::clear_gcnetid() {
  gcnetid_ = 0;
  clear_has_gcnetid();
}
inline ::google::protobuf::int32 QueryObjIdxReq::gcnetid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryObjIdxReq.gcnetid)
  return gcnetid_;
}
inline void QueryObjIdxReq::set_gcnetid(::google::protobuf::int32 value) {
  set_has_gcnetid();
  gcnetid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryObjIdxReq.gcnetid)
}

// optional int32 csid = 5;
inline bool QueryObjIdxReq::has_csid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryObjIdxReq::set_has_csid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryObjIdxReq::clear_has_csid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryObjIdxReq::clear_csid() {
  csid_ = 0;
  clear_has_csid();
}
inline ::google::protobuf::int32 QueryObjIdxReq::csid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryObjIdxReq.csid)
  return csid_;
}
inline void QueryObjIdxReq::set_csid(::google::protobuf::int32 value) {
  set_has_csid();
  csid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryObjIdxReq.csid)
}

// -------------------------------------------------------------------

// NicknameConflict

// optional .CSToDB.MsgID mgsid = 1 [default = eNicknameConflict_DBCallBack];
inline bool NicknameConflict::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NicknameConflict::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NicknameConflict::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NicknameConflict::clear_mgsid() {
  mgsid_ = 107;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID NicknameConflict::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void NicknameConflict::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.mgsid)
}

// optional string newnickname = 2;
inline bool NicknameConflict::has_newnickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NicknameConflict::set_has_newnickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NicknameConflict::clear_has_newnickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NicknameConflict::clear_newnickname() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_->clear();
  }
  clear_has_newnickname();
}
inline const ::std::string& NicknameConflict::newnickname() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.newnickname)
  return *newnickname_;
}
inline void NicknameConflict::set_newnickname(const ::std::string& value) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.newnickname)
}
inline void NicknameConflict::set_newnickname(const char* value) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.NicknameConflict.newnickname)
}
inline void NicknameConflict::set_newnickname(const char* value, size_t size) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.NicknameConflict.newnickname)
}
inline ::std::string* NicknameConflict::mutable_newnickname() {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.NicknameConflict.newnickname)
  return newnickname_;
}
inline ::std::string* NicknameConflict::release_newnickname() {
  clear_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newnickname_;
    newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NicknameConflict::set_allocated_newnickname(::std::string* newnickname) {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (newnickname) {
    set_has_newnickname();
    newnickname_ = newnickname;
  } else {
    clear_has_newnickname();
    newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.NicknameConflict.newnickname)
}

// optional int32 gsid = 3;
inline bool NicknameConflict::has_gsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NicknameConflict::set_has_gsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NicknameConflict::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NicknameConflict::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 NicknameConflict::gsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.gsid)
  return gsid_;
}
inline void NicknameConflict::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.gsid)
}

// optional int32 gcnetid = 4;
inline bool NicknameConflict::has_gcnetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NicknameConflict::set_has_gcnetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NicknameConflict::clear_has_gcnetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NicknameConflict::clear_gcnetid() {
  gcnetid_ = 0;
  clear_has_gcnetid();
}
inline ::google::protobuf::int32 NicknameConflict::gcnetid() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.gcnetid)
  return gcnetid_;
}
inline void NicknameConflict::set_gcnetid(::google::protobuf::int32 value) {
  set_has_gcnetid();
  gcnetid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.gcnetid)
}

// optional uint64 guid = 5;
inline bool NicknameConflict::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NicknameConflict::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NicknameConflict::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NicknameConflict::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 NicknameConflict::guid() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.guid)
  return guid_;
}
inline void NicknameConflict::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.guid)
}

// optional int32 sdkid = 6;
inline bool NicknameConflict::has_sdkid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NicknameConflict::set_has_sdkid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NicknameConflict::clear_has_sdkid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NicknameConflict::clear_sdkid() {
  sdkid_ = 0;
  clear_has_sdkid();
}
inline ::google::protobuf::int32 NicknameConflict::sdkid() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.sdkid)
  return sdkid_;
}
inline void NicknameConflict::set_sdkid(::google::protobuf::int32 value) {
  set_has_sdkid();
  sdkid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.sdkid)
}

// optional int32 csid = 7;
inline bool NicknameConflict::has_csid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NicknameConflict::set_has_csid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NicknameConflict::clear_has_csid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NicknameConflict::clear_csid() {
  csid_ = 0;
  clear_has_csid();
}
inline ::google::protobuf::int32 NicknameConflict::csid() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.csid)
  return csid_;
}
inline void NicknameConflict::set_csid(::google::protobuf::int32 value) {
  set_has_csid();
  csid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.csid)
}

// optional string cdk = 8;
inline bool NicknameConflict::has_cdk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NicknameConflict::set_has_cdk() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NicknameConflict::clear_has_cdk() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NicknameConflict::clear_cdk() {
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_->clear();
  }
  clear_has_cdk();
}
inline const ::std::string& NicknameConflict::cdk() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.cdk)
  return *cdk_;
}
inline void NicknameConflict::set_cdk(const ::std::string& value) {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  cdk_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.cdk)
}
inline void NicknameConflict::set_cdk(const char* value) {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  cdk_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.NicknameConflict.cdk)
}
inline void NicknameConflict::set_cdk(const char* value, size_t size) {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  cdk_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.NicknameConflict.cdk)
}
inline ::std::string* NicknameConflict::mutable_cdk() {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.NicknameConflict.cdk)
  return cdk_;
}
inline ::std::string* NicknameConflict::release_cdk() {
  clear_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cdk_;
    cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NicknameConflict::set_allocated_cdk(::std::string* cdk) {
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdk_;
  }
  if (cdk) {
    set_has_cdk();
    cdk_ = cdk;
  } else {
    clear_has_cdk();
    cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.NicknameConflict.cdk)
}

// optional string oldnickname = 9;
inline bool NicknameConflict::has_oldnickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NicknameConflict::set_has_oldnickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NicknameConflict::clear_has_oldnickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NicknameConflict::clear_oldnickname() {
  if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_->clear();
  }
  clear_has_oldnickname();
}
inline const ::std::string& NicknameConflict::oldnickname() const {
  // @@protoc_insertion_point(field_get:CSToDB.NicknameConflict.oldnickname)
  return *oldnickname_;
}
inline void NicknameConflict::set_oldnickname(const ::std::string& value) {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  oldnickname_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.NicknameConflict.oldnickname)
}
inline void NicknameConflict::set_oldnickname(const char* value) {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  oldnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.NicknameConflict.oldnickname)
}
inline void NicknameConflict::set_oldnickname(const char* value, size_t size) {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  oldnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.NicknameConflict.oldnickname)
}
inline ::std::string* NicknameConflict::mutable_oldnickname() {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.NicknameConflict.oldnickname)
  return oldnickname_;
}
inline ::std::string* NicknameConflict::release_oldnickname() {
  clear_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oldnickname_;
    oldnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NicknameConflict::set_allocated_oldnickname(::std::string* oldnickname) {
  if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldnickname_;
  }
  if (oldnickname) {
    set_has_oldnickname();
    oldnickname_ = oldnickname;
  } else {
    clear_has_oldnickname();
    oldnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.NicknameConflict.oldnickname)
}

// -------------------------------------------------------------------

// BuyGoods

// optional .CSToDB.MsgID mgsid = 1 [default = eBuyGoods_DBCallBack];
inline bool BuyGoods::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyGoods::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyGoods::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyGoods::clear_mgsid() {
  mgsid_ = 106;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID BuyGoods::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.BuyGoods.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void BuyGoods::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.BuyGoods.mgsid)
}

// optional string buygoodsmag = 2;
inline bool BuyGoods::has_buygoodsmag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyGoods::set_has_buygoodsmag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyGoods::clear_has_buygoodsmag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyGoods::clear_buygoodsmag() {
  if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_->clear();
  }
  clear_has_buygoodsmag();
}
inline const ::std::string& BuyGoods::buygoodsmag() const {
  // @@protoc_insertion_point(field_get:CSToDB.BuyGoods.buygoodsmag)
  return *buygoodsmag_;
}
inline void BuyGoods::set_buygoodsmag(const ::std::string& value) {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  buygoodsmag_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.BuyGoods.buygoodsmag)
}
inline void BuyGoods::set_buygoodsmag(const char* value) {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  buygoodsmag_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.BuyGoods.buygoodsmag)
}
inline void BuyGoods::set_buygoodsmag(const char* value, size_t size) {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  buygoodsmag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.BuyGoods.buygoodsmag)
}
inline ::std::string* BuyGoods::mutable_buygoodsmag() {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.BuyGoods.buygoodsmag)
  return buygoodsmag_;
}
inline ::std::string* BuyGoods::release_buygoodsmag() {
  clear_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buygoodsmag_;
    buygoodsmag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuyGoods::set_allocated_buygoodsmag(::std::string* buygoodsmag) {
  if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buygoodsmag_;
  }
  if (buygoodsmag) {
    set_has_buygoodsmag();
    buygoodsmag_ = buygoodsmag;
  } else {
    clear_has_buygoodsmag();
    buygoodsmag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.BuyGoods.buygoodsmag)
}

// -------------------------------------------------------------------

// GameMailInfo

// optional .CSToDB.MailType type = 1;
inline bool GameMailInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameMailInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameMailInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameMailInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::CSToDB::MailType GameMailInfo::type() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.type)
  return static_cast< ::CSToDB::MailType >(type_);
}
inline void GameMailInfo::set_type(::CSToDB::MailType value) {
  assert(::CSToDB::MailType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.type)
}

// optional int32 mailId = 2;
inline bool GameMailInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameMailInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameMailInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameMailInfo::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 GameMailInfo::mailid() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.mailId)
  return mailid_;
}
inline void GameMailInfo::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.mailId)
}

// optional int64 userid = 3;
inline bool GameMailInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameMailInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameMailInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameMailInfo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 GameMailInfo::userid() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.userid)
  return userid_;
}
inline void GameMailInfo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.userid)
}

// optional .CSToDB.EMailCurtState curtstate = 4;
inline bool GameMailInfo::has_curtstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameMailInfo::set_has_curtstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameMailInfo::clear_has_curtstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameMailInfo::clear_curtstate() {
  curtstate_ = 0;
  clear_has_curtstate();
}
inline ::CSToDB::EMailCurtState GameMailInfo::curtstate() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.curtstate)
  return static_cast< ::CSToDB::EMailCurtState >(curtstate_);
}
inline void GameMailInfo::set_curtstate(::CSToDB::EMailCurtState value) {
  assert(::CSToDB::EMailCurtState_IsValid(value));
  set_has_curtstate();
  curtstate_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.curtstate)
}

// optional int32 sdkidx = 5;
inline bool GameMailInfo::has_sdkidx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameMailInfo::set_has_sdkidx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameMailInfo::clear_has_sdkidx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameMailInfo::clear_sdkidx() {
  sdkidx_ = 0;
  clear_has_sdkidx();
}
inline ::google::protobuf::int32 GameMailInfo::sdkidx() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.sdkidx)
  return sdkidx_;
}
inline void GameMailInfo::set_sdkidx(::google::protobuf::int32 value) {
  set_has_sdkidx();
  sdkidx_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.sdkidx)
}

// optional string title = 6;
inline bool GameMailInfo::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameMailInfo::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameMailInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameMailInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& GameMailInfo::title() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.title)
  return *title_;
}
inline void GameMailInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.title)
}
inline void GameMailInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.GameMailInfo.title)
}
inline void GameMailInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.GameMailInfo.title)
}
inline ::std::string* GameMailInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.GameMailInfo.title)
  return title_;
}
inline ::std::string* GameMailInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameMailInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.GameMailInfo.title)
}

// optional string content = 7;
inline bool GameMailInfo::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameMailInfo::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameMailInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameMailInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GameMailInfo::content() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.content)
  return *content_;
}
inline void GameMailInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.content)
}
inline void GameMailInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.GameMailInfo.content)
}
inline void GameMailInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.GameMailInfo.content)
}
inline ::std::string* GameMailInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.GameMailInfo.content)
  return content_;
}
inline ::std::string* GameMailInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameMailInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.GameMailInfo.content)
}

// optional string giftstr = 8;
inline bool GameMailInfo::has_giftstr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameMailInfo::set_has_giftstr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameMailInfo::clear_has_giftstr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameMailInfo::clear_giftstr() {
  if (giftstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    giftstr_->clear();
  }
  clear_has_giftstr();
}
inline const ::std::string& GameMailInfo::giftstr() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.giftstr)
  return *giftstr_;
}
inline void GameMailInfo::set_giftstr(const ::std::string& value) {
  set_has_giftstr();
  if (giftstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    giftstr_ = new ::std::string;
  }
  giftstr_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.giftstr)
}
inline void GameMailInfo::set_giftstr(const char* value) {
  set_has_giftstr();
  if (giftstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    giftstr_ = new ::std::string;
  }
  giftstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.GameMailInfo.giftstr)
}
inline void GameMailInfo::set_giftstr(const char* value, size_t size) {
  set_has_giftstr();
  if (giftstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    giftstr_ = new ::std::string;
  }
  giftstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.GameMailInfo.giftstr)
}
inline ::std::string* GameMailInfo::mutable_giftstr() {
  set_has_giftstr();
  if (giftstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    giftstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.GameMailInfo.giftstr)
  return giftstr_;
}
inline ::std::string* GameMailInfo::release_giftstr() {
  clear_has_giftstr();
  if (giftstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = giftstr_;
    giftstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameMailInfo::set_allocated_giftstr(::std::string* giftstr) {
  if (giftstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete giftstr_;
  }
  if (giftstr) {
    set_has_giftstr();
    giftstr_ = giftstr;
  } else {
    clear_has_giftstr();
    giftstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.GameMailInfo.giftstr)
}

// optional string createtime = 9;
inline bool GameMailInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameMailInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameMailInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameMailInfo::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& GameMailInfo::createtime() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.createtime)
  return *createtime_;
}
inline void GameMailInfo::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.createtime)
}
inline void GameMailInfo::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.GameMailInfo.createtime)
}
inline void GameMailInfo::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.GameMailInfo.createtime)
}
inline ::std::string* GameMailInfo::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.GameMailInfo.createtime)
  return createtime_;
}
inline ::std::string* GameMailInfo::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameMailInfo::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.GameMailInfo.createtime)
}

// optional string overtime = 10;
inline bool GameMailInfo::has_overtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameMailInfo::set_has_overtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameMailInfo::clear_has_overtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameMailInfo::clear_overtime() {
  if (overtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overtime_->clear();
  }
  clear_has_overtime();
}
inline const ::std::string& GameMailInfo::overtime() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.overtime)
  return *overtime_;
}
inline void GameMailInfo::set_overtime(const ::std::string& value) {
  set_has_overtime();
  if (overtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overtime_ = new ::std::string;
  }
  overtime_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.overtime)
}
inline void GameMailInfo::set_overtime(const char* value) {
  set_has_overtime();
  if (overtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overtime_ = new ::std::string;
  }
  overtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.GameMailInfo.overtime)
}
inline void GameMailInfo::set_overtime(const char* value, size_t size) {
  set_has_overtime();
  if (overtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overtime_ = new ::std::string;
  }
  overtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.GameMailInfo.overtime)
}
inline ::std::string* GameMailInfo::mutable_overtime() {
  set_has_overtime();
  if (overtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    overtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.GameMailInfo.overtime)
  return overtime_;
}
inline ::std::string* GameMailInfo::release_overtime() {
  clear_has_overtime();
  if (overtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = overtime_;
    overtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameMailInfo::set_allocated_overtime(::std::string* overtime) {
  if (overtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete overtime_;
  }
  if (overtime) {
    set_has_overtime();
    overtime_ = overtime;
  } else {
    clear_has_overtime();
    overtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.GameMailInfo.overtime)
}

// optional string sender = 11;
inline bool GameMailInfo::has_sender() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameMailInfo::set_has_sender() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameMailInfo::clear_has_sender() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameMailInfo::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& GameMailInfo::sender() const {
  // @@protoc_insertion_point(field_get:CSToDB.GameMailInfo.sender)
  return *sender_;
}
inline void GameMailInfo::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.GameMailInfo.sender)
}
inline void GameMailInfo::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.GameMailInfo.sender)
}
inline void GameMailInfo::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.GameMailInfo.sender)
}
inline ::std::string* GameMailInfo::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.GameMailInfo.sender)
  return sender_;
}
inline ::std::string* GameMailInfo::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameMailInfo::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.GameMailInfo.sender)
}

// -------------------------------------------------------------------

// UpdateGameMail

// optional .CSToDB.MsgID mgsid = 1 [default = eUpdateGameMail_DBCallBack];
inline bool UpdateGameMail::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateGameMail::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateGameMail::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateGameMail::clear_mgsid() {
  mgsid_ = 105;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID UpdateGameMail::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateGameMail.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void UpdateGameMail::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateGameMail.mgsid)
}

// repeated .CSToDB.GameMailInfo maillist = 2;
inline int UpdateGameMail::maillist_size() const {
  return maillist_.size();
}
inline void UpdateGameMail::clear_maillist() {
  maillist_.Clear();
}
inline const ::CSToDB::GameMailInfo& UpdateGameMail::maillist(int index) const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateGameMail.maillist)
  return maillist_.Get(index);
}
inline ::CSToDB::GameMailInfo* UpdateGameMail::mutable_maillist(int index) {
  // @@protoc_insertion_point(field_mutable:CSToDB.UpdateGameMail.maillist)
  return maillist_.Mutable(index);
}
inline ::CSToDB::GameMailInfo* UpdateGameMail::add_maillist() {
  // @@protoc_insertion_point(field_add:CSToDB.UpdateGameMail.maillist)
  return maillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToDB::GameMailInfo >&
UpdateGameMail::maillist() const {
  // @@protoc_insertion_point(field_list:CSToDB.UpdateGameMail.maillist)
  return maillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToDB::GameMailInfo >*
UpdateGameMail::mutable_maillist() {
  // @@protoc_insertion_point(field_mutable_list:CSToDB.UpdateGameMail.maillist)
  return &maillist_;
}

// -------------------------------------------------------------------

// InsertUser

// optional .CSToDB.MsgID mgsid = 1 [default = eInsertUser_DBCallBack];
inline bool InsertUser::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsertUser::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsertUser::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsertUser::clear_mgsid() {
  mgsid_ = 104;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID InsertUser::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertUser.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void InsertUser::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.InsertUser.mgsid)
}

// optional int64 guid = 2;
inline bool InsertUser::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsertUser::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsertUser::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsertUser::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 InsertUser::guid() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertUser.guid)
  return guid_;
}
inline void InsertUser::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.InsertUser.guid)
}

// optional string sqlstr = 3;
inline bool InsertUser::has_sqlstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InsertUser::set_has_sqlstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InsertUser::clear_has_sqlstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InsertUser::clear_sqlstr() {
  if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_->clear();
  }
  clear_has_sqlstr();
}
inline const ::std::string& InsertUser::sqlstr() const {
  // @@protoc_insertion_point(field_get:CSToDB.InsertUser.sqlstr)
  return *sqlstr_;
}
inline void InsertUser::set_sqlstr(const ::std::string& value) {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  sqlstr_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.InsertUser.sqlstr)
}
inline void InsertUser::set_sqlstr(const char* value) {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  sqlstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.InsertUser.sqlstr)
}
inline void InsertUser::set_sqlstr(const char* value, size_t size) {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  sqlstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.InsertUser.sqlstr)
}
inline ::std::string* InsertUser::mutable_sqlstr() {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.InsertUser.sqlstr)
  return sqlstr_;
}
inline ::std::string* InsertUser::release_sqlstr() {
  clear_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sqlstr_;
    sqlstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InsertUser::set_allocated_sqlstr(::std::string* sqlstr) {
  if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sqlstr_;
  }
  if (sqlstr) {
    set_has_sqlstr();
    sqlstr_ = sqlstr;
  } else {
    clear_has_sqlstr();
    sqlstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.InsertUser.sqlstr)
}

// -------------------------------------------------------------------

// UpdateUser

// optional .CSToDB.MsgID mgsid = 1 [default = eUpdateUser_DBCallBack];
inline bool UpdateUser::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateUser::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateUser::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateUser::clear_mgsid() {
  mgsid_ = 103;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID UpdateUser::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUser.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void UpdateUser::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUser.mgsid)
}

// optional int64 guid = 2;
inline bool UpdateUser::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateUser::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateUser::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateUser::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 UpdateUser::guid() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUser.guid)
  return guid_;
}
inline void UpdateUser::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUser.guid)
}

// optional string sqlstr = 3;
inline bool UpdateUser::has_sqlstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateUser::set_has_sqlstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateUser::clear_has_sqlstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateUser::clear_sqlstr() {
  if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_->clear();
  }
  clear_has_sqlstr();
}
inline const ::std::string& UpdateUser::sqlstr() const {
  // @@protoc_insertion_point(field_get:CSToDB.UpdateUser.sqlstr)
  return *sqlstr_;
}
inline void UpdateUser::set_sqlstr(const ::std::string& value) {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  sqlstr_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.UpdateUser.sqlstr)
}
inline void UpdateUser::set_sqlstr(const char* value) {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  sqlstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.UpdateUser.sqlstr)
}
inline void UpdateUser::set_sqlstr(const char* value, size_t size) {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  sqlstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.UpdateUser.sqlstr)
}
inline ::std::string* UpdateUser::mutable_sqlstr() {
  set_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sqlstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.UpdateUser.sqlstr)
  return sqlstr_;
}
inline ::std::string* UpdateUser::release_sqlstr() {
  clear_has_sqlstr();
  if (sqlstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sqlstr_;
    sqlstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateUser::set_allocated_sqlstr(::std::string* sqlstr) {
  if (sqlstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sqlstr_;
  }
  if (sqlstr) {
    set_has_sqlstr();
    sqlstr_ = sqlstr;
  } else {
    clear_has_sqlstr();
    sqlstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.UpdateUser.sqlstr)
}

// -------------------------------------------------------------------

// CheckNameReq

// optional .CSToDB.MsgID mgsid = 1 [default = eCheckNickNameDBCallBack];
inline bool CheckNameReq::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNameReq::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNameReq::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNameReq::clear_mgsid() {
  mgsid_ = 100;
  clear_has_mgsid();
}
inline ::CSToDB::MsgID CheckNameReq::mgsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.mgsid)
  return static_cast< ::CSToDB::MsgID >(mgsid_);
}
inline void CheckNameReq::set_mgsid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.mgsid)
}

// optional int32 gsid = 2;
inline bool CheckNameReq::has_gsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckNameReq::set_has_gsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckNameReq::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckNameReq::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 CheckNameReq::gsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.gsid)
  return gsid_;
}
inline void CheckNameReq::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.gsid)
}

// optional int32 gcnetid = 3;
inline bool CheckNameReq::has_gcnetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckNameReq::set_has_gcnetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckNameReq::clear_has_gcnetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckNameReq::clear_gcnetid() {
  gcnetid_ = 0;
  clear_has_gcnetid();
}
inline ::google::protobuf::int32 CheckNameReq::gcnetid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.gcnetid)
  return gcnetid_;
}
inline void CheckNameReq::set_gcnetid(::google::protobuf::int32 value) {
  set_has_gcnetid();
  gcnetid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.gcnetid)
}

// optional int32 gsnetid = 4;
inline bool CheckNameReq::has_gsnetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckNameReq::set_has_gsnetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckNameReq::clear_has_gsnetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckNameReq::clear_gsnetid() {
  gsnetid_ = 0;
  clear_has_gsnetid();
}
inline ::google::protobuf::int32 CheckNameReq::gsnetid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.gsnetid)
  return gsnetid_;
}
inline void CheckNameReq::set_gsnetid(::google::protobuf::int32 value) {
  set_has_gsnetid();
  gsnetid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.gsnetid)
}

// optional int32 sdkid = 5;
inline bool CheckNameReq::has_sdkid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckNameReq::set_has_sdkid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckNameReq::clear_has_sdkid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckNameReq::clear_sdkid() {
  sdkid_ = 0;
  clear_has_sdkid();
}
inline ::google::protobuf::int32 CheckNameReq::sdkid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.sdkid)
  return sdkid_;
}
inline void CheckNameReq::set_sdkid(::google::protobuf::int32 value) {
  set_has_sdkid();
  sdkid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.sdkid)
}

// optional int32 csid = 6;
inline bool CheckNameReq::has_csid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckNameReq::set_has_csid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckNameReq::clear_has_csid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckNameReq::clear_csid() {
  csid_ = 0;
  clear_has_csid();
}
inline ::google::protobuf::int32 CheckNameReq::csid() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.csid)
  return csid_;
}
inline void CheckNameReq::set_csid(::google::protobuf::int32 value) {
  set_has_csid();
  csid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.csid)
}

// optional string cdk = 7;
inline bool CheckNameReq::has_cdk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CheckNameReq::set_has_cdk() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CheckNameReq::clear_has_cdk() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CheckNameReq::clear_cdk() {
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_->clear();
  }
  clear_has_cdk();
}
inline const ::std::string& CheckNameReq::cdk() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.cdk)
  return *cdk_;
}
inline void CheckNameReq::set_cdk(const ::std::string& value) {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  cdk_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.cdk)
}
inline void CheckNameReq::set_cdk(const char* value) {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  cdk_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.CheckNameReq.cdk)
}
inline void CheckNameReq::set_cdk(const char* value, size_t size) {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  cdk_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.CheckNameReq.cdk)
}
inline ::std::string* CheckNameReq::mutable_cdk() {
  set_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cdk_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.CheckNameReq.cdk)
  return cdk_;
}
inline ::std::string* CheckNameReq::release_cdk() {
  clear_has_cdk();
  if (cdk_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cdk_;
    cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckNameReq::set_allocated_cdk(::std::string* cdk) {
  if (cdk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdk_;
  }
  if (cdk) {
    set_has_cdk();
    cdk_ = cdk;
  } else {
    clear_has_cdk();
    cdk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.CheckNameReq.cdk)
}

// optional string completeInfo = 8;
inline bool CheckNameReq::has_completeinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CheckNameReq::set_has_completeinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CheckNameReq::clear_has_completeinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CheckNameReq::clear_completeinfo() {
  if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_->clear();
  }
  clear_has_completeinfo();
}
inline const ::std::string& CheckNameReq::completeinfo() const {
  // @@protoc_insertion_point(field_get:CSToDB.CheckNameReq.completeInfo)
  return *completeinfo_;
}
inline void CheckNameReq::set_completeinfo(const ::std::string& value) {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  completeinfo_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.CheckNameReq.completeInfo)
}
inline void CheckNameReq::set_completeinfo(const char* value) {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  completeinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.CheckNameReq.completeInfo)
}
inline void CheckNameReq::set_completeinfo(const char* value, size_t size) {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  completeinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.CheckNameReq.completeInfo)
}
inline ::std::string* CheckNameReq::mutable_completeinfo() {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.CheckNameReq.completeInfo)
  return completeinfo_;
}
inline ::std::string* CheckNameReq::release_completeinfo() {
  clear_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = completeinfo_;
    completeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckNameReq::set_allocated_completeinfo(::std::string* completeinfo) {
  if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete completeinfo_;
  }
  if (completeinfo) {
    set_has_completeinfo();
    completeinfo_ = completeinfo;
  } else {
    clear_has_completeinfo();
    completeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.CheckNameReq.completeInfo)
}

// -------------------------------------------------------------------

// QueryUserReq

// optional .CSToDB.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
inline bool QueryUserReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserReq::clear_msgid() {
  msgid_ = 101;
  clear_has_msgid();
}
inline ::CSToDB::MsgID QueryUserReq::msgid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.msgid)
  return static_cast< ::CSToDB::MsgID >(msgid_);
}
inline void QueryUserReq::set_msgid(::CSToDB::MsgID value) {
  assert(::CSToDB::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.msgid)
}

// optional string Logininfo = 2;
inline bool QueryUserReq::has_logininfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserReq::set_has_logininfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserReq::clear_has_logininfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserReq::clear_logininfo() {
  if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_->clear();
  }
  clear_has_logininfo();
}
inline const ::std::string& QueryUserReq::logininfo() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.Logininfo)
  return *logininfo_;
}
inline void QueryUserReq::set_logininfo(const ::std::string& value) {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  logininfo_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.Logininfo)
}
inline void QueryUserReq::set_logininfo(const char* value) {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  logininfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.QueryUserReq.Logininfo)
}
inline void QueryUserReq::set_logininfo(const char* value, size_t size) {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  logininfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.QueryUserReq.Logininfo)
}
inline ::std::string* QueryUserReq::mutable_logininfo() {
  set_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logininfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.QueryUserReq.Logininfo)
  return logininfo_;
}
inline ::std::string* QueryUserReq::release_logininfo() {
  clear_has_logininfo();
  if (logininfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logininfo_;
    logininfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserReq::set_allocated_logininfo(::std::string* logininfo) {
  if (logininfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logininfo_;
  }
  if (logininfo) {
    set_has_logininfo();
    logininfo_ = logininfo;
  } else {
    clear_has_logininfo();
    logininfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.QueryUserReq.Logininfo)
}

// optional int32 gsid = 3;
inline bool QueryUserReq::has_gsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryUserReq::set_has_gsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryUserReq::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryUserReq::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 QueryUserReq::gsid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.gsid)
  return gsid_;
}
inline void QueryUserReq::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.gsid)
}

// optional int32 gcnetid = 4;
inline bool QueryUserReq::has_gcnetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryUserReq::set_has_gcnetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryUserReq::clear_has_gcnetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryUserReq::clear_gcnetid() {
  gcnetid_ = 0;
  clear_has_gcnetid();
}
inline ::google::protobuf::int32 QueryUserReq::gcnetid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.gcnetid)
  return gcnetid_;
}
inline void QueryUserReq::set_gcnetid(::google::protobuf::int32 value) {
  set_has_gcnetid();
  gcnetid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.gcnetid)
}

// optional int32 csid = 5;
inline bool QueryUserReq::has_csid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryUserReq::set_has_csid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryUserReq::clear_has_csid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryUserReq::clear_csid() {
  csid_ = 0;
  clear_has_csid();
}
inline ::google::protobuf::int32 QueryUserReq::csid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.csid)
  return csid_;
}
inline void QueryUserReq::set_csid(::google::protobuf::int32 value) {
  set_has_csid();
  csid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.csid)
}

// optional int64 objid = 6;
inline bool QueryUserReq::has_objid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryUserReq::set_has_objid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryUserReq::clear_has_objid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryUserReq::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 QueryUserReq::objid() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.objid)
  return objid_;
}
inline void QueryUserReq::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.objid)
}

// optional string uname = 7;
inline bool QueryUserReq::has_uname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryUserReq::set_has_uname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryUserReq::clear_has_uname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryUserReq::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& QueryUserReq::uname() const {
  // @@protoc_insertion_point(field_get:CSToDB.QueryUserReq.uname)
  return *uname_;
}
inline void QueryUserReq::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:CSToDB.QueryUserReq.uname)
}
inline void QueryUserReq::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToDB.QueryUserReq.uname)
}
inline void QueryUserReq::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToDB.QueryUserReq.uname)
}
inline ::std::string* QueryUserReq::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToDB.QueryUserReq.uname)
  return uname_;
}
inline ::std::string* QueryUserReq::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserReq::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToDB.QueryUserReq.uname)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSToDB

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CSToDB::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSToDB::MsgID>() {
  return ::CSToDB::MsgID_descriptor();
}
template <> struct is_proto_enum< ::CSToDB::MailType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSToDB::MailType>() {
  return ::CSToDB::MailType_descriptor();
}
template <> struct is_proto_enum< ::CSToDB::EMailCurtState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSToDB::EMailCurtState>() {
  return ::CSToDB::EMailCurtState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSToDB_2eproto__INCLUDED
