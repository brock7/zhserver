// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LSToGC.proto

#ifndef PROTOBUF_LSToGC_2eproto__INCLUDED
#define PROTOBUF_LSToGC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LSToGC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LSToGC_2eproto();
void protobuf_AssignDesc_LSToGC_2eproto();
void protobuf_ShutdownFile_LSToGC_2eproto();

class LoginResult;
class ServerInfo;
class ServerBSAddr;

enum MsgID {
  eMsgToGCFromLS_NotifyLoginResult = 512,
  eMsgToGCFromLS_NotifyServerBSAddr = 513
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgToGCFromLS_NotifyLoginResult;
const MsgID MsgID_MAX = eMsgToGCFromLS_NotifyServerBSAddr;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class LoginResult : public ::google::protobuf::Message {
 public:
  LoginResult();
  virtual ~LoginResult();

  LoginResult(const LoginResult& from);

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResult& default_instance();

  void Swap(LoginResult* other);

  // implements Message ----------------------------------------------

  LoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyLoginResult];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::LSToGC::MsgID msgid() const;
  inline void set_msgid(::LSToGC::MsgID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LSToGC.LoginResult)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_LSToGC_2eproto();
  friend void protobuf_AssignDesc_LSToGC_2eproto();
  friend void protobuf_ShutdownFile_LSToGC_2eproto();

  void InitAsDefaultInstance();
  static LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerName = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // optional string ServerAddr = 2;
  inline bool has_serveraddr() const;
  inline void clear_serveraddr();
  static const int kServerAddrFieldNumber = 2;
  inline const ::std::string& serveraddr() const;
  inline void set_serveraddr(const ::std::string& value);
  inline void set_serveraddr(const char* value);
  inline void set_serveraddr(const char* value, size_t size);
  inline ::std::string* mutable_serveraddr();
  inline ::std::string* release_serveraddr();
  inline void set_allocated_serveraddr(::std::string* serveraddr);

  // optional int32 ServerPort = 3;
  inline bool has_serverport() const;
  inline void clear_serverport();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::int32 serverport() const;
  inline void set_serverport(::google::protobuf::int32 value);

  // optional int32 ServerState = 4;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerStateFieldNumber = 4;
  inline ::google::protobuf::int32 serverstate() const;
  inline void set_serverstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LSToGC.ServerInfo)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serveraddr();
  inline void clear_has_serveraddr();
  inline void set_has_serverport();
  inline void clear_has_serverport();
  inline void set_has_serverstate();
  inline void clear_has_serverstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servername_;
  ::std::string* serveraddr_;
  ::google::protobuf::int32 serverport_;
  ::google::protobuf::int32 serverstate_;
  friend void  protobuf_AddDesc_LSToGC_2eproto();
  friend void protobuf_AssignDesc_LSToGC_2eproto();
  friend void protobuf_ShutdownFile_LSToGC_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerBSAddr : public ::google::protobuf::Message {
 public:
  ServerBSAddr();
  virtual ~ServerBSAddr();

  ServerBSAddr(const ServerBSAddr& from);

  inline ServerBSAddr& operator=(const ServerBSAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerBSAddr& default_instance();

  void Swap(ServerBSAddr* other);

  // implements Message ----------------------------------------------

  ServerBSAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerBSAddr& from);
  void MergeFrom(const ServerBSAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyServerBSAddr];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::LSToGC::MsgID msgid() const;
  inline void set_msgid(::LSToGC::MsgID value);

  // repeated .LSToGC.ServerInfo serverinfo = 2;
  inline int serverinfo_size() const;
  inline void clear_serverinfo();
  static const int kServerinfoFieldNumber = 2;
  inline const ::LSToGC::ServerInfo& serverinfo(int index) const;
  inline ::LSToGC::ServerInfo* mutable_serverinfo(int index);
  inline ::LSToGC::ServerInfo* add_serverinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::LSToGC::ServerInfo >&
      serverinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::LSToGC::ServerInfo >*
      mutable_serverinfo();

  // @@protoc_insertion_point(class_scope:LSToGC.ServerBSAddr)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::LSToGC::ServerInfo > serverinfo_;
  int msgid_;
  friend void  protobuf_AddDesc_LSToGC_2eproto();
  friend void protobuf_AssignDesc_LSToGC_2eproto();
  friend void protobuf_ShutdownFile_LSToGC_2eproto();

  void InitAsDefaultInstance();
  static ServerBSAddr* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginResult

// optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyLoginResult];
inline bool LoginResult::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResult::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResult::clear_msgid() {
  msgid_ = 512;
  clear_has_msgid();
}
inline ::LSToGC::MsgID LoginResult::msgid() const {
  // @@protoc_insertion_point(field_get:LSToGC.LoginResult.msgid)
  return static_cast< ::LSToGC::MsgID >(msgid_);
}
inline void LoginResult::set_msgid(::LSToGC::MsgID value) {
  assert(::LSToGC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:LSToGC.LoginResult.msgid)
}

// optional int32 result = 2;
inline bool LoginResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginResult::result() const {
  // @@protoc_insertion_point(field_get:LSToGC.LoginResult.result)
  return result_;
}
inline void LoginResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LSToGC.LoginResult.result)
}

// -------------------------------------------------------------------

// ServerInfo

// optional string ServerName = 1;
inline bool ServerInfo::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_servername() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& ServerInfo::servername() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerName)
  return *servername_;
}
inline void ServerInfo::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerName)
}
inline void ServerInfo::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set_char:LSToGC.ServerInfo.ServerName)
}
inline void ServerInfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LSToGC.ServerInfo.ServerName)
}
inline ::std::string* ServerInfo::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LSToGC.ServerInfo.ServerName)
  return servername_;
}
inline ::std::string* ServerInfo::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LSToGC.ServerInfo.ServerName)
}

// optional string ServerAddr = 2;
inline bool ServerInfo::has_serveraddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_serveraddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_serveraddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_serveraddr() {
  if (serveraddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddr_->clear();
  }
  clear_has_serveraddr();
}
inline const ::std::string& ServerInfo::serveraddr() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerAddr)
  return *serveraddr_;
}
inline void ServerInfo::set_serveraddr(const ::std::string& value) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(value);
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerAddr)
}
inline void ServerInfo::set_serveraddr(const char* value) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(value);
  // @@protoc_insertion_point(field_set_char:LSToGC.ServerInfo.ServerAddr)
}
inline void ServerInfo::set_serveraddr(const char* value, size_t size) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LSToGC.ServerInfo.ServerAddr)
}
inline ::std::string* ServerInfo::mutable_serveraddr() {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LSToGC.ServerInfo.ServerAddr)
  return serveraddr_;
}
inline ::std::string* ServerInfo::release_serveraddr() {
  clear_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serveraddr_;
    serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo::set_allocated_serveraddr(::std::string* serveraddr) {
  if (serveraddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serveraddr_;
  }
  if (serveraddr) {
    set_has_serveraddr();
    serveraddr_ = serveraddr;
  } else {
    clear_has_serveraddr();
    serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LSToGC.ServerInfo.ServerAddr)
}

// optional int32 ServerPort = 3;
inline bool ServerInfo::has_serverport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_serverport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_serverport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_serverport() {
  serverport_ = 0;
  clear_has_serverport();
}
inline ::google::protobuf::int32 ServerInfo::serverport() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerPort)
  return serverport_;
}
inline void ServerInfo::set_serverport(::google::protobuf::int32 value) {
  set_has_serverport();
  serverport_ = value;
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerPort)
}

// optional int32 ServerState = 4;
inline bool ServerInfo::has_serverstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_serverstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_serverstate() {
  serverstate_ = 0;
  clear_has_serverstate();
}
inline ::google::protobuf::int32 ServerInfo::serverstate() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerState)
  return serverstate_;
}
inline void ServerInfo::set_serverstate(::google::protobuf::int32 value) {
  set_has_serverstate();
  serverstate_ = value;
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerState)
}

// -------------------------------------------------------------------

// ServerBSAddr

// optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyServerBSAddr];
inline bool ServerBSAddr::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerBSAddr::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerBSAddr::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerBSAddr::clear_msgid() {
  msgid_ = 513;
  clear_has_msgid();
}
inline ::LSToGC::MsgID ServerBSAddr::msgid() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerBSAddr.msgid)
  return static_cast< ::LSToGC::MsgID >(msgid_);
}
inline void ServerBSAddr::set_msgid(::LSToGC::MsgID value) {
  assert(::LSToGC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:LSToGC.ServerBSAddr.msgid)
}

// repeated .LSToGC.ServerInfo serverinfo = 2;
inline int ServerBSAddr::serverinfo_size() const {
  return serverinfo_.size();
}
inline void ServerBSAddr::clear_serverinfo() {
  serverinfo_.Clear();
}
inline const ::LSToGC::ServerInfo& ServerBSAddr::serverinfo(int index) const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerBSAddr.serverinfo)
  return serverinfo_.Get(index);
}
inline ::LSToGC::ServerInfo* ServerBSAddr::mutable_serverinfo(int index) {
  // @@protoc_insertion_point(field_mutable:LSToGC.ServerBSAddr.serverinfo)
  return serverinfo_.Mutable(index);
}
inline ::LSToGC::ServerInfo* ServerBSAddr::add_serverinfo() {
  // @@protoc_insertion_point(field_add:LSToGC.ServerBSAddr.serverinfo)
  return serverinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LSToGC::ServerInfo >&
ServerBSAddr::serverinfo() const {
  // @@protoc_insertion_point(field_list:LSToGC.ServerBSAddr.serverinfo)
  return serverinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::LSToGC::ServerInfo >*
ServerBSAddr::mutable_serverinfo() {
  // @@protoc_insertion_point(field_mutable_list:LSToGC.ServerBSAddr.serverinfo)
  return &serverinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LSToGC

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LSToGC::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LSToGC::MsgID>() {
  return ::LSToGC::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LSToGC_2eproto__INCLUDED
