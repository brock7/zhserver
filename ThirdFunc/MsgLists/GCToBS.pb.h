// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GCToBS.proto

#ifndef PROTOBUF_GCToBS_2eproto__INCLUDED
#define PROTOBUF_GCToBS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GCToBS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GCToBS_2eproto();
void protobuf_AssignDesc_GCToBS_2eproto();
void protobuf_ShutdownFile_GCToBS_2eproto();

class AskGateAddress;
class OneClinetLogin;

enum MsgNum {
  eMsgToBSFromGC_Begin = 32768,
  eMsgToBSFromGC_AskGateAddress = 32769,
  eMsgToBSFromGC_OneClinetLogin = 32770,
  eMsgToBSFromGC_End = 33000
};
bool MsgNum_IsValid(int value);
const MsgNum MsgNum_MIN = eMsgToBSFromGC_Begin;
const MsgNum MsgNum_MAX = eMsgToBSFromGC_End;
const int MsgNum_ARRAYSIZE = MsgNum_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgNum_descriptor();
inline const ::std::string& MsgNum_Name(MsgNum value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgNum_descriptor(), value);
}
inline bool MsgNum_Parse(
    const ::std::string& name, MsgNum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgNum>(
    MsgNum_descriptor(), name, value);
}
// ===================================================================

class AskGateAddress : public ::google::protobuf::Message {
 public:
  AskGateAddress();
  virtual ~AskGateAddress();

  AskGateAddress(const AskGateAddress& from);

  inline AskGateAddress& operator=(const AskGateAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskGateAddress& default_instance();

  void Swap(AskGateAddress* other);

  // implements Message ----------------------------------------------

  AskGateAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskGateAddress& from);
  void MergeFrom(const AskGateAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_AskGateAddress];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToBS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToBS::MsgNum value);

  // optional int32 plat = 2;
  inline bool has_plat() const;
  inline void clear_plat();
  static const int kPlatFieldNumber = 2;
  inline ::google::protobuf::int32 plat() const;
  inline void set_plat(::google::protobuf::int32 value);

  // optional string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:GCToBS.AskGateAddress)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_plat();
  inline void clear_has_plat();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgnum_;
  ::google::protobuf::int32 plat_;
  ::std::string* username_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_GCToBS_2eproto();
  friend void protobuf_AssignDesc_GCToBS_2eproto();
  friend void protobuf_ShutdownFile_GCToBS_2eproto();

  void InitAsDefaultInstance();
  static AskGateAddress* default_instance_;
};
// -------------------------------------------------------------------

class OneClinetLogin : public ::google::protobuf::Message {
 public:
  OneClinetLogin();
  virtual ~OneClinetLogin();

  OneClinetLogin(const OneClinetLogin& from);

  inline OneClinetLogin& operator=(const OneClinetLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneClinetLogin& default_instance();

  void Swap(OneClinetLogin* other);

  // implements Message ----------------------------------------------

  OneClinetLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneClinetLogin& from);
  void MergeFrom(const OneClinetLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_OneClinetLogin];
  inline bool has_msgnum() const;
  inline void clear_msgnum();
  static const int kMsgnumFieldNumber = 1;
  inline ::GCToBS::MsgNum msgnum() const;
  inline void set_msgnum(::GCToBS::MsgNum value);

  // optional string uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline const ::std::string& uin() const;
  inline void set_uin(const ::std::string& value);
  inline void set_uin(const char* value);
  inline void set_uin(const char* value, size_t size);
  inline ::std::string* mutable_uin();
  inline ::std::string* release_uin();
  inline void set_allocated_uin(::std::string* uin);

  // optional string sessionid = 3;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional uint32 plat = 4;
  inline bool has_plat() const;
  inline void clear_plat();
  static const int kPlatFieldNumber = 4;
  inline ::google::protobuf::uint32 plat() const;
  inline void set_plat(::google::protobuf::uint32 value);

  // optional uint32 login_success = 5;
  inline bool has_login_success() const;
  inline void clear_login_success();
  static const int kLoginSuccessFieldNumber = 5;
  inline ::google::protobuf::uint32 login_success() const;
  inline void set_login_success(::google::protobuf::uint32 value);

  // optional uint32 nsid = 6;
  inline bool has_nsid() const;
  inline void clear_nsid();
  static const int kNsidFieldNumber = 6;
  inline ::google::protobuf::uint32 nsid() const;
  inline void set_nsid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GCToBS.OneClinetLogin)
 private:
  inline void set_has_msgnum();
  inline void clear_has_msgnum();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_plat();
  inline void clear_has_plat();
  inline void set_has_login_success();
  inline void clear_has_login_success();
  inline void set_has_nsid();
  inline void clear_has_nsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uin_;
  int msgnum_;
  ::google::protobuf::uint32 plat_;
  ::std::string* sessionid_;
  ::google::protobuf::uint32 login_success_;
  ::google::protobuf::uint32 nsid_;
  friend void  protobuf_AddDesc_GCToBS_2eproto();
  friend void protobuf_AssignDesc_GCToBS_2eproto();
  friend void protobuf_ShutdownFile_GCToBS_2eproto();

  void InitAsDefaultInstance();
  static OneClinetLogin* default_instance_;
};
// ===================================================================


// ===================================================================

// AskGateAddress

// optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_AskGateAddress];
inline bool AskGateAddress::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskGateAddress::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskGateAddress::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskGateAddress::clear_msgnum() {
  msgnum_ = 32769;
  clear_has_msgnum();
}
inline ::GCToBS::MsgNum AskGateAddress::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToBS.AskGateAddress.msgnum)
  return static_cast< ::GCToBS::MsgNum >(msgnum_);
}
inline void AskGateAddress::set_msgnum(::GCToBS::MsgNum value) {
  assert(::GCToBS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToBS.AskGateAddress.msgnum)
}

// optional int32 plat = 2;
inline bool AskGateAddress::has_plat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskGateAddress::set_has_plat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskGateAddress::clear_has_plat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskGateAddress::clear_plat() {
  plat_ = 0;
  clear_has_plat();
}
inline ::google::protobuf::int32 AskGateAddress::plat() const {
  // @@protoc_insertion_point(field_get:GCToBS.AskGateAddress.plat)
  return plat_;
}
inline void AskGateAddress::set_plat(::google::protobuf::int32 value) {
  set_has_plat();
  plat_ = value;
  // @@protoc_insertion_point(field_set:GCToBS.AskGateAddress.plat)
}

// optional string username = 3;
inline bool AskGateAddress::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskGateAddress::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskGateAddress::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskGateAddress::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AskGateAddress::username() const {
  // @@protoc_insertion_point(field_get:GCToBS.AskGateAddress.username)
  return *username_;
}
inline void AskGateAddress::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:GCToBS.AskGateAddress.username)
}
inline void AskGateAddress::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToBS.AskGateAddress.username)
}
inline void AskGateAddress::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToBS.AskGateAddress.username)
}
inline ::std::string* AskGateAddress::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToBS.AskGateAddress.username)
  return username_;
}
inline ::std::string* AskGateAddress::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskGateAddress::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToBS.AskGateAddress.username)
}

// optional string token = 4;
inline bool AskGateAddress::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskGateAddress::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskGateAddress::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskGateAddress::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AskGateAddress::token() const {
  // @@protoc_insertion_point(field_get:GCToBS.AskGateAddress.token)
  return *token_;
}
inline void AskGateAddress::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:GCToBS.AskGateAddress.token)
}
inline void AskGateAddress::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToBS.AskGateAddress.token)
}
inline void AskGateAddress::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToBS.AskGateAddress.token)
}
inline ::std::string* AskGateAddress::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToBS.AskGateAddress.token)
  return token_;
}
inline ::std::string* AskGateAddress::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskGateAddress::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToBS.AskGateAddress.token)
}

// -------------------------------------------------------------------

// OneClinetLogin

// optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_OneClinetLogin];
inline bool OneClinetLogin::has_msgnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneClinetLogin::set_has_msgnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneClinetLogin::clear_has_msgnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneClinetLogin::clear_msgnum() {
  msgnum_ = 32770;
  clear_has_msgnum();
}
inline ::GCToBS::MsgNum OneClinetLogin::msgnum() const {
  // @@protoc_insertion_point(field_get:GCToBS.OneClinetLogin.msgnum)
  return static_cast< ::GCToBS::MsgNum >(msgnum_);
}
inline void OneClinetLogin::set_msgnum(::GCToBS::MsgNum value) {
  assert(::GCToBS::MsgNum_IsValid(value));
  set_has_msgnum();
  msgnum_ = value;
  // @@protoc_insertion_point(field_set:GCToBS.OneClinetLogin.msgnum)
}

// optional string uin = 2;
inline bool OneClinetLogin::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneClinetLogin::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneClinetLogin::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneClinetLogin::clear_uin() {
  if (uin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uin_->clear();
  }
  clear_has_uin();
}
inline const ::std::string& OneClinetLogin::uin() const {
  // @@protoc_insertion_point(field_get:GCToBS.OneClinetLogin.uin)
  return *uin_;
}
inline void OneClinetLogin::set_uin(const ::std::string& value) {
  set_has_uin();
  if (uin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uin_ = new ::std::string;
  }
  uin_->assign(value);
  // @@protoc_insertion_point(field_set:GCToBS.OneClinetLogin.uin)
}
inline void OneClinetLogin::set_uin(const char* value) {
  set_has_uin();
  if (uin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uin_ = new ::std::string;
  }
  uin_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToBS.OneClinetLogin.uin)
}
inline void OneClinetLogin::set_uin(const char* value, size_t size) {
  set_has_uin();
  if (uin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uin_ = new ::std::string;
  }
  uin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToBS.OneClinetLogin.uin)
}
inline ::std::string* OneClinetLogin::mutable_uin() {
  set_has_uin();
  if (uin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToBS.OneClinetLogin.uin)
  return uin_;
}
inline ::std::string* OneClinetLogin::release_uin() {
  clear_has_uin();
  if (uin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uin_;
    uin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OneClinetLogin::set_allocated_uin(::std::string* uin) {
  if (uin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uin_;
  }
  if (uin) {
    set_has_uin();
    uin_ = uin;
  } else {
    clear_has_uin();
    uin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToBS.OneClinetLogin.uin)
}

// optional string sessionid = 3;
inline bool OneClinetLogin::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneClinetLogin::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneClinetLogin::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneClinetLogin::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& OneClinetLogin::sessionid() const {
  // @@protoc_insertion_point(field_get:GCToBS.OneClinetLogin.sessionid)
  return *sessionid_;
}
inline void OneClinetLogin::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set:GCToBS.OneClinetLogin.sessionid)
}
inline void OneClinetLogin::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCToBS.OneClinetLogin.sessionid)
}
inline void OneClinetLogin::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCToBS.OneClinetLogin.sessionid)
}
inline ::std::string* OneClinetLogin::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCToBS.OneClinetLogin.sessionid)
  return sessionid_;
}
inline ::std::string* OneClinetLogin::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OneClinetLogin::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCToBS.OneClinetLogin.sessionid)
}

// optional uint32 plat = 4;
inline bool OneClinetLogin::has_plat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneClinetLogin::set_has_plat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneClinetLogin::clear_has_plat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneClinetLogin::clear_plat() {
  plat_ = 0u;
  clear_has_plat();
}
inline ::google::protobuf::uint32 OneClinetLogin::plat() const {
  // @@protoc_insertion_point(field_get:GCToBS.OneClinetLogin.plat)
  return plat_;
}
inline void OneClinetLogin::set_plat(::google::protobuf::uint32 value) {
  set_has_plat();
  plat_ = value;
  // @@protoc_insertion_point(field_set:GCToBS.OneClinetLogin.plat)
}

// optional uint32 login_success = 5;
inline bool OneClinetLogin::has_login_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneClinetLogin::set_has_login_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneClinetLogin::clear_has_login_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneClinetLogin::clear_login_success() {
  login_success_ = 0u;
  clear_has_login_success();
}
inline ::google::protobuf::uint32 OneClinetLogin::login_success() const {
  // @@protoc_insertion_point(field_get:GCToBS.OneClinetLogin.login_success)
  return login_success_;
}
inline void OneClinetLogin::set_login_success(::google::protobuf::uint32 value) {
  set_has_login_success();
  login_success_ = value;
  // @@protoc_insertion_point(field_set:GCToBS.OneClinetLogin.login_success)
}

// optional uint32 nsid = 6;
inline bool OneClinetLogin::has_nsid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneClinetLogin::set_has_nsid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneClinetLogin::clear_has_nsid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneClinetLogin::clear_nsid() {
  nsid_ = 0u;
  clear_has_nsid();
}
inline ::google::protobuf::uint32 OneClinetLogin::nsid() const {
  // @@protoc_insertion_point(field_get:GCToBS.OneClinetLogin.nsid)
  return nsid_;
}
inline void OneClinetLogin::set_nsid(::google::protobuf::uint32 value) {
  set_has_nsid();
  nsid_ = value;
  // @@protoc_insertion_point(field_set:GCToBS.OneClinetLogin.nsid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GCToBS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GCToBS::MsgNum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCToBS::MsgNum>() {
  return ::GCToBS::MsgNum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GCToBS_2eproto__INCLUDED
