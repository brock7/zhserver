// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCToCS.proto

#ifndef PROTOBUF_RCToCS_2eproto__INCLUDED
#define PROTOBUF_RCToCS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RCToCS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RCToCS_2eproto();
void protobuf_AssignDesc_RCToCS_2eproto();
void protobuf_ShutdownFile_RCToCS_2eproto();

class QueryCDKey;
class CreateCDKey;
class CreateCDKey_giftInfo;
class AskAddMailReq;
class AskRegist;
class AskServerInfo;
class AskServerUserInfo;
class AskNoticeInfo;
class AskAddNotice;
class AskDeleteNotice;

enum MsgID {
  eMsgRC2CS_Begin = 33000,
  eMsgRC2CS_AskRegist = 33001,
  eMsgRC2CS_AskServerInfo = 33002,
  eMsgRC2CS_AskServerUserInfo = 33003,
  eMsgRC2CS_AskNoticeInfo = 33004,
  eMsgRC2CS_AskAddNotice = 33005,
  eMsgRC2CS_AskDeleteNotice = 33006,
  eMsgRC2CS_AskAddOneMail = 33007,
  eMsgRC2CS_AskCreateCDKey = 33008,
  eMsgRC2CS_AskQueryCDkey = 33009,
  eMsgRC2CS_End = 33499
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgRC2CS_Begin;
const MsgID MsgID_MAX = eMsgRC2CS_End;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class QueryCDKey : public ::google::protobuf::Message {
 public:
  QueryCDKey();
  virtual ~QueryCDKey();

  QueryCDKey(const QueryCDKey& from);

  inline QueryCDKey& operator=(const QueryCDKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryCDKey& default_instance();

  void Swap(QueryCDKey* other);

  // implements Message ----------------------------------------------

  QueryCDKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryCDKey& from);
  void MergeFrom(const QueryCDKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskQueryCDkey];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // @@protoc_insertion_point(class_scope:RCToCS.QueryCDKey)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryCDKey* default_instance_;
};
// -------------------------------------------------------------------

class CreateCDKey_giftInfo : public ::google::protobuf::Message {
 public:
  CreateCDKey_giftInfo();
  virtual ~CreateCDKey_giftInfo();

  CreateCDKey_giftInfo(const CreateCDKey_giftInfo& from);

  inline CreateCDKey_giftInfo& operator=(const CreateCDKey_giftInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCDKey_giftInfo& default_instance();

  void Swap(CreateCDKey_giftInfo* other);

  // implements Message ----------------------------------------------

  CreateCDKey_giftInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCDKey_giftInfo& from);
  void MergeFrom(const CreateCDKey_giftInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RCToCS.CreateCDKey.giftInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_num_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static CreateCDKey_giftInfo* default_instance_;
};
// -------------------------------------------------------------------

class CreateCDKey : public ::google::protobuf::Message {
 public:
  CreateCDKey();
  virtual ~CreateCDKey();

  CreateCDKey(const CreateCDKey& from);

  inline CreateCDKey& operator=(const CreateCDKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCDKey& default_instance();

  void Swap(CreateCDKey* other);

  // implements Message ----------------------------------------------

  CreateCDKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCDKey& from);
  void MergeFrom(const CreateCDKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CreateCDKey_giftInfo giftInfo;

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskCreateCDKey];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional uint64 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gift_type = 6;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 6;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);

  // repeated .RCToCS.CreateCDKey.giftInfo gift = 7;
  inline int gift_size() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 7;
  inline const ::RCToCS::CreateCDKey_giftInfo& gift(int index) const;
  inline ::RCToCS::CreateCDKey_giftInfo* mutable_gift(int index);
  inline ::RCToCS::CreateCDKey_giftInfo* add_gift();
  inline const ::google::protobuf::RepeatedPtrField< ::RCToCS::CreateCDKey_giftInfo >&
      gift() const;
  inline ::google::protobuf::RepeatedPtrField< ::RCToCS::CreateCDKey_giftInfo >*
      mutable_gift();

  // optional int32 code_len = 8;
  inline bool has_code_len() const;
  inline void clear_code_len();
  static const int kCodeLenFieldNumber = 8;
  inline ::google::protobuf::int32 code_len() const;
  inline void set_code_len(::google::protobuf::int32 value);

  // repeated string cdkey = 9;
  inline int cdkey_size() const;
  inline void clear_cdkey();
  static const int kCdkeyFieldNumber = 9;
  inline const ::std::string& cdkey(int index) const;
  inline ::std::string* mutable_cdkey(int index);
  inline void set_cdkey(int index, const ::std::string& value);
  inline void set_cdkey(int index, const char* value);
  inline void set_cdkey(int index, const char* value, size_t size);
  inline ::std::string* add_cdkey();
  inline void add_cdkey(const ::std::string& value);
  inline void add_cdkey(const char* value);
  inline void add_cdkey(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cdkey() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cdkey();

  // @@protoc_insertion_point(class_scope:RCToCS.CreateCDKey)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_code_len();
  inline void clear_has_code_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  int msgid_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::uint64 end_time_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::RCToCS::CreateCDKey_giftInfo > gift_;
  ::google::protobuf::int32 gift_type_;
  ::google::protobuf::int32 code_len_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cdkey_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static CreateCDKey* default_instance_;
};
// -------------------------------------------------------------------

class AskAddMailReq : public ::google::protobuf::Message {
 public:
  AskAddMailReq();
  virtual ~AskAddMailReq();

  AskAddMailReq(const AskAddMailReq& from);

  inline AskAddMailReq& operator=(const AskAddMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskAddMailReq& default_instance();

  void Swap(AskAddMailReq* other);

  // implements Message ----------------------------------------------

  AskAddMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskAddMailReq& from);
  void MergeFrom(const AskAddMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddOneMail];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 sdk = 3;
  inline bool has_sdk() const;
  inline void clear_sdk();
  static const int kSdkFieldNumber = 3;
  inline ::google::protobuf::int32 sdk() const;
  inline void set_sdk(::google::protobuf::int32 value);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string gift = 6;
  inline bool has_gift() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 6;
  inline const ::std::string& gift() const;
  inline void set_gift(const ::std::string& value);
  inline void set_gift(const char* value);
  inline void set_gift(const char* value, size_t size);
  inline ::std::string* mutable_gift();
  inline ::std::string* release_gift();
  inline void set_allocated_gift(::std::string* gift);

  // optional string createtime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 7;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional string endtime = 8;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 8;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional string sender = 9;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 9;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // repeated int64 userIdlist = 10;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUserIdlistFieldNumber = 10;
  inline ::google::protobuf::int64 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int64 value);
  inline void add_useridlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_useridlist();

  // optional int32 day = 11;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 11;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RCToCS.AskAddMailReq)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sdk();
  inline void clear_has_sdk();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gift();
  inline void clear_has_gift();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 type_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* gift_;
  ::std::string* createtime_;
  ::google::protobuf::int32 sdk_;
  ::google::protobuf::int32 day_;
  ::std::string* endtime_;
  ::std::string* sender_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > useridlist_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskAddMailReq* default_instance_;
};
// -------------------------------------------------------------------

class AskRegist : public ::google::protobuf::Message {
 public:
  AskRegist();
  virtual ~AskRegist();

  AskRegist(const AskRegist& from);

  inline AskRegist& operator=(const AskRegist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRegist& default_instance();

  void Swap(AskRegist* other);

  // implements Message ----------------------------------------------

  AskRegist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRegist& from);
  void MergeFrom(const AskRegist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskRegist];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // optional bytes key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:RCToCS.AskRegist)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  int msgid_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskRegist* default_instance_;
};
// -------------------------------------------------------------------

class AskServerInfo : public ::google::protobuf::Message {
 public:
  AskServerInfo();
  virtual ~AskServerInfo();

  AskServerInfo(const AskServerInfo& from);

  inline AskServerInfo& operator=(const AskServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskServerInfo& default_instance();

  void Swap(AskServerInfo* other);

  // implements Message ----------------------------------------------

  AskServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskServerInfo& from);
  void MergeFrom(const AskServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // @@protoc_insertion_point(class_scope:RCToCS.AskServerInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AskServerUserInfo : public ::google::protobuf::Message {
 public:
  AskServerUserInfo();
  virtual ~AskServerUserInfo();

  AskServerUserInfo(const AskServerUserInfo& from);

  inline AskServerUserInfo& operator=(const AskServerUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskServerUserInfo& default_instance();

  void Swap(AskServerUserInfo* other);

  // implements Message ----------------------------------------------

  AskServerUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskServerUserInfo& from);
  void MergeFrom(const AskServerUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerUserInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // @@protoc_insertion_point(class_scope:RCToCS.AskServerUserInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskServerUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class AskNoticeInfo : public ::google::protobuf::Message {
 public:
  AskNoticeInfo();
  virtual ~AskNoticeInfo();

  AskNoticeInfo(const AskNoticeInfo& from);

  inline AskNoticeInfo& operator=(const AskNoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskNoticeInfo& default_instance();

  void Swap(AskNoticeInfo* other);

  // implements Message ----------------------------------------------

  AskNoticeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskNoticeInfo& from);
  void MergeFrom(const AskNoticeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskNoticeInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // @@protoc_insertion_point(class_scope:RCToCS.AskNoticeInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskNoticeInfo* default_instance_;
};
// -------------------------------------------------------------------

class AskAddNotice : public ::google::protobuf::Message {
 public:
  AskAddNotice();
  virtual ~AskAddNotice();

  AskAddNotice(const AskAddNotice& from);

  inline AskAddNotice& operator=(const AskAddNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskAddNotice& default_instance();

  void Swap(AskAddNotice* other);

  // implements Message ----------------------------------------------

  AskAddNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskAddNotice& from);
  void MergeFrom(const AskAddNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddNotice];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // optional int32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional bytes title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 priority = 6;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 6;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional bytes noticeMsg = 7;
  inline bool has_noticemsg() const;
  inline void clear_noticemsg();
  static const int kNoticeMsgFieldNumber = 7;
  inline const ::std::string& noticemsg() const;
  inline void set_noticemsg(const ::std::string& value);
  inline void set_noticemsg(const char* value);
  inline void set_noticemsg(const void* value, size_t size);
  inline ::std::string* mutable_noticemsg();
  inline ::std::string* release_noticemsg();
  inline void set_allocated_noticemsg(::std::string* noticemsg);

  // optional uint64 star_time = 8;
  inline bool has_star_time() const;
  inline void clear_star_time();
  static const int kStarTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 star_time() const;
  inline void set_star_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 9;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RCToCS.AskAddNotice)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_noticemsg();
  inline void clear_has_noticemsg();
  inline void set_has_star_time();
  inline void clear_has_star_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 platform_;
  ::std::string* title_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 state_;
  ::std::string* noticemsg_;
  ::google::protobuf::uint64 star_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::int32 priority_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskAddNotice* default_instance_;
};
// -------------------------------------------------------------------

class AskDeleteNotice : public ::google::protobuf::Message {
 public:
  AskDeleteNotice();
  virtual ~AskDeleteNotice();

  AskDeleteNotice(const AskDeleteNotice& from);

  inline AskDeleteNotice& operator=(const AskDeleteNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskDeleteNotice& default_instance();

  void Swap(AskDeleteNotice* other);

  // implements Message ----------------------------------------------

  AskDeleteNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskDeleteNotice& from);
  void MergeFrom(const AskDeleteNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskDeleteNotice];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::RCToCS::MsgID msgid() const;
  inline void set_msgid(::RCToCS::MsgID value);

  // optional int32 noticeId = 2;
  inline bool has_noticeid() const;
  inline void clear_noticeid();
  static const int kNoticeIdFieldNumber = 2;
  inline ::google::protobuf::int32 noticeid() const;
  inline void set_noticeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RCToCS.AskDeleteNotice)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_noticeid();
  inline void clear_has_noticeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 noticeid_;
  friend void  protobuf_AddDesc_RCToCS_2eproto();
  friend void protobuf_AssignDesc_RCToCS_2eproto();
  friend void protobuf_ShutdownFile_RCToCS_2eproto();

  void InitAsDefaultInstance();
  static AskDeleteNotice* default_instance_;
};
// ===================================================================


// ===================================================================

// QueryCDKey

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskQueryCDkey];
inline bool QueryCDKey::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryCDKey::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryCDKey::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryCDKey::clear_msgid() {
  msgid_ = 33009;
  clear_has_msgid();
}
inline ::RCToCS::MsgID QueryCDKey::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.QueryCDKey.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void QueryCDKey::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.QueryCDKey.msgid)
}

// -------------------------------------------------------------------

// CreateCDKey_giftInfo

// optional int32 item_id = 1;
inline bool CreateCDKey_giftInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCDKey_giftInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCDKey_giftInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCDKey_giftInfo::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 CreateCDKey_giftInfo::item_id() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.giftInfo.item_id)
  return item_id_;
}
inline void CreateCDKey_giftInfo::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.giftInfo.item_id)
}

// optional int32 item_num = 2;
inline bool CreateCDKey_giftInfo::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCDKey_giftInfo::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCDKey_giftInfo::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCDKey_giftInfo::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 CreateCDKey_giftInfo::item_num() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.giftInfo.item_num)
  return item_num_;
}
inline void CreateCDKey_giftInfo::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.giftInfo.item_num)
}

// -------------------------------------------------------------------

// CreateCDKey

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskCreateCDKey];
inline bool CreateCDKey::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCDKey::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCDKey::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCDKey::clear_msgid() {
  msgid_ = 33008;
  clear_has_msgid();
}
inline ::RCToCS::MsgID CreateCDKey::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void CreateCDKey::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.msgid)
}

// optional string title = 2;
inline bool CreateCDKey::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCDKey::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCDKey::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCDKey::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CreateCDKey::title() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.title)
  return *title_;
}
inline void CreateCDKey::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.title)
}
inline void CreateCDKey::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.CreateCDKey.title)
}
inline void CreateCDKey::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.CreateCDKey.title)
}
inline ::std::string* CreateCDKey::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.CreateCDKey.title)
  return title_;
}
inline ::std::string* CreateCDKey::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateCDKey::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.CreateCDKey.title)
}

// optional int32 platform = 3;
inline bool CreateCDKey::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateCDKey::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateCDKey::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateCDKey::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 CreateCDKey::platform() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.platform)
  return platform_;
}
inline void CreateCDKey::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.platform)
}

// optional uint64 end_time = 4;
inline bool CreateCDKey::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateCDKey::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateCDKey::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateCDKey::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 CreateCDKey::end_time() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.end_time)
  return end_time_;
}
inline void CreateCDKey::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.end_time)
}

// optional string content = 5;
inline bool CreateCDKey::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateCDKey::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateCDKey::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateCDKey::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CreateCDKey::content() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.content)
  return *content_;
}
inline void CreateCDKey::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.content)
}
inline void CreateCDKey::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.CreateCDKey.content)
}
inline void CreateCDKey::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.CreateCDKey.content)
}
inline ::std::string* CreateCDKey::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.CreateCDKey.content)
  return content_;
}
inline ::std::string* CreateCDKey::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateCDKey::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.CreateCDKey.content)
}

// optional int32 gift_type = 6;
inline bool CreateCDKey::has_gift_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateCDKey::set_has_gift_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateCDKey::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateCDKey::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 CreateCDKey::gift_type() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.gift_type)
  return gift_type_;
}
inline void CreateCDKey::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.gift_type)
}

// repeated .RCToCS.CreateCDKey.giftInfo gift = 7;
inline int CreateCDKey::gift_size() const {
  return gift_.size();
}
inline void CreateCDKey::clear_gift() {
  gift_.Clear();
}
inline const ::RCToCS::CreateCDKey_giftInfo& CreateCDKey::gift(int index) const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.gift)
  return gift_.Get(index);
}
inline ::RCToCS::CreateCDKey_giftInfo* CreateCDKey::mutable_gift(int index) {
  // @@protoc_insertion_point(field_mutable:RCToCS.CreateCDKey.gift)
  return gift_.Mutable(index);
}
inline ::RCToCS::CreateCDKey_giftInfo* CreateCDKey::add_gift() {
  // @@protoc_insertion_point(field_add:RCToCS.CreateCDKey.gift)
  return gift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RCToCS::CreateCDKey_giftInfo >&
CreateCDKey::gift() const {
  // @@protoc_insertion_point(field_list:RCToCS.CreateCDKey.gift)
  return gift_;
}
inline ::google::protobuf::RepeatedPtrField< ::RCToCS::CreateCDKey_giftInfo >*
CreateCDKey::mutable_gift() {
  // @@protoc_insertion_point(field_mutable_list:RCToCS.CreateCDKey.gift)
  return &gift_;
}

// optional int32 code_len = 8;
inline bool CreateCDKey::has_code_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateCDKey::set_has_code_len() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateCDKey::clear_has_code_len() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateCDKey::clear_code_len() {
  code_len_ = 0;
  clear_has_code_len();
}
inline ::google::protobuf::int32 CreateCDKey::code_len() const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.code_len)
  return code_len_;
}
inline void CreateCDKey::set_code_len(::google::protobuf::int32 value) {
  set_has_code_len();
  code_len_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.code_len)
}

// repeated string cdkey = 9;
inline int CreateCDKey::cdkey_size() const {
  return cdkey_.size();
}
inline void CreateCDKey::clear_cdkey() {
  cdkey_.Clear();
}
inline const ::std::string& CreateCDKey::cdkey(int index) const {
  // @@protoc_insertion_point(field_get:RCToCS.CreateCDKey.cdkey)
  return cdkey_.Get(index);
}
inline ::std::string* CreateCDKey::mutable_cdkey(int index) {
  // @@protoc_insertion_point(field_mutable:RCToCS.CreateCDKey.cdkey)
  return cdkey_.Mutable(index);
}
inline void CreateCDKey::set_cdkey(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RCToCS.CreateCDKey.cdkey)
  cdkey_.Mutable(index)->assign(value);
}
inline void CreateCDKey::set_cdkey(int index, const char* value) {
  cdkey_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.CreateCDKey.cdkey)
}
inline void CreateCDKey::set_cdkey(int index, const char* value, size_t size) {
  cdkey_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.CreateCDKey.cdkey)
}
inline ::std::string* CreateCDKey::add_cdkey() {
  return cdkey_.Add();
}
inline void CreateCDKey::add_cdkey(const ::std::string& value) {
  cdkey_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RCToCS.CreateCDKey.cdkey)
}
inline void CreateCDKey::add_cdkey(const char* value) {
  cdkey_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RCToCS.CreateCDKey.cdkey)
}
inline void CreateCDKey::add_cdkey(const char* value, size_t size) {
  cdkey_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RCToCS.CreateCDKey.cdkey)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateCDKey::cdkey() const {
  // @@protoc_insertion_point(field_list:RCToCS.CreateCDKey.cdkey)
  return cdkey_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateCDKey::mutable_cdkey() {
  // @@protoc_insertion_point(field_mutable_list:RCToCS.CreateCDKey.cdkey)
  return &cdkey_;
}

// -------------------------------------------------------------------

// AskAddMailReq

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddOneMail];
inline bool AskAddMailReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskAddMailReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskAddMailReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskAddMailReq::clear_msgid() {
  msgid_ = 33007;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskAddMailReq::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskAddMailReq::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.msgid)
}

// optional int32 type = 2;
inline bool AskAddMailReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskAddMailReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskAddMailReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskAddMailReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AskAddMailReq::type() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.type)
  return type_;
}
inline void AskAddMailReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.type)
}

// optional int32 sdk = 3;
inline bool AskAddMailReq::has_sdk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskAddMailReq::set_has_sdk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskAddMailReq::clear_has_sdk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskAddMailReq::clear_sdk() {
  sdk_ = 0;
  clear_has_sdk();
}
inline ::google::protobuf::int32 AskAddMailReq::sdk() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.sdk)
  return sdk_;
}
inline void AskAddMailReq::set_sdk(::google::protobuf::int32 value) {
  set_has_sdk();
  sdk_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.sdk)
}

// optional string title = 4;
inline bool AskAddMailReq::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskAddMailReq::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskAddMailReq::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskAddMailReq::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AskAddMailReq::title() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.title)
  return *title_;
}
inline void AskAddMailReq::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.title)
}
inline void AskAddMailReq::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddMailReq.title)
}
inline void AskAddMailReq::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddMailReq.title)
}
inline ::std::string* AskAddMailReq::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddMailReq.title)
  return title_;
}
inline ::std::string* AskAddMailReq::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMailReq::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddMailReq.title)
}

// optional string content = 5;
inline bool AskAddMailReq::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AskAddMailReq::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AskAddMailReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AskAddMailReq::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& AskAddMailReq::content() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.content)
  return *content_;
}
inline void AskAddMailReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.content)
}
inline void AskAddMailReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddMailReq.content)
}
inline void AskAddMailReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddMailReq.content)
}
inline ::std::string* AskAddMailReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddMailReq.content)
  return content_;
}
inline ::std::string* AskAddMailReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMailReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddMailReq.content)
}

// optional string gift = 6;
inline bool AskAddMailReq::has_gift() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AskAddMailReq::set_has_gift() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AskAddMailReq::clear_has_gift() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AskAddMailReq::clear_gift() {
  if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_->clear();
  }
  clear_has_gift();
}
inline const ::std::string& AskAddMailReq::gift() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.gift)
  return *gift_;
}
inline void AskAddMailReq::set_gift(const ::std::string& value) {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  gift_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.gift)
}
inline void AskAddMailReq::set_gift(const char* value) {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  gift_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddMailReq.gift)
}
inline void AskAddMailReq::set_gift(const char* value, size_t size) {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  gift_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddMailReq.gift)
}
inline ::std::string* AskAddMailReq::mutable_gift() {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddMailReq.gift)
  return gift_;
}
inline ::std::string* AskAddMailReq::release_gift() {
  clear_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gift_;
    gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMailReq::set_allocated_gift(::std::string* gift) {
  if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gift_;
  }
  if (gift) {
    set_has_gift();
    gift_ = gift;
  } else {
    clear_has_gift();
    gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddMailReq.gift)
}

// optional string createtime = 7;
inline bool AskAddMailReq::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AskAddMailReq::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AskAddMailReq::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AskAddMailReq::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& AskAddMailReq::createtime() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.createtime)
  return *createtime_;
}
inline void AskAddMailReq::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.createtime)
}
inline void AskAddMailReq::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddMailReq.createtime)
}
inline void AskAddMailReq::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddMailReq.createtime)
}
inline ::std::string* AskAddMailReq::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddMailReq.createtime)
  return createtime_;
}
inline ::std::string* AskAddMailReq::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMailReq::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddMailReq.createtime)
}

// optional string endtime = 8;
inline bool AskAddMailReq::has_endtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AskAddMailReq::set_has_endtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AskAddMailReq::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AskAddMailReq::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& AskAddMailReq::endtime() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.endtime)
  return *endtime_;
}
inline void AskAddMailReq::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.endtime)
}
inline void AskAddMailReq::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddMailReq.endtime)
}
inline void AskAddMailReq::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddMailReq.endtime)
}
inline ::std::string* AskAddMailReq::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddMailReq.endtime)
  return endtime_;
}
inline ::std::string* AskAddMailReq::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMailReq::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddMailReq.endtime)
}

// optional string sender = 9;
inline bool AskAddMailReq::has_sender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AskAddMailReq::set_has_sender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AskAddMailReq::clear_has_sender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AskAddMailReq::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& AskAddMailReq::sender() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.sender)
  return *sender_;
}
inline void AskAddMailReq::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.sender)
}
inline void AskAddMailReq::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddMailReq.sender)
}
inline void AskAddMailReq::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddMailReq.sender)
}
inline ::std::string* AskAddMailReq::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddMailReq.sender)
  return sender_;
}
inline ::std::string* AskAddMailReq::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddMailReq::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddMailReq.sender)
}

// repeated int64 userIdlist = 10;
inline int AskAddMailReq::useridlist_size() const {
  return useridlist_.size();
}
inline void AskAddMailReq::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int64 AskAddMailReq::useridlist(int index) const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.userIdlist)
  return useridlist_.Get(index);
}
inline void AskAddMailReq::set_useridlist(int index, ::google::protobuf::int64 value) {
  useridlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.userIdlist)
}
inline void AskAddMailReq::add_useridlist(::google::protobuf::int64 value) {
  useridlist_.Add(value);
  // @@protoc_insertion_point(field_add:RCToCS.AskAddMailReq.userIdlist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AskAddMailReq::useridlist() const {
  // @@protoc_insertion_point(field_list:RCToCS.AskAddMailReq.userIdlist)
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AskAddMailReq::mutable_useridlist() {
  // @@protoc_insertion_point(field_mutable_list:RCToCS.AskAddMailReq.userIdlist)
  return &useridlist_;
}

// optional int32 day = 11;
inline bool AskAddMailReq::has_day() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AskAddMailReq::set_has_day() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AskAddMailReq::clear_has_day() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AskAddMailReq::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 AskAddMailReq::day() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddMailReq.day)
  return day_;
}
inline void AskAddMailReq::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddMailReq.day)
}

// -------------------------------------------------------------------

// AskRegist

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskRegist];
inline bool AskRegist::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRegist::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRegist::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRegist::clear_msgid() {
  msgid_ = 33001;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskRegist::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskRegist.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskRegist::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskRegist.msgid)
}

// optional bytes key = 2;
inline bool AskRegist::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskRegist::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskRegist::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskRegist::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AskRegist::key() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskRegist.key)
  return *key_;
}
inline void AskRegist::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskRegist.key)
}
inline void AskRegist::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskRegist.key)
}
inline void AskRegist::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskRegist.key)
}
inline ::std::string* AskRegist::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskRegist.key)
  return key_;
}
inline ::std::string* AskRegist::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskRegist::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskRegist.key)
}

// -------------------------------------------------------------------

// AskServerInfo

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerInfo];
inline bool AskServerInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskServerInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskServerInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskServerInfo::clear_msgid() {
  msgid_ = 33002;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskServerInfo::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskServerInfo.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskServerInfo::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskServerInfo.msgid)
}

// -------------------------------------------------------------------

// AskServerUserInfo

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskServerUserInfo];
inline bool AskServerUserInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskServerUserInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskServerUserInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskServerUserInfo::clear_msgid() {
  msgid_ = 33003;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskServerUserInfo::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskServerUserInfo.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskServerUserInfo::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskServerUserInfo.msgid)
}

// -------------------------------------------------------------------

// AskNoticeInfo

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskNoticeInfo];
inline bool AskNoticeInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskNoticeInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskNoticeInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskNoticeInfo::clear_msgid() {
  msgid_ = 33004;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskNoticeInfo::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskNoticeInfo.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskNoticeInfo::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskNoticeInfo.msgid)
}

// -------------------------------------------------------------------

// AskAddNotice

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskAddNotice];
inline bool AskAddNotice::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskAddNotice::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskAddNotice::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskAddNotice::clear_msgid() {
  msgid_ = 33005;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskAddNotice::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskAddNotice::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.msgid)
}

// optional int32 platform = 2;
inline bool AskAddNotice::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskAddNotice::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskAddNotice::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskAddNotice::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 AskAddNotice::platform() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.platform)
  return platform_;
}
inline void AskAddNotice::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.platform)
}

// optional bytes title = 3;
inline bool AskAddNotice::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskAddNotice::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskAddNotice::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskAddNotice::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AskAddNotice::title() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.title)
  return *title_;
}
inline void AskAddNotice::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.title)
}
inline void AskAddNotice::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddNotice.title)
}
inline void AskAddNotice::set_title(const void* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddNotice.title)
}
inline ::std::string* AskAddNotice::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddNotice.title)
  return title_;
}
inline ::std::string* AskAddNotice::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddNotice::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddNotice.title)
}

// optional int32 flag = 4;
inline bool AskAddNotice::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskAddNotice::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskAddNotice::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskAddNotice::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AskAddNotice::flag() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.flag)
  return flag_;
}
inline void AskAddNotice::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.flag)
}

// optional int32 state = 5;
inline bool AskAddNotice::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AskAddNotice::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AskAddNotice::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AskAddNotice::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AskAddNotice::state() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.state)
  return state_;
}
inline void AskAddNotice::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.state)
}

// optional int32 priority = 6;
inline bool AskAddNotice::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AskAddNotice::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AskAddNotice::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AskAddNotice::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 AskAddNotice::priority() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.priority)
  return priority_;
}
inline void AskAddNotice::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.priority)
}

// optional bytes noticeMsg = 7;
inline bool AskAddNotice::has_noticemsg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AskAddNotice::set_has_noticemsg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AskAddNotice::clear_has_noticemsg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AskAddNotice::clear_noticemsg() {
  if (noticemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticemsg_->clear();
  }
  clear_has_noticemsg();
}
inline const ::std::string& AskAddNotice::noticemsg() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.noticeMsg)
  return *noticemsg_;
}
inline void AskAddNotice::set_noticemsg(const ::std::string& value) {
  set_has_noticemsg();
  if (noticemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticemsg_ = new ::std::string;
  }
  noticemsg_->assign(value);
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.noticeMsg)
}
inline void AskAddNotice::set_noticemsg(const char* value) {
  set_has_noticemsg();
  if (noticemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticemsg_ = new ::std::string;
  }
  noticemsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:RCToCS.AskAddNotice.noticeMsg)
}
inline void AskAddNotice::set_noticemsg(const void* value, size_t size) {
  set_has_noticemsg();
  if (noticemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticemsg_ = new ::std::string;
  }
  noticemsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RCToCS.AskAddNotice.noticeMsg)
}
inline ::std::string* AskAddNotice::mutable_noticemsg() {
  set_has_noticemsg();
  if (noticemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticemsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RCToCS.AskAddNotice.noticeMsg)
  return noticemsg_;
}
inline ::std::string* AskAddNotice::release_noticemsg() {
  clear_has_noticemsg();
  if (noticemsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = noticemsg_;
    noticemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskAddNotice::set_allocated_noticemsg(::std::string* noticemsg) {
  if (noticemsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noticemsg_;
  }
  if (noticemsg) {
    set_has_noticemsg();
    noticemsg_ = noticemsg;
  } else {
    clear_has_noticemsg();
    noticemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RCToCS.AskAddNotice.noticeMsg)
}

// optional uint64 star_time = 8;
inline bool AskAddNotice::has_star_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AskAddNotice::set_has_star_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AskAddNotice::clear_has_star_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AskAddNotice::clear_star_time() {
  star_time_ = GOOGLE_ULONGLONG(0);
  clear_has_star_time();
}
inline ::google::protobuf::uint64 AskAddNotice::star_time() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.star_time)
  return star_time_;
}
inline void AskAddNotice::set_star_time(::google::protobuf::uint64 value) {
  set_has_star_time();
  star_time_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.star_time)
}

// optional uint64 end_time = 9;
inline bool AskAddNotice::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AskAddNotice::set_has_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AskAddNotice::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AskAddNotice::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 AskAddNotice::end_time() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskAddNotice.end_time)
  return end_time_;
}
inline void AskAddNotice::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskAddNotice.end_time)
}

// -------------------------------------------------------------------

// AskDeleteNotice

// optional .RCToCS.MsgID msgid = 1 [default = eMsgRC2CS_AskDeleteNotice];
inline bool AskDeleteNotice::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskDeleteNotice::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskDeleteNotice::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskDeleteNotice::clear_msgid() {
  msgid_ = 33006;
  clear_has_msgid();
}
inline ::RCToCS::MsgID AskDeleteNotice::msgid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskDeleteNotice.msgid)
  return static_cast< ::RCToCS::MsgID >(msgid_);
}
inline void AskDeleteNotice::set_msgid(::RCToCS::MsgID value) {
  assert(::RCToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskDeleteNotice.msgid)
}

// optional int32 noticeId = 2;
inline bool AskDeleteNotice::has_noticeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskDeleteNotice::set_has_noticeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskDeleteNotice::clear_has_noticeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskDeleteNotice::clear_noticeid() {
  noticeid_ = 0;
  clear_has_noticeid();
}
inline ::google::protobuf::int32 AskDeleteNotice::noticeid() const {
  // @@protoc_insertion_point(field_get:RCToCS.AskDeleteNotice.noticeId)
  return noticeid_;
}
inline void AskDeleteNotice::set_noticeid(::google::protobuf::int32 value) {
  set_has_noticeid();
  noticeid_ = value;
  // @@protoc_insertion_point(field_set:RCToCS.AskDeleteNotice.noticeId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RCToCS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RCToCS::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RCToCS::MsgID>() {
  return ::RCToCS::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RCToCS_2eproto__INCLUDED
