// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToGS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSToGS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CSToGS {

namespace {

const ::google::protobuf::Descriptor* AskPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegisteRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegisteRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegisteRet_SSInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegisteRet_SSInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderPostToGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderPostToGC_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderPostToGC_UserNetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderPostToGC_UserNetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderKickoutGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderKickoutGC_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneSSConnected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneSSConnected_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserConnectedSS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserConnectedSS_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDisConnectedSS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDisConnectedSS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSToGS_2eproto() {
  protobuf_AddDesc_CSToGS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSToGS.proto");
  GOOGLE_CHECK(file != NULL);
  AskPing_descriptor_ = file->message_type(0);
  static const int AskPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, time_),
  };
  AskPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPing_descriptor_,
      AskPing::default_instance_,
      AskPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPing));
  AskRegisteRet_descriptor_ = file->message_type(1);
  static const int AskRegisteRet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, registe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, curtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, ssbaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, ssinfo_),
  };
  AskRegisteRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegisteRet_descriptor_,
      AskRegisteRet::default_instance_,
      AskRegisteRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegisteRet));
  AskRegisteRet_SSInfo_descriptor_ = AskRegisteRet_descriptor_->nested_type(0);
  static const int AskRegisteRet_SSInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet_SSInfo, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet_SSInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet_SSInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet_SSInfo, netstate_),
  };
  AskRegisteRet_SSInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegisteRet_SSInfo_descriptor_,
      AskRegisteRet_SSInfo::default_instance_,
      AskRegisteRet_SSInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet_SSInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegisteRet_SSInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegisteRet_SSInfo));
  OrderPostToGC_descriptor_ = file->message_type(2);
  static const int OrderPostToGC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, usernetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, othermsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, othermsg_),
  };
  OrderPostToGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderPostToGC_descriptor_,
      OrderPostToGC::default_instance_,
      OrderPostToGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderPostToGC));
  OrderPostToGC_UserNetInfo_descriptor_ = OrderPostToGC_descriptor_->nested_type(0);
  static const int OrderPostToGC_UserNetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, gcnid_),
  };
  OrderPostToGC_UserNetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderPostToGC_UserNetInfo_descriptor_,
      OrderPostToGC_UserNetInfo::default_instance_,
      OrderPostToGC_UserNetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderPostToGC_UserNetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderPostToGC_UserNetInfo));
  OrderKickoutGC_descriptor_ = file->message_type(3);
  static const int OrderKickoutGC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, gcnid_),
  };
  OrderKickoutGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderKickoutGC_descriptor_,
      OrderKickoutGC::default_instance_,
      OrderKickoutGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderKickoutGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderKickoutGC));
  OneSSConnected_descriptor_ = file->message_type(4);
  static const int OneSSConnected_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, netstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, basessid_),
  };
  OneSSConnected_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneSSConnected_descriptor_,
      OneSSConnected::default_instance_,
      OneSSConnected_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSSConnected, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneSSConnected));
  UserConnectedSS_descriptor_ = file->message_type(5);
  static const int UserConnectedSS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnectedSS, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnectedSS, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnectedSS, gcnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnectedSS, battleid_),
  };
  UserConnectedSS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserConnectedSS_descriptor_,
      UserConnectedSS::default_instance_,
      UserConnectedSS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnectedSS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserConnectedSS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserConnectedSS));
  UserDisConnectedSS_descriptor_ = file->message_type(6);
  static const int UserDisConnectedSS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisConnectedSS, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisConnectedSS, gcnid_),
  };
  UserDisConnectedSS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDisConnectedSS_descriptor_,
      UserDisConnectedSS::default_instance_,
      UserDisConnectedSS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisConnectedSS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisConnectedSS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDisConnectedSS));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSToGS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPing_descriptor_, &AskPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegisteRet_descriptor_, &AskRegisteRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegisteRet_SSInfo_descriptor_, &AskRegisteRet_SSInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderPostToGC_descriptor_, &OrderPostToGC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderPostToGC_UserNetInfo_descriptor_, &OrderPostToGC_UserNetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderKickoutGC_descriptor_, &OrderKickoutGC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneSSConnected_descriptor_, &OneSSConnected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserConnectedSS_descriptor_, &UserConnectedSS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDisConnectedSS_descriptor_, &UserDisConnectedSS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSToGS_2eproto() {
  delete AskPing::default_instance_;
  delete AskPing_reflection_;
  delete AskRegisteRet::default_instance_;
  delete AskRegisteRet_reflection_;
  delete AskRegisteRet_SSInfo::default_instance_;
  delete AskRegisteRet_SSInfo_reflection_;
  delete OrderPostToGC::default_instance_;
  delete OrderPostToGC_reflection_;
  delete OrderPostToGC_UserNetInfo::default_instance_;
  delete OrderPostToGC_UserNetInfo_reflection_;
  delete OrderKickoutGC::default_instance_;
  delete OrderKickoutGC_reflection_;
  delete OneSSConnected::default_instance_;
  delete OneSSConnected_reflection_;
  delete UserConnectedSS::default_instance_;
  delete UserConnectedSS_reflection_;
  delete UserDisConnectedSS::default_instance_;
  delete UserDisConnectedSS_reflection_;
}

void protobuf_AddDesc_CSToGS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CSToGS.proto\022\006CSToGS\"P\n\007AskPing\0227\n\005mgs"
    "id\030\001 \001(\0162\r.CSToGS.MsgID:\031eMsgToGSFromCS_"
    "AskPingRet\022\014\n\004time\030\002 \001(\003\"\361\001\n\rAskRegisteR"
    "et\022:\n\005msgid\030\001 \001(\0162\r.CSToGS.MsgID:\034eMsgTo"
    "GSFromCS_AskRegisteRet\022\017\n\007registe\030\002 \001(\005\022"
    "\017\n\007curtime\030\003 \001(\003\022\020\n\010ssbaseid\030\004 \001(\r\022,\n\006ss"
    "info\030\005 \003(\0132\034.CSToGS.AskRegisteRet.SSInfo"
    "\032B\n\006SSInfo\022\014\n\004ssid\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004"
    "port\030\003 \001(\005\022\020\n\010netstate\030\004 \001(\005\"\325\001\n\rOrderPo"
    "stToGC\022:\n\005msgid\030\001 \001(\0162\r.CSToGS.MsgID:\034eM"
    "sgToGSFromCS_OrderPostToGC\0226\n\013usernetinf"
    "o\030\002 \003(\0132!.CSToGS.OrderPostToGC.UserNetIn"
    "fo\022\022\n\nothermsgid\030\003 \001(\005\022\020\n\010othermsg\030\004 \001(\014"
    "\032*\n\013UserNetInfo\022\014\n\004gsid\030\001 \001(\005\022\r\n\005gcnid\030\002"
    " \001(\005\"\\\n\016OrderKickoutGC\022;\n\005msgid\030\001 \001(\0162\r."
    "CSToGS.MsgID:\035eMsgToGSFromCS_OrderKickou"
    "tGC\022\r\n\005gcnid\030\002 \001(\005\"\266\001\n\016OneSSConnected\022;\n"
    "\005msgid\030\001 \001(\0162\r.CSToGS.MsgID:\035eMsgToGSFro"
    "mCS_OneSSConnected\022\r\n\005state\030\002 \001(\005\022\014\n\004tim"
    "e\030\003 \001(\003\022\014\n\004ssid\030\004 \001(\005\022\n\n\002ip\030\005 \001(\t\022\014\n\004por"
    "t\030\006 \001(\005\022\020\n\010netstate\030\007 \001(\005\022\020\n\010basessid\030\010 "
    "\001(\005\"~\n\017UserConnectedSS\022<\n\005msgid\030\001 \001(\0162\r."
    "CSToGS.MsgID:\036eMsgToGSFromCS_UserConnect"
    "edSS\022\014\n\004ssid\030\002 \001(\005\022\r\n\005gcnid\030\003 \003(\005\022\020\n\010bat"
    "tleid\030\004 \001(\004\"d\n\022UserDisConnectedSS\022\?\n\005msg"
    "id\030\001 \001(\0162\r.CSToGS.MsgID:!eMsgToGSFromCS_"
    "UserDisConnectedSS\022\r\n\005gcnid\030\002 \003(\005*\214\003\n\005Ms"
    "gID\022\032\n\024eMsgToGSFromCS_Begin\020\200\300\001\022\037\n\031eMsgT"
    "oGSFromCS_AskPingRet\020\201\300\001\022\"\n\034eMsgToGSFrom"
    "CS_AskRegisteRet\020\202\300\001\022$\n\036eMsgToGSFromCS_O"
    "rderOpenListen\020\203\300\001\022%\n\037eMsgToGSFromCS_Ord"
    "erCloseListen\020\204\300\001\022\"\n\034eMsgToGSFromCS_Orde"
    "rPostToGC\020\205\300\001\022#\n\035eMsgToGSFromCS_OrderKic"
    "koutGC\020\206\300\001\022#\n\035eMsgToGSFromCS_OneSSConnec"
    "ted\020\207\300\001\022$\n\036eMsgToGSFromCS_UserConnectedS"
    "S\020\210\300\001\022\'\n!eMsgToGSFromCS_UserDisConnected"
    "SS\020\211\300\001\022\030\n\022eMsgToGSFromCS_End\020\250\303\001", 1472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSToGS.proto", &protobuf_RegisterTypes);
  AskPing::default_instance_ = new AskPing();
  AskRegisteRet::default_instance_ = new AskRegisteRet();
  AskRegisteRet_SSInfo::default_instance_ = new AskRegisteRet_SSInfo();
  OrderPostToGC::default_instance_ = new OrderPostToGC();
  OrderPostToGC_UserNetInfo::default_instance_ = new OrderPostToGC_UserNetInfo();
  OrderKickoutGC::default_instance_ = new OrderKickoutGC();
  OneSSConnected::default_instance_ = new OneSSConnected();
  UserConnectedSS::default_instance_ = new UserConnectedSS();
  UserDisConnectedSS::default_instance_ = new UserDisConnectedSS();
  AskPing::default_instance_->InitAsDefaultInstance();
  AskRegisteRet::default_instance_->InitAsDefaultInstance();
  AskRegisteRet_SSInfo::default_instance_->InitAsDefaultInstance();
  OrderPostToGC::default_instance_->InitAsDefaultInstance();
  OrderPostToGC_UserNetInfo::default_instance_->InitAsDefaultInstance();
  OrderKickoutGC::default_instance_->InitAsDefaultInstance();
  OneSSConnected::default_instance_->InitAsDefaultInstance();
  UserConnectedSS::default_instance_->InitAsDefaultInstance();
  UserDisConnectedSS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSToGS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSToGS_2eproto {
  StaticDescriptorInitializer_CSToGS_2eproto() {
    protobuf_AddDesc_CSToGS_2eproto();
  }
} static_descriptor_initializer_CSToGS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 24576:
    case 24577:
    case 24578:
    case 24579:
    case 24580:
    case 24581:
    case 24582:
    case 24583:
    case 24584:
    case 24585:
    case 25000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskPing::kMgsidFieldNumber;
const int AskPing::kTimeFieldNumber;
#endif  // !_MSC_VER

AskPing::AskPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.AskPing)
}

void AskPing::InitAsDefaultInstance() {
}

AskPing::AskPing(const AskPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.AskPing)
}

void AskPing::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 24577;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPing::~AskPing() {
  // @@protoc_insertion_point(destructor:CSToGS.AskPing)
  SharedDtor();
}

void AskPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPing_descriptor_;
}

const AskPing& AskPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

AskPing* AskPing::default_instance_ = NULL;

AskPing* AskPing::New() const {
  return new AskPing;
}

void AskPing::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 24577;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.AskPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID mgsid = 1 [default = eMsgToGSFromCS_AskPingRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.AskPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.AskPing)
  return false;
#undef DO_
}

void AskPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.AskPing)
  // optional .CSToGS.MsgID mgsid = 1 [default = eMsgToGSFromCS_AskPingRet];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.AskPing)
}

::google::protobuf::uint8* AskPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.AskPing)
  // optional .CSToGS.MsgID mgsid = 1 [default = eMsgToGSFromCS_AskPingRet];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.AskPing)
  return target;
}

int AskPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID mgsid = 1 [default = eMsgToGSFromCS_AskPingRet];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPing::MergeFrom(const AskPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPing::CopyFrom(const AskPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPing::IsInitialized() const {

  return true;
}

void AskPing::Swap(AskPing* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPing_descriptor_;
  metadata.reflection = AskPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegisteRet_SSInfo::kSsidFieldNumber;
const int AskRegisteRet_SSInfo::kIpFieldNumber;
const int AskRegisteRet_SSInfo::kPortFieldNumber;
const int AskRegisteRet_SSInfo::kNetstateFieldNumber;
#endif  // !_MSC_VER

AskRegisteRet_SSInfo::AskRegisteRet_SSInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.AskRegisteRet.SSInfo)
}

void AskRegisteRet_SSInfo::InitAsDefaultInstance() {
}

AskRegisteRet_SSInfo::AskRegisteRet_SSInfo(const AskRegisteRet_SSInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.AskRegisteRet.SSInfo)
}

void AskRegisteRet_SSInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ssid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  netstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegisteRet_SSInfo::~AskRegisteRet_SSInfo() {
  // @@protoc_insertion_point(destructor:CSToGS.AskRegisteRet.SSInfo)
  SharedDtor();
}

void AskRegisteRet_SSInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AskRegisteRet_SSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegisteRet_SSInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegisteRet_SSInfo_descriptor_;
}

const AskRegisteRet_SSInfo& AskRegisteRet_SSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

AskRegisteRet_SSInfo* AskRegisteRet_SSInfo::default_instance_ = NULL;

AskRegisteRet_SSInfo* AskRegisteRet_SSInfo::New() const {
  return new AskRegisteRet_SSInfo;
}

void AskRegisteRet_SSInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskRegisteRet_SSInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ssid_, netstate_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegisteRet_SSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.AskRegisteRet.SSInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_netstate;
        break;
      }

      // optional int32 netstate = 4;
      case 4: {
        if (tag == 32) {
         parse_netstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netstate_)));
          set_has_netstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.AskRegisteRet.SSInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.AskRegisteRet.SSInfo)
  return false;
#undef DO_
}

void AskRegisteRet_SSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.AskRegisteRet.SSInfo)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional int32 netstate = 4;
  if (has_netstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->netstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.AskRegisteRet.SSInfo)
}

::google::protobuf::uint8* AskRegisteRet_SSInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.AskRegisteRet.SSInfo)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ssid(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional int32 netstate = 4;
  if (has_netstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->netstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.AskRegisteRet.SSInfo)
  return target;
}

int AskRegisteRet_SSInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 netstate = 4;
    if (has_netstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegisteRet_SSInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegisteRet_SSInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegisteRet_SSInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegisteRet_SSInfo::MergeFrom(const AskRegisteRet_SSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_netstate()) {
      set_netstate(from.netstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegisteRet_SSInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegisteRet_SSInfo::CopyFrom(const AskRegisteRet_SSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegisteRet_SSInfo::IsInitialized() const {

  return true;
}

void AskRegisteRet_SSInfo::Swap(AskRegisteRet_SSInfo* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(netstate_, other->netstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegisteRet_SSInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegisteRet_SSInfo_descriptor_;
  metadata.reflection = AskRegisteRet_SSInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AskRegisteRet::kMsgidFieldNumber;
const int AskRegisteRet::kRegisteFieldNumber;
const int AskRegisteRet::kCurtimeFieldNumber;
const int AskRegisteRet::kSsbaseidFieldNumber;
const int AskRegisteRet::kSsinfoFieldNumber;
#endif  // !_MSC_VER

AskRegisteRet::AskRegisteRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.AskRegisteRet)
}

void AskRegisteRet::InitAsDefaultInstance() {
}

AskRegisteRet::AskRegisteRet(const AskRegisteRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.AskRegisteRet)
}

void AskRegisteRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 24578;
  registe_ = 0;
  curtime_ = GOOGLE_LONGLONG(0);
  ssbaseid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegisteRet::~AskRegisteRet() {
  // @@protoc_insertion_point(destructor:CSToGS.AskRegisteRet)
  SharedDtor();
}

void AskRegisteRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRegisteRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegisteRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegisteRet_descriptor_;
}

const AskRegisteRet& AskRegisteRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

AskRegisteRet* AskRegisteRet::default_instance_ = NULL;

AskRegisteRet* AskRegisteRet::New() const {
  return new AskRegisteRet;
}

void AskRegisteRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskRegisteRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(registe_, curtime_);
    msgid_ = 24578;
    ssbaseid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ssinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegisteRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.AskRegisteRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_AskRegisteRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_registe;
        break;
      }

      // optional int32 registe = 2;
      case 2: {
        if (tag == 16) {
         parse_registe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &registe_)));
          set_has_registe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curtime;
        break;
      }

      // optional int64 curtime = 3;
      case 3: {
        if (tag == 24) {
         parse_curtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ssbaseid;
        break;
      }

      // optional uint32 ssbaseid = 4;
      case 4: {
        if (tag == 32) {
         parse_ssbaseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssbaseid_)));
          set_has_ssbaseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ssinfo;
        break;
      }

      // repeated .CSToGS.AskRegisteRet.SSInfo ssinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ssinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ssinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ssinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.AskRegisteRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.AskRegisteRet)
  return false;
#undef DO_
}

void AskRegisteRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.AskRegisteRet)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_AskRegisteRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 registe = 2;
  if (has_registe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->registe(), output);
  }

  // optional int64 curtime = 3;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curtime(), output);
  }

  // optional uint32 ssbaseid = 4;
  if (has_ssbaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ssbaseid(), output);
  }

  // repeated .CSToGS.AskRegisteRet.SSInfo ssinfo = 5;
  for (int i = 0; i < this->ssinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ssinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.AskRegisteRet)
}

::google::protobuf::uint8* AskRegisteRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.AskRegisteRet)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_AskRegisteRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 registe = 2;
  if (has_registe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->registe(), target);
  }

  // optional int64 curtime = 3;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curtime(), target);
  }

  // optional uint32 ssbaseid = 4;
  if (has_ssbaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ssbaseid(), target);
  }

  // repeated .CSToGS.AskRegisteRet.SSInfo ssinfo = 5;
  for (int i = 0; i < this->ssinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ssinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.AskRegisteRet)
  return target;
}

int AskRegisteRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_AskRegisteRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 registe = 2;
    if (has_registe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->registe());
    }

    // optional int64 curtime = 3;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curtime());
    }

    // optional uint32 ssbaseid = 4;
    if (has_ssbaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssbaseid());
    }

  }
  // repeated .CSToGS.AskRegisteRet.SSInfo ssinfo = 5;
  total_size += 1 * this->ssinfo_size();
  for (int i = 0; i < this->ssinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ssinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegisteRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegisteRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegisteRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegisteRet::MergeFrom(const AskRegisteRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  ssinfo_.MergeFrom(from.ssinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_registe()) {
      set_registe(from.registe());
    }
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
    if (from.has_ssbaseid()) {
      set_ssbaseid(from.ssbaseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegisteRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegisteRet::CopyFrom(const AskRegisteRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegisteRet::IsInitialized() const {

  return true;
}

void AskRegisteRet::Swap(AskRegisteRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(registe_, other->registe_);
    std::swap(curtime_, other->curtime_);
    std::swap(ssbaseid_, other->ssbaseid_);
    ssinfo_.Swap(&other->ssinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegisteRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegisteRet_descriptor_;
  metadata.reflection = AskRegisteRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderPostToGC_UserNetInfo::kGsidFieldNumber;
const int OrderPostToGC_UserNetInfo::kGcnidFieldNumber;
#endif  // !_MSC_VER

OrderPostToGC_UserNetInfo::OrderPostToGC_UserNetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.OrderPostToGC.UserNetInfo)
}

void OrderPostToGC_UserNetInfo::InitAsDefaultInstance() {
}

OrderPostToGC_UserNetInfo::OrderPostToGC_UserNetInfo(const OrderPostToGC_UserNetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.OrderPostToGC.UserNetInfo)
}

void OrderPostToGC_UserNetInfo::SharedCtor() {
  _cached_size_ = 0;
  gsid_ = 0;
  gcnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderPostToGC_UserNetInfo::~OrderPostToGC_UserNetInfo() {
  // @@protoc_insertion_point(destructor:CSToGS.OrderPostToGC.UserNetInfo)
  SharedDtor();
}

void OrderPostToGC_UserNetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderPostToGC_UserNetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderPostToGC_UserNetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderPostToGC_UserNetInfo_descriptor_;
}

const OrderPostToGC_UserNetInfo& OrderPostToGC_UserNetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

OrderPostToGC_UserNetInfo* OrderPostToGC_UserNetInfo::default_instance_ = NULL;

OrderPostToGC_UserNetInfo* OrderPostToGC_UserNetInfo::New() const {
  return new OrderPostToGC_UserNetInfo;
}

void OrderPostToGC_UserNetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderPostToGC_UserNetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gsid_, gcnid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderPostToGC_UserNetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.OrderPostToGC.UserNetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gcnid;
        break;
      }

      // optional int32 gcnid = 2;
      case 2: {
        if (tag == 16) {
         parse_gcnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnid_)));
          set_has_gcnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.OrderPostToGC.UserNetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.OrderPostToGC.UserNetInfo)
  return false;
#undef DO_
}

void OrderPostToGC_UserNetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.OrderPostToGC.UserNetInfo)
  // optional int32 gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gsid(), output);
  }

  // optional int32 gcnid = 2;
  if (has_gcnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gcnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.OrderPostToGC.UserNetInfo)
}

::google::protobuf::uint8* OrderPostToGC_UserNetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.OrderPostToGC.UserNetInfo)
  // optional int32 gsid = 1;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gsid(), target);
  }

  // optional int32 gcnid = 2;
  if (has_gcnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gcnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.OrderPostToGC.UserNetInfo)
  return target;
}

int OrderPostToGC_UserNetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gsid = 1;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnid = 2;
    if (has_gcnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderPostToGC_UserNetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderPostToGC_UserNetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderPostToGC_UserNetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderPostToGC_UserNetInfo::MergeFrom(const OrderPostToGC_UserNetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnid()) {
      set_gcnid(from.gcnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderPostToGC_UserNetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderPostToGC_UserNetInfo::CopyFrom(const OrderPostToGC_UserNetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPostToGC_UserNetInfo::IsInitialized() const {

  return true;
}

void OrderPostToGC_UserNetInfo::Swap(OrderPostToGC_UserNetInfo* other) {
  if (other != this) {
    std::swap(gsid_, other->gsid_);
    std::swap(gcnid_, other->gcnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderPostToGC_UserNetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderPostToGC_UserNetInfo_descriptor_;
  metadata.reflection = OrderPostToGC_UserNetInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OrderPostToGC::kMsgidFieldNumber;
const int OrderPostToGC::kUsernetinfoFieldNumber;
const int OrderPostToGC::kOthermsgidFieldNumber;
const int OrderPostToGC::kOthermsgFieldNumber;
#endif  // !_MSC_VER

OrderPostToGC::OrderPostToGC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.OrderPostToGC)
}

void OrderPostToGC::InitAsDefaultInstance() {
}

OrderPostToGC::OrderPostToGC(const OrderPostToGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.OrderPostToGC)
}

void OrderPostToGC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 24581;
  othermsgid_ = 0;
  othermsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderPostToGC::~OrderPostToGC() {
  // @@protoc_insertion_point(destructor:CSToGS.OrderPostToGC)
  SharedDtor();
}

void OrderPostToGC::SharedDtor() {
  if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othermsg_;
  }
  if (this != default_instance_) {
  }
}

void OrderPostToGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderPostToGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderPostToGC_descriptor_;
}

const OrderPostToGC& OrderPostToGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

OrderPostToGC* OrderPostToGC::default_instance_ = NULL;

OrderPostToGC* OrderPostToGC::New() const {
  return new OrderPostToGC;
}

void OrderPostToGC::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    msgid_ = 24581;
    othermsgid_ = 0;
    if (has_othermsg()) {
      if (othermsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othermsg_->clear();
      }
    }
  }
  usernetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderPostToGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.OrderPostToGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderPostToGC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_usernetinfo;
        break;
      }

      // repeated .CSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_usernetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usernetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_usernetinfo;
        if (input->ExpectTag(24)) goto parse_othermsgid;
        break;
      }

      // optional int32 othermsgid = 3;
      case 3: {
        if (tag == 24) {
         parse_othermsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othermsgid_)));
          set_has_othermsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_othermsg;
        break;
      }

      // optional bytes othermsg = 4;
      case 4: {
        if (tag == 34) {
         parse_othermsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_othermsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.OrderPostToGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.OrderPostToGC)
  return false;
#undef DO_
}

void OrderPostToGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.OrderPostToGC)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderPostToGC];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .CSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
  for (int i = 0; i < this->usernetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usernetinfo(i), output);
  }

  // optional int32 othermsgid = 3;
  if (has_othermsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->othermsgid(), output);
  }

  // optional bytes othermsg = 4;
  if (has_othermsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->othermsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.OrderPostToGC)
}

::google::protobuf::uint8* OrderPostToGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.OrderPostToGC)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderPostToGC];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .CSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
  for (int i = 0; i < this->usernetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usernetinfo(i), target);
  }

  // optional int32 othermsgid = 3;
  if (has_othermsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->othermsgid(), target);
  }

  // optional bytes othermsg = 4;
  if (has_othermsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->othermsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.OrderPostToGC)
  return target;
}

int OrderPostToGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderPostToGC];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 othermsgid = 3;
    if (has_othermsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othermsgid());
    }

    // optional bytes othermsg = 4;
    if (has_othermsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->othermsg());
    }

  }
  // repeated .CSToGS.OrderPostToGC.UserNetInfo usernetinfo = 2;
  total_size += 1 * this->usernetinfo_size();
  for (int i = 0; i < this->usernetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usernetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderPostToGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderPostToGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderPostToGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderPostToGC::MergeFrom(const OrderPostToGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  usernetinfo_.MergeFrom(from.usernetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_othermsgid()) {
      set_othermsgid(from.othermsgid());
    }
    if (from.has_othermsg()) {
      set_othermsg(from.othermsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderPostToGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderPostToGC::CopyFrom(const OrderPostToGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPostToGC::IsInitialized() const {

  return true;
}

void OrderPostToGC::Swap(OrderPostToGC* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    usernetinfo_.Swap(&other->usernetinfo_);
    std::swap(othermsgid_, other->othermsgid_);
    std::swap(othermsg_, other->othermsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderPostToGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderPostToGC_descriptor_;
  metadata.reflection = OrderPostToGC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderKickoutGC::kMsgidFieldNumber;
const int OrderKickoutGC::kGcnidFieldNumber;
#endif  // !_MSC_VER

OrderKickoutGC::OrderKickoutGC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.OrderKickoutGC)
}

void OrderKickoutGC::InitAsDefaultInstance() {
}

OrderKickoutGC::OrderKickoutGC(const OrderKickoutGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.OrderKickoutGC)
}

void OrderKickoutGC::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 24582;
  gcnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderKickoutGC::~OrderKickoutGC() {
  // @@protoc_insertion_point(destructor:CSToGS.OrderKickoutGC)
  SharedDtor();
}

void OrderKickoutGC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderKickoutGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderKickoutGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderKickoutGC_descriptor_;
}

const OrderKickoutGC& OrderKickoutGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

OrderKickoutGC* OrderKickoutGC::default_instance_ = NULL;

OrderKickoutGC* OrderKickoutGC::New() const {
  return new OrderKickoutGC;
}

void OrderKickoutGC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 24582;
    gcnid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderKickoutGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.OrderKickoutGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderKickoutGC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gcnid;
        break;
      }

      // optional int32 gcnid = 2;
      case 2: {
        if (tag == 16) {
         parse_gcnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnid_)));
          set_has_gcnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.OrderKickoutGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.OrderKickoutGC)
  return false;
#undef DO_
}

void OrderKickoutGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.OrderKickoutGC)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderKickoutGC];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 gcnid = 2;
  if (has_gcnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gcnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.OrderKickoutGC)
}

::google::protobuf::uint8* OrderKickoutGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.OrderKickoutGC)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderKickoutGC];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 gcnid = 2;
  if (has_gcnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gcnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.OrderKickoutGC)
  return target;
}

int OrderKickoutGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OrderKickoutGC];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 gcnid = 2;
    if (has_gcnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderKickoutGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderKickoutGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderKickoutGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderKickoutGC::MergeFrom(const OrderKickoutGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gcnid()) {
      set_gcnid(from.gcnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderKickoutGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderKickoutGC::CopyFrom(const OrderKickoutGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderKickoutGC::IsInitialized() const {

  return true;
}

void OrderKickoutGC::Swap(OrderKickoutGC* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gcnid_, other->gcnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderKickoutGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderKickoutGC_descriptor_;
  metadata.reflection = OrderKickoutGC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneSSConnected::kMsgidFieldNumber;
const int OneSSConnected::kStateFieldNumber;
const int OneSSConnected::kTimeFieldNumber;
const int OneSSConnected::kSsidFieldNumber;
const int OneSSConnected::kIpFieldNumber;
const int OneSSConnected::kPortFieldNumber;
const int OneSSConnected::kNetstateFieldNumber;
const int OneSSConnected::kBasessidFieldNumber;
#endif  // !_MSC_VER

OneSSConnected::OneSSConnected()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.OneSSConnected)
}

void OneSSConnected::InitAsDefaultInstance() {
}

OneSSConnected::OneSSConnected(const OneSSConnected& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.OneSSConnected)
}

void OneSSConnected::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 24583;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ssid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  netstate_ = 0;
  basessid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneSSConnected::~OneSSConnected() {
  // @@protoc_insertion_point(destructor:CSToGS.OneSSConnected)
  SharedDtor();
}

void OneSSConnected::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void OneSSConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneSSConnected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneSSConnected_descriptor_;
}

const OneSSConnected& OneSSConnected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

OneSSConnected* OneSSConnected::default_instance_ = NULL;

OneSSConnected* OneSSConnected::New() const {
  return new OneSSConnected;
}

void OneSSConnected::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OneSSConnected*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, time_);
    ZR_(ssid_, basessid_);
    msgid_ = 24583;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneSSConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.OneSSConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OneSSConnected];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 4;
      case 4: {
        if (tag == 32) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (tag == 42) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_netstate;
        break;
      }

      // optional int32 netstate = 7;
      case 7: {
        if (tag == 56) {
         parse_netstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netstate_)));
          set_has_netstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_basessid;
        break;
      }

      // optional int32 basessid = 8;
      case 8: {
        if (tag == 64) {
         parse_basessid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basessid_)));
          set_has_basessid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.OneSSConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.OneSSConnected)
  return false;
#undef DO_
}

void OneSSConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.OneSSConnected)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OneSSConnected];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int32 ssid = 4;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ssid(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  // optional int32 netstate = 7;
  if (has_netstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->netstate(), output);
  }

  // optional int32 basessid = 8;
  if (has_basessid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->basessid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.OneSSConnected)
}

::google::protobuf::uint8* OneSSConnected::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.OneSSConnected)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OneSSConnected];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int32 ssid = 4;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ssid(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  // optional int32 netstate = 7;
  if (has_netstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->netstate(), target);
  }

  // optional int32 basessid = 8;
  if (has_basessid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->basessid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.OneSSConnected)
  return target;
}

int OneSSConnected::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_OneSSConnected];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 ssid = 4;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 netstate = 7;
    if (has_netstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netstate());
    }

    // optional int32 basessid = 8;
    if (has_basessid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basessid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneSSConnected::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneSSConnected* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneSSConnected*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneSSConnected::MergeFrom(const OneSSConnected& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_netstate()) {
      set_netstate(from.netstate());
    }
    if (from.has_basessid()) {
      set_basessid(from.basessid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneSSConnected::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneSSConnected::CopyFrom(const OneSSConnected& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneSSConnected::IsInitialized() const {

  return true;
}

void OneSSConnected::Swap(OneSSConnected* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(ssid_, other->ssid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(netstate_, other->netstate_);
    std::swap(basessid_, other->basessid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneSSConnected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneSSConnected_descriptor_;
  metadata.reflection = OneSSConnected_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserConnectedSS::kMsgidFieldNumber;
const int UserConnectedSS::kSsidFieldNumber;
const int UserConnectedSS::kGcnidFieldNumber;
const int UserConnectedSS::kBattleidFieldNumber;
#endif  // !_MSC_VER

UserConnectedSS::UserConnectedSS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.UserConnectedSS)
}

void UserConnectedSS::InitAsDefaultInstance() {
}

UserConnectedSS::UserConnectedSS(const UserConnectedSS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.UserConnectedSS)
}

void UserConnectedSS::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 24584;
  ssid_ = 0;
  battleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserConnectedSS::~UserConnectedSS() {
  // @@protoc_insertion_point(destructor:CSToGS.UserConnectedSS)
  SharedDtor();
}

void UserConnectedSS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserConnectedSS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserConnectedSS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserConnectedSS_descriptor_;
}

const UserConnectedSS& UserConnectedSS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

UserConnectedSS* UserConnectedSS::default_instance_ = NULL;

UserConnectedSS* UserConnectedSS::New() const {
  return new UserConnectedSS;
}

void UserConnectedSS::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    msgid_ = 24584;
    ssid_ = 0;
    battleid_ = GOOGLE_ULONGLONG(0);
  }
  gcnid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserConnectedSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.UserConnectedSS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserConnectedSS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gcnid;
        break;
      }

      // repeated int32 gcnid = 3;
      case 3: {
        if (tag == 24) {
         parse_gcnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_gcnid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gcnid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gcnid;
        if (input->ExpectTag(32)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 4;
      case 4: {
        if (tag == 32) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.UserConnectedSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.UserConnectedSS)
  return false;
#undef DO_
}

void UserConnectedSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.UserConnectedSS)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserConnectedSS];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // repeated int32 gcnid = 3;
  for (int i = 0; i < this->gcnid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->gcnid(i), output);
  }

  // optional uint64 battleid = 4;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.UserConnectedSS)
}

::google::protobuf::uint8* UserConnectedSS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.UserConnectedSS)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserConnectedSS];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ssid(), target);
  }

  // repeated int32 gcnid = 3;
  for (int i = 0; i < this->gcnid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->gcnid(i), target);
  }

  // optional uint64 battleid = 4;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.UserConnectedSS)
  return target;
}

int UserConnectedSS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserConnectedSS];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional uint64 battleid = 4;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

  }
  // repeated int32 gcnid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gcnid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gcnid(i));
    }
    total_size += 1 * this->gcnid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConnectedSS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserConnectedSS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserConnectedSS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserConnectedSS::MergeFrom(const UserConnectedSS& from) {
  GOOGLE_CHECK_NE(&from, this);
  gcnid_.MergeFrom(from.gcnid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserConnectedSS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserConnectedSS::CopyFrom(const UserConnectedSS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConnectedSS::IsInitialized() const {

  return true;
}

void UserConnectedSS::Swap(UserConnectedSS* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(ssid_, other->ssid_);
    gcnid_.Swap(&other->gcnid_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserConnectedSS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserConnectedSS_descriptor_;
  metadata.reflection = UserConnectedSS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDisConnectedSS::kMsgidFieldNumber;
const int UserDisConnectedSS::kGcnidFieldNumber;
#endif  // !_MSC_VER

UserDisConnectedSS::UserDisConnectedSS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSToGS.UserDisConnectedSS)
}

void UserDisConnectedSS::InitAsDefaultInstance() {
}

UserDisConnectedSS::UserDisConnectedSS(const UserDisConnectedSS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSToGS.UserDisConnectedSS)
}

void UserDisConnectedSS::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 24585;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDisConnectedSS::~UserDisConnectedSS() {
  // @@protoc_insertion_point(destructor:CSToGS.UserDisConnectedSS)
  SharedDtor();
}

void UserDisConnectedSS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDisConnectedSS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDisConnectedSS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDisConnectedSS_descriptor_;
}

const UserDisConnectedSS& UserDisConnectedSS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToGS_2eproto();
  return *default_instance_;
}

UserDisConnectedSS* UserDisConnectedSS::default_instance_ = NULL;

UserDisConnectedSS* UserDisConnectedSS::New() const {
  return new UserDisConnectedSS;
}

void UserDisConnectedSS::Clear() {
  msgid_ = 24585;
  gcnid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDisConnectedSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSToGS.UserDisConnectedSS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserDisConnectedSS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CSToGS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::CSToGS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gcnid;
        break;
      }

      // repeated int32 gcnid = 2;
      case 2: {
        if (tag == 16) {
         parse_gcnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_gcnid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gcnid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gcnid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSToGS.UserDisConnectedSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSToGS.UserDisConnectedSS)
  return false;
#undef DO_
}

void UserDisConnectedSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSToGS.UserDisConnectedSS)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserDisConnectedSS];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated int32 gcnid = 2;
  for (int i = 0; i < this->gcnid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->gcnid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSToGS.UserDisConnectedSS)
}

::google::protobuf::uint8* UserDisConnectedSS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToGS.UserDisConnectedSS)
  // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserDisConnectedSS];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated int32 gcnid = 2;
  for (int i = 0; i < this->gcnid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->gcnid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToGS.UserDisConnectedSS)
  return target;
}

int UserDisConnectedSS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CSToGS.MsgID msgid = 1 [default = eMsgToGSFromCS_UserDisConnectedSS];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated int32 gcnid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gcnid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gcnid(i));
    }
    total_size += 1 * this->gcnid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDisConnectedSS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDisConnectedSS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDisConnectedSS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDisConnectedSS::MergeFrom(const UserDisConnectedSS& from) {
  GOOGLE_CHECK_NE(&from, this);
  gcnid_.MergeFrom(from.gcnid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDisConnectedSS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDisConnectedSS::CopyFrom(const UserDisConnectedSS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDisConnectedSS::IsInitialized() const {

  return true;
}

void UserDisConnectedSS::Swap(UserDisConnectedSS* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    gcnid_.Swap(&other->gcnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDisConnectedSS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDisConnectedSS_descriptor_;
  metadata.reflection = UserDisConnectedSS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSToGS

// @@protoc_insertion_point(global_scope)
