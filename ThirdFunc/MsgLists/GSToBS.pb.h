// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToBS.proto

#ifndef PROTOBUF_GSToBS_2eproto__INCLUDED
#define PROTOBUF_GSToBS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GSToBS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GSToBS_2eproto();
void protobuf_AssignDesc_GSToBS_2eproto();
void protobuf_ShutdownFile_GSToBS_2eproto();

class AskRegister;
class ReportAllClientInf;

enum MsgID {
  eMsgToBSFromGS_Begin = 32768,
  eMsgToBSFromGS_AskRegister = 32769,
  eMsgToBSFromGS_ReportAllClientInfo = 32770,
  eMsgToBSFromGS_OneUserLoginTokenRet = 32771,
  eMsgToBSFromGS_End = 32800
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgToBSFromGS_Begin;
const MsgID MsgID_MAX = eMsgToBSFromGS_End;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class AskRegister : public ::google::protobuf::Message {
 public:
  AskRegister();
  virtual ~AskRegister();

  AskRegister(const AskRegister& from);

  inline AskRegister& operator=(const AskRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRegister& default_instance();

  void Swap(AskRegister* other);

  // implements Message ----------------------------------------------

  AskRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRegister& from);
  void MergeFrom(const AskRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::GSToBS::MsgID mgsid() const;
  inline void set_mgsid(::GSToBS::MsgID value);

  // optional int32 gsid = 2;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 2;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 listenport = 3;
  inline bool has_listenport() const;
  inline void clear_listenport();
  static const int kListenportFieldNumber = 3;
  inline ::google::protobuf::int32 listenport() const;
  inline void set_listenport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GSToBS.AskRegister)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_listenport();
  inline void clear_has_listenport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::int32 gsid_;
  ::google::protobuf::int32 listenport_;
  friend void  protobuf_AddDesc_GSToBS_2eproto();
  friend void protobuf_AssignDesc_GSToBS_2eproto();
  friend void protobuf_ShutdownFile_GSToBS_2eproto();

  void InitAsDefaultInstance();
  static AskRegister* default_instance_;
};
// -------------------------------------------------------------------

class ReportAllClientInf : public ::google::protobuf::Message {
 public:
  ReportAllClientInf();
  virtual ~ReportAllClientInf();

  ReportAllClientInf(const ReportAllClientInf& from);

  inline ReportAllClientInf& operator=(const ReportAllClientInf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportAllClientInf& default_instance();

  void Swap(ReportAllClientInf* other);

  // implements Message ----------------------------------------------

  ReportAllClientInf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportAllClientInf& from);
  void MergeFrom(const ReportAllClientInf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::GSToBS::MsgID msgid() const;
  inline void set_msgid(::GSToBS::MsgID value);

  // optional uint32 tokenlist_size = 2;
  inline bool has_tokenlist_size() const;
  inline void clear_tokenlist_size();
  static const int kTokenlistSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 tokenlist_size() const;
  inline void set_tokenlist_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GSToBS.ReportAllClientInf)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_tokenlist_size();
  inline void clear_has_tokenlist_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::uint32 tokenlist_size_;
  friend void  protobuf_AddDesc_GSToBS_2eproto();
  friend void protobuf_AssignDesc_GSToBS_2eproto();
  friend void protobuf_ShutdownFile_GSToBS_2eproto();

  void InitAsDefaultInstance();
  static ReportAllClientInf* default_instance_;
};
// ===================================================================


// ===================================================================

// AskRegister

// optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
inline bool AskRegister::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRegister::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRegister::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRegister::clear_mgsid() {
  mgsid_ = 32769;
  clear_has_mgsid();
}
inline ::GSToBS::MsgID AskRegister::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToBS.AskRegister.mgsid)
  return static_cast< ::GSToBS::MsgID >(mgsid_);
}
inline void AskRegister::set_mgsid(::GSToBS::MsgID value) {
  assert(::GSToBS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:GSToBS.AskRegister.mgsid)
}

// optional int32 gsid = 2;
inline bool AskRegister::has_gsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskRegister::set_has_gsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskRegister::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskRegister::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 AskRegister::gsid() const {
  // @@protoc_insertion_point(field_get:GSToBS.AskRegister.gsid)
  return gsid_;
}
inline void AskRegister::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:GSToBS.AskRegister.gsid)
}

// optional int32 listenport = 3;
inline bool AskRegister::has_listenport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskRegister::set_has_listenport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskRegister::clear_has_listenport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskRegister::clear_listenport() {
  listenport_ = 0;
  clear_has_listenport();
}
inline ::google::protobuf::int32 AskRegister::listenport() const {
  // @@protoc_insertion_point(field_get:GSToBS.AskRegister.listenport)
  return listenport_;
}
inline void AskRegister::set_listenport(::google::protobuf::int32 value) {
  set_has_listenport();
  listenport_ = value;
  // @@protoc_insertion_point(field_set:GSToBS.AskRegister.listenport)
}

// -------------------------------------------------------------------

// ReportAllClientInf

// optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
inline bool ReportAllClientInf::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportAllClientInf::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportAllClientInf::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportAllClientInf::clear_msgid() {
  msgid_ = 32770;
  clear_has_msgid();
}
inline ::GSToBS::MsgID ReportAllClientInf::msgid() const {
  // @@protoc_insertion_point(field_get:GSToBS.ReportAllClientInf.msgid)
  return static_cast< ::GSToBS::MsgID >(msgid_);
}
inline void ReportAllClientInf::set_msgid(::GSToBS::MsgID value) {
  assert(::GSToBS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:GSToBS.ReportAllClientInf.msgid)
}

// optional uint32 tokenlist_size = 2;
inline bool ReportAllClientInf::has_tokenlist_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportAllClientInf::set_has_tokenlist_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportAllClientInf::clear_has_tokenlist_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportAllClientInf::clear_tokenlist_size() {
  tokenlist_size_ = 0u;
  clear_has_tokenlist_size();
}
inline ::google::protobuf::uint32 ReportAllClientInf::tokenlist_size() const {
  // @@protoc_insertion_point(field_get:GSToBS.ReportAllClientInf.tokenlist_size)
  return tokenlist_size_;
}
inline void ReportAllClientInf::set_tokenlist_size(::google::protobuf::uint32 value) {
  set_has_tokenlist_size();
  tokenlist_size_ = value;
  // @@protoc_insertion_point(field_set:GSToBS.ReportAllClientInf.tokenlist_size)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GSToBS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GSToBS::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GSToBS::MsgID>() {
  return ::GSToBS::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GSToBS_2eproto__INCLUDED
