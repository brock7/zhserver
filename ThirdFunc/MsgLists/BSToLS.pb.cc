// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BSToLS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BSToLS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BSToLS {

namespace {

const ::google::protobuf::Descriptor* AskRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegister_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BSToLS_2eproto() {
  protobuf_AddDesc_BSToLS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BSToLS.proto");
  GOOGLE_CHECK(file != NULL);
  AskRegister_descriptor_ = file->message_type(0);
  static const int AskRegister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegister, msgid_),
  };
  AskRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegister_descriptor_,
      AskRegister::default_instance_,
      AskRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegister));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BSToLS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegister_descriptor_, &AskRegister::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BSToLS_2eproto() {
  delete AskRegister::default_instance_;
  delete AskRegister_reflection_;
}

void protobuf_AddDesc_BSToLS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014BSToLS.proto\022\006BSToLS\"G\n\013AskRegister\0228\n"
    "\005msgid\030\001 \001(\0162\r.BSToLS.MsgID:\032eMsgToLSFro"
    "mBS_AskRegister*\211\001\n\005MsgID\022\032\n\024eMsgToLSFro"
    "mBS_Begin\020\200\300\002\022 \n\032eMsgToLSFromBS_AskRegis"
    "ter\020\201\300\002\022(\n\"eMsgToLSFromBC_OneClinetLogin"
    "Check\020\202\300\002\022\030\n\022eMsgToLSFromBS_End\020\250\300\002", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BSToLS.proto", &protobuf_RegisterTypes);
  AskRegister::default_instance_ = new AskRegister();
  AskRegister::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BSToLS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BSToLS_2eproto {
  StaticDescriptorInitializer_BSToLS_2eproto() {
    protobuf_AddDesc_BSToLS_2eproto();
  }
} static_descriptor_initializer_BSToLS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 40960:
    case 40961:
    case 40962:
    case 41000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegister::kMsgidFieldNumber;
#endif  // !_MSC_VER

AskRegister::AskRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BSToLS.AskRegister)
}

void AskRegister::InitAsDefaultInstance() {
}

AskRegister::AskRegister(const AskRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BSToLS.AskRegister)
}

void AskRegister::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 40961;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegister::~AskRegister() {
  // @@protoc_insertion_point(destructor:BSToLS.AskRegister)
  SharedDtor();
}

void AskRegister::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegister_descriptor_;
}

const AskRegister& AskRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BSToLS_2eproto();
  return *default_instance_;
}

AskRegister* AskRegister::default_instance_ = NULL;

AskRegister* AskRegister::New() const {
  return new AskRegister;
}

void AskRegister::Clear() {
  msgid_ = 40961;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BSToLS.AskRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BSToLS.MsgID msgid = 1 [default = eMsgToLSFromBS_AskRegister];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BSToLS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::BSToLS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BSToLS.AskRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BSToLS.AskRegister)
  return false;
#undef DO_
}

void AskRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BSToLS.AskRegister)
  // optional .BSToLS.MsgID msgid = 1 [default = eMsgToLSFromBS_AskRegister];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BSToLS.AskRegister)
}

::google::protobuf::uint8* AskRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BSToLS.AskRegister)
  // optional .BSToLS.MsgID msgid = 1 [default = eMsgToLSFromBS_AskRegister];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BSToLS.AskRegister)
  return target;
}

int AskRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BSToLS.MsgID msgid = 1 [default = eMsgToLSFromBS_AskRegister];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegister::MergeFrom(const AskRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegister::CopyFrom(const AskRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegister::IsInitialized() const {

  return true;
}

void AskRegister::Swap(AskRegister* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegister_descriptor_;
  metadata.reflection = AskRegister_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BSToLS

// @@protoc_insertion_point(global_scope)
