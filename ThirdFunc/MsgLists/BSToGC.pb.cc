// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BSToGC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BSToGC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BSToGC {

namespace {

const ::google::protobuf::Descriptor* AskGateAddressRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskGateAddressRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClinetLoginCheckRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClinetLoginCheckRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BSToGC_2eproto() {
  protobuf_AddDesc_BSToGC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BSToGC.proto");
  GOOGLE_CHECK(file != NULL);
  AskGateAddressRet_descriptor_ = file->message_type(0);
  static const int AskGateAddressRet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, gateclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, ip_),
  };
  AskGateAddressRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskGateAddressRet_descriptor_,
      AskGateAddressRet::default_instance_,
      AskGateAddressRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddressRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskGateAddressRet));
  ClinetLoginCheckRet_descriptor_ = file->message_type(1);
  static const int ClinetLoginCheckRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClinetLoginCheckRet, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClinetLoginCheckRet, login_success_),
  };
  ClinetLoginCheckRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClinetLoginCheckRet_descriptor_,
      ClinetLoginCheckRet::default_instance_,
      ClinetLoginCheckRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClinetLoginCheckRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClinetLoginCheckRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClinetLoginCheckRet));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BSToGC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskGateAddressRet_descriptor_, &AskGateAddressRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClinetLoginCheckRet_descriptor_, &ClinetLoginCheckRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BSToGC_2eproto() {
  delete AskGateAddressRet::default_instance_;
  delete AskGateAddressRet_reflection_;
  delete ClinetLoginCheckRet::default_instance_;
  delete ClinetLoginCheckRet_reflection_;
}

void protobuf_AddDesc_BSToGC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014BSToGC.proto\022\006BSToGC\"\243\001\n\021AskGateAddres"
    "sRet\022>\n\005mgsid\030\001 \001(\0162\r.BSToGC.MsgID: eMsg"
    "ToGCFromBS_AskGateAddressRet\022\022\n\ngateclie"
    "nt\030\002 \001(\005\022\r\n\005token\030\003 \001(\t\022\021\n\tuser_name\030\004 \001"
    "(\t\022\014\n\004port\030\005 \001(\005\022\n\n\002ip\030\006 \001(\t\"q\n\023ClinetLo"
    "ginCheckRet\022C\n\005mgsid\030\001 \001(\0162\r.BSToGC.MsgI"
    "D:%eMsgToGCFromBS_OneClinetLoginCheckRet"
    "\022\025\n\rlogin_success\030\002 \001(\r*Z\n\005MsgID\022%\n eMsg"
    "ToGCFromBS_AskGateAddressRet\020\313\001\022*\n%eMsgT"
    "oGCFromBS_OneClinetLoginCheckRet\020\314\001", 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BSToGC.proto", &protobuf_RegisterTypes);
  AskGateAddressRet::default_instance_ = new AskGateAddressRet();
  ClinetLoginCheckRet::default_instance_ = new ClinetLoginCheckRet();
  AskGateAddressRet::default_instance_->InitAsDefaultInstance();
  ClinetLoginCheckRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BSToGC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BSToGC_2eproto {
  StaticDescriptorInitializer_BSToGC_2eproto() {
    protobuf_AddDesc_BSToGC_2eproto();
  }
} static_descriptor_initializer_BSToGC_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskGateAddressRet::kMgsidFieldNumber;
const int AskGateAddressRet::kGateclientFieldNumber;
const int AskGateAddressRet::kTokenFieldNumber;
const int AskGateAddressRet::kUserNameFieldNumber;
const int AskGateAddressRet::kPortFieldNumber;
const int AskGateAddressRet::kIpFieldNumber;
#endif  // !_MSC_VER

AskGateAddressRet::AskGateAddressRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BSToGC.AskGateAddressRet)
}

void AskGateAddressRet::InitAsDefaultInstance() {
}

AskGateAddressRet::AskGateAddressRet(const AskGateAddressRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BSToGC.AskGateAddressRet)
}

void AskGateAddressRet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 203;
  gateclient_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskGateAddressRet::~AskGateAddressRet() {
  // @@protoc_insertion_point(destructor:BSToGC.AskGateAddressRet)
  SharedDtor();
}

void AskGateAddressRet::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AskGateAddressRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskGateAddressRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskGateAddressRet_descriptor_;
}

const AskGateAddressRet& AskGateAddressRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BSToGC_2eproto();
  return *default_instance_;
}

AskGateAddressRet* AskGateAddressRet::default_instance_ = NULL;

AskGateAddressRet* AskGateAddressRet::New() const {
  return new AskGateAddressRet;
}

void AskGateAddressRet::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    mgsid_ = 203;
    gateclient_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    port_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskGateAddressRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BSToGC.AskGateAddressRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_AskGateAddressRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BSToGC::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::BSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gateclient;
        break;
      }

      // optional int32 gateclient = 2;
      case 2: {
        if (tag == 16) {
         parse_gateclient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateclient_)));
          set_has_gateclient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (tag == 34) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BSToGC.AskGateAddressRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BSToGC.AskGateAddressRet)
  return false;
#undef DO_
}

void AskGateAddressRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BSToGC.AskGateAddressRet)
  // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_AskGateAddressRet];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 gateclient = 2;
  if (has_gateclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateclient(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_name(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BSToGC.AskGateAddressRet)
}

::google::protobuf::uint8* AskGateAddressRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BSToGC.AskGateAddressRet)
  // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_AskGateAddressRet];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 gateclient = 2;
  if (has_gateclient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateclient(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_name(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BSToGC.AskGateAddressRet)
  return target;
}

int AskGateAddressRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_AskGateAddressRet];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 gateclient = 2;
    if (has_gateclient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateclient());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskGateAddressRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskGateAddressRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskGateAddressRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskGateAddressRet::MergeFrom(const AskGateAddressRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_gateclient()) {
      set_gateclient(from.gateclient());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskGateAddressRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskGateAddressRet::CopyFrom(const AskGateAddressRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskGateAddressRet::IsInitialized() const {

  return true;
}

void AskGateAddressRet::Swap(AskGateAddressRet* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(gateclient_, other->gateclient_);
    std::swap(token_, other->token_);
    std::swap(user_name_, other->user_name_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskGateAddressRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskGateAddressRet_descriptor_;
  metadata.reflection = AskGateAddressRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClinetLoginCheckRet::kMgsidFieldNumber;
const int ClinetLoginCheckRet::kLoginSuccessFieldNumber;
#endif  // !_MSC_VER

ClinetLoginCheckRet::ClinetLoginCheckRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BSToGC.ClinetLoginCheckRet)
}

void ClinetLoginCheckRet::InitAsDefaultInstance() {
}

ClinetLoginCheckRet::ClinetLoginCheckRet(const ClinetLoginCheckRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BSToGC.ClinetLoginCheckRet)
}

void ClinetLoginCheckRet::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 204;
  login_success_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClinetLoginCheckRet::~ClinetLoginCheckRet() {
  // @@protoc_insertion_point(destructor:BSToGC.ClinetLoginCheckRet)
  SharedDtor();
}

void ClinetLoginCheckRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClinetLoginCheckRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClinetLoginCheckRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClinetLoginCheckRet_descriptor_;
}

const ClinetLoginCheckRet& ClinetLoginCheckRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BSToGC_2eproto();
  return *default_instance_;
}

ClinetLoginCheckRet* ClinetLoginCheckRet::default_instance_ = NULL;

ClinetLoginCheckRet* ClinetLoginCheckRet::New() const {
  return new ClinetLoginCheckRet;
}

void ClinetLoginCheckRet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 204;
    login_success_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClinetLoginCheckRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BSToGC.ClinetLoginCheckRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_OneClinetLoginCheckRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BSToGC::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::BSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_success;
        break;
      }

      // optional uint32 login_success = 2;
      case 2: {
        if (tag == 16) {
         parse_login_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_success_)));
          set_has_login_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BSToGC.ClinetLoginCheckRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BSToGC.ClinetLoginCheckRet)
  return false;
#undef DO_
}

void ClinetLoginCheckRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BSToGC.ClinetLoginCheckRet)
  // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_OneClinetLoginCheckRet];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint32 login_success = 2;
  if (has_login_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BSToGC.ClinetLoginCheckRet)
}

::google::protobuf::uint8* ClinetLoginCheckRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BSToGC.ClinetLoginCheckRet)
  // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_OneClinetLoginCheckRet];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint32 login_success = 2;
  if (has_login_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BSToGC.ClinetLoginCheckRet)
  return target;
}

int ClinetLoginCheckRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_OneClinetLoginCheckRet];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint32 login_success = 2;
    if (has_login_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClinetLoginCheckRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClinetLoginCheckRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClinetLoginCheckRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClinetLoginCheckRet::MergeFrom(const ClinetLoginCheckRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_login_success()) {
      set_login_success(from.login_success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClinetLoginCheckRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClinetLoginCheckRet::CopyFrom(const ClinetLoginCheckRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClinetLoginCheckRet::IsInitialized() const {

  return true;
}

void ClinetLoginCheckRet::Swap(ClinetLoginCheckRet* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(login_success_, other->login_success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClinetLoginCheckRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClinetLoginCheckRet_descriptor_;
  metadata.reflection = ClinetLoginCheckRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BSToGC

// @@protoc_insertion_point(global_scope)
