// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GCToBS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GCToBS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GCToBS {

namespace {

const ::google::protobuf::Descriptor* AskGateAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskGateAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneClinetLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneClinetLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgNum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GCToBS_2eproto() {
  protobuf_AddDesc_GCToBS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GCToBS.proto");
  GOOGLE_CHECK(file != NULL);
  AskGateAddress_descriptor_ = file->message_type(0);
  static const int AskGateAddress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddress, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddress, plat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddress, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddress, token_),
  };
  AskGateAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskGateAddress_descriptor_,
      AskGateAddress::default_instance_,
      AskGateAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGateAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskGateAddress));
  OneClinetLogin_descriptor_ = file->message_type(1);
  static const int OneClinetLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, plat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, login_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, nsid_),
  };
  OneClinetLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneClinetLogin_descriptor_,
      OneClinetLogin::default_instance_,
      OneClinetLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneClinetLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneClinetLogin));
  MsgNum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GCToBS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskGateAddress_descriptor_, &AskGateAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneClinetLogin_descriptor_, &OneClinetLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GCToBS_2eproto() {
  delete AskGateAddress::default_instance_;
  delete AskGateAddress_reflection_;
  delete OneClinetLogin::default_instance_;
  delete OneClinetLogin_reflection_;
}

void protobuf_AddDesc_GCToBS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GCToBS.proto\022\006GCToBS\"~\n\016AskGateAddress"
    "\022=\n\006msgnum\030\001 \001(\0162\016.GCToBS.MsgNum:\035eMsgTo"
    "BSFromGC_AskGateAddress\022\014\n\004plat\030\002 \001(\005\022\020\n"
    "\010username\030\003 \001(\t\022\r\n\005token\030\004 \001(\t\"\242\001\n\016OneCl"
    "inetLogin\022=\n\006msgnum\030\001 \001(\0162\016.GCToBS.MsgNu"
    "m:\035eMsgToBSFromGC_OneClinetLogin\022\013\n\003uin\030"
    "\002 \001(\t\022\021\n\tsessionid\030\003 \001(\t\022\014\n\004plat\030\004 \001(\r\022\025"
    "\n\rlogin_success\030\005 \001(\r\022\014\n\004nsid\030\006 \001(\r*\210\001\n\006"
    "MsgNum\022\032\n\024eMsgToBSFromGC_Begin\020\200\200\002\022#\n\035eM"
    "sgToBSFromGC_AskGateAddress\020\201\200\002\022#\n\035eMsgT"
    "oBSFromGC_OneClinetLogin\020\202\200\002\022\030\n\022eMsgToBS"
    "FromGC_End\020\350\201\002", 454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GCToBS.proto", &protobuf_RegisterTypes);
  AskGateAddress::default_instance_ = new AskGateAddress();
  OneClinetLogin::default_instance_ = new OneClinetLogin();
  AskGateAddress::default_instance_->InitAsDefaultInstance();
  OneClinetLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GCToBS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GCToBS_2eproto {
  StaticDescriptorInitializer_GCToBS_2eproto() {
    protobuf_AddDesc_GCToBS_2eproto();
  }
} static_descriptor_initializer_GCToBS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgNum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNum_descriptor_;
}
bool MsgNum_IsValid(int value) {
  switch(value) {
    case 32768:
    case 32769:
    case 32770:
    case 33000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskGateAddress::kMsgnumFieldNumber;
const int AskGateAddress::kPlatFieldNumber;
const int AskGateAddress::kUsernameFieldNumber;
const int AskGateAddress::kTokenFieldNumber;
#endif  // !_MSC_VER

AskGateAddress::AskGateAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToBS.AskGateAddress)
}

void AskGateAddress::InitAsDefaultInstance() {
}

AskGateAddress::AskGateAddress(const AskGateAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToBS.AskGateAddress)
}

void AskGateAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 32769;
  plat_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskGateAddress::~AskGateAddress() {
  // @@protoc_insertion_point(destructor:GCToBS.AskGateAddress)
  SharedDtor();
}

void AskGateAddress::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AskGateAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskGateAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskGateAddress_descriptor_;
}

const AskGateAddress& AskGateAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToBS_2eproto();
  return *default_instance_;
}

AskGateAddress* AskGateAddress::default_instance_ = NULL;

AskGateAddress* AskGateAddress::New() const {
  return new AskGateAddress;
}

void AskGateAddress::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgnum_ = 32769;
    plat_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskGateAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToBS.AskGateAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_AskGateAddress];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToBS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToBS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plat;
        break;
      }

      // optional int32 plat = 2;
      case 2: {
        if (tag == 16) {
         parse_plat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plat_)));
          set_has_plat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToBS.AskGateAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToBS.AskGateAddress)
  return false;
#undef DO_
}

void AskGateAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToBS.AskGateAddress)
  // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_AskGateAddress];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 plat = 2;
  if (has_plat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plat(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToBS.AskGateAddress)
}

::google::protobuf::uint8* AskGateAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToBS.AskGateAddress)
  // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_AskGateAddress];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 plat = 2;
  if (has_plat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plat(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToBS.AskGateAddress)
  return target;
}

int AskGateAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_AskGateAddress];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 plat = 2;
    if (has_plat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plat());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskGateAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskGateAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskGateAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskGateAddress::MergeFrom(const AskGateAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_plat()) {
      set_plat(from.plat());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskGateAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskGateAddress::CopyFrom(const AskGateAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskGateAddress::IsInitialized() const {

  return true;
}

void AskGateAddress::Swap(AskGateAddress* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(plat_, other->plat_);
    std::swap(username_, other->username_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskGateAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskGateAddress_descriptor_;
  metadata.reflection = AskGateAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneClinetLogin::kMsgnumFieldNumber;
const int OneClinetLogin::kUinFieldNumber;
const int OneClinetLogin::kSessionidFieldNumber;
const int OneClinetLogin::kPlatFieldNumber;
const int OneClinetLogin::kLoginSuccessFieldNumber;
const int OneClinetLogin::kNsidFieldNumber;
#endif  // !_MSC_VER

OneClinetLogin::OneClinetLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCToBS.OneClinetLogin)
}

void OneClinetLogin::InitAsDefaultInstance() {
}

OneClinetLogin::OneClinetLogin(const OneClinetLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCToBS.OneClinetLogin)
}

void OneClinetLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 32770;
  uin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plat_ = 0u;
  login_success_ = 0u;
  nsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneClinetLogin::~OneClinetLogin() {
  // @@protoc_insertion_point(destructor:GCToBS.OneClinetLogin)
  SharedDtor();
}

void OneClinetLogin::SharedDtor() {
  if (uin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uin_;
  }
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (this != default_instance_) {
  }
}

void OneClinetLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneClinetLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneClinetLogin_descriptor_;
}

const OneClinetLogin& OneClinetLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GCToBS_2eproto();
  return *default_instance_;
}

OneClinetLogin* OneClinetLogin::default_instance_ = NULL;

OneClinetLogin* OneClinetLogin::New() const {
  return new OneClinetLogin;
}

void OneClinetLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OneClinetLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(login_success_, nsid_);
    msgnum_ = 32770;
    if (has_uin()) {
      if (uin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uin_->clear();
      }
    }
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sessionid_->clear();
      }
    }
    plat_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneClinetLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCToBS.OneClinetLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_OneClinetLogin];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCToBS::MsgNum_IsValid(value)) {
            set_msgnum(static_cast< ::GCToBS::MsgNum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uin;
        break;
      }

      // optional string uin = 2;
      case 2: {
        if (tag == 18) {
         parse_uin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uin().data(), this->uin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sessionid;
        break;
      }

      // optional string sessionid = 3;
      case 3: {
        if (tag == 26) {
         parse_sessionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sessionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plat;
        break;
      }

      // optional uint32 plat = 4;
      case 4: {
        if (tag == 32) {
         parse_plat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plat_)));
          set_has_plat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_login_success;
        break;
      }

      // optional uint32 login_success = 5;
      case 5: {
        if (tag == 40) {
         parse_login_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_success_)));
          set_has_login_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nsid;
        break;
      }

      // optional uint32 nsid = 6;
      case 6: {
        if (tag == 48) {
         parse_nsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsid_)));
          set_has_nsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCToBS.OneClinetLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCToBS.OneClinetLogin)
  return false;
#undef DO_
}

void OneClinetLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCToBS.OneClinetLogin)
  // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_OneClinetLogin];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uin().data(), this->uin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uin(), output);
  }

  // optional string sessionid = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sessionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sessionid(), output);
  }

  // optional uint32 plat = 4;
  if (has_plat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->plat(), output);
  }

  // optional uint32 login_success = 5;
  if (has_login_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->login_success(), output);
  }

  // optional uint32 nsid = 6;
  if (has_nsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCToBS.OneClinetLogin)
}

::google::protobuf::uint8* OneClinetLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCToBS.OneClinetLogin)
  // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_OneClinetLogin];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uin().data(), this->uin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uin(), target);
  }

  // optional string sessionid = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sessionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionid(), target);
  }

  // optional uint32 plat = 4;
  if (has_plat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->plat(), target);
  }

  // optional uint32 login_success = 5;
  if (has_login_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->login_success(), target);
  }

  // optional uint32 nsid = 6;
  if (has_nsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCToBS.OneClinetLogin)
  return target;
}

int OneClinetLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GCToBS.MsgNum msgnum = 1 [default = eMsgToBSFromGC_OneClinetLogin];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uin());
    }

    // optional string sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionid());
    }

    // optional uint32 plat = 4;
    if (has_plat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plat());
    }

    // optional uint32 login_success = 5;
    if (has_login_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_success());
    }

    // optional uint32 nsid = 6;
    if (has_nsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneClinetLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneClinetLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneClinetLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneClinetLogin::MergeFrom(const OneClinetLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_plat()) {
      set_plat(from.plat());
    }
    if (from.has_login_success()) {
      set_login_success(from.login_success());
    }
    if (from.has_nsid()) {
      set_nsid(from.nsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneClinetLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneClinetLogin::CopyFrom(const OneClinetLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneClinetLogin::IsInitialized() const {

  return true;
}

void OneClinetLogin::Swap(OneClinetLogin* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(uin_, other->uin_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(plat_, other->plat_);
    std::swap(login_success_, other->login_success_);
    std::swap(nsid_, other->nsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneClinetLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneClinetLogin_descriptor_;
  metadata.reflection = OneClinetLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GCToBS

// @@protoc_insertion_point(global_scope)
