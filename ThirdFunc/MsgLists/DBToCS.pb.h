// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBToCS.proto

#ifndef PROTOBUF_DBToCS_2eproto__INCLUDED
#define PROTOBUF_DBToCS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DBToCS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DBToCS_2eproto();
void protobuf_AssignDesc_DBToCS_2eproto();
void protobuf_ShutdownFile_DBToCS_2eproto();

class CDKeyEvents;
class CDKeyEvents_event_info;
class QueryAllAccount;
class QueryAllAccount_Account;
class MailCallBack;
class QueryNotice;
class QueryNotice_Notice;
class ChangeNickname;
class BuyGoods;
class CheckNameRsp;
class HeroCfg;
class RuneInfo;
class RSinfo;
class ItemInfo;
class MailInfo;
class QueryUser;
class QueryAllUser;

enum MsgID {
  eCheckNickNameLogicCallBack = 1,
  eQueryUser_DBCallBack = 2,
  eBuyGoodsCallBack = 3,
  eChangeNickname_CallBack = 4,
  eQueryNotice_CallBack = 5,
  eMail_CallBack = 6,
  eQueryAllAccount_CallBack = 7,
  eQueryCDKeyEvents_CallBack = 8,
  eQueryAllUser_CallBack = 9
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eCheckNickNameLogicCallBack;
const MsgID MsgID_MAX = eQueryAllUser_CallBack;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class CDKeyEvents_event_info : public ::google::protobuf::Message {
 public:
  CDKeyEvents_event_info();
  virtual ~CDKeyEvents_event_info();

  CDKeyEvents_event_info(const CDKeyEvents_event_info& from);

  inline CDKeyEvents_event_info& operator=(const CDKeyEvents_event_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDKeyEvents_event_info& default_instance();

  void Swap(CDKeyEvents_event_info* other);

  // implements Message ----------------------------------------------

  CDKeyEvents_event_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDKeyEvents_event_info& from);
  void MergeFrom(const CDKeyEvents_event_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional uint64 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gift_type = 6;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 6;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);

  // optional string item_info = 7;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 7;
  inline const ::std::string& item_info() const;
  inline void set_item_info(const ::std::string& value);
  inline void set_item_info(const char* value);
  inline void set_item_info(const char* value, size_t size);
  inline ::std::string* mutable_item_info();
  inline ::std::string* release_item_info();
  inline void set_allocated_item_info(::std::string* item_info);

  // optional int32 code_num = 8;
  inline bool has_code_num() const;
  inline void clear_code_num();
  static const int kCodeNumFieldNumber = 8;
  inline ::google::protobuf::int32 code_num() const;
  inline void set_code_num(::google::protobuf::int32 value);

  // optional int32 code_len = 9;
  inline bool has_code_len() const;
  inline void clear_code_len();
  static const int kCodeLenFieldNumber = 9;
  inline ::google::protobuf::int32 code_len() const;
  inline void set_code_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.CDKeyEvents.event_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_code_num();
  inline void clear_has_code_num();
  inline void set_has_code_len();
  inline void clear_has_code_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::uint64 end_time_;
  ::std::string* content_;
  ::std::string* item_info_;
  ::google::protobuf::int32 gift_type_;
  ::google::protobuf::int32 code_num_;
  ::google::protobuf::int32 code_len_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static CDKeyEvents_event_info* default_instance_;
};
// -------------------------------------------------------------------

class CDKeyEvents : public ::google::protobuf::Message {
 public:
  CDKeyEvents();
  virtual ~CDKeyEvents();

  CDKeyEvents(const CDKeyEvents& from);

  inline CDKeyEvents& operator=(const CDKeyEvents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDKeyEvents& default_instance();

  void Swap(CDKeyEvents* other);

  // implements Message ----------------------------------------------

  CDKeyEvents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDKeyEvents& from);
  void MergeFrom(const CDKeyEvents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CDKeyEvents_event_info event_info;

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryCDKeyEvents_CallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // repeated .DBToCS.CDKeyEvents.event_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::DBToCS::CDKeyEvents_event_info& info(int index) const;
  inline ::DBToCS::CDKeyEvents_event_info* mutable_info(int index);
  inline ::DBToCS::CDKeyEvents_event_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::CDKeyEvents_event_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::CDKeyEvents_event_info >*
      mutable_info();

  // optional int32 nsid = 3;
  inline bool has_nsid() const;
  inline void clear_nsid();
  static const int kNsidFieldNumber = 3;
  inline ::google::protobuf::int32 nsid() const;
  inline void set_nsid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.CDKeyEvents)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_nsid();
  inline void clear_has_nsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::CDKeyEvents_event_info > info_;
  int mgsid_;
  ::google::protobuf::int32 nsid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static CDKeyEvents* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllAccount_Account : public ::google::protobuf::Message {
 public:
  QueryAllAccount_Account();
  virtual ~QueryAllAccount_Account();

  QueryAllAccount_Account(const QueryAllAccount_Account& from);

  inline QueryAllAccount_Account& operator=(const QueryAllAccount_Account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllAccount_Account& default_instance();

  void Swap(QueryAllAccount_Account* other);

  // implements Message ----------------------------------------------

  QueryAllAccount_Account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllAccount_Account& from);
  void MergeFrom(const QueryAllAccount_Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional int32 csid = 2;
  inline bool has_csid() const;
  inline void clear_csid();
  static const int kCsidFieldNumber = 2;
  inline ::google::protobuf::int32 csid() const;
  inline void set_csid(::google::protobuf::int32 value);

  // optional int32 sdkid = 3;
  inline bool has_sdkid() const;
  inline void clear_sdkid();
  static const int kSdkidFieldNumber = 3;
  inline ::google::protobuf::int32 sdkid() const;
  inline void set_sdkid(::google::protobuf::int32 value);

  // optional string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DBToCS.QueryAllAccount.Account)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_csid();
  inline void clear_has_csid();
  inline void set_has_sdkid();
  inline void clear_has_sdkid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::google::protobuf::int32 csid_;
  ::google::protobuf::int32 sdkid_;
  ::std::string* nickname_;
  ::google::protobuf::int64 guid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryAllAccount_Account* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllAccount : public ::google::protobuf::Message {
 public:
  QueryAllAccount();
  virtual ~QueryAllAccount();

  QueryAllAccount(const QueryAllAccount& from);

  inline QueryAllAccount& operator=(const QueryAllAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllAccount& default_instance();

  void Swap(QueryAllAccount* other);

  // implements Message ----------------------------------------------

  QueryAllAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllAccount& from);
  void MergeFrom(const QueryAllAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryAllAccount_Account Account;

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryAllAccount_CallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // repeated .DBToCS.QueryAllAccount.Account account = 2;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::DBToCS::QueryAllAccount_Account& account(int index) const;
  inline ::DBToCS::QueryAllAccount_Account* mutable_account(int index);
  inline ::DBToCS::QueryAllAccount_Account* add_account();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryAllAccount_Account >&
      account() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryAllAccount_Account >*
      mutable_account();

  // @@protoc_insertion_point(class_scope:DBToCS.QueryAllAccount)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryAllAccount_Account > account_;
  int mgsid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryAllAccount* default_instance_;
};
// -------------------------------------------------------------------

class MailCallBack : public ::google::protobuf::Message {
 public:
  MailCallBack();
  virtual ~MailCallBack();

  MailCallBack(const MailCallBack& from);

  inline MailCallBack& operator=(const MailCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailCallBack& default_instance();

  void Swap(MailCallBack* other);

  // implements Message ----------------------------------------------

  MailCallBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailCallBack& from);
  void MergeFrom(const MailCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eMail_CallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // optional int32 mailid = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 2;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // optional int32 mailtype = 3;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 3;
  inline ::google::protobuf::int32 mailtype() const;
  inline void set_mailtype(::google::protobuf::int32 value);

  // optional int32 channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string gift = 7;
  inline bool has_gift() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 7;
  inline const ::std::string& gift() const;
  inline void set_gift(const ::std::string& value);
  inline void set_gift(const char* value);
  inline void set_gift(const char* value, size_t size);
  inline ::std::string* mutable_gift();
  inline ::std::string* release_gift();
  inline void set_allocated_gift(::std::string* gift);

  // optional string sender = 8;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 8;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional string createtime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 9;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional int64 objid = 10;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjidFieldNumber = 10;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DBToCS.MailCallBack)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gift();
  inline void clear_has_gift();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::int32 mailid_;
  ::google::protobuf::int32 mailtype_;
  ::google::protobuf::int32 channel_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* gift_;
  ::std::string* sender_;
  ::std::string* createtime_;
  ::google::protobuf::int64 objid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static MailCallBack* default_instance_;
};
// -------------------------------------------------------------------

class QueryNotice_Notice : public ::google::protobuf::Message {
 public:
  QueryNotice_Notice();
  virtual ~QueryNotice_Notice();

  QueryNotice_Notice(const QueryNotice_Notice& from);

  inline QueryNotice_Notice& operator=(const QueryNotice_Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNotice_Notice& default_instance();

  void Swap(QueryNotice_Notice* other);

  // implements Message ----------------------------------------------

  QueryNotice_Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNotice_Notice& from);
  void MergeFrom(const QueryNotice_Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 eflag = 3;
  inline bool has_eflag() const;
  inline void clear_eflag();
  static const int kEflagFieldNumber = 3;
  inline ::google::protobuf::int32 eflag() const;
  inline void set_eflag(::google::protobuf::int32 value);

  // optional int32 estate = 4;
  inline bool has_estate() const;
  inline void clear_estate();
  static const int kEstateFieldNumber = 4;
  inline ::google::protobuf::int32 estate() const;
  inline void set_estate(::google::protobuf::int32 value);

  // optional int32 priority = 5;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 5;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional string notice = 6;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 6;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 star_time = 7;
  inline bool has_star_time() const;
  inline void clear_star_time();
  static const int kStarTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 star_time() const;
  inline void set_star_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 8;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional uint32 platform = 9;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 9;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.QueryNotice.Notice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_eflag();
  inline void clear_has_eflag();
  inline void set_has_estate();
  inline void clear_has_estate();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_star_time();
  inline void clear_has_star_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 eflag_;
  ::google::protobuf::int32 estate_;
  ::google::protobuf::int32 priority_;
  ::std::string* notice_;
  ::google::protobuf::uint64 star_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 platform_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryNotice_Notice* default_instance_;
};
// -------------------------------------------------------------------

class QueryNotice : public ::google::protobuf::Message {
 public:
  QueryNotice();
  virtual ~QueryNotice();

  QueryNotice(const QueryNotice& from);

  inline QueryNotice& operator=(const QueryNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNotice& default_instance();

  void Swap(QueryNotice* other);

  // implements Message ----------------------------------------------

  QueryNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNotice& from);
  void MergeFrom(const QueryNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryNotice_Notice Notice;

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryNotice_CallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // repeated .DBToCS.QueryNotice.Notice notice_info = 2;
  inline int notice_info_size() const;
  inline void clear_notice_info();
  static const int kNoticeInfoFieldNumber = 2;
  inline const ::DBToCS::QueryNotice_Notice& notice_info(int index) const;
  inline ::DBToCS::QueryNotice_Notice* mutable_notice_info(int index);
  inline ::DBToCS::QueryNotice_Notice* add_notice_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryNotice_Notice >&
      notice_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryNotice_Notice >*
      mutable_notice_info();

  // @@protoc_insertion_point(class_scope:DBToCS.QueryNotice)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryNotice_Notice > notice_info_;
  int mgsid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryNotice* default_instance_;
};
// -------------------------------------------------------------------

class ChangeNickname : public ::google::protobuf::Message {
 public:
  ChangeNickname();
  virtual ~ChangeNickname();

  ChangeNickname(const ChangeNickname& from);

  inline ChangeNickname& operator=(const ChangeNickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeNickname& default_instance();

  void Swap(ChangeNickname* other);

  // implements Message ----------------------------------------------

  ChangeNickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeNickname& from);
  void MergeFrom(const ChangeNickname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eChangeNickname_CallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // optional uint64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional bool reflag = 3;
  inline bool has_reflag() const;
  inline void clear_reflag();
  static const int kReflagFieldNumber = 3;
  inline bool reflag() const;
  inline void set_reflag(bool value);

  // optional string newnickname = 4;
  inline bool has_newnickname() const;
  inline void clear_newnickname();
  static const int kNewnicknameFieldNumber = 4;
  inline const ::std::string& newnickname() const;
  inline void set_newnickname(const ::std::string& value);
  inline void set_newnickname(const char* value);
  inline void set_newnickname(const char* value, size_t size);
  inline ::std::string* mutable_newnickname();
  inline ::std::string* release_newnickname();
  inline void set_allocated_newnickname(::std::string* newnickname);

  // optional string oldnickname = 5;
  inline bool has_oldnickname() const;
  inline void clear_oldnickname();
  static const int kOldnicknameFieldNumber = 5;
  inline const ::std::string& oldnickname() const;
  inline void set_oldnickname(const ::std::string& value);
  inline void set_oldnickname(const char* value);
  inline void set_oldnickname(const char* value, size_t size);
  inline ::std::string* mutable_oldnickname();
  inline ::std::string* release_oldnickname();
  inline void set_allocated_oldnickname(::std::string* oldnickname);

  // @@protoc_insertion_point(class_scope:DBToCS.ChangeNickname)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_reflag();
  inline void clear_has_reflag();
  inline void set_has_newnickname();
  inline void clear_has_newnickname();
  inline void set_has_oldnickname();
  inline void clear_has_oldnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  int mgsid_;
  bool reflag_;
  ::std::string* newnickname_;
  ::std::string* oldnickname_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static ChangeNickname* default_instance_;
};
// -------------------------------------------------------------------

class BuyGoods : public ::google::protobuf::Message {
 public:
  BuyGoods();
  virtual ~BuyGoods();

  BuyGoods(const BuyGoods& from);

  inline BuyGoods& operator=(const BuyGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyGoods& default_instance();

  void Swap(BuyGoods* other);

  // implements Message ----------------------------------------------

  BuyGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyGoods& from);
  void MergeFrom(const BuyGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eBuyGoodsCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // optional string buygoodsmag = 2;
  inline bool has_buygoodsmag() const;
  inline void clear_buygoodsmag();
  static const int kBuygoodsmagFieldNumber = 2;
  inline const ::std::string& buygoodsmag() const;
  inline void set_buygoodsmag(const ::std::string& value);
  inline void set_buygoodsmag(const char* value);
  inline void set_buygoodsmag(const char* value, size_t size);
  inline ::std::string* mutable_buygoodsmag();
  inline ::std::string* release_buygoodsmag();
  inline void set_allocated_buygoodsmag(::std::string* buygoodsmag);

  // @@protoc_insertion_point(class_scope:DBToCS.BuyGoods)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_buygoodsmag();
  inline void clear_has_buygoodsmag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* buygoodsmag_;
  int mgsid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static BuyGoods* default_instance_;
};
// -------------------------------------------------------------------

class CheckNameRsp : public ::google::protobuf::Message {
 public:
  CheckNameRsp();
  virtual ~CheckNameRsp();

  CheckNameRsp(const CheckNameRsp& from);

  inline CheckNameRsp& operator=(const CheckNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckNameRsp& default_instance();

  void Swap(CheckNameRsp* other);

  // implements Message ----------------------------------------------

  CheckNameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckNameRsp& from);
  void MergeFrom(const CheckNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID mgsid = 1 [default = eCheckNickNameLogicCallBack];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::DBToCS::MsgID mgsid() const;
  inline void set_mgsid(::DBToCS::MsgID value);

  // optional string completeInfo = 2;
  inline bool has_completeinfo() const;
  inline void clear_completeinfo();
  static const int kCompleteInfoFieldNumber = 2;
  inline const ::std::string& completeinfo() const;
  inline void set_completeinfo(const ::std::string& value);
  inline void set_completeinfo(const char* value);
  inline void set_completeinfo(const char* value, size_t size);
  inline ::std::string* mutable_completeinfo();
  inline ::std::string* release_completeinfo();
  inline void set_allocated_completeinfo(::std::string* completeinfo);

  // optional int32 gsid = 3;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 3;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 gcnetid = 4;
  inline bool has_gcnetid() const;
  inline void clear_gcnetid();
  static const int kGcnetidFieldNumber = 4;
  inline ::google::protobuf::int32 gcnetid() const;
  inline void set_gcnetid(::google::protobuf::int32 value);

  // optional int32 gsnetid = 5;
  inline bool has_gsnetid() const;
  inline void clear_gsnetid();
  static const int kGsnetidFieldNumber = 5;
  inline ::google::protobuf::int32 gsnetid() const;
  inline void set_gsnetid(::google::protobuf::int32 value);

  // optional int32 checkres = 6;
  inline bool has_checkres() const;
  inline void clear_checkres();
  static const int kCheckresFieldNumber = 6;
  inline ::google::protobuf::int32 checkres() const;
  inline void set_checkres(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.CheckNameRsp)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_completeinfo();
  inline void clear_has_completeinfo();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_gcnetid();
  inline void clear_has_gcnetid();
  inline void set_has_gsnetid();
  inline void clear_has_gsnetid();
  inline void set_has_checkres();
  inline void clear_has_checkres();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* completeinfo_;
  int mgsid_;
  ::google::protobuf::int32 gsid_;
  ::google::protobuf::int32 gcnetid_;
  ::google::protobuf::int32 gsnetid_;
  ::google::protobuf::int32 checkres_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static CheckNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class HeroCfg : public ::google::protobuf::Message {
 public:
  HeroCfg();
  virtual ~HeroCfg();

  HeroCfg(const HeroCfg& from);

  inline HeroCfg& operator=(const HeroCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroCfg& default_instance();

  void Swap(HeroCfg* other);

  // implements Message ----------------------------------------------

  HeroCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroCfg& from);
  void MergeFrom(const HeroCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 commodityid = 1;
  inline bool has_commodityid() const;
  inline void clear_commodityid();
  static const int kCommodityidFieldNumber = 1;
  inline ::google::protobuf::uint32 commodityid() const;
  inline void set_commodityid(::google::protobuf::uint32 value);

  // optional int64 buytime = 2;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuytimeFieldNumber = 2;
  inline ::google::protobuf::int64 buytime() const;
  inline void set_buytime(::google::protobuf::int64 value);

  // optional int64 expiredtime = 3;
  inline bool has_expiredtime() const;
  inline void clear_expiredtime();
  static const int kExpiredtimeFieldNumber = 3;
  inline ::google::protobuf::int64 expiredtime() const;
  inline void set_expiredtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DBToCS.HeroCfg)
 private:
  inline void set_has_commodityid();
  inline void clear_has_commodityid();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_expiredtime();
  inline void clear_has_expiredtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 buytime_;
  ::google::protobuf::int64 expiredtime_;
  ::google::protobuf::uint32 commodityid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static HeroCfg* default_instance_;
};
// -------------------------------------------------------------------

class RuneInfo : public ::google::protobuf::Message {
 public:
  RuneInfo();
  virtual ~RuneInfo();

  RuneInfo(const RuneInfo& from);

  inline RuneInfo& operator=(const RuneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuneInfo& default_instance();

  void Swap(RuneInfo* other);

  // implements Message ----------------------------------------------

  RuneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RuneInfo& from);
  void MergeFrom(const RuneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bagStr = 1;
  inline bool has_bagstr() const;
  inline void clear_bagstr();
  static const int kBagStrFieldNumber = 1;
  inline const ::std::string& bagstr() const;
  inline void set_bagstr(const ::std::string& value);
  inline void set_bagstr(const char* value);
  inline void set_bagstr(const char* value, size_t size);
  inline ::std::string* mutable_bagstr();
  inline ::std::string* release_bagstr();
  inline void set_allocated_bagstr(::std::string* bagstr);

  // optional string slotStr = 2;
  inline bool has_slotstr() const;
  inline void clear_slotstr();
  static const int kSlotStrFieldNumber = 2;
  inline const ::std::string& slotstr() const;
  inline void set_slotstr(const ::std::string& value);
  inline void set_slotstr(const char* value);
  inline void set_slotstr(const char* value, size_t size);
  inline ::std::string* mutable_slotstr();
  inline ::std::string* release_slotstr();
  inline void set_allocated_slotstr(::std::string* slotstr);

  // @@protoc_insertion_point(class_scope:DBToCS.RuneInfo)
 private:
  inline void set_has_bagstr();
  inline void clear_has_bagstr();
  inline void set_has_slotstr();
  inline void clear_has_slotstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bagstr_;
  ::std::string* slotstr_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static RuneInfo* default_instance_;
};
// -------------------------------------------------------------------

class RSinfo : public ::google::protobuf::Message {
 public:
  RSinfo();
  virtual ~RSinfo();

  RSinfo(const RSinfo& from);

  inline RSinfo& operator=(const RSinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RSinfo& default_instance();

  void Swap(RSinfo* other);

  // implements Message ----------------------------------------------

  RSinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RSinfo& from);
  void MergeFrom(const RSinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 related_id = 1;
  inline bool has_related_id() const;
  inline void clear_related_id();
  static const int kRelatedIdFieldNumber = 1;
  inline ::google::protobuf::uint64 related_id() const;
  inline void set_related_id(::google::protobuf::uint64 value);

  // optional uint32 related_header = 2;
  inline bool has_related_header() const;
  inline void clear_related_header();
  static const int kRelatedHeaderFieldNumber = 2;
  inline ::google::protobuf::uint32 related_header() const;
  inline void set_related_header(::google::protobuf::uint32 value);

  // optional string related_name = 3;
  inline bool has_related_name() const;
  inline void clear_related_name();
  static const int kRelatedNameFieldNumber = 3;
  inline const ::std::string& related_name() const;
  inline void set_related_name(const ::std::string& value);
  inline void set_related_name(const char* value);
  inline void set_related_name(const char* value, size_t size);
  inline ::std::string* mutable_related_name();
  inline ::std::string* release_related_name();
  inline void set_allocated_related_name(::std::string* related_name);

  // optional uint32 relation = 4;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 4;
  inline ::google::protobuf::uint32 relation() const;
  inline void set_relation(::google::protobuf::uint32 value);

  // optional uint32 related_vip = 5;
  inline bool has_related_vip() const;
  inline void clear_related_vip();
  static const int kRelatedVipFieldNumber = 5;
  inline ::google::protobuf::uint32 related_vip() const;
  inline void set_related_vip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.RSinfo)
 private:
  inline void set_has_related_id();
  inline void clear_has_related_id();
  inline void set_has_related_header();
  inline void clear_has_related_header();
  inline void set_has_related_name();
  inline void clear_has_related_name();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_related_vip();
  inline void clear_has_related_vip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 related_id_;
  ::std::string* related_name_;
  ::google::protobuf::uint32 related_header_;
  ::google::protobuf::uint32 relation_;
  ::google::protobuf::uint32 related_vip_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static RSinfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  void Swap(ItemInfo* other);

  // implements Message ----------------------------------------------

  ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional uint32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);

  // optional int32 buy_time = 3;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 3;
  inline ::google::protobuf::int32 buy_time() const;
  inline void set_buy_time(::google::protobuf::int32 value);

  // optional int32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.ItemInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::uint32 item_num_;
  ::google::protobuf::int32 buy_time_;
  ::google::protobuf::int32 end_time_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class MailInfo : public ::google::protobuf::Message {
 public:
  MailInfo();
  virtual ~MailInfo();

  MailInfo(const MailInfo& from);

  inline MailInfo& operator=(const MailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailInfo& default_instance();

  void Swap(MailInfo* other);

  // implements Message ----------------------------------------------

  MailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailInfo& from);
  void MergeFrom(const MailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::int32 mailid() const;
  inline void set_mailid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DBToCS.MailInfo)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 mailid_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static MailInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryUser : public ::google::protobuf::Message {
 public:
  QueryUser();
  virtual ~QueryUser();

  QueryUser(const QueryUser& from);

  inline QueryUser& operator=(const QueryUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUser& default_instance();

  void Swap(QueryUser* other);

  // implements Message ----------------------------------------------

  QueryUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUser& from);
  void MergeFrom(const QueryUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::DBToCS::MsgID msgid() const;
  inline void set_msgid(::DBToCS::MsgID value);

  // optional string db = 2;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 2;
  inline const ::std::string& db() const;
  inline void set_db(const ::std::string& value);
  inline void set_db(const char* value);
  inline void set_db(const char* value, size_t size);
  inline ::std::string* mutable_db();
  inline ::std::string* release_db();
  inline void set_allocated_db(::std::string* db);

  // optional string login = 3;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 3;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const char* value, size_t size);
  inline ::std::string* mutable_login();
  inline ::std::string* release_login();
  inline void set_allocated_login(::std::string* login);

  // optional int32 gsid = 4;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 4;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // optional int32 gcnetid = 5;
  inline bool has_gcnetid() const;
  inline void clear_gcnetid();
  static const int kGcnetidFieldNumber = 5;
  inline ::google::protobuf::int32 gcnetid() const;
  inline void set_gcnetid(::google::protobuf::int32 value);

  // optional string nickname = 6;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 6;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // repeated .DBToCS.HeroCfg herocfg = 7;
  inline int herocfg_size() const;
  inline void clear_herocfg();
  static const int kHerocfgFieldNumber = 7;
  inline const ::DBToCS::HeroCfg& herocfg(int index) const;
  inline ::DBToCS::HeroCfg* mutable_herocfg(int index);
  inline ::DBToCS::HeroCfg* add_herocfg();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::HeroCfg >&
      herocfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::HeroCfg >*
      mutable_herocfg();

  // repeated .DBToCS.RuneInfo runeinfo = 8;
  inline int runeinfo_size() const;
  inline void clear_runeinfo();
  static const int kRuneinfoFieldNumber = 8;
  inline const ::DBToCS::RuneInfo& runeinfo(int index) const;
  inline ::DBToCS::RuneInfo* mutable_runeinfo(int index);
  inline ::DBToCS::RuneInfo* add_runeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::RuneInfo >&
      runeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::RuneInfo >*
      mutable_runeinfo();

  // repeated .DBToCS.RSinfo rsinfo = 9;
  inline int rsinfo_size() const;
  inline void clear_rsinfo();
  static const int kRsinfoFieldNumber = 9;
  inline const ::DBToCS::RSinfo& rsinfo(int index) const;
  inline ::DBToCS::RSinfo* mutable_rsinfo(int index);
  inline ::DBToCS::RSinfo* add_rsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::RSinfo >&
      rsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::RSinfo >*
      mutable_rsinfo();

  // repeated .DBToCS.ItemInfo item_info = 10;
  inline int item_info_size() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 10;
  inline const ::DBToCS::ItemInfo& item_info(int index) const;
  inline ::DBToCS::ItemInfo* mutable_item_info(int index);
  inline ::DBToCS::ItemInfo* add_item_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::ItemInfo >&
      item_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::ItemInfo >*
      mutable_item_info();

  // repeated .DBToCS.MailInfo mail_info = 11;
  inline int mail_info_size() const;
  inline void clear_mail_info();
  static const int kMailInfoFieldNumber = 11;
  inline const ::DBToCS::MailInfo& mail_info(int index) const;
  inline ::DBToCS::MailInfo* mutable_mail_info(int index);
  inline ::DBToCS::MailInfo* add_mail_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::MailInfo >&
      mail_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::MailInfo >*
      mutable_mail_info();

  // optional string guidestr = 12;
  inline bool has_guidestr() const;
  inline void clear_guidestr();
  static const int kGuidestrFieldNumber = 12;
  inline const ::std::string& guidestr() const;
  inline void set_guidestr(const ::std::string& value);
  inline void set_guidestr(const char* value);
  inline void set_guidestr(const char* value, size_t size);
  inline ::std::string* mutable_guidestr();
  inline ::std::string* release_guidestr();
  inline void set_allocated_guidestr(::std::string* guidestr);

  // optional string taskData = 13;
  inline bool has_taskdata() const;
  inline void clear_taskdata();
  static const int kTaskDataFieldNumber = 13;
  inline const ::std::string& taskdata() const;
  inline void set_taskdata(const ::std::string& value);
  inline void set_taskdata(const char* value);
  inline void set_taskdata(const char* value, size_t size);
  inline ::std::string* mutable_taskdata();
  inline ::std::string* release_taskdata();
  inline void set_allocated_taskdata(::std::string* taskdata);

  // @@protoc_insertion_point(class_scope:DBToCS.QueryUser)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_gsid();
  inline void clear_has_gsid();
  inline void set_has_gcnetid();
  inline void clear_has_gcnetid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_guidestr();
  inline void clear_has_guidestr();
  inline void set_has_taskdata();
  inline void clear_has_taskdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* db_;
  int msgid_;
  ::google::protobuf::int32 gsid_;
  ::std::string* login_;
  ::std::string* nickname_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::HeroCfg > herocfg_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::RuneInfo > runeinfo_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::RSinfo > rsinfo_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::ItemInfo > item_info_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::MailInfo > mail_info_;
  ::std::string* guidestr_;
  ::std::string* taskdata_;
  ::google::protobuf::int32 gcnetid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryUser* default_instance_;
};
// -------------------------------------------------------------------

class QueryAllUser : public ::google::protobuf::Message {
 public:
  QueryAllUser();
  virtual ~QueryAllUser();

  QueryAllUser(const QueryAllUser& from);

  inline QueryAllUser& operator=(const QueryAllUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllUser& default_instance();

  void Swap(QueryAllUser* other);

  // implements Message ----------------------------------------------

  QueryAllUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAllUser& from);
  void MergeFrom(const QueryAllUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBToCS.MsgID msgid = 1 [default = eQueryAllUser_CallBack];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::DBToCS::MsgID msgid() const;
  inline void set_msgid(::DBToCS::MsgID value);

  // repeated .DBToCS.QueryUser sQueryUser = 2;
  inline int squeryuser_size() const;
  inline void clear_squeryuser();
  static const int kSQueryUserFieldNumber = 2;
  inline const ::DBToCS::QueryUser& squeryuser(int index) const;
  inline ::DBToCS::QueryUser* mutable_squeryuser(int index);
  inline ::DBToCS::QueryUser* add_squeryuser();
  inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryUser >&
      squeryuser() const;
  inline ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryUser >*
      mutable_squeryuser();

  // @@protoc_insertion_point(class_scope:DBToCS.QueryAllUser)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryUser > squeryuser_;
  int msgid_;
  friend void  protobuf_AddDesc_DBToCS_2eproto();
  friend void protobuf_AssignDesc_DBToCS_2eproto();
  friend void protobuf_ShutdownFile_DBToCS_2eproto();

  void InitAsDefaultInstance();
  static QueryAllUser* default_instance_;
};
// ===================================================================


// ===================================================================

// CDKeyEvents_event_info

// optional int32 id = 1;
inline bool CDKeyEvents_event_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDKeyEvents_event_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDKeyEvents_event_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDKeyEvents_event_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CDKeyEvents_event_info::id() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.id)
  return id_;
}
inline void CDKeyEvents_event_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.id)
}

// optional string title = 2;
inline bool CDKeyEvents_event_info::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDKeyEvents_event_info::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDKeyEvents_event_info::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDKeyEvents_event_info::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CDKeyEvents_event_info::title() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.title)
  return *title_;
}
inline void CDKeyEvents_event_info::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.title)
}
inline void CDKeyEvents_event_info::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.CDKeyEvents.event_info.title)
}
inline void CDKeyEvents_event_info::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.CDKeyEvents.event_info.title)
}
inline ::std::string* CDKeyEvents_event_info::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.CDKeyEvents.event_info.title)
  return title_;
}
inline ::std::string* CDKeyEvents_event_info::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDKeyEvents_event_info::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.CDKeyEvents.event_info.title)
}

// optional int32 platform = 3;
inline bool CDKeyEvents_event_info::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDKeyEvents_event_info::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDKeyEvents_event_info::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDKeyEvents_event_info::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 CDKeyEvents_event_info::platform() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.platform)
  return platform_;
}
inline void CDKeyEvents_event_info::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.platform)
}

// optional uint64 end_time = 4;
inline bool CDKeyEvents_event_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDKeyEvents_event_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDKeyEvents_event_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDKeyEvents_event_info::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 CDKeyEvents_event_info::end_time() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.end_time)
  return end_time_;
}
inline void CDKeyEvents_event_info::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.end_time)
}

// optional string content = 5;
inline bool CDKeyEvents_event_info::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDKeyEvents_event_info::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDKeyEvents_event_info::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDKeyEvents_event_info::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CDKeyEvents_event_info::content() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.content)
  return *content_;
}
inline void CDKeyEvents_event_info::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.content)
}
inline void CDKeyEvents_event_info::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.CDKeyEvents.event_info.content)
}
inline void CDKeyEvents_event_info::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.CDKeyEvents.event_info.content)
}
inline ::std::string* CDKeyEvents_event_info::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.CDKeyEvents.event_info.content)
  return content_;
}
inline ::std::string* CDKeyEvents_event_info::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDKeyEvents_event_info::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.CDKeyEvents.event_info.content)
}

// optional int32 gift_type = 6;
inline bool CDKeyEvents_event_info::has_gift_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDKeyEvents_event_info::set_has_gift_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDKeyEvents_event_info::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDKeyEvents_event_info::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 CDKeyEvents_event_info::gift_type() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.gift_type)
  return gift_type_;
}
inline void CDKeyEvents_event_info::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.gift_type)
}

// optional string item_info = 7;
inline bool CDKeyEvents_event_info::has_item_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDKeyEvents_event_info::set_has_item_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDKeyEvents_event_info::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDKeyEvents_event_info::clear_item_info() {
  if (item_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_info_->clear();
  }
  clear_has_item_info();
}
inline const ::std::string& CDKeyEvents_event_info::item_info() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.item_info)
  return *item_info_;
}
inline void CDKeyEvents_event_info::set_item_info(const ::std::string& value) {
  set_has_item_info();
  if (item_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_info_ = new ::std::string;
  }
  item_info_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.item_info)
}
inline void CDKeyEvents_event_info::set_item_info(const char* value) {
  set_has_item_info();
  if (item_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_info_ = new ::std::string;
  }
  item_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.CDKeyEvents.event_info.item_info)
}
inline void CDKeyEvents_event_info::set_item_info(const char* value, size_t size) {
  set_has_item_info();
  if (item_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_info_ = new ::std::string;
  }
  item_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.CDKeyEvents.event_info.item_info)
}
inline ::std::string* CDKeyEvents_event_info::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.CDKeyEvents.event_info.item_info)
  return item_info_;
}
inline ::std::string* CDKeyEvents_event_info::release_item_info() {
  clear_has_item_info();
  if (item_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = item_info_;
    item_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CDKeyEvents_event_info::set_allocated_item_info(::std::string* item_info) {
  if (item_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_info_;
  }
  if (item_info) {
    set_has_item_info();
    item_info_ = item_info;
  } else {
    clear_has_item_info();
    item_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.CDKeyEvents.event_info.item_info)
}

// optional int32 code_num = 8;
inline bool CDKeyEvents_event_info::has_code_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDKeyEvents_event_info::set_has_code_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDKeyEvents_event_info::clear_has_code_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDKeyEvents_event_info::clear_code_num() {
  code_num_ = 0;
  clear_has_code_num();
}
inline ::google::protobuf::int32 CDKeyEvents_event_info::code_num() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.code_num)
  return code_num_;
}
inline void CDKeyEvents_event_info::set_code_num(::google::protobuf::int32 value) {
  set_has_code_num();
  code_num_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.code_num)
}

// optional int32 code_len = 9;
inline bool CDKeyEvents_event_info::has_code_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDKeyEvents_event_info::set_has_code_len() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDKeyEvents_event_info::clear_has_code_len() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDKeyEvents_event_info::clear_code_len() {
  code_len_ = 0;
  clear_has_code_len();
}
inline ::google::protobuf::int32 CDKeyEvents_event_info::code_len() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.event_info.code_len)
  return code_len_;
}
inline void CDKeyEvents_event_info::set_code_len(::google::protobuf::int32 value) {
  set_has_code_len();
  code_len_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.event_info.code_len)
}

// -------------------------------------------------------------------

// CDKeyEvents

// optional .DBToCS.MsgID mgsid = 1 [default = eQueryCDKeyEvents_CallBack];
inline bool CDKeyEvents::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDKeyEvents::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDKeyEvents::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDKeyEvents::clear_mgsid() {
  mgsid_ = 8;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID CDKeyEvents::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void CDKeyEvents::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.mgsid)
}

// repeated .DBToCS.CDKeyEvents.event_info info = 2;
inline int CDKeyEvents::info_size() const {
  return info_.size();
}
inline void CDKeyEvents::clear_info() {
  info_.Clear();
}
inline const ::DBToCS::CDKeyEvents_event_info& CDKeyEvents::info(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.info)
  return info_.Get(index);
}
inline ::DBToCS::CDKeyEvents_event_info* CDKeyEvents::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.CDKeyEvents.info)
  return info_.Mutable(index);
}
inline ::DBToCS::CDKeyEvents_event_info* CDKeyEvents::add_info() {
  // @@protoc_insertion_point(field_add:DBToCS.CDKeyEvents.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::CDKeyEvents_event_info >&
CDKeyEvents::info() const {
  // @@protoc_insertion_point(field_list:DBToCS.CDKeyEvents.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::CDKeyEvents_event_info >*
CDKeyEvents::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.CDKeyEvents.info)
  return &info_;
}

// optional int32 nsid = 3;
inline bool CDKeyEvents::has_nsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDKeyEvents::set_has_nsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDKeyEvents::clear_has_nsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDKeyEvents::clear_nsid() {
  nsid_ = 0;
  clear_has_nsid();
}
inline ::google::protobuf::int32 CDKeyEvents::nsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.CDKeyEvents.nsid)
  return nsid_;
}
inline void CDKeyEvents::set_nsid(::google::protobuf::int32 value) {
  set_has_nsid();
  nsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CDKeyEvents.nsid)
}

// -------------------------------------------------------------------

// QueryAllAccount_Account

// optional string user_name = 1;
inline bool QueryAllAccount_Account::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAllAccount_Account::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAllAccount_Account::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAllAccount_Account::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& QueryAllAccount_Account::user_name() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.Account.user_name)
  return *user_name_;
}
inline void QueryAllAccount_Account::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllAccount.Account.user_name)
}
inline void QueryAllAccount_Account::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryAllAccount.Account.user_name)
}
inline void QueryAllAccount_Account::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryAllAccount.Account.user_name)
}
inline ::std::string* QueryAllAccount_Account::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryAllAccount.Account.user_name)
  return user_name_;
}
inline ::std::string* QueryAllAccount_Account::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryAllAccount_Account::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryAllAccount.Account.user_name)
}

// optional int32 csid = 2;
inline bool QueryAllAccount_Account::has_csid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryAllAccount_Account::set_has_csid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryAllAccount_Account::clear_has_csid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryAllAccount_Account::clear_csid() {
  csid_ = 0;
  clear_has_csid();
}
inline ::google::protobuf::int32 QueryAllAccount_Account::csid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.Account.csid)
  return csid_;
}
inline void QueryAllAccount_Account::set_csid(::google::protobuf::int32 value) {
  set_has_csid();
  csid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllAccount.Account.csid)
}

// optional int32 sdkid = 3;
inline bool QueryAllAccount_Account::has_sdkid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryAllAccount_Account::set_has_sdkid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryAllAccount_Account::clear_has_sdkid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryAllAccount_Account::clear_sdkid() {
  sdkid_ = 0;
  clear_has_sdkid();
}
inline ::google::protobuf::int32 QueryAllAccount_Account::sdkid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.Account.sdkid)
  return sdkid_;
}
inline void QueryAllAccount_Account::set_sdkid(::google::protobuf::int32 value) {
  set_has_sdkid();
  sdkid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllAccount.Account.sdkid)
}

// optional string nickname = 4;
inline bool QueryAllAccount_Account::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryAllAccount_Account::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryAllAccount_Account::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryAllAccount_Account::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& QueryAllAccount_Account::nickname() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.Account.nickname)
  return *nickname_;
}
inline void QueryAllAccount_Account::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllAccount.Account.nickname)
}
inline void QueryAllAccount_Account::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryAllAccount.Account.nickname)
}
inline void QueryAllAccount_Account::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryAllAccount.Account.nickname)
}
inline ::std::string* QueryAllAccount_Account::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryAllAccount.Account.nickname)
  return nickname_;
}
inline ::std::string* QueryAllAccount_Account::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryAllAccount_Account::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryAllAccount.Account.nickname)
}

// optional int64 guid = 5;
inline bool QueryAllAccount_Account::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryAllAccount_Account::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryAllAccount_Account::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryAllAccount_Account::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 QueryAllAccount_Account::guid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.Account.guid)
  return guid_;
}
inline void QueryAllAccount_Account::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllAccount.Account.guid)
}

// -------------------------------------------------------------------

// QueryAllAccount

// optional .DBToCS.MsgID mgsid = 1 [default = eQueryAllAccount_CallBack];
inline bool QueryAllAccount::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAllAccount::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAllAccount::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAllAccount::clear_mgsid() {
  mgsid_ = 7;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID QueryAllAccount::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void QueryAllAccount::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllAccount.mgsid)
}

// repeated .DBToCS.QueryAllAccount.Account account = 2;
inline int QueryAllAccount::account_size() const {
  return account_.size();
}
inline void QueryAllAccount::clear_account() {
  account_.Clear();
}
inline const ::DBToCS::QueryAllAccount_Account& QueryAllAccount::account(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllAccount.account)
  return account_.Get(index);
}
inline ::DBToCS::QueryAllAccount_Account* QueryAllAccount::mutable_account(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryAllAccount.account)
  return account_.Mutable(index);
}
inline ::DBToCS::QueryAllAccount_Account* QueryAllAccount::add_account() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryAllAccount.account)
  return account_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryAllAccount_Account >&
QueryAllAccount::account() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryAllAccount.account)
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryAllAccount_Account >*
QueryAllAccount::mutable_account() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryAllAccount.account)
  return &account_;
}

// -------------------------------------------------------------------

// MailCallBack

// optional .DBToCS.MsgID mgsid = 1 [default = eMail_CallBack];
inline bool MailCallBack::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailCallBack::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailCallBack::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailCallBack::clear_mgsid() {
  mgsid_ = 6;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID MailCallBack::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void MailCallBack::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.mgsid)
}

// optional int32 mailid = 2;
inline bool MailCallBack::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailCallBack::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailCallBack::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailCallBack::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 MailCallBack::mailid() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.mailid)
  return mailid_;
}
inline void MailCallBack::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.mailid)
}

// optional int32 mailtype = 3;
inline bool MailCallBack::has_mailtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailCallBack::set_has_mailtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailCallBack::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailCallBack::clear_mailtype() {
  mailtype_ = 0;
  clear_has_mailtype();
}
inline ::google::protobuf::int32 MailCallBack::mailtype() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.mailtype)
  return mailtype_;
}
inline void MailCallBack::set_mailtype(::google::protobuf::int32 value) {
  set_has_mailtype();
  mailtype_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.mailtype)
}

// optional int32 channel = 4;
inline bool MailCallBack::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailCallBack::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailCallBack::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailCallBack::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 MailCallBack::channel() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.channel)
  return channel_;
}
inline void MailCallBack::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.channel)
}

// optional string title = 5;
inline bool MailCallBack::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailCallBack::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailCallBack::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailCallBack::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MailCallBack::title() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.title)
  return *title_;
}
inline void MailCallBack::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.title)
}
inline void MailCallBack::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.MailCallBack.title)
}
inline void MailCallBack::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.MailCallBack.title)
}
inline ::std::string* MailCallBack::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.MailCallBack.title)
  return title_;
}
inline ::std::string* MailCallBack::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailCallBack::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.MailCallBack.title)
}

// optional string content = 6;
inline bool MailCallBack::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailCallBack::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailCallBack::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailCallBack::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MailCallBack::content() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.content)
  return *content_;
}
inline void MailCallBack::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.content)
}
inline void MailCallBack::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.MailCallBack.content)
}
inline void MailCallBack::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.MailCallBack.content)
}
inline ::std::string* MailCallBack::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.MailCallBack.content)
  return content_;
}
inline ::std::string* MailCallBack::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailCallBack::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.MailCallBack.content)
}

// optional string gift = 7;
inline bool MailCallBack::has_gift() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailCallBack::set_has_gift() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailCallBack::clear_has_gift() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailCallBack::clear_gift() {
  if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_->clear();
  }
  clear_has_gift();
}
inline const ::std::string& MailCallBack::gift() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.gift)
  return *gift_;
}
inline void MailCallBack::set_gift(const ::std::string& value) {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  gift_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.gift)
}
inline void MailCallBack::set_gift(const char* value) {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  gift_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.MailCallBack.gift)
}
inline void MailCallBack::set_gift(const char* value, size_t size) {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  gift_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.MailCallBack.gift)
}
inline ::std::string* MailCallBack::mutable_gift() {
  set_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gift_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.MailCallBack.gift)
  return gift_;
}
inline ::std::string* MailCallBack::release_gift() {
  clear_has_gift();
  if (gift_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gift_;
    gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailCallBack::set_allocated_gift(::std::string* gift) {
  if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gift_;
  }
  if (gift) {
    set_has_gift();
    gift_ = gift;
  } else {
    clear_has_gift();
    gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.MailCallBack.gift)
}

// optional string sender = 8;
inline bool MailCallBack::has_sender() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailCallBack::set_has_sender() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailCallBack::clear_has_sender() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailCallBack::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& MailCallBack::sender() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.sender)
  return *sender_;
}
inline void MailCallBack::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.sender)
}
inline void MailCallBack::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.MailCallBack.sender)
}
inline void MailCallBack::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.MailCallBack.sender)
}
inline ::std::string* MailCallBack::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.MailCallBack.sender)
  return sender_;
}
inline ::std::string* MailCallBack::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailCallBack::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.MailCallBack.sender)
}

// optional string createtime = 9;
inline bool MailCallBack::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailCallBack::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailCallBack::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailCallBack::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& MailCallBack::createtime() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.createtime)
  return *createtime_;
}
inline void MailCallBack::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.createtime)
}
inline void MailCallBack::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.MailCallBack.createtime)
}
inline void MailCallBack::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.MailCallBack.createtime)
}
inline ::std::string* MailCallBack::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.MailCallBack.createtime)
  return createtime_;
}
inline ::std::string* MailCallBack::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MailCallBack::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.MailCallBack.createtime)
}

// optional int64 objid = 10;
inline bool MailCallBack::has_objid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailCallBack::set_has_objid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailCallBack::clear_has_objid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailCallBack::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 MailCallBack::objid() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailCallBack.objid)
  return objid_;
}
inline void MailCallBack::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailCallBack.objid)
}

// -------------------------------------------------------------------

// QueryNotice_Notice

// optional uint32 id = 1;
inline bool QueryNotice_Notice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryNotice_Notice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryNotice_Notice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryNotice_Notice::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QueryNotice_Notice::id() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.id)
  return id_;
}
inline void QueryNotice_Notice::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.id)
}

// optional string title = 2;
inline bool QueryNotice_Notice::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryNotice_Notice::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryNotice_Notice::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryNotice_Notice::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& QueryNotice_Notice::title() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.title)
  return *title_;
}
inline void QueryNotice_Notice::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.title)
}
inline void QueryNotice_Notice::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryNotice.Notice.title)
}
inline void QueryNotice_Notice::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryNotice.Notice.title)
}
inline ::std::string* QueryNotice_Notice::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryNotice.Notice.title)
  return title_;
}
inline ::std::string* QueryNotice_Notice::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryNotice_Notice::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryNotice.Notice.title)
}

// optional int32 eflag = 3;
inline bool QueryNotice_Notice::has_eflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryNotice_Notice::set_has_eflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryNotice_Notice::clear_has_eflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryNotice_Notice::clear_eflag() {
  eflag_ = 0;
  clear_has_eflag();
}
inline ::google::protobuf::int32 QueryNotice_Notice::eflag() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.eflag)
  return eflag_;
}
inline void QueryNotice_Notice::set_eflag(::google::protobuf::int32 value) {
  set_has_eflag();
  eflag_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.eflag)
}

// optional int32 estate = 4;
inline bool QueryNotice_Notice::has_estate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryNotice_Notice::set_has_estate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryNotice_Notice::clear_has_estate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryNotice_Notice::clear_estate() {
  estate_ = 0;
  clear_has_estate();
}
inline ::google::protobuf::int32 QueryNotice_Notice::estate() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.estate)
  return estate_;
}
inline void QueryNotice_Notice::set_estate(::google::protobuf::int32 value) {
  set_has_estate();
  estate_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.estate)
}

// optional int32 priority = 5;
inline bool QueryNotice_Notice::has_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryNotice_Notice::set_has_priority() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryNotice_Notice::clear_has_priority() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryNotice_Notice::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 QueryNotice_Notice::priority() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.priority)
  return priority_;
}
inline void QueryNotice_Notice::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.priority)
}

// optional string notice = 6;
inline bool QueryNotice_Notice::has_notice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryNotice_Notice::set_has_notice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryNotice_Notice::clear_has_notice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryNotice_Notice::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& QueryNotice_Notice::notice() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.notice)
  return *notice_;
}
inline void QueryNotice_Notice::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.notice)
}
inline void QueryNotice_Notice::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryNotice.Notice.notice)
}
inline void QueryNotice_Notice::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryNotice.Notice.notice)
}
inline ::std::string* QueryNotice_Notice::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryNotice.Notice.notice)
  return notice_;
}
inline ::std::string* QueryNotice_Notice::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryNotice_Notice::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryNotice.Notice.notice)
}

// optional uint64 star_time = 7;
inline bool QueryNotice_Notice::has_star_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryNotice_Notice::set_has_star_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryNotice_Notice::clear_has_star_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryNotice_Notice::clear_star_time() {
  star_time_ = GOOGLE_ULONGLONG(0);
  clear_has_star_time();
}
inline ::google::protobuf::uint64 QueryNotice_Notice::star_time() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.star_time)
  return star_time_;
}
inline void QueryNotice_Notice::set_star_time(::google::protobuf::uint64 value) {
  set_has_star_time();
  star_time_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.star_time)
}

// optional uint64 end_time = 8;
inline bool QueryNotice_Notice::has_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryNotice_Notice::set_has_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryNotice_Notice::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryNotice_Notice::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 QueryNotice_Notice::end_time() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.end_time)
  return end_time_;
}
inline void QueryNotice_Notice::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.end_time)
}

// optional uint32 platform = 9;
inline bool QueryNotice_Notice::has_platform() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryNotice_Notice::set_has_platform() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryNotice_Notice::clear_has_platform() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryNotice_Notice::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 QueryNotice_Notice::platform() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.Notice.platform)
  return platform_;
}
inline void QueryNotice_Notice::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.Notice.platform)
}

// -------------------------------------------------------------------

// QueryNotice

// optional .DBToCS.MsgID mgsid = 1 [default = eQueryNotice_CallBack];
inline bool QueryNotice::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryNotice::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryNotice::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryNotice::clear_mgsid() {
  mgsid_ = 5;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID QueryNotice::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void QueryNotice::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryNotice.mgsid)
}

// repeated .DBToCS.QueryNotice.Notice notice_info = 2;
inline int QueryNotice::notice_info_size() const {
  return notice_info_.size();
}
inline void QueryNotice::clear_notice_info() {
  notice_info_.Clear();
}
inline const ::DBToCS::QueryNotice_Notice& QueryNotice::notice_info(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryNotice.notice_info)
  return notice_info_.Get(index);
}
inline ::DBToCS::QueryNotice_Notice* QueryNotice::mutable_notice_info(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryNotice.notice_info)
  return notice_info_.Mutable(index);
}
inline ::DBToCS::QueryNotice_Notice* QueryNotice::add_notice_info() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryNotice.notice_info)
  return notice_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryNotice_Notice >&
QueryNotice::notice_info() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryNotice.notice_info)
  return notice_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryNotice_Notice >*
QueryNotice::mutable_notice_info() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryNotice.notice_info)
  return &notice_info_;
}

// -------------------------------------------------------------------

// ChangeNickname

// optional .DBToCS.MsgID mgsid = 1 [default = eChangeNickname_CallBack];
inline bool ChangeNickname::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeNickname::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeNickname::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeNickname::clear_mgsid() {
  mgsid_ = 4;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID ChangeNickname::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.ChangeNickname.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void ChangeNickname::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ChangeNickname.mgsid)
}

// optional uint64 guid = 2;
inline bool ChangeNickname::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeNickname::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeNickname::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeNickname::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 ChangeNickname::guid() const {
  // @@protoc_insertion_point(field_get:DBToCS.ChangeNickname.guid)
  return guid_;
}
inline void ChangeNickname::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ChangeNickname.guid)
}

// optional bool reflag = 3;
inline bool ChangeNickname::has_reflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeNickname::set_has_reflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeNickname::clear_has_reflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeNickname::clear_reflag() {
  reflag_ = false;
  clear_has_reflag();
}
inline bool ChangeNickname::reflag() const {
  // @@protoc_insertion_point(field_get:DBToCS.ChangeNickname.reflag)
  return reflag_;
}
inline void ChangeNickname::set_reflag(bool value) {
  set_has_reflag();
  reflag_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ChangeNickname.reflag)
}

// optional string newnickname = 4;
inline bool ChangeNickname::has_newnickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeNickname::set_has_newnickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeNickname::clear_has_newnickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeNickname::clear_newnickname() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_->clear();
  }
  clear_has_newnickname();
}
inline const ::std::string& ChangeNickname::newnickname() const {
  // @@protoc_insertion_point(field_get:DBToCS.ChangeNickname.newnickname)
  return *newnickname_;
}
inline void ChangeNickname::set_newnickname(const ::std::string& value) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.ChangeNickname.newnickname)
}
inline void ChangeNickname::set_newnickname(const char* value) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.ChangeNickname.newnickname)
}
inline void ChangeNickname::set_newnickname(const char* value, size_t size) {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  newnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.ChangeNickname.newnickname)
}
inline ::std::string* ChangeNickname::mutable_newnickname() {
  set_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.ChangeNickname.newnickname)
  return newnickname_;
}
inline ::std::string* ChangeNickname::release_newnickname() {
  clear_has_newnickname();
  if (newnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newnickname_;
    newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeNickname::set_allocated_newnickname(::std::string* newnickname) {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (newnickname) {
    set_has_newnickname();
    newnickname_ = newnickname;
  } else {
    clear_has_newnickname();
    newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.ChangeNickname.newnickname)
}

// optional string oldnickname = 5;
inline bool ChangeNickname::has_oldnickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeNickname::set_has_oldnickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeNickname::clear_has_oldnickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeNickname::clear_oldnickname() {
  if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_->clear();
  }
  clear_has_oldnickname();
}
inline const ::std::string& ChangeNickname::oldnickname() const {
  // @@protoc_insertion_point(field_get:DBToCS.ChangeNickname.oldnickname)
  return *oldnickname_;
}
inline void ChangeNickname::set_oldnickname(const ::std::string& value) {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  oldnickname_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.ChangeNickname.oldnickname)
}
inline void ChangeNickname::set_oldnickname(const char* value) {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  oldnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.ChangeNickname.oldnickname)
}
inline void ChangeNickname::set_oldnickname(const char* value, size_t size) {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  oldnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.ChangeNickname.oldnickname)
}
inline ::std::string* ChangeNickname::mutable_oldnickname() {
  set_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.ChangeNickname.oldnickname)
  return oldnickname_;
}
inline ::std::string* ChangeNickname::release_oldnickname() {
  clear_has_oldnickname();
  if (oldnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oldnickname_;
    oldnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeNickname::set_allocated_oldnickname(::std::string* oldnickname) {
  if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldnickname_;
  }
  if (oldnickname) {
    set_has_oldnickname();
    oldnickname_ = oldnickname;
  } else {
    clear_has_oldnickname();
    oldnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.ChangeNickname.oldnickname)
}

// -------------------------------------------------------------------

// BuyGoods

// optional .DBToCS.MsgID mgsid = 1 [default = eBuyGoodsCallBack];
inline bool BuyGoods::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyGoods::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyGoods::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyGoods::clear_mgsid() {
  mgsid_ = 3;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID BuyGoods::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.BuyGoods.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void BuyGoods::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.BuyGoods.mgsid)
}

// optional string buygoodsmag = 2;
inline bool BuyGoods::has_buygoodsmag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyGoods::set_has_buygoodsmag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyGoods::clear_has_buygoodsmag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyGoods::clear_buygoodsmag() {
  if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_->clear();
  }
  clear_has_buygoodsmag();
}
inline const ::std::string& BuyGoods::buygoodsmag() const {
  // @@protoc_insertion_point(field_get:DBToCS.BuyGoods.buygoodsmag)
  return *buygoodsmag_;
}
inline void BuyGoods::set_buygoodsmag(const ::std::string& value) {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  buygoodsmag_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.BuyGoods.buygoodsmag)
}
inline void BuyGoods::set_buygoodsmag(const char* value) {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  buygoodsmag_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.BuyGoods.buygoodsmag)
}
inline void BuyGoods::set_buygoodsmag(const char* value, size_t size) {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  buygoodsmag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.BuyGoods.buygoodsmag)
}
inline ::std::string* BuyGoods::mutable_buygoodsmag() {
  set_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buygoodsmag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.BuyGoods.buygoodsmag)
  return buygoodsmag_;
}
inline ::std::string* BuyGoods::release_buygoodsmag() {
  clear_has_buygoodsmag();
  if (buygoodsmag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buygoodsmag_;
    buygoodsmag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuyGoods::set_allocated_buygoodsmag(::std::string* buygoodsmag) {
  if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buygoodsmag_;
  }
  if (buygoodsmag) {
    set_has_buygoodsmag();
    buygoodsmag_ = buygoodsmag;
  } else {
    clear_has_buygoodsmag();
    buygoodsmag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.BuyGoods.buygoodsmag)
}

// -------------------------------------------------------------------

// CheckNameRsp

// optional .DBToCS.MsgID mgsid = 1 [default = eCheckNickNameLogicCallBack];
inline bool CheckNameRsp::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNameRsp::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNameRsp::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNameRsp::clear_mgsid() {
  mgsid_ = 1;
  clear_has_mgsid();
}
inline ::DBToCS::MsgID CheckNameRsp::mgsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.CheckNameRsp.mgsid)
  return static_cast< ::DBToCS::MsgID >(mgsid_);
}
inline void CheckNameRsp::set_mgsid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CheckNameRsp.mgsid)
}

// optional string completeInfo = 2;
inline bool CheckNameRsp::has_completeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckNameRsp::set_has_completeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckNameRsp::clear_has_completeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckNameRsp::clear_completeinfo() {
  if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_->clear();
  }
  clear_has_completeinfo();
}
inline const ::std::string& CheckNameRsp::completeinfo() const {
  // @@protoc_insertion_point(field_get:DBToCS.CheckNameRsp.completeInfo)
  return *completeinfo_;
}
inline void CheckNameRsp::set_completeinfo(const ::std::string& value) {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  completeinfo_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.CheckNameRsp.completeInfo)
}
inline void CheckNameRsp::set_completeinfo(const char* value) {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  completeinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.CheckNameRsp.completeInfo)
}
inline void CheckNameRsp::set_completeinfo(const char* value, size_t size) {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  completeinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.CheckNameRsp.completeInfo)
}
inline ::std::string* CheckNameRsp::mutable_completeinfo() {
  set_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completeinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.CheckNameRsp.completeInfo)
  return completeinfo_;
}
inline ::std::string* CheckNameRsp::release_completeinfo() {
  clear_has_completeinfo();
  if (completeinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = completeinfo_;
    completeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckNameRsp::set_allocated_completeinfo(::std::string* completeinfo) {
  if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete completeinfo_;
  }
  if (completeinfo) {
    set_has_completeinfo();
    completeinfo_ = completeinfo;
  } else {
    clear_has_completeinfo();
    completeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.CheckNameRsp.completeInfo)
}

// optional int32 gsid = 3;
inline bool CheckNameRsp::has_gsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckNameRsp::set_has_gsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckNameRsp::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckNameRsp::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 CheckNameRsp::gsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.CheckNameRsp.gsid)
  return gsid_;
}
inline void CheckNameRsp::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CheckNameRsp.gsid)
}

// optional int32 gcnetid = 4;
inline bool CheckNameRsp::has_gcnetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckNameRsp::set_has_gcnetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckNameRsp::clear_has_gcnetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckNameRsp::clear_gcnetid() {
  gcnetid_ = 0;
  clear_has_gcnetid();
}
inline ::google::protobuf::int32 CheckNameRsp::gcnetid() const {
  // @@protoc_insertion_point(field_get:DBToCS.CheckNameRsp.gcnetid)
  return gcnetid_;
}
inline void CheckNameRsp::set_gcnetid(::google::protobuf::int32 value) {
  set_has_gcnetid();
  gcnetid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CheckNameRsp.gcnetid)
}

// optional int32 gsnetid = 5;
inline bool CheckNameRsp::has_gsnetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckNameRsp::set_has_gsnetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckNameRsp::clear_has_gsnetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckNameRsp::clear_gsnetid() {
  gsnetid_ = 0;
  clear_has_gsnetid();
}
inline ::google::protobuf::int32 CheckNameRsp::gsnetid() const {
  // @@protoc_insertion_point(field_get:DBToCS.CheckNameRsp.gsnetid)
  return gsnetid_;
}
inline void CheckNameRsp::set_gsnetid(::google::protobuf::int32 value) {
  set_has_gsnetid();
  gsnetid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CheckNameRsp.gsnetid)
}

// optional int32 checkres = 6;
inline bool CheckNameRsp::has_checkres() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckNameRsp::set_has_checkres() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckNameRsp::clear_has_checkres() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckNameRsp::clear_checkres() {
  checkres_ = 0;
  clear_has_checkres();
}
inline ::google::protobuf::int32 CheckNameRsp::checkres() const {
  // @@protoc_insertion_point(field_get:DBToCS.CheckNameRsp.checkres)
  return checkres_;
}
inline void CheckNameRsp::set_checkres(::google::protobuf::int32 value) {
  set_has_checkres();
  checkres_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.CheckNameRsp.checkres)
}

// -------------------------------------------------------------------

// HeroCfg

// optional uint32 commodityid = 1;
inline bool HeroCfg::has_commodityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroCfg::set_has_commodityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroCfg::clear_has_commodityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroCfg::clear_commodityid() {
  commodityid_ = 0u;
  clear_has_commodityid();
}
inline ::google::protobuf::uint32 HeroCfg::commodityid() const {
  // @@protoc_insertion_point(field_get:DBToCS.HeroCfg.commodityid)
  return commodityid_;
}
inline void HeroCfg::set_commodityid(::google::protobuf::uint32 value) {
  set_has_commodityid();
  commodityid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.HeroCfg.commodityid)
}

// optional int64 buytime = 2;
inline bool HeroCfg::has_buytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroCfg::set_has_buytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroCfg::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroCfg::clear_buytime() {
  buytime_ = GOOGLE_LONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::int64 HeroCfg::buytime() const {
  // @@protoc_insertion_point(field_get:DBToCS.HeroCfg.buytime)
  return buytime_;
}
inline void HeroCfg::set_buytime(::google::protobuf::int64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.HeroCfg.buytime)
}

// optional int64 expiredtime = 3;
inline bool HeroCfg::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroCfg::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroCfg::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroCfg::clear_expiredtime() {
  expiredtime_ = GOOGLE_LONGLONG(0);
  clear_has_expiredtime();
}
inline ::google::protobuf::int64 HeroCfg::expiredtime() const {
  // @@protoc_insertion_point(field_get:DBToCS.HeroCfg.expiredtime)
  return expiredtime_;
}
inline void HeroCfg::set_expiredtime(::google::protobuf::int64 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.HeroCfg.expiredtime)
}

// -------------------------------------------------------------------

// RuneInfo

// optional string bagStr = 1;
inline bool RuneInfo::has_bagstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuneInfo::set_has_bagstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuneInfo::clear_has_bagstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuneInfo::clear_bagstr() {
  if (bagstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bagstr_->clear();
  }
  clear_has_bagstr();
}
inline const ::std::string& RuneInfo::bagstr() const {
  // @@protoc_insertion_point(field_get:DBToCS.RuneInfo.bagStr)
  return *bagstr_;
}
inline void RuneInfo::set_bagstr(const ::std::string& value) {
  set_has_bagstr();
  if (bagstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bagstr_ = new ::std::string;
  }
  bagstr_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.RuneInfo.bagStr)
}
inline void RuneInfo::set_bagstr(const char* value) {
  set_has_bagstr();
  if (bagstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bagstr_ = new ::std::string;
  }
  bagstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.RuneInfo.bagStr)
}
inline void RuneInfo::set_bagstr(const char* value, size_t size) {
  set_has_bagstr();
  if (bagstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bagstr_ = new ::std::string;
  }
  bagstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.RuneInfo.bagStr)
}
inline ::std::string* RuneInfo::mutable_bagstr() {
  set_has_bagstr();
  if (bagstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bagstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.RuneInfo.bagStr)
  return bagstr_;
}
inline ::std::string* RuneInfo::release_bagstr() {
  clear_has_bagstr();
  if (bagstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bagstr_;
    bagstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RuneInfo::set_allocated_bagstr(::std::string* bagstr) {
  if (bagstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bagstr_;
  }
  if (bagstr) {
    set_has_bagstr();
    bagstr_ = bagstr;
  } else {
    clear_has_bagstr();
    bagstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.RuneInfo.bagStr)
}

// optional string slotStr = 2;
inline bool RuneInfo::has_slotstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuneInfo::set_has_slotstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuneInfo::clear_has_slotstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuneInfo::clear_slotstr() {
  if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_->clear();
  }
  clear_has_slotstr();
}
inline const ::std::string& RuneInfo::slotstr() const {
  // @@protoc_insertion_point(field_get:DBToCS.RuneInfo.slotStr)
  return *slotstr_;
}
inline void RuneInfo::set_slotstr(const ::std::string& value) {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  slotstr_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.RuneInfo.slotStr)
}
inline void RuneInfo::set_slotstr(const char* value) {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  slotstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.RuneInfo.slotStr)
}
inline void RuneInfo::set_slotstr(const char* value, size_t size) {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  slotstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.RuneInfo.slotStr)
}
inline ::std::string* RuneInfo::mutable_slotstr() {
  set_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slotstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.RuneInfo.slotStr)
  return slotstr_;
}
inline ::std::string* RuneInfo::release_slotstr() {
  clear_has_slotstr();
  if (slotstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = slotstr_;
    slotstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RuneInfo::set_allocated_slotstr(::std::string* slotstr) {
  if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slotstr_;
  }
  if (slotstr) {
    set_has_slotstr();
    slotstr_ = slotstr;
  } else {
    clear_has_slotstr();
    slotstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.RuneInfo.slotStr)
}

// -------------------------------------------------------------------

// RSinfo

// optional uint64 related_id = 1;
inline bool RSinfo::has_related_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSinfo::set_has_related_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSinfo::clear_has_related_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSinfo::clear_related_id() {
  related_id_ = GOOGLE_ULONGLONG(0);
  clear_has_related_id();
}
inline ::google::protobuf::uint64 RSinfo::related_id() const {
  // @@protoc_insertion_point(field_get:DBToCS.RSinfo.related_id)
  return related_id_;
}
inline void RSinfo::set_related_id(::google::protobuf::uint64 value) {
  set_has_related_id();
  related_id_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.RSinfo.related_id)
}

// optional uint32 related_header = 2;
inline bool RSinfo::has_related_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSinfo::set_has_related_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSinfo::clear_has_related_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSinfo::clear_related_header() {
  related_header_ = 0u;
  clear_has_related_header();
}
inline ::google::protobuf::uint32 RSinfo::related_header() const {
  // @@protoc_insertion_point(field_get:DBToCS.RSinfo.related_header)
  return related_header_;
}
inline void RSinfo::set_related_header(::google::protobuf::uint32 value) {
  set_has_related_header();
  related_header_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.RSinfo.related_header)
}

// optional string related_name = 3;
inline bool RSinfo::has_related_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSinfo::set_has_related_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSinfo::clear_has_related_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSinfo::clear_related_name() {
  if (related_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    related_name_->clear();
  }
  clear_has_related_name();
}
inline const ::std::string& RSinfo::related_name() const {
  // @@protoc_insertion_point(field_get:DBToCS.RSinfo.related_name)
  return *related_name_;
}
inline void RSinfo::set_related_name(const ::std::string& value) {
  set_has_related_name();
  if (related_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    related_name_ = new ::std::string;
  }
  related_name_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.RSinfo.related_name)
}
inline void RSinfo::set_related_name(const char* value) {
  set_has_related_name();
  if (related_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    related_name_ = new ::std::string;
  }
  related_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.RSinfo.related_name)
}
inline void RSinfo::set_related_name(const char* value, size_t size) {
  set_has_related_name();
  if (related_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    related_name_ = new ::std::string;
  }
  related_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.RSinfo.related_name)
}
inline ::std::string* RSinfo::mutable_related_name() {
  set_has_related_name();
  if (related_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    related_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.RSinfo.related_name)
  return related_name_;
}
inline ::std::string* RSinfo::release_related_name() {
  clear_has_related_name();
  if (related_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = related_name_;
    related_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSinfo::set_allocated_related_name(::std::string* related_name) {
  if (related_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete related_name_;
  }
  if (related_name) {
    set_has_related_name();
    related_name_ = related_name;
  } else {
    clear_has_related_name();
    related_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.RSinfo.related_name)
}

// optional uint32 relation = 4;
inline bool RSinfo::has_relation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSinfo::set_has_relation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RSinfo::clear_has_relation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RSinfo::clear_relation() {
  relation_ = 0u;
  clear_has_relation();
}
inline ::google::protobuf::uint32 RSinfo::relation() const {
  // @@protoc_insertion_point(field_get:DBToCS.RSinfo.relation)
  return relation_;
}
inline void RSinfo::set_relation(::google::protobuf::uint32 value) {
  set_has_relation();
  relation_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.RSinfo.relation)
}

// optional uint32 related_vip = 5;
inline bool RSinfo::has_related_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSinfo::set_has_related_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RSinfo::clear_has_related_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RSinfo::clear_related_vip() {
  related_vip_ = 0u;
  clear_has_related_vip();
}
inline ::google::protobuf::uint32 RSinfo::related_vip() const {
  // @@protoc_insertion_point(field_get:DBToCS.RSinfo.related_vip)
  return related_vip_;
}
inline void RSinfo::set_related_vip(::google::protobuf::uint32 value) {
  set_has_related_vip();
  related_vip_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.RSinfo.related_vip)
}

// -------------------------------------------------------------------

// ItemInfo

// optional int32 item_id = 1;
inline bool ItemInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemInfo::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ItemInfo::item_id() const {
  // @@protoc_insertion_point(field_get:DBToCS.ItemInfo.item_id)
  return item_id_;
}
inline void ItemInfo::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ItemInfo.item_id)
}

// optional uint32 item_num = 2;
inline bool ItemInfo::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemInfo::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemInfo::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemInfo::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 ItemInfo::item_num() const {
  // @@protoc_insertion_point(field_get:DBToCS.ItemInfo.item_num)
  return item_num_;
}
inline void ItemInfo::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ItemInfo.item_num)
}

// optional int32 buy_time = 3;
inline bool ItemInfo::has_buy_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemInfo::set_has_buy_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemInfo::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemInfo::clear_buy_time() {
  buy_time_ = 0;
  clear_has_buy_time();
}
inline ::google::protobuf::int32 ItemInfo::buy_time() const {
  // @@protoc_insertion_point(field_get:DBToCS.ItemInfo.buy_time)
  return buy_time_;
}
inline void ItemInfo::set_buy_time(::google::protobuf::int32 value) {
  set_has_buy_time();
  buy_time_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ItemInfo.buy_time)
}

// optional int32 end_time = 4;
inline bool ItemInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemInfo::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 ItemInfo::end_time() const {
  // @@protoc_insertion_point(field_get:DBToCS.ItemInfo.end_time)
  return end_time_;
}
inline void ItemInfo::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.ItemInfo.end_time)
}

// -------------------------------------------------------------------

// MailInfo

// optional int32 mailid = 1;
inline bool MailInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailInfo::clear_mailid() {
  mailid_ = 0;
  clear_has_mailid();
}
inline ::google::protobuf::int32 MailInfo::mailid() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailInfo.mailid)
  return mailid_;
}
inline void MailInfo::set_mailid(::google::protobuf::int32 value) {
  set_has_mailid();
  mailid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailInfo.mailid)
}

// optional int32 state = 2;
inline bool MailInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 MailInfo::state() const {
  // @@protoc_insertion_point(field_get:DBToCS.MailInfo.state)
  return state_;
}
inline void MailInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.MailInfo.state)
}

// -------------------------------------------------------------------

// QueryUser

// optional .DBToCS.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
inline bool QueryUser::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUser::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUser::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUser::clear_msgid() {
  msgid_ = 2;
  clear_has_msgid();
}
inline ::DBToCS::MsgID QueryUser::msgid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.msgid)
  return static_cast< ::DBToCS::MsgID >(msgid_);
}
inline void QueryUser::set_msgid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.msgid)
}

// optional string db = 2;
inline bool QueryUser::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUser::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUser::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUser::clear_db() {
  if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_->clear();
  }
  clear_has_db();
}
inline const ::std::string& QueryUser::db() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.db)
  return *db_;
}
inline void QueryUser::set_db(const ::std::string& value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  db_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.db)
}
inline void QueryUser::set_db(const char* value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  db_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryUser.db)
}
inline void QueryUser::set_db(const char* value, size_t size) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  db_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryUser.db)
}
inline ::std::string* QueryUser::mutable_db() {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.db)
  return db_;
}
inline ::std::string* QueryUser::release_db() {
  clear_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = db_;
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUser::set_allocated_db(::std::string* db) {
  if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_;
  }
  if (db) {
    set_has_db();
    db_ = db;
  } else {
    clear_has_db();
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryUser.db)
}

// optional string login = 3;
inline bool QueryUser::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryUser::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryUser::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryUser::clear_login() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_->clear();
  }
  clear_has_login();
}
inline const ::std::string& QueryUser::login() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.login)
  return *login_;
}
inline void QueryUser::set_login(const ::std::string& value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.login)
}
inline void QueryUser::set_login(const char* value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryUser.login)
}
inline void QueryUser::set_login(const char* value, size_t size) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryUser.login)
}
inline ::std::string* QueryUser::mutable_login() {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.login)
  return login_;
}
inline ::std::string* QueryUser::release_login() {
  clear_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_;
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUser::set_allocated_login(::std::string* login) {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (login) {
    set_has_login();
    login_ = login;
  } else {
    clear_has_login();
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryUser.login)
}

// optional int32 gsid = 4;
inline bool QueryUser::has_gsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryUser::set_has_gsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryUser::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryUser::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 QueryUser::gsid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.gsid)
  return gsid_;
}
inline void QueryUser::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.gsid)
}

// optional int32 gcnetid = 5;
inline bool QueryUser::has_gcnetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryUser::set_has_gcnetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryUser::clear_has_gcnetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryUser::clear_gcnetid() {
  gcnetid_ = 0;
  clear_has_gcnetid();
}
inline ::google::protobuf::int32 QueryUser::gcnetid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.gcnetid)
  return gcnetid_;
}
inline void QueryUser::set_gcnetid(::google::protobuf::int32 value) {
  set_has_gcnetid();
  gcnetid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.gcnetid)
}

// optional string nickname = 6;
inline bool QueryUser::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryUser::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryUser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryUser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& QueryUser::nickname() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.nickname)
  return *nickname_;
}
inline void QueryUser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.nickname)
}
inline void QueryUser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryUser.nickname)
}
inline void QueryUser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryUser.nickname)
}
inline ::std::string* QueryUser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.nickname)
  return nickname_;
}
inline ::std::string* QueryUser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryUser.nickname)
}

// repeated .DBToCS.HeroCfg herocfg = 7;
inline int QueryUser::herocfg_size() const {
  return herocfg_.size();
}
inline void QueryUser::clear_herocfg() {
  herocfg_.Clear();
}
inline const ::DBToCS::HeroCfg& QueryUser::herocfg(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.herocfg)
  return herocfg_.Get(index);
}
inline ::DBToCS::HeroCfg* QueryUser::mutable_herocfg(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.herocfg)
  return herocfg_.Mutable(index);
}
inline ::DBToCS::HeroCfg* QueryUser::add_herocfg() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryUser.herocfg)
  return herocfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::HeroCfg >&
QueryUser::herocfg() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryUser.herocfg)
  return herocfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::HeroCfg >*
QueryUser::mutable_herocfg() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryUser.herocfg)
  return &herocfg_;
}

// repeated .DBToCS.RuneInfo runeinfo = 8;
inline int QueryUser::runeinfo_size() const {
  return runeinfo_.size();
}
inline void QueryUser::clear_runeinfo() {
  runeinfo_.Clear();
}
inline const ::DBToCS::RuneInfo& QueryUser::runeinfo(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.runeinfo)
  return runeinfo_.Get(index);
}
inline ::DBToCS::RuneInfo* QueryUser::mutable_runeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.runeinfo)
  return runeinfo_.Mutable(index);
}
inline ::DBToCS::RuneInfo* QueryUser::add_runeinfo() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryUser.runeinfo)
  return runeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::RuneInfo >&
QueryUser::runeinfo() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryUser.runeinfo)
  return runeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::RuneInfo >*
QueryUser::mutable_runeinfo() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryUser.runeinfo)
  return &runeinfo_;
}

// repeated .DBToCS.RSinfo rsinfo = 9;
inline int QueryUser::rsinfo_size() const {
  return rsinfo_.size();
}
inline void QueryUser::clear_rsinfo() {
  rsinfo_.Clear();
}
inline const ::DBToCS::RSinfo& QueryUser::rsinfo(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.rsinfo)
  return rsinfo_.Get(index);
}
inline ::DBToCS::RSinfo* QueryUser::mutable_rsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.rsinfo)
  return rsinfo_.Mutable(index);
}
inline ::DBToCS::RSinfo* QueryUser::add_rsinfo() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryUser.rsinfo)
  return rsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::RSinfo >&
QueryUser::rsinfo() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryUser.rsinfo)
  return rsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::RSinfo >*
QueryUser::mutable_rsinfo() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryUser.rsinfo)
  return &rsinfo_;
}

// repeated .DBToCS.ItemInfo item_info = 10;
inline int QueryUser::item_info_size() const {
  return item_info_.size();
}
inline void QueryUser::clear_item_info() {
  item_info_.Clear();
}
inline const ::DBToCS::ItemInfo& QueryUser::item_info(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.item_info)
  return item_info_.Get(index);
}
inline ::DBToCS::ItemInfo* QueryUser::mutable_item_info(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.item_info)
  return item_info_.Mutable(index);
}
inline ::DBToCS::ItemInfo* QueryUser::add_item_info() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryUser.item_info)
  return item_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::ItemInfo >&
QueryUser::item_info() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryUser.item_info)
  return item_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::ItemInfo >*
QueryUser::mutable_item_info() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryUser.item_info)
  return &item_info_;
}

// repeated .DBToCS.MailInfo mail_info = 11;
inline int QueryUser::mail_info_size() const {
  return mail_info_.size();
}
inline void QueryUser::clear_mail_info() {
  mail_info_.Clear();
}
inline const ::DBToCS::MailInfo& QueryUser::mail_info(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.mail_info)
  return mail_info_.Get(index);
}
inline ::DBToCS::MailInfo* QueryUser::mutable_mail_info(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.mail_info)
  return mail_info_.Mutable(index);
}
inline ::DBToCS::MailInfo* QueryUser::add_mail_info() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryUser.mail_info)
  return mail_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::MailInfo >&
QueryUser::mail_info() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryUser.mail_info)
  return mail_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::MailInfo >*
QueryUser::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryUser.mail_info)
  return &mail_info_;
}

// optional string guidestr = 12;
inline bool QueryUser::has_guidestr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QueryUser::set_has_guidestr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QueryUser::clear_has_guidestr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QueryUser::clear_guidestr() {
  if (guidestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guidestr_->clear();
  }
  clear_has_guidestr();
}
inline const ::std::string& QueryUser::guidestr() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.guidestr)
  return *guidestr_;
}
inline void QueryUser::set_guidestr(const ::std::string& value) {
  set_has_guidestr();
  if (guidestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guidestr_ = new ::std::string;
  }
  guidestr_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.guidestr)
}
inline void QueryUser::set_guidestr(const char* value) {
  set_has_guidestr();
  if (guidestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guidestr_ = new ::std::string;
  }
  guidestr_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryUser.guidestr)
}
inline void QueryUser::set_guidestr(const char* value, size_t size) {
  set_has_guidestr();
  if (guidestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guidestr_ = new ::std::string;
  }
  guidestr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryUser.guidestr)
}
inline ::std::string* QueryUser::mutable_guidestr() {
  set_has_guidestr();
  if (guidestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guidestr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.guidestr)
  return guidestr_;
}
inline ::std::string* QueryUser::release_guidestr() {
  clear_has_guidestr();
  if (guidestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guidestr_;
    guidestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUser::set_allocated_guidestr(::std::string* guidestr) {
  if (guidestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guidestr_;
  }
  if (guidestr) {
    set_has_guidestr();
    guidestr_ = guidestr;
  } else {
    clear_has_guidestr();
    guidestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryUser.guidestr)
}

// optional string taskData = 13;
inline bool QueryUser::has_taskdata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QueryUser::set_has_taskdata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QueryUser::clear_has_taskdata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QueryUser::clear_taskdata() {
  if (taskdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    taskdata_->clear();
  }
  clear_has_taskdata();
}
inline const ::std::string& QueryUser::taskdata() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryUser.taskData)
  return *taskdata_;
}
inline void QueryUser::set_taskdata(const ::std::string& value) {
  set_has_taskdata();
  if (taskdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    taskdata_ = new ::std::string;
  }
  taskdata_->assign(value);
  // @@protoc_insertion_point(field_set:DBToCS.QueryUser.taskData)
}
inline void QueryUser::set_taskdata(const char* value) {
  set_has_taskdata();
  if (taskdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    taskdata_ = new ::std::string;
  }
  taskdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBToCS.QueryUser.taskData)
}
inline void QueryUser::set_taskdata(const char* value, size_t size) {
  set_has_taskdata();
  if (taskdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    taskdata_ = new ::std::string;
  }
  taskdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBToCS.QueryUser.taskData)
}
inline ::std::string* QueryUser::mutable_taskdata() {
  set_has_taskdata();
  if (taskdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    taskdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryUser.taskData)
  return taskdata_;
}
inline ::std::string* QueryUser::release_taskdata() {
  clear_has_taskdata();
  if (taskdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = taskdata_;
    taskdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUser::set_allocated_taskdata(::std::string* taskdata) {
  if (taskdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete taskdata_;
  }
  if (taskdata) {
    set_has_taskdata();
    taskdata_ = taskdata;
  } else {
    clear_has_taskdata();
    taskdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBToCS.QueryUser.taskData)
}

// -------------------------------------------------------------------

// QueryAllUser

// optional .DBToCS.MsgID msgid = 1 [default = eQueryAllUser_CallBack];
inline bool QueryAllUser::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAllUser::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAllUser::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAllUser::clear_msgid() {
  msgid_ = 9;
  clear_has_msgid();
}
inline ::DBToCS::MsgID QueryAllUser::msgid() const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllUser.msgid)
  return static_cast< ::DBToCS::MsgID >(msgid_);
}
inline void QueryAllUser::set_msgid(::DBToCS::MsgID value) {
  assert(::DBToCS::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:DBToCS.QueryAllUser.msgid)
}

// repeated .DBToCS.QueryUser sQueryUser = 2;
inline int QueryAllUser::squeryuser_size() const {
  return squeryuser_.size();
}
inline void QueryAllUser::clear_squeryuser() {
  squeryuser_.Clear();
}
inline const ::DBToCS::QueryUser& QueryAllUser::squeryuser(int index) const {
  // @@protoc_insertion_point(field_get:DBToCS.QueryAllUser.sQueryUser)
  return squeryuser_.Get(index);
}
inline ::DBToCS::QueryUser* QueryAllUser::mutable_squeryuser(int index) {
  // @@protoc_insertion_point(field_mutable:DBToCS.QueryAllUser.sQueryUser)
  return squeryuser_.Mutable(index);
}
inline ::DBToCS::QueryUser* QueryAllUser::add_squeryuser() {
  // @@protoc_insertion_point(field_add:DBToCS.QueryAllUser.sQueryUser)
  return squeryuser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryUser >&
QueryAllUser::squeryuser() const {
  // @@protoc_insertion_point(field_list:DBToCS.QueryAllUser.sQueryUser)
  return squeryuser_;
}
inline ::google::protobuf::RepeatedPtrField< ::DBToCS::QueryUser >*
QueryAllUser::mutable_squeryuser() {
  // @@protoc_insertion_point(field_mutable_list:DBToCS.QueryAllUser.sQueryUser)
  return &squeryuser_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBToCS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DBToCS::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DBToCS::MsgID>() {
  return ::DBToCS::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBToCS_2eproto__INCLUDED
