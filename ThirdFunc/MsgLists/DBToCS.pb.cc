// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBToCS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBToCS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DBToCS {

namespace {

const ::google::protobuf::Descriptor* CDKeyEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDKeyEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDKeyEvents_event_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDKeyEvents_event_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllAccount_Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllAccount_Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNotice_Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNotice_Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAllUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAllUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBToCS_2eproto() {
  protobuf_AddDesc_DBToCS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBToCS.proto");
  GOOGLE_CHECK(file != NULL);
  CDKeyEvents_descriptor_ = file->message_type(0);
  static const int CDKeyEvents_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, nsid_),
  };
  CDKeyEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDKeyEvents_descriptor_,
      CDKeyEvents::default_instance_,
      CDKeyEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDKeyEvents));
  CDKeyEvents_event_info_descriptor_ = CDKeyEvents_descriptor_->nested_type(0);
  static const int CDKeyEvents_event_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, gift_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, code_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, code_len_),
  };
  CDKeyEvents_event_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDKeyEvents_event_info_descriptor_,
      CDKeyEvents_event_info::default_instance_,
      CDKeyEvents_event_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDKeyEvents_event_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDKeyEvents_event_info));
  QueryAllAccount_descriptor_ = file->message_type(1);
  static const int QueryAllAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount, account_),
  };
  QueryAllAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllAccount_descriptor_,
      QueryAllAccount::default_instance_,
      QueryAllAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllAccount));
  QueryAllAccount_Account_descriptor_ = QueryAllAccount_descriptor_->nested_type(0);
  static const int QueryAllAccount_Account_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, csid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, sdkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, guid_),
  };
  QueryAllAccount_Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllAccount_Account_descriptor_,
      QueryAllAccount_Account::default_instance_,
      QueryAllAccount_Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllAccount_Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllAccount_Account));
  MailCallBack_descriptor_ = file->message_type(2);
  static const int MailCallBack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, objid_),
  };
  MailCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailCallBack_descriptor_,
      MailCallBack::default_instance_,
      MailCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailCallBack));
  QueryNotice_descriptor_ = file->message_type(3);
  static const int QueryNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, notice_info_),
  };
  QueryNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryNotice_descriptor_,
      QueryNotice::default_instance_,
      QueryNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryNotice));
  QueryNotice_Notice_descriptor_ = QueryNotice_descriptor_->nested_type(0);
  static const int QueryNotice_Notice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, eflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, star_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, platform_),
  };
  QueryNotice_Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryNotice_Notice_descriptor_,
      QueryNotice_Notice::default_instance_,
      QueryNotice_Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNotice_Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryNotice_Notice));
  ChangeNickname_descriptor_ = file->message_type(4);
  static const int ChangeNickname_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, reflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, newnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, oldnickname_),
  };
  ChangeNickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNickname_descriptor_,
      ChangeNickname::default_instance_,
      ChangeNickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNickname));
  BuyGoods_descriptor_ = file->message_type(5);
  static const int BuyGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, buygoodsmag_),
  };
  BuyGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyGoods_descriptor_,
      BuyGoods::default_instance_,
      BuyGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyGoods));
  CheckNameRsp_descriptor_ = file->message_type(6);
  static const int CheckNameRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, completeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, gcnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, gsnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, checkres_),
  };
  CheckNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameRsp_descriptor_,
      CheckNameRsp::default_instance_,
      CheckNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameRsp));
  HeroCfg_descriptor_ = file->message_type(7);
  static const int HeroCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCfg, commodityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCfg, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCfg, expiredtime_),
  };
  HeroCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroCfg_descriptor_,
      HeroCfg::default_instance_,
      HeroCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroCfg));
  RuneInfo_descriptor_ = file->message_type(8);
  static const int RuneInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneInfo, bagstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneInfo, slotstr_),
  };
  RuneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneInfo_descriptor_,
      RuneInfo::default_instance_,
      RuneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneInfo));
  RSinfo_descriptor_ = file->message_type(9);
  static const int RSinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, related_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, related_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, related_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, related_vip_),
  };
  RSinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSinfo_descriptor_,
      RSinfo::default_instance_,
      RSinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSinfo));
  ItemInfo_descriptor_ = file->message_type(10);
  static const int ItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, end_time_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  MailInfo_descriptor_ = file->message_type(11);
  static const int MailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, state_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  QueryUser_descriptor_ = file->message_type(12);
  static const int QueryUser_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, gcnetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, herocfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, runeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, rsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, mail_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, guidestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, taskdata_),
  };
  QueryUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUser_descriptor_,
      QueryUser::default_instance_,
      QueryUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUser));
  QueryAllUser_descriptor_ = file->message_type(13);
  static const int QueryAllUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllUser, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllUser, squeryuser_),
  };
  QueryAllUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAllUser_descriptor_,
      QueryAllUser::default_instance_,
      QueryAllUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAllUser));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBToCS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDKeyEvents_descriptor_, &CDKeyEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDKeyEvents_event_info_descriptor_, &CDKeyEvents_event_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllAccount_descriptor_, &QueryAllAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllAccount_Account_descriptor_, &QueryAllAccount_Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailCallBack_descriptor_, &MailCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryNotice_descriptor_, &QueryNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryNotice_Notice_descriptor_, &QueryNotice_Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNickname_descriptor_, &ChangeNickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyGoods_descriptor_, &BuyGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameRsp_descriptor_, &CheckNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroCfg_descriptor_, &HeroCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneInfo_descriptor_, &RuneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSinfo_descriptor_, &RSinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUser_descriptor_, &QueryUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAllUser_descriptor_, &QueryAllUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBToCS_2eproto() {
  delete CDKeyEvents::default_instance_;
  delete CDKeyEvents_reflection_;
  delete CDKeyEvents_event_info::default_instance_;
  delete CDKeyEvents_event_info_reflection_;
  delete QueryAllAccount::default_instance_;
  delete QueryAllAccount_reflection_;
  delete QueryAllAccount_Account::default_instance_;
  delete QueryAllAccount_Account_reflection_;
  delete MailCallBack::default_instance_;
  delete MailCallBack_reflection_;
  delete QueryNotice::default_instance_;
  delete QueryNotice_reflection_;
  delete QueryNotice_Notice::default_instance_;
  delete QueryNotice_Notice_reflection_;
  delete ChangeNickname::default_instance_;
  delete ChangeNickname_reflection_;
  delete BuyGoods::default_instance_;
  delete BuyGoods_reflection_;
  delete CheckNameRsp::default_instance_;
  delete CheckNameRsp_reflection_;
  delete HeroCfg::default_instance_;
  delete HeroCfg_reflection_;
  delete RuneInfo::default_instance_;
  delete RuneInfo_reflection_;
  delete RSinfo::default_instance_;
  delete RSinfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete QueryUser::default_instance_;
  delete QueryUser_reflection_;
  delete QueryAllUser::default_instance_;
  delete QueryAllUser_reflection_;
}

void protobuf_AddDesc_DBToCS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014DBToCS.proto\022\006DBToCS\"\254\002\n\013CDKeyEvents\0228"
    "\n\005mgsid\030\001 \001(\0162\r.DBToCS.MsgID:\032eQueryCDKe"
    "yEvents_CallBack\022,\n\004info\030\002 \003(\0132\036.DBToCS."
    "CDKeyEvents.event_info\022\014\n\004nsid\030\003 \001(\005\032\246\001\n"
    "\nevent_info\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\020"
    "\n\010platform\030\003 \001(\005\022\020\n\010end_time\030\004 \001(\004\022\017\n\007co"
    "ntent\030\005 \001(\t\022\021\n\tgift_type\030\006 \001(\005\022\021\n\titem_i"
    "nfo\030\007 \001(\t\022\020\n\010code_num\030\010 \001(\005\022\020\n\010code_len\030"
    "\t \001(\005\"\327\001\n\017QueryAllAccount\0227\n\005mgsid\030\001 \001(\016"
    "2\r.DBToCS.MsgID:\031eQueryAllAccount_CallBa"
    "ck\0220\n\007account\030\002 \003(\0132\037.DBToCS.QueryAllAcc"
    "ount.Account\032Y\n\007Account\022\021\n\tuser_name\030\001 \001"
    "(\t\022\014\n\004csid\030\002 \001(\005\022\r\n\005sdkid\030\003 \001(\005\022\020\n\010nickn"
    "ame\030\004 \001(\t\022\014\n\004guid\030\005 \001(\003\"\320\001\n\014MailCallBack"
    "\022,\n\005mgsid\030\001 \001(\0162\r.DBToCS.MsgID:\016eMail_Ca"
    "llBack\022\016\n\006mailid\030\002 \001(\005\022\020\n\010mailtype\030\003 \001(\005"
    "\022\017\n\007channel\030\004 \001(\005\022\r\n\005title\030\005 \001(\t\022\017\n\007cont"
    "ent\030\006 \001(\t\022\014\n\004gift\030\007 \001(\t\022\016\n\006sender\030\010 \001(\t\022"
    "\022\n\ncreatetime\030\t \001(\t\022\r\n\005objid\030\n \001(\003\"\221\002\n\013Q"
    "ueryNotice\0223\n\005mgsid\030\001 \001(\0162\r.DBToCS.MsgID"
    ":\025eQueryNotice_CallBack\022/\n\013notice_info\030\002"
    " \003(\0132\032.DBToCS.QueryNotice.Notice\032\233\001\n\006Not"
    "ice\022\n\n\002id\030\001 \001(\r\022\r\n\005title\030\002 \001(\t\022\r\n\005eflag\030"
    "\003 \001(\005\022\016\n\006estate\030\004 \001(\005\022\020\n\010priority\030\005 \001(\005\022"
    "\016\n\006notice\030\006 \001(\t\022\021\n\tstar_time\030\007 \001(\004\022\020\n\010en"
    "d_time\030\010 \001(\004\022\020\n\010platform\030\t \001(\r\"\220\001\n\016Chang"
    "eNickname\0226\n\005mgsid\030\001 \001(\0162\r.DBToCS.MsgID:"
    "\030eChangeNickname_CallBack\022\014\n\004guid\030\002 \001(\004\022"
    "\016\n\006reflag\030\003 \001(\010\022\023\n\013newnickname\030\004 \001(\t\022\023\n\013"
    "oldnickname\030\005 \001(\t\"P\n\010BuyGoods\022/\n\005mgsid\030\001"
    " \001(\0162\r.DBToCS.MsgID:\021eBuyGoodsCallBack\022\023"
    "\n\013buygoodsmag\030\002 \001(\t\"\241\001\n\014CheckNameRsp\0229\n\005"
    "mgsid\030\001 \001(\0162\r.DBToCS.MsgID:\033eCheckNickNa"
    "meLogicCallBack\022\024\n\014completeInfo\030\002 \001(\t\022\014\n"
    "\004gsid\030\003 \001(\005\022\017\n\007gcnetid\030\004 \001(\005\022\017\n\007gsnetid\030"
    "\005 \001(\005\022\020\n\010checkres\030\006 \001(\005\"D\n\007HeroCfg\022\023\n\013co"
    "mmodityid\030\001 \001(\r\022\017\n\007buytime\030\002 \001(\003\022\023\n\013expi"
    "redtime\030\003 \001(\003\"+\n\010RuneInfo\022\016\n\006bagStr\030\001 \001("
    "\t\022\017\n\007slotStr\030\002 \001(\t\"q\n\006RSinfo\022\022\n\nrelated_"
    "id\030\001 \001(\004\022\026\n\016related_header\030\002 \001(\r\022\024\n\014rela"
    "ted_name\030\003 \001(\t\022\020\n\010relation\030\004 \001(\r\022\023\n\013rela"
    "ted_vip\030\005 \001(\r\"Q\n\010ItemInfo\022\017\n\007item_id\030\001 \001"
    "(\005\022\020\n\010item_num\030\002 \001(\r\022\020\n\010buy_time\030\003 \001(\005\022\020"
    "\n\010end_time\030\004 \001(\005\")\n\010MailInfo\022\016\n\006mailid\030\001"
    " \001(\005\022\r\n\005state\030\002 \001(\005\"\340\002\n\tQueryUser\0223\n\005msg"
    "id\030\001 \001(\0162\r.DBToCS.MsgID:\025eQueryUser_DBCa"
    "llBack\022\n\n\002db\030\002 \001(\t\022\r\n\005login\030\003 \001(\t\022\014\n\004gsi"
    "d\030\004 \001(\005\022\017\n\007gcnetid\030\005 \001(\005\022\020\n\010nickname\030\006 \001"
    "(\t\022 \n\007herocfg\030\007 \003(\0132\017.DBToCS.HeroCfg\022\"\n\010"
    "runeinfo\030\010 \003(\0132\020.DBToCS.RuneInfo\022\036\n\006rsin"
    "fo\030\t \003(\0132\016.DBToCS.RSinfo\022#\n\titem_info\030\n "
    "\003(\0132\020.DBToCS.ItemInfo\022#\n\tmail_info\030\013 \003(\013"
    "2\020.DBToCS.MailInfo\022\020\n\010guidestr\030\014 \001(\t\022\020\n\010"
    "taskData\030\r \001(\t\"k\n\014QueryAllUser\0224\n\005msgid\030"
    "\001 \001(\0162\r.DBToCS.MsgID:\026eQueryAllUser_Call"
    "Back\022%\n\nsQueryUser\030\002 \003(\0132\021.DBToCS.QueryU"
    "ser*\202\002\n\005MsgID\022\037\n\033eCheckNickNameLogicCall"
    "Back\020\001\022\031\n\025eQueryUser_DBCallBack\020\002\022\025\n\021eBu"
    "yGoodsCallBack\020\003\022\034\n\030eChangeNickname_Call"
    "Back\020\004\022\031\n\025eQueryNotice_CallBack\020\005\022\022\n\016eMa"
    "il_CallBack\020\006\022\035\n\031eQueryAllAccount_CallBa"
    "ck\020\007\022\036\n\032eQueryCDKeyEvents_CallBack\020\010\022\032\n\026"
    "eQueryAllUser_CallBack\020\t", 2504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBToCS.proto", &protobuf_RegisterTypes);
  CDKeyEvents::default_instance_ = new CDKeyEvents();
  CDKeyEvents_event_info::default_instance_ = new CDKeyEvents_event_info();
  QueryAllAccount::default_instance_ = new QueryAllAccount();
  QueryAllAccount_Account::default_instance_ = new QueryAllAccount_Account();
  MailCallBack::default_instance_ = new MailCallBack();
  QueryNotice::default_instance_ = new QueryNotice();
  QueryNotice_Notice::default_instance_ = new QueryNotice_Notice();
  ChangeNickname::default_instance_ = new ChangeNickname();
  BuyGoods::default_instance_ = new BuyGoods();
  CheckNameRsp::default_instance_ = new CheckNameRsp();
  HeroCfg::default_instance_ = new HeroCfg();
  RuneInfo::default_instance_ = new RuneInfo();
  RSinfo::default_instance_ = new RSinfo();
  ItemInfo::default_instance_ = new ItemInfo();
  MailInfo::default_instance_ = new MailInfo();
  QueryUser::default_instance_ = new QueryUser();
  QueryAllUser::default_instance_ = new QueryAllUser();
  CDKeyEvents::default_instance_->InitAsDefaultInstance();
  CDKeyEvents_event_info::default_instance_->InitAsDefaultInstance();
  QueryAllAccount::default_instance_->InitAsDefaultInstance();
  QueryAllAccount_Account::default_instance_->InitAsDefaultInstance();
  MailCallBack::default_instance_->InitAsDefaultInstance();
  QueryNotice::default_instance_->InitAsDefaultInstance();
  QueryNotice_Notice::default_instance_->InitAsDefaultInstance();
  ChangeNickname::default_instance_->InitAsDefaultInstance();
  BuyGoods::default_instance_->InitAsDefaultInstance();
  CheckNameRsp::default_instance_->InitAsDefaultInstance();
  HeroCfg::default_instance_->InitAsDefaultInstance();
  RuneInfo::default_instance_->InitAsDefaultInstance();
  RSinfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  QueryUser::default_instance_->InitAsDefaultInstance();
  QueryAllUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBToCS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBToCS_2eproto {
  StaticDescriptorInitializer_DBToCS_2eproto() {
    protobuf_AddDesc_DBToCS_2eproto();
  }
} static_descriptor_initializer_DBToCS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDKeyEvents_event_info::kIdFieldNumber;
const int CDKeyEvents_event_info::kTitleFieldNumber;
const int CDKeyEvents_event_info::kPlatformFieldNumber;
const int CDKeyEvents_event_info::kEndTimeFieldNumber;
const int CDKeyEvents_event_info::kContentFieldNumber;
const int CDKeyEvents_event_info::kGiftTypeFieldNumber;
const int CDKeyEvents_event_info::kItemInfoFieldNumber;
const int CDKeyEvents_event_info::kCodeNumFieldNumber;
const int CDKeyEvents_event_info::kCodeLenFieldNumber;
#endif  // !_MSC_VER

CDKeyEvents_event_info::CDKeyEvents_event_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.CDKeyEvents.event_info)
}

void CDKeyEvents_event_info::InitAsDefaultInstance() {
}

CDKeyEvents_event_info::CDKeyEvents_event_info(const CDKeyEvents_event_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.CDKeyEvents.event_info)
}

void CDKeyEvents_event_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = 0;
  end_time_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gift_type_ = 0;
  item_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_num_ = 0;
  code_len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDKeyEvents_event_info::~CDKeyEvents_event_info() {
  // @@protoc_insertion_point(destructor:DBToCS.CDKeyEvents.event_info)
  SharedDtor();
}

void CDKeyEvents_event_info::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (item_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_info_;
  }
  if (this != default_instance_) {
  }
}

void CDKeyEvents_event_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDKeyEvents_event_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDKeyEvents_event_info_descriptor_;
}

const CDKeyEvents_event_info& CDKeyEvents_event_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

CDKeyEvents_event_info* CDKeyEvents_event_info::default_instance_ = NULL;

CDKeyEvents_event_info* CDKeyEvents_event_info::New() const {
  return new CDKeyEvents_event_info;
}

void CDKeyEvents_event_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDKeyEvents_event_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, end_time_);
    ZR_(gift_type_, code_num_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_item_info()) {
      if (item_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_info_->clear();
      }
    }
  }
  code_len_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDKeyEvents_event_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.CDKeyEvents.event_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional int32 platform = 3;
      case 3: {
        if (tag == 24) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gift_type;
        break;
      }

      // optional int32 gift_type = 6;
      case 6: {
        if (tag == 48) {
         parse_gift_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_type_)));
          set_has_gift_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_item_info;
        break;
      }

      // optional string item_info = 7;
      case 7: {
        if (tag == 58) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_info().data(), this->item_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_code_num;
        break;
      }

      // optional int32 code_num = 8;
      case 8: {
        if (tag == 64) {
         parse_code_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_num_)));
          set_has_code_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_code_len;
        break;
      }

      // optional int32 code_len = 9;
      case 9: {
        if (tag == 72) {
         parse_code_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_len_)));
          set_has_code_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.CDKeyEvents.event_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.CDKeyEvents.event_info)
  return false;
#undef DO_
}

void CDKeyEvents_event_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.CDKeyEvents.event_info)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }

  // optional uint64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_time(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional int32 gift_type = 6;
  if (has_gift_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gift_type(), output);
  }

  // optional string item_info = 7;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_info().data(), this->item_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->item_info(), output);
  }

  // optional int32 code_num = 8;
  if (has_code_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->code_num(), output);
  }

  // optional int32 code_len = 9;
  if (has_code_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->code_len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.CDKeyEvents.event_info)
}

::google::protobuf::uint8* CDKeyEvents_event_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.CDKeyEvents.event_info)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }

  // optional uint64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_time(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional int32 gift_type = 6;
  if (has_gift_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gift_type(), target);
  }

  // optional string item_info = 7;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_info().data(), this->item_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->item_info(), target);
  }

  // optional int32 code_num = 8;
  if (has_code_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->code_num(), target);
  }

  // optional int32 code_len = 9;
  if (has_code_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->code_len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.CDKeyEvents.event_info)
  return target;
}

int CDKeyEvents_event_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional uint64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gift_type = 6;
    if (has_gift_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_type());
    }

    // optional string item_info = 7;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_info());
    }

    // optional int32 code_num = 8;
    if (has_code_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 code_len = 9;
    if (has_code_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDKeyEvents_event_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDKeyEvents_event_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDKeyEvents_event_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDKeyEvents_event_info::MergeFrom(const CDKeyEvents_event_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gift_type()) {
      set_gift_type(from.gift_type());
    }
    if (from.has_item_info()) {
      set_item_info(from.item_info());
    }
    if (from.has_code_num()) {
      set_code_num(from.code_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_code_len()) {
      set_code_len(from.code_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDKeyEvents_event_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDKeyEvents_event_info::CopyFrom(const CDKeyEvents_event_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDKeyEvents_event_info::IsInitialized() const {

  return true;
}

void CDKeyEvents_event_info::Swap(CDKeyEvents_event_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(platform_, other->platform_);
    std::swap(end_time_, other->end_time_);
    std::swap(content_, other->content_);
    std::swap(gift_type_, other->gift_type_);
    std::swap(item_info_, other->item_info_);
    std::swap(code_num_, other->code_num_);
    std::swap(code_len_, other->code_len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDKeyEvents_event_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDKeyEvents_event_info_descriptor_;
  metadata.reflection = CDKeyEvents_event_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDKeyEvents::kMgsidFieldNumber;
const int CDKeyEvents::kInfoFieldNumber;
const int CDKeyEvents::kNsidFieldNumber;
#endif  // !_MSC_VER

CDKeyEvents::CDKeyEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.CDKeyEvents)
}

void CDKeyEvents::InitAsDefaultInstance() {
}

CDKeyEvents::CDKeyEvents(const CDKeyEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.CDKeyEvents)
}

void CDKeyEvents::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8;
  nsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDKeyEvents::~CDKeyEvents() {
  // @@protoc_insertion_point(destructor:DBToCS.CDKeyEvents)
  SharedDtor();
}

void CDKeyEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDKeyEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDKeyEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDKeyEvents_descriptor_;
}

const CDKeyEvents& CDKeyEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

CDKeyEvents* CDKeyEvents::default_instance_ = NULL;

CDKeyEvents* CDKeyEvents::New() const {
  return new CDKeyEvents;
}

void CDKeyEvents::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    mgsid_ = 8;
    nsid_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDKeyEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.CDKeyEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eQueryCDKeyEvents_CallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .DBToCS.CDKeyEvents.event_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_nsid;
        break;
      }

      // optional int32 nsid = 3;
      case 3: {
        if (tag == 24) {
         parse_nsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsid_)));
          set_has_nsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.CDKeyEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.CDKeyEvents)
  return false;
#undef DO_
}

void CDKeyEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.CDKeyEvents)
  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryCDKeyEvents_CallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // repeated .DBToCS.CDKeyEvents.event_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 nsid = 3;
  if (has_nsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.CDKeyEvents)
}

::google::protobuf::uint8* CDKeyEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.CDKeyEvents)
  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryCDKeyEvents_CallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // repeated .DBToCS.CDKeyEvents.event_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 nsid = 3;
  if (has_nsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.CDKeyEvents)
  return target;
}

int CDKeyEvents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eQueryCDKeyEvents_CallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 nsid = 3;
    if (has_nsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsid());
    }

  }
  // repeated .DBToCS.CDKeyEvents.event_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDKeyEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDKeyEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDKeyEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDKeyEvents::MergeFrom(const CDKeyEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_nsid()) {
      set_nsid(from.nsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDKeyEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDKeyEvents::CopyFrom(const CDKeyEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDKeyEvents::IsInitialized() const {

  return true;
}

void CDKeyEvents::Swap(CDKeyEvents* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    info_.Swap(&other->info_);
    std::swap(nsid_, other->nsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDKeyEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDKeyEvents_descriptor_;
  metadata.reflection = CDKeyEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAllAccount_Account::kUserNameFieldNumber;
const int QueryAllAccount_Account::kCsidFieldNumber;
const int QueryAllAccount_Account::kSdkidFieldNumber;
const int QueryAllAccount_Account::kNicknameFieldNumber;
const int QueryAllAccount_Account::kGuidFieldNumber;
#endif  // !_MSC_VER

QueryAllAccount_Account::QueryAllAccount_Account()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.QueryAllAccount.Account)
}

void QueryAllAccount_Account::InitAsDefaultInstance() {
}

QueryAllAccount_Account::QueryAllAccount_Account(const QueryAllAccount_Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.QueryAllAccount.Account)
}

void QueryAllAccount_Account::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csid_ = 0;
  sdkid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllAccount_Account::~QueryAllAccount_Account() {
  // @@protoc_insertion_point(destructor:DBToCS.QueryAllAccount.Account)
  SharedDtor();
}

void QueryAllAccount_Account::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void QueryAllAccount_Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllAccount_Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllAccount_Account_descriptor_;
}

const QueryAllAccount_Account& QueryAllAccount_Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

QueryAllAccount_Account* QueryAllAccount_Account::default_instance_ = NULL;

QueryAllAccount_Account* QueryAllAccount_Account::New() const {
  return new QueryAllAccount_Account;
}

void QueryAllAccount_Account::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryAllAccount_Account*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(csid_, sdkid_);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    guid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllAccount_Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.QueryAllAccount.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_csid;
        break;
      }

      // optional int32 csid = 2;
      case 2: {
        if (tag == 16) {
         parse_csid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csid_)));
          set_has_csid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sdkid;
        break;
      }

      // optional int32 sdkid = 3;
      case 3: {
        if (tag == 24) {
         parse_sdkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guid;
        break;
      }

      // optional int64 guid = 5;
      case 5: {
        if (tag == 40) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.QueryAllAccount.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.QueryAllAccount.Account)
  return false;
#undef DO_
}

void QueryAllAccount_Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.QueryAllAccount.Account)
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // optional int32 csid = 2;
  if (has_csid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->csid(), output);
  }

  // optional int32 sdkid = 3;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sdkid(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int64 guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.QueryAllAccount.Account)
}

::google::protobuf::uint8* QueryAllAccount_Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.QueryAllAccount.Account)
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional int32 csid = 2;
  if (has_csid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->csid(), target);
  }

  // optional int32 sdkid = 3;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sdkid(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int64 guid = 5;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.QueryAllAccount.Account)
  return target;
}

int QueryAllAccount_Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 csid = 2;
    if (has_csid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csid());
    }

    // optional int32 sdkid = 3;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdkid());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllAccount_Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllAccount_Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllAccount_Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllAccount_Account::MergeFrom(const QueryAllAccount_Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_csid()) {
      set_csid(from.csid());
    }
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllAccount_Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllAccount_Account::CopyFrom(const QueryAllAccount_Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllAccount_Account::IsInitialized() const {

  return true;
}

void QueryAllAccount_Account::Swap(QueryAllAccount_Account* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(csid_, other->csid_);
    std::swap(sdkid_, other->sdkid_);
    std::swap(nickname_, other->nickname_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllAccount_Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllAccount_Account_descriptor_;
  metadata.reflection = QueryAllAccount_Account_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryAllAccount::kMgsidFieldNumber;
const int QueryAllAccount::kAccountFieldNumber;
#endif  // !_MSC_VER

QueryAllAccount::QueryAllAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.QueryAllAccount)
}

void QueryAllAccount::InitAsDefaultInstance() {
}

QueryAllAccount::QueryAllAccount(const QueryAllAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.QueryAllAccount)
}

void QueryAllAccount::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllAccount::~QueryAllAccount() {
  // @@protoc_insertion_point(destructor:DBToCS.QueryAllAccount)
  SharedDtor();
}

void QueryAllAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAllAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllAccount_descriptor_;
}

const QueryAllAccount& QueryAllAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

QueryAllAccount* QueryAllAccount::default_instance_ = NULL;

QueryAllAccount* QueryAllAccount::New() const {
  return new QueryAllAccount;
}

void QueryAllAccount::Clear() {
  mgsid_ = 7;
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.QueryAllAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eQueryAllAccount_CallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // repeated .DBToCS.QueryAllAccount.Account account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.QueryAllAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.QueryAllAccount)
  return false;
#undef DO_
}

void QueryAllAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.QueryAllAccount)
  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryAllAccount_CallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // repeated .DBToCS.QueryAllAccount.Account account = 2;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.QueryAllAccount)
}

::google::protobuf::uint8* QueryAllAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.QueryAllAccount)
  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryAllAccount_CallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // repeated .DBToCS.QueryAllAccount.Account account = 2;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.QueryAllAccount)
  return target;
}

int QueryAllAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eQueryAllAccount_CallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  // repeated .DBToCS.QueryAllAccount.Account account = 2;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllAccount::MergeFrom(const QueryAllAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllAccount::CopyFrom(const QueryAllAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllAccount::IsInitialized() const {

  return true;
}

void QueryAllAccount::Swap(QueryAllAccount* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    account_.Swap(&other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllAccount_descriptor_;
  metadata.reflection = QueryAllAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailCallBack::kMgsidFieldNumber;
const int MailCallBack::kMailidFieldNumber;
const int MailCallBack::kMailtypeFieldNumber;
const int MailCallBack::kChannelFieldNumber;
const int MailCallBack::kTitleFieldNumber;
const int MailCallBack::kContentFieldNumber;
const int MailCallBack::kGiftFieldNumber;
const int MailCallBack::kSenderFieldNumber;
const int MailCallBack::kCreatetimeFieldNumber;
const int MailCallBack::kObjidFieldNumber;
#endif  // !_MSC_VER

MailCallBack::MailCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.MailCallBack)
}

void MailCallBack::InitAsDefaultInstance() {
}

MailCallBack::MailCallBack(const MailCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.MailCallBack)
}

void MailCallBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 6;
  mailid_ = 0;
  mailtype_ = 0;
  channel_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailCallBack::~MailCallBack() {
  // @@protoc_insertion_point(destructor:DBToCS.MailCallBack)
  SharedDtor();
}

void MailCallBack::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gift_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void MailCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailCallBack_descriptor_;
}

const MailCallBack& MailCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

MailCallBack* MailCallBack::default_instance_ = NULL;

MailCallBack* MailCallBack::New() const {
  return new MailCallBack;
}

void MailCallBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailCallBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mailid_, channel_);
    mgsid_ = 6;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_gift()) {
      if (gift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gift_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
    objid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.MailCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eMail_CallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // optional int32 mailid = 2;
      case 2: {
        if (tag == 16) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mailtype;
        break;
      }

      // optional int32 mailtype = 3;
      case 3: {
        if (tag == 24) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional int32 channel = 4;
      case 4: {
        if (tag == 32) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (tag == 42) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gift;
        break;
      }

      // optional string gift = 7;
      case 7: {
        if (tag == 58) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gift().data(), this->gift().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gift");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sender;
        break;
      }

      // optional string sender = 8;
      case 8: {
        if (tag == 66) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_createtime;
        break;
      }

      // optional string createtime = 9;
      case 9: {
        if (tag == 74) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_objid;
        break;
      }

      // optional int64 objid = 10;
      case 10: {
        if (tag == 80) {
         parse_objid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.MailCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.MailCallBack)
  return false;
#undef DO_
}

void MailCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.MailCallBack)
  // optional .DBToCS.MsgID mgsid = 1 [default = eMail_CallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  // optional int32 mailtype = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mailtype(), output);
  }

  // optional int32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional string gift = 7;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gift().data(), this->gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gift");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gift(), output);
  }

  // optional string sender = 8;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sender(), output);
  }

  // optional string createtime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->createtime(), output);
  }

  // optional int64 objid = 10;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.MailCallBack)
}

::google::protobuf::uint8* MailCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.MailCallBack)
  // optional .DBToCS.MsgID mgsid = 1 [default = eMail_CallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  // optional int32 mailtype = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mailtype(), target);
  }

  // optional int32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional string gift = 7;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gift().data(), this->gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gift");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gift(), target);
  }

  // optional string sender = 8;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sender(), target);
  }

  // optional string createtime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->createtime(), target);
  }

  // optional int64 objid = 10;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.MailCallBack)
  return target;
}

int MailCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eMail_CallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 mailtype = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailtype());
    }

    // optional int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string gift = 7;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift());
    }

    // optional string sender = 8;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string createtime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional int64 objid = 10;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailCallBack::MergeFrom(const MailCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailCallBack::CopyFrom(const MailCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailCallBack::IsInitialized() const {

  return true;
}

void MailCallBack::Swap(MailCallBack* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(channel_, other->channel_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(gift_, other->gift_);
    std::swap(sender_, other->sender_);
    std::swap(createtime_, other->createtime_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailCallBack_descriptor_;
  metadata.reflection = MailCallBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryNotice_Notice::kIdFieldNumber;
const int QueryNotice_Notice::kTitleFieldNumber;
const int QueryNotice_Notice::kEflagFieldNumber;
const int QueryNotice_Notice::kEstateFieldNumber;
const int QueryNotice_Notice::kPriorityFieldNumber;
const int QueryNotice_Notice::kNoticeFieldNumber;
const int QueryNotice_Notice::kStarTimeFieldNumber;
const int QueryNotice_Notice::kEndTimeFieldNumber;
const int QueryNotice_Notice::kPlatformFieldNumber;
#endif  // !_MSC_VER

QueryNotice_Notice::QueryNotice_Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.QueryNotice.Notice)
}

void QueryNotice_Notice::InitAsDefaultInstance() {
}

QueryNotice_Notice::QueryNotice_Notice(const QueryNotice_Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.QueryNotice.Notice)
}

void QueryNotice_Notice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eflag_ = 0;
  estate_ = 0;
  priority_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  platform_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryNotice_Notice::~QueryNotice_Notice() {
  // @@protoc_insertion_point(destructor:DBToCS.QueryNotice.Notice)
  SharedDtor();
}

void QueryNotice_Notice::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void QueryNotice_Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNotice_Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNotice_Notice_descriptor_;
}

const QueryNotice_Notice& QueryNotice_Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

QueryNotice_Notice* QueryNotice_Notice::default_instance_ = NULL;

QueryNotice_Notice* QueryNotice_Notice::New() const {
  return new QueryNotice_Notice;
}

void QueryNotice_Notice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryNotice_Notice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, priority_);
    ZR_(star_time_, end_time_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }
  platform_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryNotice_Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.QueryNotice.Notice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eflag;
        break;
      }

      // optional int32 eflag = 3;
      case 3: {
        if (tag == 24) {
         parse_eflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eflag_)));
          set_has_eflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_estate;
        break;
      }

      // optional int32 estate = 4;
      case 4: {
        if (tag == 32) {
         parse_estate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estate_)));
          set_has_estate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // optional int32 priority = 5;
      case 5: {
        if (tag == 40) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }

      // optional string notice = 6;
      case 6: {
        if (tag == 50) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_star_time;
        break;
      }

      // optional uint64 star_time = 7;
      case 7: {
        if (tag == 56) {
         parse_star_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &star_time_)));
          set_has_star_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 8;
      case 8: {
        if (tag == 64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 9;
      case 9: {
        if (tag == 72) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.QueryNotice.Notice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.QueryNotice.Notice)
  return false;
#undef DO_
}

void QueryNotice_Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.QueryNotice.Notice)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional int32 eflag = 3;
  if (has_eflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eflag(), output);
  }

  // optional int32 estate = 4;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->estate(), output);
  }

  // optional int32 priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }

  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->notice(), output);
  }

  // optional uint64 star_time = 7;
  if (has_star_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->star_time(), output);
  }

  // optional uint64 end_time = 8;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->end_time(), output);
  }

  // optional uint32 platform = 9;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.QueryNotice.Notice)
}

::google::protobuf::uint8* QueryNotice_Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.QueryNotice.Notice)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional int32 eflag = 3;
  if (has_eflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eflag(), target);
  }

  // optional int32 estate = 4;
  if (has_estate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->estate(), target);
  }

  // optional int32 priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priority(), target);
  }

  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice(), target);
  }

  // optional uint64 star_time = 7;
  if (has_star_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->star_time(), target);
  }

  // optional uint64 end_time = 8;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->end_time(), target);
  }

  // optional uint32 platform = 9;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.QueryNotice.Notice)
  return target;
}

int QueryNotice_Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 eflag = 3;
    if (has_eflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eflag());
    }

    // optional int32 estate = 4;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estate());
    }

    // optional int32 priority = 5;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 star_time = 7;
    if (has_star_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->star_time());
    }

    // optional uint64 end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 platform = 9;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNotice_Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryNotice_Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryNotice_Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryNotice_Notice::MergeFrom(const QueryNotice_Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_eflag()) {
      set_eflag(from.eflag());
    }
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_star_time()) {
      set_star_time(from.star_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryNotice_Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNotice_Notice::CopyFrom(const QueryNotice_Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNotice_Notice::IsInitialized() const {

  return true;
}

void QueryNotice_Notice::Swap(QueryNotice_Notice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(eflag_, other->eflag_);
    std::swap(estate_, other->estate_);
    std::swap(priority_, other->priority_);
    std::swap(notice_, other->notice_);
    std::swap(star_time_, other->star_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryNotice_Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNotice_Notice_descriptor_;
  metadata.reflection = QueryNotice_Notice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryNotice::kMgsidFieldNumber;
const int QueryNotice::kNoticeInfoFieldNumber;
#endif  // !_MSC_VER

QueryNotice::QueryNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.QueryNotice)
}

void QueryNotice::InitAsDefaultInstance() {
}

QueryNotice::QueryNotice(const QueryNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.QueryNotice)
}

void QueryNotice::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryNotice::~QueryNotice() {
  // @@protoc_insertion_point(destructor:DBToCS.QueryNotice)
  SharedDtor();
}

void QueryNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNotice_descriptor_;
}

const QueryNotice& QueryNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

QueryNotice* QueryNotice::default_instance_ = NULL;

QueryNotice* QueryNotice::New() const {
  return new QueryNotice;
}

void QueryNotice::Clear() {
  mgsid_ = 5;
  notice_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.QueryNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eQueryNotice_CallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notice_info;
        break;
      }

      // repeated .DBToCS.QueryNotice.Notice notice_info = 2;
      case 2: {
        if (tag == 18) {
         parse_notice_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notice_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notice_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.QueryNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.QueryNotice)
  return false;
#undef DO_
}

void QueryNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.QueryNotice)
  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryNotice_CallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // repeated .DBToCS.QueryNotice.Notice notice_info = 2;
  for (int i = 0; i < this->notice_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notice_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.QueryNotice)
}

::google::protobuf::uint8* QueryNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.QueryNotice)
  // optional .DBToCS.MsgID mgsid = 1 [default = eQueryNotice_CallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // repeated .DBToCS.QueryNotice.Notice notice_info = 2;
  for (int i = 0; i < this->notice_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notice_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.QueryNotice)
  return target;
}

int QueryNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eQueryNotice_CallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  // repeated .DBToCS.QueryNotice.Notice notice_info = 2;
  total_size += 1 * this->notice_info_size();
  for (int i = 0; i < this->notice_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryNotice::MergeFrom(const QueryNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  notice_info_.MergeFrom(from.notice_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNotice::CopyFrom(const QueryNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNotice::IsInitialized() const {

  return true;
}

void QueryNotice::Swap(QueryNotice* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    notice_info_.Swap(&other->notice_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNotice_descriptor_;
  metadata.reflection = QueryNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNickname::kMgsidFieldNumber;
const int ChangeNickname::kGuidFieldNumber;
const int ChangeNickname::kReflagFieldNumber;
const int ChangeNickname::kNewnicknameFieldNumber;
const int ChangeNickname::kOldnicknameFieldNumber;
#endif  // !_MSC_VER

ChangeNickname::ChangeNickname()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.ChangeNickname)
}

void ChangeNickname::InitAsDefaultInstance() {
}

ChangeNickname::ChangeNickname(const ChangeNickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.ChangeNickname)
}

void ChangeNickname::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 4;
  guid_ = GOOGLE_ULONGLONG(0);
  reflag_ = false;
  newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNickname::~ChangeNickname() {
  // @@protoc_insertion_point(destructor:DBToCS.ChangeNickname)
  SharedDtor();
}

void ChangeNickname::SharedDtor() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldnickname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNickname_descriptor_;
}

const ChangeNickname& ChangeNickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

ChangeNickname* ChangeNickname::default_instance_ = NULL;

ChangeNickname* ChangeNickname::New() const {
  return new ChangeNickname;
}

void ChangeNickname::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    mgsid_ = 4;
    guid_ = GOOGLE_ULONGLONG(0);
    reflag_ = false;
    if (has_newnickname()) {
      if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newnickname_->clear();
      }
    }
    if (has_oldnickname()) {
      if (oldnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.ChangeNickname)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eChangeNickname_CallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reflag;
        break;
      }

      // optional bool reflag = 3;
      case 3: {
        if (tag == 24) {
         parse_reflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reflag_)));
          set_has_reflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newnickname;
        break;
      }

      // optional string newnickname = 4;
      case 4: {
        if (tag == 34) {
         parse_newnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newnickname().data(), this->newnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_oldnickname;
        break;
      }

      // optional string oldnickname = 5;
      case 5: {
        if (tag == 42) {
         parse_oldnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldnickname().data(), this->oldnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.ChangeNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.ChangeNickname)
  return false;
#undef DO_
}

void ChangeNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.ChangeNickname)
  // optional .DBToCS.MsgID mgsid = 1 [default = eChangeNickname_CallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional bool reflag = 3;
  if (has_reflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reflag(), output);
  }

  // optional string newnickname = 4;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->newnickname(), output);
  }

  // optional string oldnickname = 5;
  if (has_oldnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldnickname().data(), this->oldnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->oldnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.ChangeNickname)
}

::google::protobuf::uint8* ChangeNickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.ChangeNickname)
  // optional .DBToCS.MsgID mgsid = 1 [default = eChangeNickname_CallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional bool reflag = 3;
  if (has_reflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reflag(), target);
  }

  // optional string newnickname = 4;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newnickname(), target);
  }

  // optional string oldnickname = 5;
  if (has_oldnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldnickname().data(), this->oldnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->oldnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.ChangeNickname)
  return target;
}

int ChangeNickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eChangeNickname_CallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional bool reflag = 3;
    if (has_reflag()) {
      total_size += 1 + 1;
    }

    // optional string newnickname = 4;
    if (has_newnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newnickname());
    }

    // optional string oldnickname = 5;
    if (has_oldnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNickname::MergeFrom(const ChangeNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_reflag()) {
      set_reflag(from.reflag());
    }
    if (from.has_newnickname()) {
      set_newnickname(from.newnickname());
    }
    if (from.has_oldnickname()) {
      set_oldnickname(from.oldnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNickname::CopyFrom(const ChangeNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNickname::IsInitialized() const {

  return true;
}

void ChangeNickname::Swap(ChangeNickname* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(reflag_, other->reflag_);
    std::swap(newnickname_, other->newnickname_);
    std::swap(oldnickname_, other->oldnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNickname_descriptor_;
  metadata.reflection = ChangeNickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyGoods::kMgsidFieldNumber;
const int BuyGoods::kBuygoodsmagFieldNumber;
#endif  // !_MSC_VER

BuyGoods::BuyGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.BuyGoods)
}

void BuyGoods::InitAsDefaultInstance() {
}

BuyGoods::BuyGoods(const BuyGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.BuyGoods)
}

void BuyGoods::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 3;
  buygoodsmag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyGoods::~BuyGoods() {
  // @@protoc_insertion_point(destructor:DBToCS.BuyGoods)
  SharedDtor();
}

void BuyGoods::SharedDtor() {
  if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buygoodsmag_;
  }
  if (this != default_instance_) {
  }
}

void BuyGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyGoods_descriptor_;
}

const BuyGoods& BuyGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

BuyGoods* BuyGoods::default_instance_ = NULL;

BuyGoods* BuyGoods::New() const {
  return new BuyGoods;
}

void BuyGoods::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 3;
    if (has_buygoodsmag()) {
      if (buygoodsmag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buygoodsmag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.BuyGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eBuyGoodsCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buygoodsmag;
        break;
      }

      // optional string buygoodsmag = 2;
      case 2: {
        if (tag == 18) {
         parse_buygoodsmag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buygoodsmag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buygoodsmag().data(), this->buygoodsmag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buygoodsmag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.BuyGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.BuyGoods)
  return false;
#undef DO_
}

void BuyGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.BuyGoods)
  // optional .DBToCS.MsgID mgsid = 1 [default = eBuyGoodsCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string buygoodsmag = 2;
  if (has_buygoodsmag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buygoodsmag().data(), this->buygoodsmag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buygoodsmag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buygoodsmag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.BuyGoods)
}

::google::protobuf::uint8* BuyGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.BuyGoods)
  // optional .DBToCS.MsgID mgsid = 1 [default = eBuyGoodsCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string buygoodsmag = 2;
  if (has_buygoodsmag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buygoodsmag().data(), this->buygoodsmag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buygoodsmag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buygoodsmag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.BuyGoods)
  return target;
}

int BuyGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eBuyGoodsCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string buygoodsmag = 2;
    if (has_buygoodsmag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buygoodsmag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyGoods::MergeFrom(const BuyGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_buygoodsmag()) {
      set_buygoodsmag(from.buygoodsmag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyGoods::CopyFrom(const BuyGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyGoods::IsInitialized() const {

  return true;
}

void BuyGoods::Swap(BuyGoods* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(buygoodsmag_, other->buygoodsmag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyGoods_descriptor_;
  metadata.reflection = BuyGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameRsp::kMgsidFieldNumber;
const int CheckNameRsp::kCompleteInfoFieldNumber;
const int CheckNameRsp::kGsidFieldNumber;
const int CheckNameRsp::kGcnetidFieldNumber;
const int CheckNameRsp::kGsnetidFieldNumber;
const int CheckNameRsp::kCheckresFieldNumber;
#endif  // !_MSC_VER

CheckNameRsp::CheckNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.CheckNameRsp)
}

void CheckNameRsp::InitAsDefaultInstance() {
}

CheckNameRsp::CheckNameRsp(const CheckNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.CheckNameRsp)
}

void CheckNameRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 1;
  completeinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gsid_ = 0;
  gcnetid_ = 0;
  gsnetid_ = 0;
  checkres_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameRsp::~CheckNameRsp() {
  // @@protoc_insertion_point(destructor:DBToCS.CheckNameRsp)
  SharedDtor();
}

void CheckNameRsp::SharedDtor() {
  if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete completeinfo_;
  }
  if (this != default_instance_) {
  }
}

void CheckNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameRsp_descriptor_;
}

const CheckNameRsp& CheckNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

CheckNameRsp* CheckNameRsp::default_instance_ = NULL;

CheckNameRsp* CheckNameRsp::New() const {
  return new CheckNameRsp;
}

void CheckNameRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckNameRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gsid_, checkres_);
    mgsid_ = 1;
    if (has_completeinfo()) {
      if (completeinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        completeinfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.CheckNameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID mgsid = 1 [default = eCheckNickNameLogicCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_completeInfo;
        break;
      }

      // optional string completeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_completeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->completeinfo().data(), this->completeinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "completeinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 3;
      case 3: {
        if (tag == 24) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gcnetid;
        break;
      }

      // optional int32 gcnetid = 4;
      case 4: {
        if (tag == 32) {
         parse_gcnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnetid_)));
          set_has_gcnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gsnetid;
        break;
      }

      // optional int32 gsnetid = 5;
      case 5: {
        if (tag == 40) {
         parse_gsnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsnetid_)));
          set_has_gsnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_checkres;
        break;
      }

      // optional int32 checkres = 6;
      case 6: {
        if (tag == 48) {
         parse_checkres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkres_)));
          set_has_checkres();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.CheckNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.CheckNameRsp)
  return false;
#undef DO_
}

void CheckNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.CheckNameRsp)
  // optional .DBToCS.MsgID mgsid = 1 [default = eCheckNickNameLogicCallBack];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string completeInfo = 2;
  if (has_completeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completeinfo().data(), this->completeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completeinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->completeinfo(), output);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gsid(), output);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gcnetid(), output);
  }

  // optional int32 gsnetid = 5;
  if (has_gsnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gsnetid(), output);
  }

  // optional int32 checkres = 6;
  if (has_checkres()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->checkres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.CheckNameRsp)
}

::google::protobuf::uint8* CheckNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.CheckNameRsp)
  // optional .DBToCS.MsgID mgsid = 1 [default = eCheckNickNameLogicCallBack];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string completeInfo = 2;
  if (has_completeinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completeinfo().data(), this->completeinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completeinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->completeinfo(), target);
  }

  // optional int32 gsid = 3;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gsid(), target);
  }

  // optional int32 gcnetid = 4;
  if (has_gcnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gcnetid(), target);
  }

  // optional int32 gsnetid = 5;
  if (has_gsnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gsnetid(), target);
  }

  // optional int32 checkres = 6;
  if (has_checkres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->checkres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.CheckNameRsp)
  return target;
}

int CheckNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID mgsid = 1 [default = eCheckNickNameLogicCallBack];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string completeInfo = 2;
    if (has_completeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completeinfo());
    }

    // optional int32 gsid = 3;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnetid = 4;
    if (has_gcnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnetid());
    }

    // optional int32 gsnetid = 5;
    if (has_gsnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsnetid());
    }

    // optional int32 checkres = 6;
    if (has_checkres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameRsp::MergeFrom(const CheckNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_completeinfo()) {
      set_completeinfo(from.completeinfo());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnetid()) {
      set_gcnetid(from.gcnetid());
    }
    if (from.has_gsnetid()) {
      set_gsnetid(from.gsnetid());
    }
    if (from.has_checkres()) {
      set_checkres(from.checkres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameRsp::CopyFrom(const CheckNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameRsp::IsInitialized() const {

  return true;
}

void CheckNameRsp::Swap(CheckNameRsp* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(completeinfo_, other->completeinfo_);
    std::swap(gsid_, other->gsid_);
    std::swap(gcnetid_, other->gcnetid_);
    std::swap(gsnetid_, other->gsnetid_);
    std::swap(checkres_, other->checkres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameRsp_descriptor_;
  metadata.reflection = CheckNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroCfg::kCommodityidFieldNumber;
const int HeroCfg::kBuytimeFieldNumber;
const int HeroCfg::kExpiredtimeFieldNumber;
#endif  // !_MSC_VER

HeroCfg::HeroCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.HeroCfg)
}

void HeroCfg::InitAsDefaultInstance() {
}

HeroCfg::HeroCfg(const HeroCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.HeroCfg)
}

void HeroCfg::SharedCtor() {
  _cached_size_ = 0;
  commodityid_ = 0u;
  buytime_ = GOOGLE_LONGLONG(0);
  expiredtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroCfg::~HeroCfg() {
  // @@protoc_insertion_point(destructor:DBToCS.HeroCfg)
  SharedDtor();
}

void HeroCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroCfg_descriptor_;
}

const HeroCfg& HeroCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

HeroCfg* HeroCfg::default_instance_ = NULL;

HeroCfg* HeroCfg::New() const {
  return new HeroCfg;
}

void HeroCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buytime_, commodityid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.HeroCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 commodityid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commodityid_)));
          set_has_commodityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buytime;
        break;
      }

      // optional int64 buytime = 2;
      case 2: {
        if (tag == 16) {
         parse_buytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expiredtime;
        break;
      }

      // optional int64 expiredtime = 3;
      case 3: {
        if (tag == 24) {
         parse_expiredtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiredtime_)));
          set_has_expiredtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.HeroCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.HeroCfg)
  return false;
#undef DO_
}

void HeroCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.HeroCfg)
  // optional uint32 commodityid = 1;
  if (has_commodityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commodityid(), output);
  }

  // optional int64 buytime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->buytime(), output);
  }

  // optional int64 expiredtime = 3;
  if (has_expiredtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiredtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.HeroCfg)
}

::google::protobuf::uint8* HeroCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.HeroCfg)
  // optional uint32 commodityid = 1;
  if (has_commodityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->commodityid(), target);
  }

  // optional int64 buytime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->buytime(), target);
  }

  // optional int64 expiredtime = 3;
  if (has_expiredtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expiredtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.HeroCfg)
  return target;
}

int HeroCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 commodityid = 1;
    if (has_commodityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commodityid());
    }

    // optional int64 buytime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buytime());
    }

    // optional int64 expiredtime = 3;
    if (has_expiredtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiredtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroCfg::MergeFrom(const HeroCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commodityid()) {
      set_commodityid(from.commodityid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_expiredtime()) {
      set_expiredtime(from.expiredtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroCfg::CopyFrom(const HeroCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroCfg::IsInitialized() const {

  return true;
}

void HeroCfg::Swap(HeroCfg* other) {
  if (other != this) {
    std::swap(commodityid_, other->commodityid_);
    std::swap(buytime_, other->buytime_);
    std::swap(expiredtime_, other->expiredtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroCfg_descriptor_;
  metadata.reflection = HeroCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneInfo::kBagStrFieldNumber;
const int RuneInfo::kSlotStrFieldNumber;
#endif  // !_MSC_VER

RuneInfo::RuneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.RuneInfo)
}

void RuneInfo::InitAsDefaultInstance() {
}

RuneInfo::RuneInfo(const RuneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.RuneInfo)
}

void RuneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bagstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slotstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneInfo::~RuneInfo() {
  // @@protoc_insertion_point(destructor:DBToCS.RuneInfo)
  SharedDtor();
}

void RuneInfo::SharedDtor() {
  if (bagstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bagstr_;
  }
  if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slotstr_;
  }
  if (this != default_instance_) {
  }
}

void RuneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneInfo_descriptor_;
}

const RuneInfo& RuneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

RuneInfo* RuneInfo::default_instance_ = NULL;

RuneInfo* RuneInfo::New() const {
  return new RuneInfo;
}

void RuneInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bagstr()) {
      if (bagstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bagstr_->clear();
      }
    }
    if (has_slotstr()) {
      if (slotstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slotstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.RuneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bagStr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bagstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bagstr().data(), this->bagstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bagstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slotStr;
        break;
      }

      // optional string slotStr = 2;
      case 2: {
        if (tag == 18) {
         parse_slotStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slotstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slotstr().data(), this->slotstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slotstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.RuneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.RuneInfo)
  return false;
#undef DO_
}

void RuneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.RuneInfo)
  // optional string bagStr = 1;
  if (has_bagstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bagstr().data(), this->bagstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bagstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bagstr(), output);
  }

  // optional string slotStr = 2;
  if (has_slotstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slotstr().data(), this->slotstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slotstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->slotstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.RuneInfo)
}

::google::protobuf::uint8* RuneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.RuneInfo)
  // optional string bagStr = 1;
  if (has_bagstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bagstr().data(), this->bagstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bagstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bagstr(), target);
  }

  // optional string slotStr = 2;
  if (has_slotstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slotstr().data(), this->slotstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slotstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->slotstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.RuneInfo)
  return target;
}

int RuneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bagStr = 1;
    if (has_bagstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bagstr());
    }

    // optional string slotStr = 2;
    if (has_slotstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slotstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneInfo::MergeFrom(const RuneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagstr()) {
      set_bagstr(from.bagstr());
    }
    if (from.has_slotstr()) {
      set_slotstr(from.slotstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneInfo::CopyFrom(const RuneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneInfo::IsInitialized() const {

  return true;
}

void RuneInfo::Swap(RuneInfo* other) {
  if (other != this) {
    std::swap(bagstr_, other->bagstr_);
    std::swap(slotstr_, other->slotstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneInfo_descriptor_;
  metadata.reflection = RuneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSinfo::kRelatedIdFieldNumber;
const int RSinfo::kRelatedHeaderFieldNumber;
const int RSinfo::kRelatedNameFieldNumber;
const int RSinfo::kRelationFieldNumber;
const int RSinfo::kRelatedVipFieldNumber;
#endif  // !_MSC_VER

RSinfo::RSinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.RSinfo)
}

void RSinfo::InitAsDefaultInstance() {
}

RSinfo::RSinfo(const RSinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.RSinfo)
}

void RSinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  related_id_ = GOOGLE_ULONGLONG(0);
  related_header_ = 0u;
  related_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relation_ = 0u;
  related_vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSinfo::~RSinfo() {
  // @@protoc_insertion_point(destructor:DBToCS.RSinfo)
  SharedDtor();
}

void RSinfo::SharedDtor() {
  if (related_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete related_name_;
  }
  if (this != default_instance_) {
  }
}

void RSinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSinfo_descriptor_;
}

const RSinfo& RSinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

RSinfo* RSinfo::default_instance_ = NULL;

RSinfo* RSinfo::New() const {
  return new RSinfo;
}

void RSinfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RSinfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(related_header_, related_vip_);
    related_id_ = GOOGLE_ULONGLONG(0);
    if (has_related_name()) {
      if (related_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        related_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.RSinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 related_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &related_id_)));
          set_has_related_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_related_header;
        break;
      }

      // optional uint32 related_header = 2;
      case 2: {
        if (tag == 16) {
         parse_related_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &related_header_)));
          set_has_related_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_related_name;
        break;
      }

      // optional string related_name = 3;
      case 3: {
        if (tag == 26) {
         parse_related_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_related_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->related_name().data(), this->related_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "related_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_relation;
        break;
      }

      // optional uint32 relation = 4;
      case 4: {
        if (tag == 32) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_related_vip;
        break;
      }

      // optional uint32 related_vip = 5;
      case 5: {
        if (tag == 40) {
         parse_related_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &related_vip_)));
          set_has_related_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.RSinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.RSinfo)
  return false;
#undef DO_
}

void RSinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.RSinfo)
  // optional uint64 related_id = 1;
  if (has_related_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->related_id(), output);
  }

  // optional uint32 related_header = 2;
  if (has_related_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->related_header(), output);
  }

  // optional string related_name = 3;
  if (has_related_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->related_name().data(), this->related_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "related_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->related_name(), output);
  }

  // optional uint32 relation = 4;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->relation(), output);
  }

  // optional uint32 related_vip = 5;
  if (has_related_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->related_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.RSinfo)
}

::google::protobuf::uint8* RSinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.RSinfo)
  // optional uint64 related_id = 1;
  if (has_related_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->related_id(), target);
  }

  // optional uint32 related_header = 2;
  if (has_related_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->related_header(), target);
  }

  // optional string related_name = 3;
  if (has_related_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->related_name().data(), this->related_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "related_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->related_name(), target);
  }

  // optional uint32 relation = 4;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->relation(), target);
  }

  // optional uint32 related_vip = 5;
  if (has_related_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->related_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.RSinfo)
  return target;
}

int RSinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 related_id = 1;
    if (has_related_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->related_id());
    }

    // optional uint32 related_header = 2;
    if (has_related_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->related_header());
    }

    // optional string related_name = 3;
    if (has_related_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->related_name());
    }

    // optional uint32 relation = 4;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relation());
    }

    // optional uint32 related_vip = 5;
    if (has_related_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->related_vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSinfo::MergeFrom(const RSinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_related_id()) {
      set_related_id(from.related_id());
    }
    if (from.has_related_header()) {
      set_related_header(from.related_header());
    }
    if (from.has_related_name()) {
      set_related_name(from.related_name());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_related_vip()) {
      set_related_vip(from.related_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSinfo::CopyFrom(const RSinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSinfo::IsInitialized() const {

  return true;
}

void RSinfo::Swap(RSinfo* other) {
  if (other != this) {
    std::swap(related_id_, other->related_id_);
    std::swap(related_header_, other->related_header_);
    std::swap(related_name_, other->related_name_);
    std::swap(relation_, other->relation_);
    std::swap(related_vip_, other->related_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSinfo_descriptor_;
  metadata.reflection = RSinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kItemNumFieldNumber;
const int ItemInfo::kBuyTimeFieldNumber;
const int ItemInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_num_ = 0u;
  buy_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:DBToCS.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, end_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 2;
      case 2: {
        if (tag == 16) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buy_time;
        break;
      }

      // optional int32 buy_time = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.ItemInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  // optional int32 buy_time = 3;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_time(), output);
  }

  // optional int32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.ItemInfo)
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  // optional int32 buy_time = 3;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_time(), target);
  }

  // optional int32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional int32 buy_time = 3;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_time());
    }

    // optional int32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailidFieldNumber;
const int MailInfo::kStateFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.MailInfo)
}

void MailInfo::InitAsDefaultInstance() {
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.MailInfo)
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  // @@protoc_insertion_point(destructor:DBToCS.MailInfo)
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mailid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.MailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.MailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.MailInfo)
  return false;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.MailInfo)
  // optional int32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.MailInfo)
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.MailInfo)
  // optional int32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mailid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.MailInfo)
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUser::kMsgidFieldNumber;
const int QueryUser::kDbFieldNumber;
const int QueryUser::kLoginFieldNumber;
const int QueryUser::kGsidFieldNumber;
const int QueryUser::kGcnetidFieldNumber;
const int QueryUser::kNicknameFieldNumber;
const int QueryUser::kHerocfgFieldNumber;
const int QueryUser::kRuneinfoFieldNumber;
const int QueryUser::kRsinfoFieldNumber;
const int QueryUser::kItemInfoFieldNumber;
const int QueryUser::kMailInfoFieldNumber;
const int QueryUser::kGuidestrFieldNumber;
const int QueryUser::kTaskDataFieldNumber;
#endif  // !_MSC_VER

QueryUser::QueryUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.QueryUser)
}

void QueryUser::InitAsDefaultInstance() {
}

QueryUser::QueryUser(const QueryUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.QueryUser)
}

void QueryUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 2;
  db_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gsid_ = 0;
  gcnetid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guidestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUser::~QueryUser() {
  // @@protoc_insertion_point(destructor:DBToCS.QueryUser)
  SharedDtor();
}

void QueryUser::SharedDtor() {
  if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_;
  }
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (guidestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guidestr_;
  }
  if (taskdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete taskdata_;
  }
  if (this != default_instance_) {
  }
}

void QueryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUser_descriptor_;
}

const QueryUser& QueryUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

QueryUser* QueryUser::default_instance_ = NULL;

QueryUser* QueryUser::New() const {
  return new QueryUser;
}

void QueryUser::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 2;
    if (has_db()) {
      if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        db_->clear();
      }
    }
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    gsid_ = 0;
    gcnetid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 6144) {
    if (has_guidestr()) {
      if (guidestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guidestr_->clear();
      }
    }
    if (has_taskdata()) {
      if (taskdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        taskdata_->clear();
      }
    }
  }
  herocfg_.Clear();
  runeinfo_.Clear();
  rsinfo_.Clear();
  item_info_.Clear();
  mail_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.QueryUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // optional string db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "db");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_login;
        break;
      }

      // optional string login = 3;
      case 3: {
        if (tag == 26) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 4;
      case 4: {
        if (tag == 32) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gcnetid;
        break;
      }

      // optional int32 gcnetid = 5;
      case 5: {
        if (tag == 40) {
         parse_gcnetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnetid_)));
          set_has_gcnetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nickname;
        break;
      }

      // optional string nickname = 6;
      case 6: {
        if (tag == 50) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_herocfg;
        break;
      }

      // repeated .DBToCS.HeroCfg herocfg = 7;
      case 7: {
        if (tag == 58) {
         parse_herocfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herocfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_herocfg;
        if (input->ExpectTag(66)) goto parse_runeinfo;
        break;
      }

      // repeated .DBToCS.RuneInfo runeinfo = 8;
      case 8: {
        if (tag == 66) {
         parse_runeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_runeinfo;
        if (input->ExpectTag(74)) goto parse_rsinfo;
        break;
      }

      // repeated .DBToCS.RSinfo rsinfo = 9;
      case 9: {
        if (tag == 74) {
         parse_rsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rsinfo;
        if (input->ExpectTag(82)) goto parse_item_info;
        break;
      }

      // repeated .DBToCS.ItemInfo item_info = 10;
      case 10: {
        if (tag == 82) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_item_info;
        if (input->ExpectTag(90)) goto parse_mail_info;
        break;
      }

      // repeated .DBToCS.MailInfo mail_info = 11;
      case 11: {
        if (tag == 90) {
         parse_mail_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_mail_info;
        if (input->ExpectTag(98)) goto parse_guidestr;
        break;
      }

      // optional string guidestr = 12;
      case 12: {
        if (tag == 98) {
         parse_guidestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guidestr().data(), this->guidestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guidestr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_taskData;
        break;
      }

      // optional string taskData = 13;
      case 13: {
        if (tag == 106) {
         parse_taskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->taskdata().data(), this->taskdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "taskdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.QueryUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.QueryUser)
  return false;
#undef DO_
}

void QueryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.QueryUser)
  // optional .DBToCS.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db(), output);
  }

  // optional string login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->login(), output);
  }

  // optional int32 gsid = 4;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gsid(), output);
  }

  // optional int32 gcnetid = 5;
  if (has_gcnetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gcnetid(), output);
  }

  // optional string nickname = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nickname(), output);
  }

  // repeated .DBToCS.HeroCfg herocfg = 7;
  for (int i = 0; i < this->herocfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->herocfg(i), output);
  }

  // repeated .DBToCS.RuneInfo runeinfo = 8;
  for (int i = 0; i < this->runeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->runeinfo(i), output);
  }

  // repeated .DBToCS.RSinfo rsinfo = 9;
  for (int i = 0; i < this->rsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rsinfo(i), output);
  }

  // repeated .DBToCS.ItemInfo item_info = 10;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item_info(i), output);
  }

  // repeated .DBToCS.MailInfo mail_info = 11;
  for (int i = 0; i < this->mail_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->mail_info(i), output);
  }

  // optional string guidestr = 12;
  if (has_guidestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guidestr().data(), this->guidestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guidestr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->guidestr(), output);
  }

  // optional string taskData = 13;
  if (has_taskdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taskdata().data(), this->taskdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "taskdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->taskdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.QueryUser)
}

::google::protobuf::uint8* QueryUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.QueryUser)
  // optional .DBToCS.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db(), target);
  }

  // optional string login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login(), target);
  }

  // optional int32 gsid = 4;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gsid(), target);
  }

  // optional int32 gcnetid = 5;
  if (has_gcnetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gcnetid(), target);
  }

  // optional string nickname = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }

  // repeated .DBToCS.HeroCfg herocfg = 7;
  for (int i = 0; i < this->herocfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->herocfg(i), target);
  }

  // repeated .DBToCS.RuneInfo runeinfo = 8;
  for (int i = 0; i < this->runeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->runeinfo(i), target);
  }

  // repeated .DBToCS.RSinfo rsinfo = 9;
  for (int i = 0; i < this->rsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rsinfo(i), target);
  }

  // repeated .DBToCS.ItemInfo item_info = 10;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item_info(i), target);
  }

  // repeated .DBToCS.MailInfo mail_info = 11;
  for (int i = 0; i < this->mail_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->mail_info(i), target);
  }

  // optional string guidestr = 12;
  if (has_guidestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guidestr().data(), this->guidestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guidestr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->guidestr(), target);
  }

  // optional string taskData = 13;
  if (has_taskdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taskdata().data(), this->taskdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "taskdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->taskdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.QueryUser)
  return target;
}

int QueryUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID msgid = 1 [default = eQueryUser_DBCallBack];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string db = 2;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }

    // optional string login = 3;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional int32 gsid = 4;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnetid = 5;
    if (has_gcnetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnetid());
    }

    // optional string nickname = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional string guidestr = 12;
    if (has_guidestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidestr());
    }

    // optional string taskData = 13;
    if (has_taskdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskdata());
    }

  }
  // repeated .DBToCS.HeroCfg herocfg = 7;
  total_size += 1 * this->herocfg_size();
  for (int i = 0; i < this->herocfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herocfg(i));
  }

  // repeated .DBToCS.RuneInfo runeinfo = 8;
  total_size += 1 * this->runeinfo_size();
  for (int i = 0; i < this->runeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runeinfo(i));
  }

  // repeated .DBToCS.RSinfo rsinfo = 9;
  total_size += 1 * this->rsinfo_size();
  for (int i = 0; i < this->rsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rsinfo(i));
  }

  // repeated .DBToCS.ItemInfo item_info = 10;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }

  // repeated .DBToCS.MailInfo mail_info = 11;
  total_size += 1 * this->mail_info_size();
  for (int i = 0; i < this->mail_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUser::MergeFrom(const QueryUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  herocfg_.MergeFrom(from.herocfg_);
  runeinfo_.MergeFrom(from.runeinfo_);
  rsinfo_.MergeFrom(from.rsinfo_);
  item_info_.MergeFrom(from.item_info_);
  mail_info_.MergeFrom(from.mail_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_db()) {
      set_db(from.db());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnetid()) {
      set_gcnetid(from.gcnetid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_guidestr()) {
      set_guidestr(from.guidestr());
    }
    if (from.has_taskdata()) {
      set_taskdata(from.taskdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUser::CopyFrom(const QueryUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUser::IsInitialized() const {

  return true;
}

void QueryUser::Swap(QueryUser* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(db_, other->db_);
    std::swap(login_, other->login_);
    std::swap(gsid_, other->gsid_);
    std::swap(gcnetid_, other->gcnetid_);
    std::swap(nickname_, other->nickname_);
    herocfg_.Swap(&other->herocfg_);
    runeinfo_.Swap(&other->runeinfo_);
    rsinfo_.Swap(&other->rsinfo_);
    item_info_.Swap(&other->item_info_);
    mail_info_.Swap(&other->mail_info_);
    std::swap(guidestr_, other->guidestr_);
    std::swap(taskdata_, other->taskdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUser_descriptor_;
  metadata.reflection = QueryUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAllUser::kMsgidFieldNumber;
const int QueryAllUser::kSQueryUserFieldNumber;
#endif  // !_MSC_VER

QueryAllUser::QueryAllUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBToCS.QueryAllUser)
}

void QueryAllUser::InitAsDefaultInstance() {
}

QueryAllUser::QueryAllUser(const QueryAllUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBToCS.QueryAllUser)
}

void QueryAllUser::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAllUser::~QueryAllUser() {
  // @@protoc_insertion_point(destructor:DBToCS.QueryAllUser)
  SharedDtor();
}

void QueryAllUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAllUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAllUser_descriptor_;
}

const QueryAllUser& QueryAllUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBToCS_2eproto();
  return *default_instance_;
}

QueryAllUser* QueryAllUser::default_instance_ = NULL;

QueryAllUser* QueryAllUser::New() const {
  return new QueryAllUser;
}

void QueryAllUser::Clear() {
  msgid_ = 9;
  squeryuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAllUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBToCS.QueryAllUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DBToCS.MsgID msgid = 1 [default = eQueryAllUser_CallBack];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DBToCS::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::DBToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sQueryUser;
        break;
      }

      // repeated .DBToCS.QueryUser sQueryUser = 2;
      case 2: {
        if (tag == 18) {
         parse_sQueryUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squeryuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sQueryUser;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBToCS.QueryAllUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBToCS.QueryAllUser)
  return false;
#undef DO_
}

void QueryAllUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBToCS.QueryAllUser)
  // optional .DBToCS.MsgID msgid = 1 [default = eQueryAllUser_CallBack];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .DBToCS.QueryUser sQueryUser = 2;
  for (int i = 0; i < this->squeryuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->squeryuser(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBToCS.QueryAllUser)
}

::google::protobuf::uint8* QueryAllUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBToCS.QueryAllUser)
  // optional .DBToCS.MsgID msgid = 1 [default = eQueryAllUser_CallBack];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .DBToCS.QueryUser sQueryUser = 2;
  for (int i = 0; i < this->squeryuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->squeryuser(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBToCS.QueryAllUser)
  return target;
}

int QueryAllUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DBToCS.MsgID msgid = 1 [default = eQueryAllUser_CallBack];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .DBToCS.QueryUser sQueryUser = 2;
  total_size += 1 * this->squeryuser_size();
  for (int i = 0; i < this->squeryuser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squeryuser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAllUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAllUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAllUser::MergeFrom(const QueryAllUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  squeryuser_.MergeFrom(from.squeryuser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAllUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllUser::CopyFrom(const QueryAllUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllUser::IsInitialized() const {

  return true;
}

void QueryAllUser::Swap(QueryAllUser* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    squeryuser_.Swap(&other->squeryuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAllUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAllUser_descriptor_;
  metadata.reflection = QueryAllUser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBToCS

// @@protoc_insertion_point(global_scope)
