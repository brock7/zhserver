// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSToCS.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SSToCS.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SSToCS {

namespace {

const ::google::protobuf::Descriptor* GameLogSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLogSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpGuideBattleStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpGuideBattleStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportGotSomeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportGotSomeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBattleShowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBattleShowResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskChangeFirstWinTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskChangeFirstWinTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRegiste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRegiste_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBattleFinished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBattleFinished_reflection_ = NULL;
const ::google::protobuf::Descriptor* userData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskUpdateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskUpdateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserNetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserNetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportUserOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportUserOffline_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAllCfgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAllCfgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskHeroCfgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskHeroCfgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskGoodsfgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskGoodsfgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskShopfgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskShopfgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPublicLuaStr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPublicLuaStr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskMapCfgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskMapCfgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskNewSkillCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskNewSkillCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectAccountCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectAccountCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectLeadingCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectLeadingCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectRangeCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectRangeCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectBufCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectBufCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectSummonCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectSummonCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectMoveCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectMoveCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSkillEffectSwitchCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSkillEffectSwitchCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPassitiveSkillCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPassitiveSkillCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPassitiveEffectBloodSeekCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPassitiveEffectBloodSeekCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPassitiveEffectReboundCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPassitiveEffectReboundCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskPassitiveEffectReliveCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskPassitiveEffectReliveCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskUpdateGuideStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskUpdateGuideStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskUserGoHall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskUserGoHall_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncAllBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncAllBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishBattle_BattleUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishBattle_BattleUserData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SSToCS_2eproto() {
  protobuf_AddDesc_SSToCS_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SSToCS.proto");
  GOOGLE_CHECK(file != NULL);
  GameLogSwitch_descriptor_ = file->message_type(0);
  static const int GameLogSwitch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogSwitch, mgsid_),
  };
  GameLogSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameLogSwitch_descriptor_,
      GameLogSwitch::default_instance_,
      GameLogSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameLogSwitch));
  UpGuideBattleStep_descriptor_ = file->message_type(1);
  static const int UpGuideBattleStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGuideBattleStep, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGuideBattleStep, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGuideBattleStep, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGuideBattleStep, num_),
  };
  UpGuideBattleStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpGuideBattleStep_descriptor_,
      UpGuideBattleStep::default_instance_,
      UpGuideBattleStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGuideBattleStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGuideBattleStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpGuideBattleStep));
  BattleLog_descriptor_ = file->message_type(2);
  static const int BattleLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, log_str_),
  };
  BattleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleLog_descriptor_,
      BattleLog::default_instance_,
      BattleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleLog));
  AskPing_descriptor_ = file->message_type(3);
  static const int AskPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, time_),
  };
  AskPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPing_descriptor_,
      AskPing::default_instance_,
      AskPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPing));
  ReportGotSomeMsg_descriptor_ = file->message_type(4);
  static const int ReportGotSomeMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGotSomeMsg, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGotSomeMsg, gotmsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGotSomeMsg, otherval_),
  };
  ReportGotSomeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportGotSomeMsg_descriptor_,
      ReportGotSomeMsg::default_instance_,
      ReportGotSomeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGotSomeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGotSomeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportGotSomeMsg));
  ReportBattleShowResult_descriptor_ = file->message_type(5);
  static const int ReportBattleShowResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleShowResult, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleShowResult, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleShowResult, result_),
  };
  ReportBattleShowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportBattleShowResult_descriptor_,
      ReportBattleShowResult::default_instance_,
      ReportBattleShowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleShowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleShowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportBattleShowResult));
  AskChangeFirstWinTime_descriptor_ = file->message_type(6);
  static const int AskChangeFirstWinTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeFirstWinTime, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeFirstWinTime, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeFirstWinTime, curtime_),
  };
  AskChangeFirstWinTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskChangeFirstWinTime_descriptor_,
      AskChangeFirstWinTime::default_instance_,
      AskChangeFirstWinTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeFirstWinTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskChangeFirstWinTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskChangeFirstWinTime));
  AddGold_descriptor_ = file->message_type(7);
  static const int AddGold_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGold, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGold, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGold, gold_),
  };
  AddGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGold_descriptor_,
      AddGold::default_instance_,
      AddGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGold));
  AskRegiste_descriptor_ = file->message_type(8);
  static const int AskRegiste_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, userpwd_),
  };
  AskRegiste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRegiste_descriptor_,
      AskRegiste::default_instance_,
      AskRegiste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRegiste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRegiste));
  ReportBattleFinished_descriptor_ = file->message_type(9);
  static const int ReportBattleFinished_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleFinished, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleFinished, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleFinished, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleFinished, res_),
  };
  ReportBattleFinished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportBattleFinished_descriptor_,
      ReportBattleFinished::default_instance_,
      ReportBattleFinished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleFinished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBattleFinished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportBattleFinished));
  userData_descriptor_ = file->message_type(10);
  static const int userData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, herokills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, gameinn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, wininn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, destorybuilding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, heroid_),
  };
  userData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userData_descriptor_,
      userData::default_instance_,
      userData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userData));
  AskUpdateData_descriptor_ = file->message_type(11);
  static const int AskUpdateData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateData, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateData, user_data_),
  };
  AskUpdateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskUpdateData_descriptor_,
      AskUpdateData::default_instance_,
      AskUpdateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskUpdateData));
  UserNetInfo_descriptor_ = file->message_type(12);
  static const int UserNetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNetInfo, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNetInfo, gcnsid_),
  };
  UserNetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserNetInfo_descriptor_,
      UserNetInfo::default_instance_,
      UserNetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserNetInfo));
  ReportUserOffline_descriptor_ = file->message_type(13);
  static const int ReportUserOffline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserOffline, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserOffline, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserOffline, usernetinfo_),
  };
  ReportUserOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportUserOffline_descriptor_,
      ReportUserOffline::default_instance_,
      ReportUserOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportUserOffline));
  AskAllCfgList_descriptor_ = file->message_type(14);
  static const int AskAllCfgList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAllCfgList, mgsid_),
  };
  AskAllCfgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAllCfgList_descriptor_,
      AskAllCfgList::default_instance_,
      AskAllCfgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAllCfgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAllCfgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAllCfgList));
  AskHeroCfgList_descriptor_ = file->message_type(15);
  static const int AskHeroCfgList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskHeroCfgList, mgsid_),
  };
  AskHeroCfgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskHeroCfgList_descriptor_,
      AskHeroCfgList::default_instance_,
      AskHeroCfgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskHeroCfgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskHeroCfgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskHeroCfgList));
  AskGoodsfgList_descriptor_ = file->message_type(16);
  static const int AskGoodsfgList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGoodsfgList, mgsid_),
  };
  AskGoodsfgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskGoodsfgList_descriptor_,
      AskGoodsfgList::default_instance_,
      AskGoodsfgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGoodsfgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGoodsfgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskGoodsfgList));
  AskShopfgList_descriptor_ = file->message_type(17);
  static const int AskShopfgList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskShopfgList, mgsid_),
  };
  AskShopfgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskShopfgList_descriptor_,
      AskShopfgList::default_instance_,
      AskShopfgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskShopfgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskShopfgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskShopfgList));
  AskPublicLuaStr_descriptor_ = file->message_type(18);
  static const int AskPublicLuaStr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPublicLuaStr, mgsid_),
  };
  AskPublicLuaStr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPublicLuaStr_descriptor_,
      AskPublicLuaStr::default_instance_,
      AskPublicLuaStr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPublicLuaStr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPublicLuaStr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPublicLuaStr));
  AskMapCfgList_descriptor_ = file->message_type(19);
  static const int AskMapCfgList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMapCfgList, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMapCfgList, mapid_),
  };
  AskMapCfgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskMapCfgList_descriptor_,
      AskMapCfgList::default_instance_,
      AskMapCfgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMapCfgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskMapCfgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskMapCfgList));
  AskNewSkillCfg_descriptor_ = file->message_type(20);
  static const int AskNewSkillCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskNewSkillCfg, mgsid_),
  };
  AskNewSkillCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskNewSkillCfg_descriptor_,
      AskNewSkillCfg::default_instance_,
      AskNewSkillCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskNewSkillCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskNewSkillCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskNewSkillCfg));
  AskSkillEffectAccountCfg_descriptor_ = file->message_type(21);
  static const int AskSkillEffectAccountCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectAccountCfg, mgsid_),
  };
  AskSkillEffectAccountCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectAccountCfg_descriptor_,
      AskSkillEffectAccountCfg::default_instance_,
      AskSkillEffectAccountCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectAccountCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectAccountCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectAccountCfg));
  AskSkillEffectLeadingCfg_descriptor_ = file->message_type(22);
  static const int AskSkillEffectLeadingCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectLeadingCfg, mgsid_),
  };
  AskSkillEffectLeadingCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectLeadingCfg_descriptor_,
      AskSkillEffectLeadingCfg::default_instance_,
      AskSkillEffectLeadingCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectLeadingCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectLeadingCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectLeadingCfg));
  AskSkillEffectRangeCfg_descriptor_ = file->message_type(23);
  static const int AskSkillEffectRangeCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectRangeCfg, mgsid_),
  };
  AskSkillEffectRangeCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectRangeCfg_descriptor_,
      AskSkillEffectRangeCfg::default_instance_,
      AskSkillEffectRangeCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectRangeCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectRangeCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectRangeCfg));
  AskSkillEffectBufCfg_descriptor_ = file->message_type(24);
  static const int AskSkillEffectBufCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectBufCfg, mgsid_),
  };
  AskSkillEffectBufCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectBufCfg_descriptor_,
      AskSkillEffectBufCfg::default_instance_,
      AskSkillEffectBufCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectBufCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectBufCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectBufCfg));
  AskSkillEffectSummonCfg_descriptor_ = file->message_type(25);
  static const int AskSkillEffectSummonCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectSummonCfg, mgsid_),
  };
  AskSkillEffectSummonCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectSummonCfg_descriptor_,
      AskSkillEffectSummonCfg::default_instance_,
      AskSkillEffectSummonCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectSummonCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectSummonCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectSummonCfg));
  AskSkillEffectMoveCfg_descriptor_ = file->message_type(26);
  static const int AskSkillEffectMoveCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectMoveCfg, mgsid_),
  };
  AskSkillEffectMoveCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectMoveCfg_descriptor_,
      AskSkillEffectMoveCfg::default_instance_,
      AskSkillEffectMoveCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectMoveCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectMoveCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectMoveCfg));
  AskSkillEffectSwitchCfg_descriptor_ = file->message_type(27);
  static const int AskSkillEffectSwitchCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectSwitchCfg, mgsid_),
  };
  AskSkillEffectSwitchCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSkillEffectSwitchCfg_descriptor_,
      AskSkillEffectSwitchCfg::default_instance_,
      AskSkillEffectSwitchCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectSwitchCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSkillEffectSwitchCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSkillEffectSwitchCfg));
  AskPassitiveSkillCfg_descriptor_ = file->message_type(28);
  static const int AskPassitiveSkillCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveSkillCfg, mgsid_),
  };
  AskPassitiveSkillCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPassitiveSkillCfg_descriptor_,
      AskPassitiveSkillCfg::default_instance_,
      AskPassitiveSkillCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveSkillCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveSkillCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPassitiveSkillCfg));
  AskPassitiveEffectBloodSeekCfg_descriptor_ = file->message_type(29);
  static const int AskPassitiveEffectBloodSeekCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectBloodSeekCfg, mgsid_),
  };
  AskPassitiveEffectBloodSeekCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPassitiveEffectBloodSeekCfg_descriptor_,
      AskPassitiveEffectBloodSeekCfg::default_instance_,
      AskPassitiveEffectBloodSeekCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectBloodSeekCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectBloodSeekCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPassitiveEffectBloodSeekCfg));
  AskPassitiveEffectReboundCfg_descriptor_ = file->message_type(30);
  static const int AskPassitiveEffectReboundCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectReboundCfg, mgsid_),
  };
  AskPassitiveEffectReboundCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPassitiveEffectReboundCfg_descriptor_,
      AskPassitiveEffectReboundCfg::default_instance_,
      AskPassitiveEffectReboundCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectReboundCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectReboundCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPassitiveEffectReboundCfg));
  AskPassitiveEffectReliveCfg_descriptor_ = file->message_type(31);
  static const int AskPassitiveEffectReliveCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectReliveCfg, mgsid_),
  };
  AskPassitiveEffectReliveCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskPassitiveEffectReliveCfg_descriptor_,
      AskPassitiveEffectReliveCfg::default_instance_,
      AskPassitiveEffectReliveCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectReliveCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskPassitiveEffectReliveCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskPassitiveEffectReliveCfg));
  AskUpdateGuideStep_descriptor_ = file->message_type(32);
  static const int AskUpdateGuideStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateGuideStep, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateGuideStep, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateGuideStep, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateGuideStep, stepid_),
  };
  AskUpdateGuideStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskUpdateGuideStep_descriptor_,
      AskUpdateGuideStep::default_instance_,
      AskUpdateGuideStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateGuideStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUpdateGuideStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskUpdateGuideStep));
  AskUserGoHall_descriptor_ = file->message_type(33);
  static const int AskUserGoHall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUserGoHall, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUserGoHall, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUserGoHall, type_),
  };
  AskUserGoHall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskUserGoHall_descriptor_,
      AskUserGoHall::default_instance_,
      AskUserGoHall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUserGoHall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskUserGoHall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskUserGoHall));
  SyncAllBattleInfo_descriptor_ = file->message_type(34);
  static const int SyncAllBattleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAllBattleInfo, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAllBattleInfo, playbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAllBattleInfo, maxbattleid_),
  };
  SyncAllBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncAllBattleInfo_descriptor_,
      SyncAllBattleInfo::default_instance_,
      SyncAllBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAllBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAllBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncAllBattleInfo));
  CreateBattleResponse_descriptor_ = file->message_type(35);
  static const int CreateBattleResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBattleResponse, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBattleResponse, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBattleResponse, rst_),
  };
  CreateBattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateBattleResponse_descriptor_,
      CreateBattleResponse::default_instance_,
      CreateBattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateBattleResponse));
  FinishBattle_descriptor_ = file->message_type(36);
  static const int FinishBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle, wingrpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle, batteluserdatalist_),
  };
  FinishBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishBattle_descriptor_,
      FinishBattle::default_instance_,
      FinishBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishBattle));
  FinishBattle_BattleUserData_descriptor_ = FinishBattle_descriptor_->nested_type(0);
  static const int FinishBattle_BattleUserData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, heroguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, timeinsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, ifend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, runepage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, herokills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, destorybuilding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, diamondused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, goldused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, lasthitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, asskillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, herolv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, totalcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, ifairobot_),
  };
  FinishBattle_BattleUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishBattle_BattleUserData_descriptor_,
      FinishBattle_BattleUserData::default_instance_,
      FinishBattle_BattleUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishBattle_BattleUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishBattle_BattleUserData));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SSToCS_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameLogSwitch_descriptor_, &GameLogSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpGuideBattleStep_descriptor_, &UpGuideBattleStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleLog_descriptor_, &BattleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPing_descriptor_, &AskPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportGotSomeMsg_descriptor_, &ReportGotSomeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportBattleShowResult_descriptor_, &ReportBattleShowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskChangeFirstWinTime_descriptor_, &AskChangeFirstWinTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGold_descriptor_, &AddGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRegiste_descriptor_, &AskRegiste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportBattleFinished_descriptor_, &ReportBattleFinished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userData_descriptor_, &userData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskUpdateData_descriptor_, &AskUpdateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserNetInfo_descriptor_, &UserNetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportUserOffline_descriptor_, &ReportUserOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAllCfgList_descriptor_, &AskAllCfgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskHeroCfgList_descriptor_, &AskHeroCfgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskGoodsfgList_descriptor_, &AskGoodsfgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskShopfgList_descriptor_, &AskShopfgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPublicLuaStr_descriptor_, &AskPublicLuaStr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskMapCfgList_descriptor_, &AskMapCfgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskNewSkillCfg_descriptor_, &AskNewSkillCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectAccountCfg_descriptor_, &AskSkillEffectAccountCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectLeadingCfg_descriptor_, &AskSkillEffectLeadingCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectRangeCfg_descriptor_, &AskSkillEffectRangeCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectBufCfg_descriptor_, &AskSkillEffectBufCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectSummonCfg_descriptor_, &AskSkillEffectSummonCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectMoveCfg_descriptor_, &AskSkillEffectMoveCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSkillEffectSwitchCfg_descriptor_, &AskSkillEffectSwitchCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPassitiveSkillCfg_descriptor_, &AskPassitiveSkillCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPassitiveEffectBloodSeekCfg_descriptor_, &AskPassitiveEffectBloodSeekCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPassitiveEffectReboundCfg_descriptor_, &AskPassitiveEffectReboundCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskPassitiveEffectReliveCfg_descriptor_, &AskPassitiveEffectReliveCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskUpdateGuideStep_descriptor_, &AskUpdateGuideStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskUserGoHall_descriptor_, &AskUserGoHall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncAllBattleInfo_descriptor_, &SyncAllBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateBattleResponse_descriptor_, &CreateBattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishBattle_descriptor_, &FinishBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishBattle_BattleUserData_descriptor_, &FinishBattle_BattleUserData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SSToCS_2eproto() {
  delete GameLogSwitch::default_instance_;
  delete GameLogSwitch_reflection_;
  delete UpGuideBattleStep::default_instance_;
  delete UpGuideBattleStep_reflection_;
  delete BattleLog::default_instance_;
  delete BattleLog_reflection_;
  delete AskPing::default_instance_;
  delete AskPing_reflection_;
  delete ReportGotSomeMsg::default_instance_;
  delete ReportGotSomeMsg_reflection_;
  delete ReportBattleShowResult::default_instance_;
  delete ReportBattleShowResult_reflection_;
  delete AskChangeFirstWinTime::default_instance_;
  delete AskChangeFirstWinTime_reflection_;
  delete AddGold::default_instance_;
  delete AddGold_reflection_;
  delete AskRegiste::default_instance_;
  delete AskRegiste_reflection_;
  delete ReportBattleFinished::default_instance_;
  delete ReportBattleFinished_reflection_;
  delete userData::default_instance_;
  delete userData_reflection_;
  delete AskUpdateData::default_instance_;
  delete AskUpdateData_reflection_;
  delete UserNetInfo::default_instance_;
  delete UserNetInfo_reflection_;
  delete ReportUserOffline::default_instance_;
  delete ReportUserOffline_reflection_;
  delete AskAllCfgList::default_instance_;
  delete AskAllCfgList_reflection_;
  delete AskHeroCfgList::default_instance_;
  delete AskHeroCfgList_reflection_;
  delete AskGoodsfgList::default_instance_;
  delete AskGoodsfgList_reflection_;
  delete AskShopfgList::default_instance_;
  delete AskShopfgList_reflection_;
  delete AskPublicLuaStr::default_instance_;
  delete AskPublicLuaStr_reflection_;
  delete AskMapCfgList::default_instance_;
  delete AskMapCfgList_reflection_;
  delete AskNewSkillCfg::default_instance_;
  delete AskNewSkillCfg_reflection_;
  delete AskSkillEffectAccountCfg::default_instance_;
  delete AskSkillEffectAccountCfg_reflection_;
  delete AskSkillEffectLeadingCfg::default_instance_;
  delete AskSkillEffectLeadingCfg_reflection_;
  delete AskSkillEffectRangeCfg::default_instance_;
  delete AskSkillEffectRangeCfg_reflection_;
  delete AskSkillEffectBufCfg::default_instance_;
  delete AskSkillEffectBufCfg_reflection_;
  delete AskSkillEffectSummonCfg::default_instance_;
  delete AskSkillEffectSummonCfg_reflection_;
  delete AskSkillEffectMoveCfg::default_instance_;
  delete AskSkillEffectMoveCfg_reflection_;
  delete AskSkillEffectSwitchCfg::default_instance_;
  delete AskSkillEffectSwitchCfg_reflection_;
  delete AskPassitiveSkillCfg::default_instance_;
  delete AskPassitiveSkillCfg_reflection_;
  delete AskPassitiveEffectBloodSeekCfg::default_instance_;
  delete AskPassitiveEffectBloodSeekCfg_reflection_;
  delete AskPassitiveEffectReboundCfg::default_instance_;
  delete AskPassitiveEffectReboundCfg_reflection_;
  delete AskPassitiveEffectReliveCfg::default_instance_;
  delete AskPassitiveEffectReliveCfg_reflection_;
  delete AskUpdateGuideStep::default_instance_;
  delete AskUpdateGuideStep_reflection_;
  delete AskUserGoHall::default_instance_;
  delete AskUserGoHall_reflection_;
  delete SyncAllBattleInfo::default_instance_;
  delete SyncAllBattleInfo_reflection_;
  delete CreateBattleResponse::default_instance_;
  delete CreateBattleResponse_reflection_;
  delete FinishBattle::default_instance_;
  delete FinishBattle_reflection_;
  delete FinishBattle_BattleUserData::default_instance_;
  delete FinishBattle_BattleUserData_reflection_;
}

void protobuf_AddDesc_SSToCS_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014SSToCS.proto\022\006SSToCS\"P\n\rGameLogSwitch\022"
    "\?\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:!eMsgToCSF"
    "romSS_AskSSGameLogSwitch\"\202\001\n\021UpGuideBatt"
    "leStep\022B\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:$eM"
    "sgToCSFromSS_UpdateGuideBattleStep\022\014\n\004gu"
    "id\030\002 \001(\003\022\016\n\006taskid\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\"t\n"
    "\tBattleLog\0226\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID"
    ":\030eMsgToCSFromSS_BattleLog\022\014\n\004guid\030\002 \001(\003"
    "\022\020\n\010log_type\030\003 \001(\005\022\017\n\007log_str\030\004 \001(\t\"M\n\007A"
    "skPing\0224\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:\026eM"
    "sgToCSFromSS_AskPing\022\014\n\004time\030\002 \001(\003\"u\n\020Re"
    "portGotSomeMsg\022=\n\005mgsid\030\001 \001(\0162\r.SSToCS.M"
    "sgID:\037eMsgToCSFromSS_ReportGotSomeMsg\022\020\n"
    "\010gotmsgid\030\002 \001(\005\022\020\n\010otherval\030\003 \001(\004\"\177\n\026Rep"
    "ortBattleShowResult\022C\n\005mgsid\030\001 \001(\0162\r.SST"
    "oCS.MsgID:%eMsgToCSFromSS_ReportBattleSh"
    "owResult\022\020\n\010battleid\030\002 \001(\004\022\016\n\006result\030\003 \001"
    "(\005\"z\n\025AskChangeFirstWinTime\022B\n\005mgsid\030\001 \001"
    "(\0162\r.SSToCS.MsgID:$eMsgToCSFromSS_AskCha"
    "ngeFirstWinTime\022\014\n\004guid\030\002 \001(\004\022\017\n\007curtime"
    "\030\003 \001(\003\"^\n\007AddGold\0227\n\005mgsid\030\001 \001(\0162\r.SSToC"
    "S.MsgID:\031eMsgToCSFromSS_AskAddGold\022\014\n\004gu"
    "id\030\002 \001(\004\022\014\n\004gold\030\003 \001(\003\"~\n\nAskRegiste\0227\n\005"
    "mgsid\030\001 \001(\0162\r.SSToCS.MsgID:\031eMsgToCSFrom"
    "SS_AskRegiste\022\014\n\004ssid\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\022"
    "\014\n\004port\030\004 \001(\005\022\017\n\007userpwd\030\005 \001(\t\"\210\001\n\024Repor"
    "tBattleFinished\022A\n\005mgsid\030\001 \001(\0162\r.SSToCS."
    "MsgID:#eMsgToCSFromSS_ReportBattleFinish"
    "ed\022\020\n\010battleid\030\002 \001(\003\022\016\n\006campid\030\003 \001(\005\022\013\n\003"
    "res\030\004 \001(\005\"\243\001\n\010userData\022\014\n\004guid\030\001 \001(\004\022\021\n\t"
    "deadtimes\030\002 \001(\r\022\021\n\therokills\030\003 \001(\r\022\017\n\007ga"
    "meinn\030\004 \001(\r\022\016\n\006wininn\030\005 \001(\r\022\013\n\003exp\030\006 \001(\r"
    "\022\014\n\004gold\030\007 \001(\003\022\027\n\017destorybuilding\030\010 \001(\005\022"
    "\016\n\006heroid\030\t \001(\005\"p\n\rAskUpdateData\022:\n\005mgsi"
    "d\030\001 \001(\0162\r.SSToCS.MsgID:\034eMsgToCSFromSS_A"
    "skUpdateData\022#\n\tuser_data\030\002 \003(\0132\020.SSToCS"
    ".userData\"+\n\013UserNetInfo\022\014\n\004gsid\030\001 \001(\005\022\016"
    "\n\006gcnsid\030\002 \001(\005\"\213\001\n\021ReportUserOffline\022>\n\005"
    "mgsid\030\001 \001(\0162\r.SSToCS.MsgID: eMsgToCSFrom"
    "SS_ReportUserOffline\022\014\n\004guid\030\002 \001(\004\022(\n\013us"
    "ernetinfo\030\003 \001(\0132\023.SSToCS.UserNetInfo\"K\n\r"
    "AskAllCfgList\022:\n\005mgsid\030\001 \001(\0162\r.SSToCS.Ms"
    "gID:\034eMsgToCSFromSS_AskAllCfgList\"M\n\016Ask"
    "HeroCfgList\022;\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgI"
    "D:\035eMsgToCSFromSS_AskHeroCfgList\"M\n\016AskG"
    "oodsfgList\022;\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID"
    ":\035eMsgToCSFromSS_AskGoodsfgList\"K\n\rAskSh"
    "opfgList\022:\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:\034"
    "eMsgToCSFromSS_AskShopfgList\"O\n\017AskPubli"
    "cLuaStr\022<\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:\036e"
    "MsgToCSFromSS_AskPublicLuaStr\"Z\n\rAskMapC"
    "fgList\022:\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:\034eM"
    "sgToCSFromSS_AskMapCfgList\022\r\n\005mapid\030\002 \001("
    "\005\"M\n\016AskNewSkillCfg\022;\n\005mgsid\030\001 \001(\0162\r.SST"
    "oCS.MsgID:\035eMsgToCSFromSS_AskNewSkillCfg"
    "\"a\n\030AskSkillEffectAccountCfg\022E\n\005mgsid\030\001 "
    "\001(\0162\r.SSToCS.MsgID:\'eMsgToCSFromSS_AskSk"
    "illEffectAccountCfg\"a\n\030AskSkillEffectLea"
    "dingCfg\022E\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:\'e"
    "MsgToCSFromSS_AskSkillEffectLeadingCfg\"]"
    "\n\026AskSkillEffectRangeCfg\022C\n\005mgsid\030\001 \001(\0162"
    "\r.SSToCS.MsgID:%eMsgToCSFromSS_AskSkillE"
    "ffectRangeCfg\"Y\n\024AskSkillEffectBufCfg\022A\n"
    "\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:#eMsgToCSFro"
    "mSS_AskSkillEffectBufCfg\"_\n\027AskSkillEffe"
    "ctSummonCfg\022D\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgI"
    "D:&eMsgToCSFromSS_AskSkillEffectSummonCf"
    "g\"[\n\025AskSkillEffectMoveCfg\022B\n\005mgsid\030\001 \001("
    "\0162\r.SSToCS.MsgID:$eMsgToCSFromSS_AskSkil"
    "lEffectMoveCfg\"_\n\027AskSkillEffectSwitchCf"
    "g\022D\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgID:&eMsgToC"
    "SFromSS_AskSkillEffectSwitchCfg\"Y\n\024AskPa"
    "ssitiveSkillCfg\022A\n\005mgsid\030\001 \001(\0162\r.SSToCS."
    "MsgID:#eMsgToCSFromSS_AskPassitiveSkillC"
    "fg\"m\n\036AskPassitiveEffectBloodSeekCfg\022K\n\005"
    "mgsid\030\001 \001(\0162\r.SSToCS.MsgID:-eMsgToCSFrom"
    "SS_AskPassitiveEffectBloodSeekCfg\"i\n\034Ask"
    "PassitiveEffectReboundCfg\022I\n\005mgsid\030\001 \001(\016"
    "2\r.SSToCS.MsgID:+eMsgToCSFromSS_AskPassi"
    "tiveEffectReboundCfg\"g\n\033AskPassitiveEffe"
    "ctReliveCfg\022H\n\005mgsid\030\001 \001(\0162\r.SSToCS.MsgI"
    "D:*eMsgToCSFromSS_AskPassitiveEffectReli"
    "veCfg\"\202\001\n\022AskUpdateGuideStep\022\?\n\005mgsid\030\001 "
    "\001(\0162\r.SSToCS.MsgID:!eMsgToCSFromSS_AskUp"
    "dateGuideStep\022\014\n\004guid\030\002 \001(\004\022\r\n\005state\030\003 \001"
    "(\005\022\016\n\006stepid\030\004 \001(\005\"g\n\rAskUserGoHall\022:\n\005m"
    "gsid\030\001 \001(\0162\r.SSToCS.MsgID:\034eMsgToCSFromS"
    "S_AskUserGoHall\022\014\n\004guid\030\002 \001(\004\022\014\n\004type\030\003 "
    "\001(\005\"x\n\021SyncAllBattleInfo\022:\n\005mgsid\030\001 \001(\0162"
    "\r.SSToCS.MsgID:\034eMsgToCSFromSS_AllBattle"
    "Info\022\022\n\nplaybattle\030\002 \003(\004\022\023\n\013maxbattleid\030"
    "\003 \001(\004\"x\n\024CreateBattleResponse\022A\n\005mgsid\030\001"
    " \001(\0162\r.SSToCS.MsgID:#eMsgToCSFromSS_Crea"
    "teBattleResponse\022\020\n\010battleid\030\002 \001(\003\022\013\n\003rs"
    "t\030\003 \001(\010\"\352\003\n\014FinishBattle\0229\n\005mgsid\030\001 \001(\0162"
    "\r.SSToCS.MsgID:\033eMsgToCSFromSS_FinishBat"
    "tle\022\020\n\010battleid\030\002 \001(\003\022\020\n\010winGrpID\030\003 \001(\005\022"
    "\?\n\022battelUserDataList\030\004 \003(\0132#.SSToCS.Fin"
    "ishBattle.BattleUserData\032\271\002\n\016BattleUserD"
    "ata\022\014\n\004guid\030\001 \001(\004\022\020\n\010heroguid\030\002 \001(\004\022\024\n\014t"
    "imeinsecond\030\003 \001(\r\022\r\n\005ifEnd\030\004 \001(\010\022\016\n\006hero"
    "id\030\005 \001(\005\022\020\n\010runepage\030\006 \001(\005\022\021\n\tdeadtimes\030"
    "\007 \001(\r\022\021\n\therokills\030\010 \001(\r\022\027\n\017destorybuild"
    "ing\030\t \001(\005\022\023\n\013diamondused\030\n \001(\003\022\020\n\010goldus"
    "ed\030\013 \001(\003\022\022\n\nlasthitnum\030\014 \001(\005\022\022\n\nasskilln"
    "um\030\r \001(\005\022\016\n\006herolv\030\016 \001(\005\022\017\n\007totalcp\030\017 \001("
    "\005\022\021\n\tifAiRobot\030\020 \001(\010*\345\014\n\005MsgID\022\031\n\024eMsgTo"
    "CSFromSS_Begin\020\200@\022\033\n\026eMsgToCSFromSS_AskP"
    "ing\020\201@\022\036\n\031eMsgToCSFromSS_AskRegiste\020\202@\022("
    "\n#eMsgToCSFromSS_ReportBattleFinished\020\203@"
    "\022%\n eMsgToCSFromSS_ReportUserOffline\020\204@\022"
    "\"\n\035eMsgToCSFromSS_AskBuffCfgList\020\205@\022#\n\036e"
    "MsgToCSFromSS_AskSkillCfgList\020\206@\022!\n\034eMsg"
    "ToCSFromSS_AskAllCfgList\020\207@\022\"\n\035eMsgToCSF"
    "romSS_AskHeroCfgList\020\210@\022!\n\034eMsgToCSFromS"
    "S_AskShopfgList\020\211@\022\"\n\035eMsgToCSFromSS_Ask"
    "GoodsfgList\020\212@\022#\n\036eMsgToCSFromSS_AskPubl"
    "icLuaStr\020\213@\022!\n\034eMsgToCSFromSS_AskMapCfgL"
    "ist\020\214@\022!\n\034eMsgToCSFromSS_AskMapCfgData\020\215"
    "@\022!\n\034eMsgToCSFromSS_AskUpdateData\020\216@\022\036\n\031"
    "eMsgToCSFromSS_AskAddGold\020\217@\022)\n$eMsgToCS"
    "FromSS_AskChangeFirstWinTime\020\222@\022\"\n\035eMsgT"
    "oCSFromSS_AskNewSkillCfg\020\223@\022%\n eMsgToCSF"
    "romSS_AskSkillModelType\020\224@\022,\n\'eMsgToCSFr"
    "omSS_AskSkillEffectAccountCfg\020\225@\022)\n$eMsg"
    "ToCSFromSS_AskSkillEffectEmitCfg\020\226@\022*\n%e"
    "MsgToCSFromSS_AskSkillEffectRangeCfg\020\227@\022"
    ",\n\'eMsgToCSFromSS_AskSkillEffectLeadingC"
    "fg\020\230@\022(\n#eMsgToCSFromSS_AskSkillEffectBu"
    "fCfg\020\231@\022+\n&eMsgToCSFromSS_AskSkillEffect"
    "SummonCfg\020\232@\022)\n$eMsgToCSFromSS_AskSkillE"
    "ffectMoveCfg\020\233@\022+\n&eMsgToCSFromSS_AskSki"
    "llEffectSwitchCfg\020\234@\022(\n#eMsgToCSFromSS_A"
    "skPassitiveSkillCfg\020\235@\0222\n-eMsgToCSFromSS"
    "_AskPassitiveEffectBloodSeekCfg\020\236@\0220\n+eM"
    "sgToCSFromSS_AskPassitiveEffectReboundCf"
    "g\020\237@\022/\n*eMsgToCSFromSS_AskPassitiveEffec"
    "tReliveCfg\020\240@\022&\n!eMsgToCSFromSS_AskUpdat"
    "eGuideStep\020\241@\022!\n\034eMsgToCSFromSS_AskUserG"
    "oHall\020\242@\022*\n%eMsgToCSFromSS_ReportBattleS"
    "howResult\020\243@\022$\n\037eMsgToCSFromSS_ReportGot"
    "SomeMsg\020\244@\022!\n\034eMsgToCSFromSS_AllBattleIn"
    "fo\020\245@\022\035\n\030eMsgToCSFromSS_BattleLog\020\246@\022)\n$"
    "eMsgToCSFromSS_UpdateGuideBattleStep\020\247@\022"
    "&\n!eMsgToCSFromSS_AskSSGameLogSwitch\020\250@\022"
    "(\n#eMsgToCSFromSS_CreateBattleResponse\020\354"
    "@\022 \n\033eMsgToCSFromSS_FinishBattle\020\366@\022\027\n\022e"
    "MsgToCSFromSS_End\020\264B", 5900);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SSToCS.proto", &protobuf_RegisterTypes);
  GameLogSwitch::default_instance_ = new GameLogSwitch();
  UpGuideBattleStep::default_instance_ = new UpGuideBattleStep();
  BattleLog::default_instance_ = new BattleLog();
  AskPing::default_instance_ = new AskPing();
  ReportGotSomeMsg::default_instance_ = new ReportGotSomeMsg();
  ReportBattleShowResult::default_instance_ = new ReportBattleShowResult();
  AskChangeFirstWinTime::default_instance_ = new AskChangeFirstWinTime();
  AddGold::default_instance_ = new AddGold();
  AskRegiste::default_instance_ = new AskRegiste();
  ReportBattleFinished::default_instance_ = new ReportBattleFinished();
  userData::default_instance_ = new userData();
  AskUpdateData::default_instance_ = new AskUpdateData();
  UserNetInfo::default_instance_ = new UserNetInfo();
  ReportUserOffline::default_instance_ = new ReportUserOffline();
  AskAllCfgList::default_instance_ = new AskAllCfgList();
  AskHeroCfgList::default_instance_ = new AskHeroCfgList();
  AskGoodsfgList::default_instance_ = new AskGoodsfgList();
  AskShopfgList::default_instance_ = new AskShopfgList();
  AskPublicLuaStr::default_instance_ = new AskPublicLuaStr();
  AskMapCfgList::default_instance_ = new AskMapCfgList();
  AskNewSkillCfg::default_instance_ = new AskNewSkillCfg();
  AskSkillEffectAccountCfg::default_instance_ = new AskSkillEffectAccountCfg();
  AskSkillEffectLeadingCfg::default_instance_ = new AskSkillEffectLeadingCfg();
  AskSkillEffectRangeCfg::default_instance_ = new AskSkillEffectRangeCfg();
  AskSkillEffectBufCfg::default_instance_ = new AskSkillEffectBufCfg();
  AskSkillEffectSummonCfg::default_instance_ = new AskSkillEffectSummonCfg();
  AskSkillEffectMoveCfg::default_instance_ = new AskSkillEffectMoveCfg();
  AskSkillEffectSwitchCfg::default_instance_ = new AskSkillEffectSwitchCfg();
  AskPassitiveSkillCfg::default_instance_ = new AskPassitiveSkillCfg();
  AskPassitiveEffectBloodSeekCfg::default_instance_ = new AskPassitiveEffectBloodSeekCfg();
  AskPassitiveEffectReboundCfg::default_instance_ = new AskPassitiveEffectReboundCfg();
  AskPassitiveEffectReliveCfg::default_instance_ = new AskPassitiveEffectReliveCfg();
  AskUpdateGuideStep::default_instance_ = new AskUpdateGuideStep();
  AskUserGoHall::default_instance_ = new AskUserGoHall();
  SyncAllBattleInfo::default_instance_ = new SyncAllBattleInfo();
  CreateBattleResponse::default_instance_ = new CreateBattleResponse();
  FinishBattle::default_instance_ = new FinishBattle();
  FinishBattle_BattleUserData::default_instance_ = new FinishBattle_BattleUserData();
  GameLogSwitch::default_instance_->InitAsDefaultInstance();
  UpGuideBattleStep::default_instance_->InitAsDefaultInstance();
  BattleLog::default_instance_->InitAsDefaultInstance();
  AskPing::default_instance_->InitAsDefaultInstance();
  ReportGotSomeMsg::default_instance_->InitAsDefaultInstance();
  ReportBattleShowResult::default_instance_->InitAsDefaultInstance();
  AskChangeFirstWinTime::default_instance_->InitAsDefaultInstance();
  AddGold::default_instance_->InitAsDefaultInstance();
  AskRegiste::default_instance_->InitAsDefaultInstance();
  ReportBattleFinished::default_instance_->InitAsDefaultInstance();
  userData::default_instance_->InitAsDefaultInstance();
  AskUpdateData::default_instance_->InitAsDefaultInstance();
  UserNetInfo::default_instance_->InitAsDefaultInstance();
  ReportUserOffline::default_instance_->InitAsDefaultInstance();
  AskAllCfgList::default_instance_->InitAsDefaultInstance();
  AskHeroCfgList::default_instance_->InitAsDefaultInstance();
  AskGoodsfgList::default_instance_->InitAsDefaultInstance();
  AskShopfgList::default_instance_->InitAsDefaultInstance();
  AskPublicLuaStr::default_instance_->InitAsDefaultInstance();
  AskMapCfgList::default_instance_->InitAsDefaultInstance();
  AskNewSkillCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectAccountCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectLeadingCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectRangeCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectBufCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectSummonCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectMoveCfg::default_instance_->InitAsDefaultInstance();
  AskSkillEffectSwitchCfg::default_instance_->InitAsDefaultInstance();
  AskPassitiveSkillCfg::default_instance_->InitAsDefaultInstance();
  AskPassitiveEffectBloodSeekCfg::default_instance_->InitAsDefaultInstance();
  AskPassitiveEffectReboundCfg::default_instance_->InitAsDefaultInstance();
  AskPassitiveEffectReliveCfg::default_instance_->InitAsDefaultInstance();
  AskUpdateGuideStep::default_instance_->InitAsDefaultInstance();
  AskUserGoHall::default_instance_->InitAsDefaultInstance();
  SyncAllBattleInfo::default_instance_->InitAsDefaultInstance();
  CreateBattleResponse::default_instance_->InitAsDefaultInstance();
  FinishBattle::default_instance_->InitAsDefaultInstance();
  FinishBattle_BattleUserData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SSToCS_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SSToCS_2eproto {
  StaticDescriptorInitializer_SSToCS_2eproto() {
    protobuf_AddDesc_SSToCS_2eproto();
  }
} static_descriptor_initializer_SSToCS_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8203:
    case 8204:
    case 8205:
    case 8206:
    case 8207:
    case 8210:
    case 8211:
    case 8212:
    case 8213:
    case 8214:
    case 8215:
    case 8216:
    case 8217:
    case 8218:
    case 8219:
    case 8220:
    case 8221:
    case 8222:
    case 8223:
    case 8224:
    case 8225:
    case 8226:
    case 8227:
    case 8228:
    case 8229:
    case 8230:
    case 8231:
    case 8232:
    case 8300:
    case 8310:
    case 8500:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameLogSwitch::kMgsidFieldNumber;
#endif  // !_MSC_VER

GameLogSwitch::GameLogSwitch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.GameLogSwitch)
}

void GameLogSwitch::InitAsDefaultInstance() {
}

GameLogSwitch::GameLogSwitch(const GameLogSwitch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.GameLogSwitch)
}

void GameLogSwitch::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8232;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameLogSwitch::~GameLogSwitch() {
  // @@protoc_insertion_point(destructor:SSToCS.GameLogSwitch)
  SharedDtor();
}

void GameLogSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameLogSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLogSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLogSwitch_descriptor_;
}

const GameLogSwitch& GameLogSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

GameLogSwitch* GameLogSwitch::default_instance_ = NULL;

GameLogSwitch* GameLogSwitch::New() const {
  return new GameLogSwitch;
}

void GameLogSwitch::Clear() {
  mgsid_ = 8232;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameLogSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.GameLogSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSSGameLogSwitch];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.GameLogSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.GameLogSwitch)
  return false;
#undef DO_
}

void GameLogSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.GameLogSwitch)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSSGameLogSwitch];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.GameLogSwitch)
}

::google::protobuf::uint8* GameLogSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.GameLogSwitch)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSSGameLogSwitch];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.GameLogSwitch)
  return target;
}

int GameLogSwitch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSSGameLogSwitch];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLogSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameLogSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameLogSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameLogSwitch::MergeFrom(const GameLogSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameLogSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLogSwitch::CopyFrom(const GameLogSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLogSwitch::IsInitialized() const {

  return true;
}

void GameLogSwitch::Swap(GameLogSwitch* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameLogSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLogSwitch_descriptor_;
  metadata.reflection = GameLogSwitch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpGuideBattleStep::kMgsidFieldNumber;
const int UpGuideBattleStep::kGuidFieldNumber;
const int UpGuideBattleStep::kTaskidFieldNumber;
const int UpGuideBattleStep::kNumFieldNumber;
#endif  // !_MSC_VER

UpGuideBattleStep::UpGuideBattleStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.UpGuideBattleStep)
}

void UpGuideBattleStep::InitAsDefaultInstance() {
}

UpGuideBattleStep::UpGuideBattleStep(const UpGuideBattleStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.UpGuideBattleStep)
}

void UpGuideBattleStep::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8231;
  guid_ = GOOGLE_LONGLONG(0);
  taskid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpGuideBattleStep::~UpGuideBattleStep() {
  // @@protoc_insertion_point(destructor:SSToCS.UpGuideBattleStep)
  SharedDtor();
}

void UpGuideBattleStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpGuideBattleStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpGuideBattleStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpGuideBattleStep_descriptor_;
}

const UpGuideBattleStep& UpGuideBattleStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

UpGuideBattleStep* UpGuideBattleStep::default_instance_ = NULL;

UpGuideBattleStep* UpGuideBattleStep::New() const {
  return new UpGuideBattleStep;
}

void UpGuideBattleStep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpGuideBattleStep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(taskid_, num_);
    mgsid_ = 8231;
    guid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpGuideBattleStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.UpGuideBattleStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_UpdateGuideBattleStep];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskid;
        break;
      }

      // optional int32 taskid = 3;
      case 3: {
        if (tag == 24) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.UpGuideBattleStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.UpGuideBattleStep)
  return false;
#undef DO_
}

void UpGuideBattleStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.UpGuideBattleStep)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_UpdateGuideBattleStep];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 taskid = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taskid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.UpGuideBattleStep)
}

::google::protobuf::uint8* UpGuideBattleStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.UpGuideBattleStep)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_UpdateGuideBattleStep];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 taskid = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->taskid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.UpGuideBattleStep)
  return target;
}

int UpGuideBattleStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_UpdateGuideBattleStep];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 taskid = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpGuideBattleStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpGuideBattleStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpGuideBattleStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpGuideBattleStep::MergeFrom(const UpGuideBattleStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpGuideBattleStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpGuideBattleStep::CopyFrom(const UpGuideBattleStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpGuideBattleStep::IsInitialized() const {

  return true;
}

void UpGuideBattleStep::Swap(UpGuideBattleStep* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(taskid_, other->taskid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpGuideBattleStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpGuideBattleStep_descriptor_;
  metadata.reflection = UpGuideBattleStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleLog::kMgsidFieldNumber;
const int BattleLog::kGuidFieldNumber;
const int BattleLog::kLogTypeFieldNumber;
const int BattleLog::kLogStrFieldNumber;
#endif  // !_MSC_VER

BattleLog::BattleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.BattleLog)
}

void BattleLog::InitAsDefaultInstance() {
}

BattleLog::BattleLog(const BattleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.BattleLog)
}

void BattleLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 8230;
  guid_ = GOOGLE_LONGLONG(0);
  log_type_ = 0;
  log_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleLog::~BattleLog() {
  // @@protoc_insertion_point(destructor:SSToCS.BattleLog)
  SharedDtor();
}

void BattleLog::SharedDtor() {
  if (log_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_str_;
  }
  if (this != default_instance_) {
  }
}

void BattleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleLog_descriptor_;
}

const BattleLog& BattleLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

BattleLog* BattleLog::default_instance_ = NULL;

BattleLog* BattleLog::New() const {
  return new BattleLog;
}

void BattleLog::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    mgsid_ = 8230;
    guid_ = GOOGLE_LONGLONG(0);
    log_type_ = 0;
    if (has_log_str()) {
      if (log_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.BattleLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_BattleLog];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_type;
        break;
      }

      // optional int32 log_type = 3;
      case 3: {
        if (tag == 24) {
         parse_log_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_type_)));
          set_has_log_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_log_str;
        break;
      }

      // optional string log_str = 4;
      case 4: {
        if (tag == 34) {
         parse_log_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_str().data(), this->log_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.BattleLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.BattleLog)
  return false;
#undef DO_
}

void BattleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.BattleLog)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_BattleLog];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 log_type = 3;
  if (has_log_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->log_type(), output);
  }

  // optional string log_str = 4;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->log_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.BattleLog)
}

::google::protobuf::uint8* BattleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.BattleLog)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_BattleLog];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 log_type = 3;
  if (has_log_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->log_type(), target);
  }

  // optional string log_str = 4;
  if (has_log_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_str().data(), this->log_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->log_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.BattleLog)
  return target;
}

int BattleLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_BattleLog];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 log_type = 3;
    if (has_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_type());
    }

    // optional string log_str = 4;
    if (has_log_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleLog::MergeFrom(const BattleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_log_type()) {
      set_log_type(from.log_type());
    }
    if (from.has_log_str()) {
      set_log_str(from.log_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLog::CopyFrom(const BattleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLog::IsInitialized() const {

  return true;
}

void BattleLog::Swap(BattleLog* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(log_type_, other->log_type_);
    std::swap(log_str_, other->log_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleLog_descriptor_;
  metadata.reflection = BattleLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPing::kMgsidFieldNumber;
const int AskPing::kTimeFieldNumber;
#endif  // !_MSC_VER

AskPing::AskPing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskPing)
}

void AskPing::InitAsDefaultInstance() {
}

AskPing::AskPing(const AskPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskPing)
}

void AskPing::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8193;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPing::~AskPing() {
  // @@protoc_insertion_point(destructor:SSToCS.AskPing)
  SharedDtor();
}

void AskPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPing_descriptor_;
}

const AskPing& AskPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskPing* AskPing::default_instance_ = NULL;

AskPing* AskPing::New() const {
  return new AskPing;
}

void AskPing::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 8193;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPing];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskPing)
  return false;
#undef DO_
}

void AskPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskPing)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPing];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskPing)
}

::google::protobuf::uint8* AskPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskPing)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPing];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskPing)
  return target;
}

int AskPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPing];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPing::MergeFrom(const AskPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPing::CopyFrom(const AskPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPing::IsInitialized() const {

  return true;
}

void AskPing::Swap(AskPing* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPing_descriptor_;
  metadata.reflection = AskPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportGotSomeMsg::kMgsidFieldNumber;
const int ReportGotSomeMsg::kGotmsgidFieldNumber;
const int ReportGotSomeMsg::kOthervalFieldNumber;
#endif  // !_MSC_VER

ReportGotSomeMsg::ReportGotSomeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.ReportGotSomeMsg)
}

void ReportGotSomeMsg::InitAsDefaultInstance() {
}

ReportGotSomeMsg::ReportGotSomeMsg(const ReportGotSomeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.ReportGotSomeMsg)
}

void ReportGotSomeMsg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8228;
  gotmsgid_ = 0;
  otherval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGotSomeMsg::~ReportGotSomeMsg() {
  // @@protoc_insertion_point(destructor:SSToCS.ReportGotSomeMsg)
  SharedDtor();
}

void ReportGotSomeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportGotSomeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportGotSomeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGotSomeMsg_descriptor_;
}

const ReportGotSomeMsg& ReportGotSomeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

ReportGotSomeMsg* ReportGotSomeMsg::default_instance_ = NULL;

ReportGotSomeMsg* ReportGotSomeMsg::New() const {
  return new ReportGotSomeMsg;
}

void ReportGotSomeMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportGotSomeMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gotmsgid_, otherval_);
    mgsid_ = 8228;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportGotSomeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.ReportGotSomeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportGotSomeMsg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gotmsgid;
        break;
      }

      // optional int32 gotmsgid = 2;
      case 2: {
        if (tag == 16) {
         parse_gotmsgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gotmsgid_)));
          set_has_gotmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_otherval;
        break;
      }

      // optional uint64 otherval = 3;
      case 3: {
        if (tag == 24) {
         parse_otherval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherval_)));
          set_has_otherval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.ReportGotSomeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.ReportGotSomeMsg)
  return false;
#undef DO_
}

void ReportGotSomeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.ReportGotSomeMsg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportGotSomeMsg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 gotmsgid = 2;
  if (has_gotmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gotmsgid(), output);
  }

  // optional uint64 otherval = 3;
  if (has_otherval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->otherval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.ReportGotSomeMsg)
}

::google::protobuf::uint8* ReportGotSomeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.ReportGotSomeMsg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportGotSomeMsg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 gotmsgid = 2;
  if (has_gotmsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gotmsgid(), target);
  }

  // optional uint64 otherval = 3;
  if (has_otherval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->otherval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.ReportGotSomeMsg)
  return target;
}

int ReportGotSomeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportGotSomeMsg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 gotmsgid = 2;
    if (has_gotmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gotmsgid());
    }

    // optional uint64 otherval = 3;
    if (has_otherval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGotSomeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportGotSomeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportGotSomeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportGotSomeMsg::MergeFrom(const ReportGotSomeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_gotmsgid()) {
      set_gotmsgid(from.gotmsgid());
    }
    if (from.has_otherval()) {
      set_otherval(from.otherval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportGotSomeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportGotSomeMsg::CopyFrom(const ReportGotSomeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGotSomeMsg::IsInitialized() const {

  return true;
}

void ReportGotSomeMsg::Swap(ReportGotSomeMsg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(gotmsgid_, other->gotmsgid_);
    std::swap(otherval_, other->otherval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportGotSomeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportGotSomeMsg_descriptor_;
  metadata.reflection = ReportGotSomeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportBattleShowResult::kMgsidFieldNumber;
const int ReportBattleShowResult::kBattleidFieldNumber;
const int ReportBattleShowResult::kResultFieldNumber;
#endif  // !_MSC_VER

ReportBattleShowResult::ReportBattleShowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.ReportBattleShowResult)
}

void ReportBattleShowResult::InitAsDefaultInstance() {
}

ReportBattleShowResult::ReportBattleShowResult(const ReportBattleShowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.ReportBattleShowResult)
}

void ReportBattleShowResult::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8227;
  battleid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportBattleShowResult::~ReportBattleShowResult() {
  // @@protoc_insertion_point(destructor:SSToCS.ReportBattleShowResult)
  SharedDtor();
}

void ReportBattleShowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportBattleShowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBattleShowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBattleShowResult_descriptor_;
}

const ReportBattleShowResult& ReportBattleShowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

ReportBattleShowResult* ReportBattleShowResult::default_instance_ = NULL;

ReportBattleShowResult* ReportBattleShowResult::New() const {
  return new ReportBattleShowResult;
}

void ReportBattleShowResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 8227;
    battleid_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportBattleShowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.ReportBattleShowResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleShowResult];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.ReportBattleShowResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.ReportBattleShowResult)
  return false;
#undef DO_
}

void ReportBattleShowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.ReportBattleShowResult)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleShowResult];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battleid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.ReportBattleShowResult)
}

::google::protobuf::uint8* ReportBattleShowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.ReportBattleShowResult)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleShowResult];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battleid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.ReportBattleShowResult)
  return target;
}

int ReportBattleShowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleShowResult];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBattleShowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportBattleShowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportBattleShowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportBattleShowResult::MergeFrom(const ReportBattleShowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportBattleShowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBattleShowResult::CopyFrom(const ReportBattleShowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBattleShowResult::IsInitialized() const {

  return true;
}

void ReportBattleShowResult::Swap(ReportBattleShowResult* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(battleid_, other->battleid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportBattleShowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBattleShowResult_descriptor_;
  metadata.reflection = ReportBattleShowResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskChangeFirstWinTime::kMgsidFieldNumber;
const int AskChangeFirstWinTime::kGuidFieldNumber;
const int AskChangeFirstWinTime::kCurtimeFieldNumber;
#endif  // !_MSC_VER

AskChangeFirstWinTime::AskChangeFirstWinTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskChangeFirstWinTime)
}

void AskChangeFirstWinTime::InitAsDefaultInstance() {
}

AskChangeFirstWinTime::AskChangeFirstWinTime(const AskChangeFirstWinTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskChangeFirstWinTime)
}

void AskChangeFirstWinTime::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8210;
  guid_ = GOOGLE_ULONGLONG(0);
  curtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskChangeFirstWinTime::~AskChangeFirstWinTime() {
  // @@protoc_insertion_point(destructor:SSToCS.AskChangeFirstWinTime)
  SharedDtor();
}

void AskChangeFirstWinTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskChangeFirstWinTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskChangeFirstWinTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskChangeFirstWinTime_descriptor_;
}

const AskChangeFirstWinTime& AskChangeFirstWinTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskChangeFirstWinTime* AskChangeFirstWinTime::default_instance_ = NULL;

AskChangeFirstWinTime* AskChangeFirstWinTime::New() const {
  return new AskChangeFirstWinTime;
}

void AskChangeFirstWinTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskChangeFirstWinTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guid_, curtime_);
    mgsid_ = 8210;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskChangeFirstWinTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskChangeFirstWinTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskChangeFirstWinTime];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curtime;
        break;
      }

      // optional int64 curtime = 3;
      case 3: {
        if (tag == 24) {
         parse_curtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskChangeFirstWinTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskChangeFirstWinTime)
  return false;
#undef DO_
}

void AskChangeFirstWinTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskChangeFirstWinTime)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskChangeFirstWinTime];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int64 curtime = 3;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskChangeFirstWinTime)
}

::google::protobuf::uint8* AskChangeFirstWinTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskChangeFirstWinTime)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskChangeFirstWinTime];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int64 curtime = 3;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskChangeFirstWinTime)
  return target;
}

int AskChangeFirstWinTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskChangeFirstWinTime];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int64 curtime = 3;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskChangeFirstWinTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskChangeFirstWinTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskChangeFirstWinTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskChangeFirstWinTime::MergeFrom(const AskChangeFirstWinTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskChangeFirstWinTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskChangeFirstWinTime::CopyFrom(const AskChangeFirstWinTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskChangeFirstWinTime::IsInitialized() const {

  return true;
}

void AskChangeFirstWinTime::Swap(AskChangeFirstWinTime* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(curtime_, other->curtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskChangeFirstWinTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskChangeFirstWinTime_descriptor_;
  metadata.reflection = AskChangeFirstWinTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddGold::kMgsidFieldNumber;
const int AddGold::kGuidFieldNumber;
const int AddGold::kGoldFieldNumber;
#endif  // !_MSC_VER

AddGold::AddGold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AddGold)
}

void AddGold::InitAsDefaultInstance() {
}

AddGold::AddGold(const AddGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AddGold)
}

void AddGold::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8207;
  guid_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGold::~AddGold() {
  // @@protoc_insertion_point(destructor:SSToCS.AddGold)
  SharedDtor();
}

void AddGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGold_descriptor_;
}

const AddGold& AddGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AddGold* AddGold::default_instance_ = NULL;

AddGold* AddGold::New() const {
  return new AddGold;
}

void AddGold::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddGold*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guid_, gold_);
    mgsid_ = 8207;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AddGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAddGold];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AddGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AddGold)
  return false;
#undef DO_
}

void AddGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AddGold)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAddGold];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AddGold)
}

::google::protobuf::uint8* AddGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AddGold)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAddGold];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AddGold)
  return target;
}

int AddGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAddGold];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddGold::MergeFrom(const AddGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGold::CopyFrom(const AddGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGold::IsInitialized() const {

  return true;
}

void AddGold::Swap(AddGold* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGold_descriptor_;
  metadata.reflection = AddGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRegiste::kMgsidFieldNumber;
const int AskRegiste::kSsidFieldNumber;
const int AskRegiste::kIpFieldNumber;
const int AskRegiste::kPortFieldNumber;
const int AskRegiste::kUserpwdFieldNumber;
#endif  // !_MSC_VER

AskRegiste::AskRegiste()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskRegiste)
}

void AskRegiste::InitAsDefaultInstance() {
}

AskRegiste::AskRegiste(const AskRegiste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskRegiste)
}

void AskRegiste::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 8194;
  ssid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRegiste::~AskRegiste() {
  // @@protoc_insertion_point(destructor:SSToCS.AskRegiste)
  SharedDtor();
}

void AskRegiste::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (userpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userpwd_;
  }
  if (this != default_instance_) {
  }
}

void AskRegiste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRegiste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRegiste_descriptor_;
}

const AskRegiste& AskRegiste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskRegiste* AskRegiste::default_instance_ = NULL;

AskRegiste* AskRegiste::New() const {
  return new AskRegiste;
}

void AskRegiste::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    mgsid_ = 8194;
    ssid_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRegiste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskRegiste)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskRegiste];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userpwd;
        break;
      }

      // optional string userpwd = 5;
      case 5: {
        if (tag == 42) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpwd().data(), this->userpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userpwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskRegiste)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskRegiste)
  return false;
#undef DO_
}

void AskRegiste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskRegiste)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskRegiste];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional string userpwd = 5;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskRegiste)
}

::google::protobuf::uint8* AskRegiste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskRegiste)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskRegiste];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ssid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional string userpwd = 5;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskRegiste)
  return target;
}

int AskRegiste::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskRegiste];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string userpwd = 5;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRegiste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRegiste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRegiste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRegiste::MergeFrom(const AskRegiste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRegiste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRegiste::CopyFrom(const AskRegiste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRegiste::IsInitialized() const {

  return true;
}

void AskRegiste::Swap(AskRegiste* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(ssid_, other->ssid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRegiste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRegiste_descriptor_;
  metadata.reflection = AskRegiste_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportBattleFinished::kMgsidFieldNumber;
const int ReportBattleFinished::kBattleidFieldNumber;
const int ReportBattleFinished::kCampidFieldNumber;
const int ReportBattleFinished::kResFieldNumber;
#endif  // !_MSC_VER

ReportBattleFinished::ReportBattleFinished()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.ReportBattleFinished)
}

void ReportBattleFinished::InitAsDefaultInstance() {
}

ReportBattleFinished::ReportBattleFinished(const ReportBattleFinished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.ReportBattleFinished)
}

void ReportBattleFinished::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8195;
  battleid_ = GOOGLE_LONGLONG(0);
  campid_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportBattleFinished::~ReportBattleFinished() {
  // @@protoc_insertion_point(destructor:SSToCS.ReportBattleFinished)
  SharedDtor();
}

void ReportBattleFinished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportBattleFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBattleFinished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBattleFinished_descriptor_;
}

const ReportBattleFinished& ReportBattleFinished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

ReportBattleFinished* ReportBattleFinished::default_instance_ = NULL;

ReportBattleFinished* ReportBattleFinished::New() const {
  return new ReportBattleFinished;
}

void ReportBattleFinished::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportBattleFinished*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(campid_, res_);
    mgsid_ = 8195;
    battleid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportBattleFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.ReportBattleFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleFinished];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional int64 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // optional int32 campid = 3;
      case 3: {
        if (tag == 24) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional int32 res = 4;
      case 4: {
        if (tag == 32) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.ReportBattleFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.ReportBattleFinished)
  return false;
#undef DO_
}

void ReportBattleFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.ReportBattleFinished)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleFinished];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battleid(), output);
  }

  // optional int32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->campid(), output);
  }

  // optional int32 res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.ReportBattleFinished)
}

::google::protobuf::uint8* ReportBattleFinished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.ReportBattleFinished)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleFinished];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battleid(), target);
  }

  // optional int32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->campid(), target);
  }

  // optional int32 res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.ReportBattleFinished)
  return target;
}

int ReportBattleFinished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportBattleFinished];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battleid());
    }

    // optional int32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }

    // optional int32 res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBattleFinished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportBattleFinished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportBattleFinished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportBattleFinished::MergeFrom(const ReportBattleFinished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportBattleFinished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBattleFinished::CopyFrom(const ReportBattleFinished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBattleFinished::IsInitialized() const {

  return true;
}

void ReportBattleFinished::Swap(ReportBattleFinished* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(battleid_, other->battleid_);
    std::swap(campid_, other->campid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportBattleFinished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBattleFinished_descriptor_;
  metadata.reflection = ReportBattleFinished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userData::kGuidFieldNumber;
const int userData::kDeadtimesFieldNumber;
const int userData::kHerokillsFieldNumber;
const int userData::kGameinnFieldNumber;
const int userData::kWininnFieldNumber;
const int userData::kExpFieldNumber;
const int userData::kGoldFieldNumber;
const int userData::kDestorybuildingFieldNumber;
const int userData::kHeroidFieldNumber;
#endif  // !_MSC_VER

userData::userData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.userData)
}

void userData::InitAsDefaultInstance() {
}

userData::userData(const userData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.userData)
}

void userData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  deadtimes_ = 0u;
  herokills_ = 0u;
  gameinn_ = 0u;
  wininn_ = 0u;
  exp_ = 0u;
  gold_ = GOOGLE_LONGLONG(0);
  destorybuilding_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userData::~userData() {
  // @@protoc_insertion_point(destructor:SSToCS.userData)
  SharedDtor();
}

void userData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void userData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userData_descriptor_;
}

const userData& userData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

userData* userData::default_instance_ = NULL;

userData* userData::New() const {
  return new userData;
}

void userData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<userData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, destorybuilding_);
  }
  heroid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.userData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deadtimes;
        break;
      }

      // optional uint32 deadtimes = 2;
      case 2: {
        if (tag == 16) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_herokills;
        break;
      }

      // optional uint32 herokills = 3;
      case 3: {
        if (tag == 24) {
         parse_herokills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokills_)));
          set_has_herokills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gameinn;
        break;
      }

      // optional uint32 gameinn = 4;
      case 4: {
        if (tag == 32) {
         parse_gameinn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameinn_)));
          set_has_gameinn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wininn;
        break;
      }

      // optional uint32 wininn = 5;
      case 5: {
        if (tag == 40) {
         parse_wininn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wininn_)));
          set_has_wininn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional int64 gold = 7;
      case 7: {
        if (tag == 56) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_destorybuilding;
        break;
      }

      // optional int32 destorybuilding = 8;
      case 8: {
        if (tag == 64) {
         parse_destorybuilding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destorybuilding_)));
          set_has_destorybuilding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 9;
      case 9: {
        if (tag == 72) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.userData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.userData)
  return false;
#undef DO_
}

void userData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.userData)
  // optional uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint32 deadtimes = 2;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deadtimes(), output);
  }

  // optional uint32 herokills = 3;
  if (has_herokills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->herokills(), output);
  }

  // optional uint32 gameinn = 4;
  if (has_gameinn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gameinn(), output);
  }

  // optional uint32 wininn = 5;
  if (has_wininn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wininn(), output);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional int64 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }

  // optional int32 destorybuilding = 8;
  if (has_destorybuilding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->destorybuilding(), output);
  }

  // optional int32 heroid = 9;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.userData)
}

::google::protobuf::uint8* userData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.userData)
  // optional uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint32 deadtimes = 2;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deadtimes(), target);
  }

  // optional uint32 herokills = 3;
  if (has_herokills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->herokills(), target);
  }

  // optional uint32 gameinn = 4;
  if (has_gameinn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gameinn(), target);
  }

  // optional uint32 wininn = 5;
  if (has_wininn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wininn(), target);
  }

  // optional uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // optional int64 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }

  // optional int32 destorybuilding = 8;
  if (has_destorybuilding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->destorybuilding(), target);
  }

  // optional int32 heroid = 9;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.userData)
  return target;
}

int userData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 deadtimes = 2;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadtimes());
    }

    // optional uint32 herokills = 3;
    if (has_herokills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokills());
    }

    // optional uint32 gameinn = 4;
    if (has_gameinn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameinn());
    }

    // optional uint32 wininn = 5;
    if (has_wininn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wininn());
    }

    // optional uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 destorybuilding = 8;
    if (has_destorybuilding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destorybuilding());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 heroid = 9;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userData::MergeFrom(const userData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_herokills()) {
      set_herokills(from.herokills());
    }
    if (from.has_gameinn()) {
      set_gameinn(from.gameinn());
    }
    if (from.has_wininn()) {
      set_wininn(from.wininn());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_destorybuilding()) {
      set_destorybuilding(from.destorybuilding());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userData::CopyFrom(const userData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userData::IsInitialized() const {

  return true;
}

void userData::Swap(userData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(herokills_, other->herokills_);
    std::swap(gameinn_, other->gameinn_);
    std::swap(wininn_, other->wininn_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(destorybuilding_, other->destorybuilding_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userData_descriptor_;
  metadata.reflection = userData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskUpdateData::kMgsidFieldNumber;
const int AskUpdateData::kUserDataFieldNumber;
#endif  // !_MSC_VER

AskUpdateData::AskUpdateData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskUpdateData)
}

void AskUpdateData::InitAsDefaultInstance() {
}

AskUpdateData::AskUpdateData(const AskUpdateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskUpdateData)
}

void AskUpdateData::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8206;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskUpdateData::~AskUpdateData() {
  // @@protoc_insertion_point(destructor:SSToCS.AskUpdateData)
  SharedDtor();
}

void AskUpdateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskUpdateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskUpdateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskUpdateData_descriptor_;
}

const AskUpdateData& AskUpdateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskUpdateData* AskUpdateData::default_instance_ = NULL;

AskUpdateData* AskUpdateData::New() const {
  return new AskUpdateData;
}

void AskUpdateData::Clear() {
  mgsid_ = 8206;
  user_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskUpdateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateData];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // repeated .SSToCS.userData user_data = 2;
      case 2: {
        if (tag == 18) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskUpdateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskUpdateData)
  return false;
#undef DO_
}

void AskUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskUpdateData)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateData];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // repeated .SSToCS.userData user_data = 2;
  for (int i = 0; i < this->user_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskUpdateData)
}

::google::protobuf::uint8* AskUpdateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskUpdateData)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateData];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // repeated .SSToCS.userData user_data = 2;
  for (int i = 0; i < this->user_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskUpdateData)
  return target;
}

int AskUpdateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateData];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  // repeated .SSToCS.userData user_data = 2;
  total_size += 1 * this->user_data_size();
  for (int i = 0; i < this->user_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskUpdateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskUpdateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskUpdateData::MergeFrom(const AskUpdateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_data_.MergeFrom(from.user_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskUpdateData::CopyFrom(const AskUpdateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskUpdateData::IsInitialized() const {

  return true;
}

void AskUpdateData::Swap(AskUpdateData* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    user_data_.Swap(&other->user_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskUpdateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskUpdateData_descriptor_;
  metadata.reflection = AskUpdateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserNetInfo::kGsidFieldNumber;
const int UserNetInfo::kGcnsidFieldNumber;
#endif  // !_MSC_VER

UserNetInfo::UserNetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.UserNetInfo)
}

void UserNetInfo::InitAsDefaultInstance() {
}

UserNetInfo::UserNetInfo(const UserNetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.UserNetInfo)
}

void UserNetInfo::SharedCtor() {
  _cached_size_ = 0;
  gsid_ = 0;
  gcnsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserNetInfo::~UserNetInfo() {
  // @@protoc_insertion_point(destructor:SSToCS.UserNetInfo)
  SharedDtor();
}

void UserNetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserNetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserNetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserNetInfo_descriptor_;
}

const UserNetInfo& UserNetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

UserNetInfo* UserNetInfo::default_instance_ = NULL;

UserNetInfo* UserNetInfo::New() const {
  return new UserNetInfo;
}

void UserNetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserNetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gsid_, gcnsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserNetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.UserNetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gcnsid;
        break;
      }

      // optional int32 gcnsid = 2;
      case 2: {
        if (tag == 16) {
         parse_gcnsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcnsid_)));
          set_has_gcnsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.UserNetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.UserNetInfo)
  return false;
#undef DO_
}

void UserNetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.UserNetInfo)
  // optional int32 gsid = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gsid(), output);
  }

  // optional int32 gcnsid = 2;
  if (has_gcnsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gcnsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.UserNetInfo)
}

::google::protobuf::uint8* UserNetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.UserNetInfo)
  // optional int32 gsid = 1;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gsid(), target);
  }

  // optional int32 gcnsid = 2;
  if (has_gcnsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gcnsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.UserNetInfo)
  return target;
}

int UserNetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gsid = 1;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

    // optional int32 gcnsid = 2;
    if (has_gcnsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcnsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserNetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserNetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserNetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserNetInfo::MergeFrom(const UserNetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gcnsid()) {
      set_gcnsid(from.gcnsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserNetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNetInfo::CopyFrom(const UserNetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNetInfo::IsInitialized() const {

  return true;
}

void UserNetInfo::Swap(UserNetInfo* other) {
  if (other != this) {
    std::swap(gsid_, other->gsid_);
    std::swap(gcnsid_, other->gcnsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserNetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserNetInfo_descriptor_;
  metadata.reflection = UserNetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportUserOffline::kMgsidFieldNumber;
const int ReportUserOffline::kGuidFieldNumber;
const int ReportUserOffline::kUsernetinfoFieldNumber;
#endif  // !_MSC_VER

ReportUserOffline::ReportUserOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.ReportUserOffline)
}

void ReportUserOffline::InitAsDefaultInstance() {
  usernetinfo_ = const_cast< ::SSToCS::UserNetInfo*>(&::SSToCS::UserNetInfo::default_instance());
}

ReportUserOffline::ReportUserOffline(const ReportUserOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.ReportUserOffline)
}

void ReportUserOffline::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8196;
  guid_ = GOOGLE_ULONGLONG(0);
  usernetinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportUserOffline::~ReportUserOffline() {
  // @@protoc_insertion_point(destructor:SSToCS.ReportUserOffline)
  SharedDtor();
}

void ReportUserOffline::SharedDtor() {
  if (this != default_instance_) {
    delete usernetinfo_;
  }
}

void ReportUserOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportUserOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportUserOffline_descriptor_;
}

const ReportUserOffline& ReportUserOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

ReportUserOffline* ReportUserOffline::default_instance_ = NULL;

ReportUserOffline* ReportUserOffline::New() const {
  return new ReportUserOffline;
}

void ReportUserOffline::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 8196;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_usernetinfo()) {
      if (usernetinfo_ != NULL) usernetinfo_->::SSToCS::UserNetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportUserOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.ReportUserOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportUserOffline];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_usernetinfo;
        break;
      }

      // optional .SSToCS.UserNetInfo usernetinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_usernetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usernetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.ReportUserOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.ReportUserOffline)
  return false;
#undef DO_
}

void ReportUserOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.ReportUserOffline)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportUserOffline];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional .SSToCS.UserNetInfo usernetinfo = 3;
  if (has_usernetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usernetinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.ReportUserOffline)
}

::google::protobuf::uint8* ReportUserOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.ReportUserOffline)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportUserOffline];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional .SSToCS.UserNetInfo usernetinfo = 3;
  if (has_usernetinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usernetinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.ReportUserOffline)
  return target;
}

int ReportUserOffline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_ReportUserOffline];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .SSToCS.UserNetInfo usernetinfo = 3;
    if (has_usernetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usernetinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportUserOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportUserOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportUserOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportUserOffline::MergeFrom(const ReportUserOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_usernetinfo()) {
      mutable_usernetinfo()->::SSToCS::UserNetInfo::MergeFrom(from.usernetinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportUserOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportUserOffline::CopyFrom(const ReportUserOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportUserOffline::IsInitialized() const {

  return true;
}

void ReportUserOffline::Swap(ReportUserOffline* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(usernetinfo_, other->usernetinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportUserOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportUserOffline_descriptor_;
  metadata.reflection = ReportUserOffline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAllCfgList::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskAllCfgList::AskAllCfgList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskAllCfgList)
}

void AskAllCfgList::InitAsDefaultInstance() {
}

AskAllCfgList::AskAllCfgList(const AskAllCfgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskAllCfgList)
}

void AskAllCfgList::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8199;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAllCfgList::~AskAllCfgList() {
  // @@protoc_insertion_point(destructor:SSToCS.AskAllCfgList)
  SharedDtor();
}

void AskAllCfgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskAllCfgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAllCfgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAllCfgList_descriptor_;
}

const AskAllCfgList& AskAllCfgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskAllCfgList* AskAllCfgList::default_instance_ = NULL;

AskAllCfgList* AskAllCfgList::New() const {
  return new AskAllCfgList;
}

void AskAllCfgList::Clear() {
  mgsid_ = 8199;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAllCfgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskAllCfgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAllCfgList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskAllCfgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskAllCfgList)
  return false;
#undef DO_
}

void AskAllCfgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskAllCfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAllCfgList];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskAllCfgList)
}

::google::protobuf::uint8* AskAllCfgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskAllCfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAllCfgList];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskAllCfgList)
  return target;
}

int AskAllCfgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskAllCfgList];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAllCfgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAllCfgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAllCfgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAllCfgList::MergeFrom(const AskAllCfgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAllCfgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAllCfgList::CopyFrom(const AskAllCfgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAllCfgList::IsInitialized() const {

  return true;
}

void AskAllCfgList::Swap(AskAllCfgList* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAllCfgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAllCfgList_descriptor_;
  metadata.reflection = AskAllCfgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskHeroCfgList::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskHeroCfgList::AskHeroCfgList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskHeroCfgList)
}

void AskHeroCfgList::InitAsDefaultInstance() {
}

AskHeroCfgList::AskHeroCfgList(const AskHeroCfgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskHeroCfgList)
}

void AskHeroCfgList::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskHeroCfgList::~AskHeroCfgList() {
  // @@protoc_insertion_point(destructor:SSToCS.AskHeroCfgList)
  SharedDtor();
}

void AskHeroCfgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskHeroCfgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskHeroCfgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskHeroCfgList_descriptor_;
}

const AskHeroCfgList& AskHeroCfgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskHeroCfgList* AskHeroCfgList::default_instance_ = NULL;

AskHeroCfgList* AskHeroCfgList::New() const {
  return new AskHeroCfgList;
}

void AskHeroCfgList::Clear() {
  mgsid_ = 8200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskHeroCfgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskHeroCfgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskHeroCfgList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskHeroCfgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskHeroCfgList)
  return false;
#undef DO_
}

void AskHeroCfgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskHeroCfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskHeroCfgList];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskHeroCfgList)
}

::google::protobuf::uint8* AskHeroCfgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskHeroCfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskHeroCfgList];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskHeroCfgList)
  return target;
}

int AskHeroCfgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskHeroCfgList];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskHeroCfgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskHeroCfgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskHeroCfgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskHeroCfgList::MergeFrom(const AskHeroCfgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskHeroCfgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskHeroCfgList::CopyFrom(const AskHeroCfgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskHeroCfgList::IsInitialized() const {

  return true;
}

void AskHeroCfgList::Swap(AskHeroCfgList* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskHeroCfgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskHeroCfgList_descriptor_;
  metadata.reflection = AskHeroCfgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskGoodsfgList::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskGoodsfgList::AskGoodsfgList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskGoodsfgList)
}

void AskGoodsfgList::InitAsDefaultInstance() {
}

AskGoodsfgList::AskGoodsfgList(const AskGoodsfgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskGoodsfgList)
}

void AskGoodsfgList::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8202;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskGoodsfgList::~AskGoodsfgList() {
  // @@protoc_insertion_point(destructor:SSToCS.AskGoodsfgList)
  SharedDtor();
}

void AskGoodsfgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskGoodsfgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskGoodsfgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskGoodsfgList_descriptor_;
}

const AskGoodsfgList& AskGoodsfgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskGoodsfgList* AskGoodsfgList::default_instance_ = NULL;

AskGoodsfgList* AskGoodsfgList::New() const {
  return new AskGoodsfgList;
}

void AskGoodsfgList::Clear() {
  mgsid_ = 8202;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskGoodsfgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskGoodsfgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskGoodsfgList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskGoodsfgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskGoodsfgList)
  return false;
#undef DO_
}

void AskGoodsfgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskGoodsfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskGoodsfgList];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskGoodsfgList)
}

::google::protobuf::uint8* AskGoodsfgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskGoodsfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskGoodsfgList];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskGoodsfgList)
  return target;
}

int AskGoodsfgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskGoodsfgList];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskGoodsfgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskGoodsfgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskGoodsfgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskGoodsfgList::MergeFrom(const AskGoodsfgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskGoodsfgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskGoodsfgList::CopyFrom(const AskGoodsfgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskGoodsfgList::IsInitialized() const {

  return true;
}

void AskGoodsfgList::Swap(AskGoodsfgList* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskGoodsfgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskGoodsfgList_descriptor_;
  metadata.reflection = AskGoodsfgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskShopfgList::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskShopfgList::AskShopfgList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskShopfgList)
}

void AskShopfgList::InitAsDefaultInstance() {
}

AskShopfgList::AskShopfgList(const AskShopfgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskShopfgList)
}

void AskShopfgList::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8201;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskShopfgList::~AskShopfgList() {
  // @@protoc_insertion_point(destructor:SSToCS.AskShopfgList)
  SharedDtor();
}

void AskShopfgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskShopfgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskShopfgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskShopfgList_descriptor_;
}

const AskShopfgList& AskShopfgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskShopfgList* AskShopfgList::default_instance_ = NULL;

AskShopfgList* AskShopfgList::New() const {
  return new AskShopfgList;
}

void AskShopfgList::Clear() {
  mgsid_ = 8201;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskShopfgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskShopfgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskShopfgList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskShopfgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskShopfgList)
  return false;
#undef DO_
}

void AskShopfgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskShopfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskShopfgList];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskShopfgList)
}

::google::protobuf::uint8* AskShopfgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskShopfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskShopfgList];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskShopfgList)
  return target;
}

int AskShopfgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskShopfgList];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskShopfgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskShopfgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskShopfgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskShopfgList::MergeFrom(const AskShopfgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskShopfgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskShopfgList::CopyFrom(const AskShopfgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskShopfgList::IsInitialized() const {

  return true;
}

void AskShopfgList::Swap(AskShopfgList* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskShopfgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskShopfgList_descriptor_;
  metadata.reflection = AskShopfgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPublicLuaStr::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskPublicLuaStr::AskPublicLuaStr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskPublicLuaStr)
}

void AskPublicLuaStr::InitAsDefaultInstance() {
}

AskPublicLuaStr::AskPublicLuaStr(const AskPublicLuaStr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskPublicLuaStr)
}

void AskPublicLuaStr::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8203;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPublicLuaStr::~AskPublicLuaStr() {
  // @@protoc_insertion_point(destructor:SSToCS.AskPublicLuaStr)
  SharedDtor();
}

void AskPublicLuaStr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPublicLuaStr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPublicLuaStr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPublicLuaStr_descriptor_;
}

const AskPublicLuaStr& AskPublicLuaStr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskPublicLuaStr* AskPublicLuaStr::default_instance_ = NULL;

AskPublicLuaStr* AskPublicLuaStr::New() const {
  return new AskPublicLuaStr;
}

void AskPublicLuaStr::Clear() {
  mgsid_ = 8203;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPublicLuaStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskPublicLuaStr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPublicLuaStr];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskPublicLuaStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskPublicLuaStr)
  return false;
#undef DO_
}

void AskPublicLuaStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskPublicLuaStr)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPublicLuaStr];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskPublicLuaStr)
}

::google::protobuf::uint8* AskPublicLuaStr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskPublicLuaStr)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPublicLuaStr];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskPublicLuaStr)
  return target;
}

int AskPublicLuaStr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPublicLuaStr];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPublicLuaStr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPublicLuaStr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPublicLuaStr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPublicLuaStr::MergeFrom(const AskPublicLuaStr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPublicLuaStr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPublicLuaStr::CopyFrom(const AskPublicLuaStr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPublicLuaStr::IsInitialized() const {

  return true;
}

void AskPublicLuaStr::Swap(AskPublicLuaStr* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPublicLuaStr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPublicLuaStr_descriptor_;
  metadata.reflection = AskPublicLuaStr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskMapCfgList::kMgsidFieldNumber;
const int AskMapCfgList::kMapidFieldNumber;
#endif  // !_MSC_VER

AskMapCfgList::AskMapCfgList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskMapCfgList)
}

void AskMapCfgList::InitAsDefaultInstance() {
}

AskMapCfgList::AskMapCfgList(const AskMapCfgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskMapCfgList)
}

void AskMapCfgList::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8204;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskMapCfgList::~AskMapCfgList() {
  // @@protoc_insertion_point(destructor:SSToCS.AskMapCfgList)
  SharedDtor();
}

void AskMapCfgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskMapCfgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskMapCfgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskMapCfgList_descriptor_;
}

const AskMapCfgList& AskMapCfgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskMapCfgList* AskMapCfgList::default_instance_ = NULL;

AskMapCfgList* AskMapCfgList::New() const {
  return new AskMapCfgList;
}

void AskMapCfgList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 8204;
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskMapCfgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskMapCfgList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskMapCfgList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskMapCfgList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskMapCfgList)
  return false;
#undef DO_
}

void AskMapCfgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskMapCfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskMapCfgList];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskMapCfgList)
}

::google::protobuf::uint8* AskMapCfgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskMapCfgList)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskMapCfgList];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskMapCfgList)
  return target;
}

int AskMapCfgList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskMapCfgList];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskMapCfgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskMapCfgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskMapCfgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskMapCfgList::MergeFrom(const AskMapCfgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskMapCfgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskMapCfgList::CopyFrom(const AskMapCfgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskMapCfgList::IsInitialized() const {

  return true;
}

void AskMapCfgList::Swap(AskMapCfgList* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskMapCfgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskMapCfgList_descriptor_;
  metadata.reflection = AskMapCfgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskNewSkillCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskNewSkillCfg::AskNewSkillCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskNewSkillCfg)
}

void AskNewSkillCfg::InitAsDefaultInstance() {
}

AskNewSkillCfg::AskNewSkillCfg(const AskNewSkillCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskNewSkillCfg)
}

void AskNewSkillCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8211;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskNewSkillCfg::~AskNewSkillCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskNewSkillCfg)
  SharedDtor();
}

void AskNewSkillCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskNewSkillCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskNewSkillCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskNewSkillCfg_descriptor_;
}

const AskNewSkillCfg& AskNewSkillCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskNewSkillCfg* AskNewSkillCfg::default_instance_ = NULL;

AskNewSkillCfg* AskNewSkillCfg::New() const {
  return new AskNewSkillCfg;
}

void AskNewSkillCfg::Clear() {
  mgsid_ = 8211;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskNewSkillCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskNewSkillCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskNewSkillCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskNewSkillCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskNewSkillCfg)
  return false;
#undef DO_
}

void AskNewSkillCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskNewSkillCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskNewSkillCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskNewSkillCfg)
}

::google::protobuf::uint8* AskNewSkillCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskNewSkillCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskNewSkillCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskNewSkillCfg)
  return target;
}

int AskNewSkillCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskNewSkillCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskNewSkillCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskNewSkillCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskNewSkillCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskNewSkillCfg::MergeFrom(const AskNewSkillCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskNewSkillCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskNewSkillCfg::CopyFrom(const AskNewSkillCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskNewSkillCfg::IsInitialized() const {

  return true;
}

void AskNewSkillCfg::Swap(AskNewSkillCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskNewSkillCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskNewSkillCfg_descriptor_;
  metadata.reflection = AskNewSkillCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectAccountCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectAccountCfg::AskSkillEffectAccountCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectAccountCfg)
}

void AskSkillEffectAccountCfg::InitAsDefaultInstance() {
}

AskSkillEffectAccountCfg::AskSkillEffectAccountCfg(const AskSkillEffectAccountCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectAccountCfg)
}

void AskSkillEffectAccountCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8213;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectAccountCfg::~AskSkillEffectAccountCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectAccountCfg)
  SharedDtor();
}

void AskSkillEffectAccountCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectAccountCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectAccountCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectAccountCfg_descriptor_;
}

const AskSkillEffectAccountCfg& AskSkillEffectAccountCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectAccountCfg* AskSkillEffectAccountCfg::default_instance_ = NULL;

AskSkillEffectAccountCfg* AskSkillEffectAccountCfg::New() const {
  return new AskSkillEffectAccountCfg;
}

void AskSkillEffectAccountCfg::Clear() {
  mgsid_ = 8213;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectAccountCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectAccountCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectAccountCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectAccountCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectAccountCfg)
  return false;
#undef DO_
}

void AskSkillEffectAccountCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectAccountCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectAccountCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectAccountCfg)
}

::google::protobuf::uint8* AskSkillEffectAccountCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectAccountCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectAccountCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectAccountCfg)
  return target;
}

int AskSkillEffectAccountCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectAccountCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectAccountCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectAccountCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectAccountCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectAccountCfg::MergeFrom(const AskSkillEffectAccountCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectAccountCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectAccountCfg::CopyFrom(const AskSkillEffectAccountCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectAccountCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectAccountCfg::Swap(AskSkillEffectAccountCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectAccountCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectAccountCfg_descriptor_;
  metadata.reflection = AskSkillEffectAccountCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectLeadingCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectLeadingCfg::AskSkillEffectLeadingCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectLeadingCfg)
}

void AskSkillEffectLeadingCfg::InitAsDefaultInstance() {
}

AskSkillEffectLeadingCfg::AskSkillEffectLeadingCfg(const AskSkillEffectLeadingCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectLeadingCfg)
}

void AskSkillEffectLeadingCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8216;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectLeadingCfg::~AskSkillEffectLeadingCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectLeadingCfg)
  SharedDtor();
}

void AskSkillEffectLeadingCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectLeadingCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectLeadingCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectLeadingCfg_descriptor_;
}

const AskSkillEffectLeadingCfg& AskSkillEffectLeadingCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectLeadingCfg* AskSkillEffectLeadingCfg::default_instance_ = NULL;

AskSkillEffectLeadingCfg* AskSkillEffectLeadingCfg::New() const {
  return new AskSkillEffectLeadingCfg;
}

void AskSkillEffectLeadingCfg::Clear() {
  mgsid_ = 8216;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectLeadingCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectLeadingCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectLeadingCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectLeadingCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectLeadingCfg)
  return false;
#undef DO_
}

void AskSkillEffectLeadingCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectLeadingCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectLeadingCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectLeadingCfg)
}

::google::protobuf::uint8* AskSkillEffectLeadingCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectLeadingCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectLeadingCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectLeadingCfg)
  return target;
}

int AskSkillEffectLeadingCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectLeadingCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectLeadingCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectLeadingCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectLeadingCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectLeadingCfg::MergeFrom(const AskSkillEffectLeadingCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectLeadingCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectLeadingCfg::CopyFrom(const AskSkillEffectLeadingCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectLeadingCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectLeadingCfg::Swap(AskSkillEffectLeadingCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectLeadingCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectLeadingCfg_descriptor_;
  metadata.reflection = AskSkillEffectLeadingCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectRangeCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectRangeCfg::AskSkillEffectRangeCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectRangeCfg)
}

void AskSkillEffectRangeCfg::InitAsDefaultInstance() {
}

AskSkillEffectRangeCfg::AskSkillEffectRangeCfg(const AskSkillEffectRangeCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectRangeCfg)
}

void AskSkillEffectRangeCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8215;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectRangeCfg::~AskSkillEffectRangeCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectRangeCfg)
  SharedDtor();
}

void AskSkillEffectRangeCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectRangeCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectRangeCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectRangeCfg_descriptor_;
}

const AskSkillEffectRangeCfg& AskSkillEffectRangeCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectRangeCfg* AskSkillEffectRangeCfg::default_instance_ = NULL;

AskSkillEffectRangeCfg* AskSkillEffectRangeCfg::New() const {
  return new AskSkillEffectRangeCfg;
}

void AskSkillEffectRangeCfg::Clear() {
  mgsid_ = 8215;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectRangeCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectRangeCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectRangeCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectRangeCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectRangeCfg)
  return false;
#undef DO_
}

void AskSkillEffectRangeCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectRangeCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectRangeCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectRangeCfg)
}

::google::protobuf::uint8* AskSkillEffectRangeCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectRangeCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectRangeCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectRangeCfg)
  return target;
}

int AskSkillEffectRangeCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectRangeCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectRangeCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectRangeCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectRangeCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectRangeCfg::MergeFrom(const AskSkillEffectRangeCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectRangeCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectRangeCfg::CopyFrom(const AskSkillEffectRangeCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectRangeCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectRangeCfg::Swap(AskSkillEffectRangeCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectRangeCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectRangeCfg_descriptor_;
  metadata.reflection = AskSkillEffectRangeCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectBufCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectBufCfg::AskSkillEffectBufCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectBufCfg)
}

void AskSkillEffectBufCfg::InitAsDefaultInstance() {
}

AskSkillEffectBufCfg::AskSkillEffectBufCfg(const AskSkillEffectBufCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectBufCfg)
}

void AskSkillEffectBufCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8217;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectBufCfg::~AskSkillEffectBufCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectBufCfg)
  SharedDtor();
}

void AskSkillEffectBufCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectBufCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectBufCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectBufCfg_descriptor_;
}

const AskSkillEffectBufCfg& AskSkillEffectBufCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectBufCfg* AskSkillEffectBufCfg::default_instance_ = NULL;

AskSkillEffectBufCfg* AskSkillEffectBufCfg::New() const {
  return new AskSkillEffectBufCfg;
}

void AskSkillEffectBufCfg::Clear() {
  mgsid_ = 8217;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectBufCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectBufCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectBufCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectBufCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectBufCfg)
  return false;
#undef DO_
}

void AskSkillEffectBufCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectBufCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectBufCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectBufCfg)
}

::google::protobuf::uint8* AskSkillEffectBufCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectBufCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectBufCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectBufCfg)
  return target;
}

int AskSkillEffectBufCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectBufCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectBufCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectBufCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectBufCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectBufCfg::MergeFrom(const AskSkillEffectBufCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectBufCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectBufCfg::CopyFrom(const AskSkillEffectBufCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectBufCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectBufCfg::Swap(AskSkillEffectBufCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectBufCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectBufCfg_descriptor_;
  metadata.reflection = AskSkillEffectBufCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectSummonCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectSummonCfg::AskSkillEffectSummonCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectSummonCfg)
}

void AskSkillEffectSummonCfg::InitAsDefaultInstance() {
}

AskSkillEffectSummonCfg::AskSkillEffectSummonCfg(const AskSkillEffectSummonCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectSummonCfg)
}

void AskSkillEffectSummonCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8218;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectSummonCfg::~AskSkillEffectSummonCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectSummonCfg)
  SharedDtor();
}

void AskSkillEffectSummonCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectSummonCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectSummonCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectSummonCfg_descriptor_;
}

const AskSkillEffectSummonCfg& AskSkillEffectSummonCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectSummonCfg* AskSkillEffectSummonCfg::default_instance_ = NULL;

AskSkillEffectSummonCfg* AskSkillEffectSummonCfg::New() const {
  return new AskSkillEffectSummonCfg;
}

void AskSkillEffectSummonCfg::Clear() {
  mgsid_ = 8218;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectSummonCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectSummonCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSummonCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectSummonCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectSummonCfg)
  return false;
#undef DO_
}

void AskSkillEffectSummonCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectSummonCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSummonCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectSummonCfg)
}

::google::protobuf::uint8* AskSkillEffectSummonCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectSummonCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSummonCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectSummonCfg)
  return target;
}

int AskSkillEffectSummonCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSummonCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectSummonCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectSummonCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectSummonCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectSummonCfg::MergeFrom(const AskSkillEffectSummonCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectSummonCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectSummonCfg::CopyFrom(const AskSkillEffectSummonCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectSummonCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectSummonCfg::Swap(AskSkillEffectSummonCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectSummonCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectSummonCfg_descriptor_;
  metadata.reflection = AskSkillEffectSummonCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectMoveCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectMoveCfg::AskSkillEffectMoveCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectMoveCfg)
}

void AskSkillEffectMoveCfg::InitAsDefaultInstance() {
}

AskSkillEffectMoveCfg::AskSkillEffectMoveCfg(const AskSkillEffectMoveCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectMoveCfg)
}

void AskSkillEffectMoveCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8219;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectMoveCfg::~AskSkillEffectMoveCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectMoveCfg)
  SharedDtor();
}

void AskSkillEffectMoveCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectMoveCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectMoveCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectMoveCfg_descriptor_;
}

const AskSkillEffectMoveCfg& AskSkillEffectMoveCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectMoveCfg* AskSkillEffectMoveCfg::default_instance_ = NULL;

AskSkillEffectMoveCfg* AskSkillEffectMoveCfg::New() const {
  return new AskSkillEffectMoveCfg;
}

void AskSkillEffectMoveCfg::Clear() {
  mgsid_ = 8219;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectMoveCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectMoveCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectMoveCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectMoveCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectMoveCfg)
  return false;
#undef DO_
}

void AskSkillEffectMoveCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectMoveCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectMoveCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectMoveCfg)
}

::google::protobuf::uint8* AskSkillEffectMoveCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectMoveCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectMoveCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectMoveCfg)
  return target;
}

int AskSkillEffectMoveCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectMoveCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectMoveCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectMoveCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectMoveCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectMoveCfg::MergeFrom(const AskSkillEffectMoveCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectMoveCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectMoveCfg::CopyFrom(const AskSkillEffectMoveCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectMoveCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectMoveCfg::Swap(AskSkillEffectMoveCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectMoveCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectMoveCfg_descriptor_;
  metadata.reflection = AskSkillEffectMoveCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskSkillEffectSwitchCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskSkillEffectSwitchCfg::AskSkillEffectSwitchCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskSkillEffectSwitchCfg)
}

void AskSkillEffectSwitchCfg::InitAsDefaultInstance() {
}

AskSkillEffectSwitchCfg::AskSkillEffectSwitchCfg(const AskSkillEffectSwitchCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskSkillEffectSwitchCfg)
}

void AskSkillEffectSwitchCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8220;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSkillEffectSwitchCfg::~AskSkillEffectSwitchCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskSkillEffectSwitchCfg)
  SharedDtor();
}

void AskSkillEffectSwitchCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSkillEffectSwitchCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSkillEffectSwitchCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSkillEffectSwitchCfg_descriptor_;
}

const AskSkillEffectSwitchCfg& AskSkillEffectSwitchCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskSkillEffectSwitchCfg* AskSkillEffectSwitchCfg::default_instance_ = NULL;

AskSkillEffectSwitchCfg* AskSkillEffectSwitchCfg::New() const {
  return new AskSkillEffectSwitchCfg;
}

void AskSkillEffectSwitchCfg::Clear() {
  mgsid_ = 8220;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSkillEffectSwitchCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskSkillEffectSwitchCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSwitchCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskSkillEffectSwitchCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskSkillEffectSwitchCfg)
  return false;
#undef DO_
}

void AskSkillEffectSwitchCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskSkillEffectSwitchCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSwitchCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskSkillEffectSwitchCfg)
}

::google::protobuf::uint8* AskSkillEffectSwitchCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskSkillEffectSwitchCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSwitchCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskSkillEffectSwitchCfg)
  return target;
}

int AskSkillEffectSwitchCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskSkillEffectSwitchCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSkillEffectSwitchCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSkillEffectSwitchCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSkillEffectSwitchCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSkillEffectSwitchCfg::MergeFrom(const AskSkillEffectSwitchCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSkillEffectSwitchCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSkillEffectSwitchCfg::CopyFrom(const AskSkillEffectSwitchCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSkillEffectSwitchCfg::IsInitialized() const {

  return true;
}

void AskSkillEffectSwitchCfg::Swap(AskSkillEffectSwitchCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSkillEffectSwitchCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSkillEffectSwitchCfg_descriptor_;
  metadata.reflection = AskSkillEffectSwitchCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPassitiveSkillCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskPassitiveSkillCfg::AskPassitiveSkillCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskPassitiveSkillCfg)
}

void AskPassitiveSkillCfg::InitAsDefaultInstance() {
}

AskPassitiveSkillCfg::AskPassitiveSkillCfg(const AskPassitiveSkillCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskPassitiveSkillCfg)
}

void AskPassitiveSkillCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8221;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPassitiveSkillCfg::~AskPassitiveSkillCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskPassitiveSkillCfg)
  SharedDtor();
}

void AskPassitiveSkillCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPassitiveSkillCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPassitiveSkillCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPassitiveSkillCfg_descriptor_;
}

const AskPassitiveSkillCfg& AskPassitiveSkillCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskPassitiveSkillCfg* AskPassitiveSkillCfg::default_instance_ = NULL;

AskPassitiveSkillCfg* AskPassitiveSkillCfg::New() const {
  return new AskPassitiveSkillCfg;
}

void AskPassitiveSkillCfg::Clear() {
  mgsid_ = 8221;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPassitiveSkillCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskPassitiveSkillCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveSkillCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskPassitiveSkillCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskPassitiveSkillCfg)
  return false;
#undef DO_
}

void AskPassitiveSkillCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskPassitiveSkillCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveSkillCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskPassitiveSkillCfg)
}

::google::protobuf::uint8* AskPassitiveSkillCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskPassitiveSkillCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveSkillCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskPassitiveSkillCfg)
  return target;
}

int AskPassitiveSkillCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveSkillCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPassitiveSkillCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPassitiveSkillCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPassitiveSkillCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPassitiveSkillCfg::MergeFrom(const AskPassitiveSkillCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPassitiveSkillCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPassitiveSkillCfg::CopyFrom(const AskPassitiveSkillCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPassitiveSkillCfg::IsInitialized() const {

  return true;
}

void AskPassitiveSkillCfg::Swap(AskPassitiveSkillCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPassitiveSkillCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPassitiveSkillCfg_descriptor_;
  metadata.reflection = AskPassitiveSkillCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPassitiveEffectBloodSeekCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskPassitiveEffectBloodSeekCfg::AskPassitiveEffectBloodSeekCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskPassitiveEffectBloodSeekCfg)
}

void AskPassitiveEffectBloodSeekCfg::InitAsDefaultInstance() {
}

AskPassitiveEffectBloodSeekCfg::AskPassitiveEffectBloodSeekCfg(const AskPassitiveEffectBloodSeekCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskPassitiveEffectBloodSeekCfg)
}

void AskPassitiveEffectBloodSeekCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8222;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPassitiveEffectBloodSeekCfg::~AskPassitiveEffectBloodSeekCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskPassitiveEffectBloodSeekCfg)
  SharedDtor();
}

void AskPassitiveEffectBloodSeekCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPassitiveEffectBloodSeekCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPassitiveEffectBloodSeekCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPassitiveEffectBloodSeekCfg_descriptor_;
}

const AskPassitiveEffectBloodSeekCfg& AskPassitiveEffectBloodSeekCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskPassitiveEffectBloodSeekCfg* AskPassitiveEffectBloodSeekCfg::default_instance_ = NULL;

AskPassitiveEffectBloodSeekCfg* AskPassitiveEffectBloodSeekCfg::New() const {
  return new AskPassitiveEffectBloodSeekCfg;
}

void AskPassitiveEffectBloodSeekCfg::Clear() {
  mgsid_ = 8222;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPassitiveEffectBloodSeekCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskPassitiveEffectBloodSeekCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectBloodSeekCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskPassitiveEffectBloodSeekCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskPassitiveEffectBloodSeekCfg)
  return false;
#undef DO_
}

void AskPassitiveEffectBloodSeekCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskPassitiveEffectBloodSeekCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectBloodSeekCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskPassitiveEffectBloodSeekCfg)
}

::google::protobuf::uint8* AskPassitiveEffectBloodSeekCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskPassitiveEffectBloodSeekCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectBloodSeekCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskPassitiveEffectBloodSeekCfg)
  return target;
}

int AskPassitiveEffectBloodSeekCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectBloodSeekCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPassitiveEffectBloodSeekCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPassitiveEffectBloodSeekCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPassitiveEffectBloodSeekCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPassitiveEffectBloodSeekCfg::MergeFrom(const AskPassitiveEffectBloodSeekCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPassitiveEffectBloodSeekCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPassitiveEffectBloodSeekCfg::CopyFrom(const AskPassitiveEffectBloodSeekCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPassitiveEffectBloodSeekCfg::IsInitialized() const {

  return true;
}

void AskPassitiveEffectBloodSeekCfg::Swap(AskPassitiveEffectBloodSeekCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPassitiveEffectBloodSeekCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPassitiveEffectBloodSeekCfg_descriptor_;
  metadata.reflection = AskPassitiveEffectBloodSeekCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPassitiveEffectReboundCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskPassitiveEffectReboundCfg::AskPassitiveEffectReboundCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskPassitiveEffectReboundCfg)
}

void AskPassitiveEffectReboundCfg::InitAsDefaultInstance() {
}

AskPassitiveEffectReboundCfg::AskPassitiveEffectReboundCfg(const AskPassitiveEffectReboundCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskPassitiveEffectReboundCfg)
}

void AskPassitiveEffectReboundCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8223;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPassitiveEffectReboundCfg::~AskPassitiveEffectReboundCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskPassitiveEffectReboundCfg)
  SharedDtor();
}

void AskPassitiveEffectReboundCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPassitiveEffectReboundCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPassitiveEffectReboundCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPassitiveEffectReboundCfg_descriptor_;
}

const AskPassitiveEffectReboundCfg& AskPassitiveEffectReboundCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskPassitiveEffectReboundCfg* AskPassitiveEffectReboundCfg::default_instance_ = NULL;

AskPassitiveEffectReboundCfg* AskPassitiveEffectReboundCfg::New() const {
  return new AskPassitiveEffectReboundCfg;
}

void AskPassitiveEffectReboundCfg::Clear() {
  mgsid_ = 8223;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPassitiveEffectReboundCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskPassitiveEffectReboundCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReboundCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskPassitiveEffectReboundCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskPassitiveEffectReboundCfg)
  return false;
#undef DO_
}

void AskPassitiveEffectReboundCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskPassitiveEffectReboundCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReboundCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskPassitiveEffectReboundCfg)
}

::google::protobuf::uint8* AskPassitiveEffectReboundCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskPassitiveEffectReboundCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReboundCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskPassitiveEffectReboundCfg)
  return target;
}

int AskPassitiveEffectReboundCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReboundCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPassitiveEffectReboundCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPassitiveEffectReboundCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPassitiveEffectReboundCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPassitiveEffectReboundCfg::MergeFrom(const AskPassitiveEffectReboundCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPassitiveEffectReboundCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPassitiveEffectReboundCfg::CopyFrom(const AskPassitiveEffectReboundCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPassitiveEffectReboundCfg::IsInitialized() const {

  return true;
}

void AskPassitiveEffectReboundCfg::Swap(AskPassitiveEffectReboundCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPassitiveEffectReboundCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPassitiveEffectReboundCfg_descriptor_;
  metadata.reflection = AskPassitiveEffectReboundCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskPassitiveEffectReliveCfg::kMgsidFieldNumber;
#endif  // !_MSC_VER

AskPassitiveEffectReliveCfg::AskPassitiveEffectReliveCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskPassitiveEffectReliveCfg)
}

void AskPassitiveEffectReliveCfg::InitAsDefaultInstance() {
}

AskPassitiveEffectReliveCfg::AskPassitiveEffectReliveCfg(const AskPassitiveEffectReliveCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskPassitiveEffectReliveCfg)
}

void AskPassitiveEffectReliveCfg::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8224;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskPassitiveEffectReliveCfg::~AskPassitiveEffectReliveCfg() {
  // @@protoc_insertion_point(destructor:SSToCS.AskPassitiveEffectReliveCfg)
  SharedDtor();
}

void AskPassitiveEffectReliveCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskPassitiveEffectReliveCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskPassitiveEffectReliveCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskPassitiveEffectReliveCfg_descriptor_;
}

const AskPassitiveEffectReliveCfg& AskPassitiveEffectReliveCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskPassitiveEffectReliveCfg* AskPassitiveEffectReliveCfg::default_instance_ = NULL;

AskPassitiveEffectReliveCfg* AskPassitiveEffectReliveCfg::New() const {
  return new AskPassitiveEffectReliveCfg;
}

void AskPassitiveEffectReliveCfg::Clear() {
  mgsid_ = 8224;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskPassitiveEffectReliveCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskPassitiveEffectReliveCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReliveCfg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskPassitiveEffectReliveCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskPassitiveEffectReliveCfg)
  return false;
#undef DO_
}

void AskPassitiveEffectReliveCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskPassitiveEffectReliveCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReliveCfg];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskPassitiveEffectReliveCfg)
}

::google::protobuf::uint8* AskPassitiveEffectReliveCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskPassitiveEffectReliveCfg)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReliveCfg];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskPassitiveEffectReliveCfg)
  return target;
}

int AskPassitiveEffectReliveCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskPassitiveEffectReliveCfg];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskPassitiveEffectReliveCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskPassitiveEffectReliveCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskPassitiveEffectReliveCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskPassitiveEffectReliveCfg::MergeFrom(const AskPassitiveEffectReliveCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskPassitiveEffectReliveCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskPassitiveEffectReliveCfg::CopyFrom(const AskPassitiveEffectReliveCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskPassitiveEffectReliveCfg::IsInitialized() const {

  return true;
}

void AskPassitiveEffectReliveCfg::Swap(AskPassitiveEffectReliveCfg* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskPassitiveEffectReliveCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskPassitiveEffectReliveCfg_descriptor_;
  metadata.reflection = AskPassitiveEffectReliveCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskUpdateGuideStep::kMgsidFieldNumber;
const int AskUpdateGuideStep::kGuidFieldNumber;
const int AskUpdateGuideStep::kStateFieldNumber;
const int AskUpdateGuideStep::kStepidFieldNumber;
#endif  // !_MSC_VER

AskUpdateGuideStep::AskUpdateGuideStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskUpdateGuideStep)
}

void AskUpdateGuideStep::InitAsDefaultInstance() {
}

AskUpdateGuideStep::AskUpdateGuideStep(const AskUpdateGuideStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskUpdateGuideStep)
}

void AskUpdateGuideStep::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8225;
  guid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  stepid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskUpdateGuideStep::~AskUpdateGuideStep() {
  // @@protoc_insertion_point(destructor:SSToCS.AskUpdateGuideStep)
  SharedDtor();
}

void AskUpdateGuideStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskUpdateGuideStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskUpdateGuideStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskUpdateGuideStep_descriptor_;
}

const AskUpdateGuideStep& AskUpdateGuideStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskUpdateGuideStep* AskUpdateGuideStep::default_instance_ = NULL;

AskUpdateGuideStep* AskUpdateGuideStep::New() const {
  return new AskUpdateGuideStep;
}

void AskUpdateGuideStep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskUpdateGuideStep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, stepid_);
    mgsid_ = 8225;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskUpdateGuideStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskUpdateGuideStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateGuideStep];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stepid;
        break;
      }

      // optional int32 stepid = 4;
      case 4: {
        if (tag == 32) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskUpdateGuideStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskUpdateGuideStep)
  return false;
#undef DO_
}

void AskUpdateGuideStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskUpdateGuideStep)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateGuideStep];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 stepid = 4;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskUpdateGuideStep)
}

::google::protobuf::uint8* AskUpdateGuideStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskUpdateGuideStep)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateGuideStep];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 stepid = 4;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskUpdateGuideStep)
  return target;
}

int AskUpdateGuideStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUpdateGuideStep];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 stepid = 4;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskUpdateGuideStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskUpdateGuideStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskUpdateGuideStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskUpdateGuideStep::MergeFrom(const AskUpdateGuideStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskUpdateGuideStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskUpdateGuideStep::CopyFrom(const AskUpdateGuideStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskUpdateGuideStep::IsInitialized() const {

  return true;
}

void AskUpdateGuideStep::Swap(AskUpdateGuideStep* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(state_, other->state_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskUpdateGuideStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskUpdateGuideStep_descriptor_;
  metadata.reflection = AskUpdateGuideStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskUserGoHall::kMgsidFieldNumber;
const int AskUserGoHall::kGuidFieldNumber;
const int AskUserGoHall::kTypeFieldNumber;
#endif  // !_MSC_VER

AskUserGoHall::AskUserGoHall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.AskUserGoHall)
}

void AskUserGoHall::InitAsDefaultInstance() {
}

AskUserGoHall::AskUserGoHall(const AskUserGoHall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.AskUserGoHall)
}

void AskUserGoHall::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8226;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskUserGoHall::~AskUserGoHall() {
  // @@protoc_insertion_point(destructor:SSToCS.AskUserGoHall)
  SharedDtor();
}

void AskUserGoHall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskUserGoHall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskUserGoHall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskUserGoHall_descriptor_;
}

const AskUserGoHall& AskUserGoHall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

AskUserGoHall* AskUserGoHall::default_instance_ = NULL;

AskUserGoHall* AskUserGoHall::New() const {
  return new AskUserGoHall;
}

void AskUserGoHall::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 8226;
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskUserGoHall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.AskUserGoHall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUserGoHall];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.AskUserGoHall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.AskUserGoHall)
  return false;
#undef DO_
}

void AskUserGoHall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.AskUserGoHall)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUserGoHall];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.AskUserGoHall)
}

::google::protobuf::uint8* AskUserGoHall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.AskUserGoHall)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUserGoHall];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.AskUserGoHall)
  return target;
}

int AskUserGoHall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AskUserGoHall];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskUserGoHall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskUserGoHall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskUserGoHall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskUserGoHall::MergeFrom(const AskUserGoHall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskUserGoHall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskUserGoHall::CopyFrom(const AskUserGoHall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskUserGoHall::IsInitialized() const {

  return true;
}

void AskUserGoHall::Swap(AskUserGoHall* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskUserGoHall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskUserGoHall_descriptor_;
  metadata.reflection = AskUserGoHall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncAllBattleInfo::kMgsidFieldNumber;
const int SyncAllBattleInfo::kPlaybattleFieldNumber;
const int SyncAllBattleInfo::kMaxbattleidFieldNumber;
#endif  // !_MSC_VER

SyncAllBattleInfo::SyncAllBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.SyncAllBattleInfo)
}

void SyncAllBattleInfo::InitAsDefaultInstance() {
}

SyncAllBattleInfo::SyncAllBattleInfo(const SyncAllBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.SyncAllBattleInfo)
}

void SyncAllBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8229;
  maxbattleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncAllBattleInfo::~SyncAllBattleInfo() {
  // @@protoc_insertion_point(destructor:SSToCS.SyncAllBattleInfo)
  SharedDtor();
}

void SyncAllBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncAllBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncAllBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncAllBattleInfo_descriptor_;
}

const SyncAllBattleInfo& SyncAllBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

SyncAllBattleInfo* SyncAllBattleInfo::default_instance_ = NULL;

SyncAllBattleInfo* SyncAllBattleInfo::New() const {
  return new SyncAllBattleInfo;
}

void SyncAllBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    mgsid_ = 8229;
    maxbattleid_ = GOOGLE_ULONGLONG(0);
  }
  playbattle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncAllBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.SyncAllBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AllBattleInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playbattle;
        break;
      }

      // repeated uint64 playbattle = 2;
      case 2: {
        if (tag == 16) {
         parse_playbattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_playbattle())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playbattle())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playbattle;
        if (input->ExpectTag(24)) goto parse_maxbattleid;
        break;
      }

      // optional uint64 maxbattleid = 3;
      case 3: {
        if (tag == 24) {
         parse_maxbattleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxbattleid_)));
          set_has_maxbattleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.SyncAllBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.SyncAllBattleInfo)
  return false;
#undef DO_
}

void SyncAllBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.SyncAllBattleInfo)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AllBattleInfo];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // repeated uint64 playbattle = 2;
  for (int i = 0; i < this->playbattle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->playbattle(i), output);
  }

  // optional uint64 maxbattleid = 3;
  if (has_maxbattleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxbattleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.SyncAllBattleInfo)
}

::google::protobuf::uint8* SyncAllBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.SyncAllBattleInfo)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AllBattleInfo];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // repeated uint64 playbattle = 2;
  for (int i = 0; i < this->playbattle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->playbattle(i), target);
  }

  // optional uint64 maxbattleid = 3;
  if (has_maxbattleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxbattleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.SyncAllBattleInfo)
  return target;
}

int SyncAllBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_AllBattleInfo];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional uint64 maxbattleid = 3;
    if (has_maxbattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxbattleid());
    }

  }
  // repeated uint64 playbattle = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playbattle_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playbattle(i));
    }
    total_size += 1 * this->playbattle_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncAllBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncAllBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncAllBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncAllBattleInfo::MergeFrom(const SyncAllBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playbattle_.MergeFrom(from.playbattle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_maxbattleid()) {
      set_maxbattleid(from.maxbattleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncAllBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAllBattleInfo::CopyFrom(const SyncAllBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAllBattleInfo::IsInitialized() const {

  return true;
}

void SyncAllBattleInfo::Swap(SyncAllBattleInfo* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    playbattle_.Swap(&other->playbattle_);
    std::swap(maxbattleid_, other->maxbattleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncAllBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncAllBattleInfo_descriptor_;
  metadata.reflection = SyncAllBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateBattleResponse::kMgsidFieldNumber;
const int CreateBattleResponse::kBattleidFieldNumber;
const int CreateBattleResponse::kRstFieldNumber;
#endif  // !_MSC_VER

CreateBattleResponse::CreateBattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.CreateBattleResponse)
}

void CreateBattleResponse::InitAsDefaultInstance() {
}

CreateBattleResponse::CreateBattleResponse(const CreateBattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.CreateBattleResponse)
}

void CreateBattleResponse::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8300;
  battleid_ = GOOGLE_LONGLONG(0);
  rst_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateBattleResponse::~CreateBattleResponse() {
  // @@protoc_insertion_point(destructor:SSToCS.CreateBattleResponse)
  SharedDtor();
}

void CreateBattleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateBattleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateBattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBattleResponse_descriptor_;
}

const CreateBattleResponse& CreateBattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

CreateBattleResponse* CreateBattleResponse::default_instance_ = NULL;

CreateBattleResponse* CreateBattleResponse::New() const {
  return new CreateBattleResponse;
}

void CreateBattleResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 8300;
    battleid_ = GOOGLE_LONGLONG(0);
    rst_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateBattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.CreateBattleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_CreateBattleResponse];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional int64 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rst;
        break;
      }

      // optional bool rst = 3;
      case 3: {
        if (tag == 24) {
         parse_rst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rst_)));
          set_has_rst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.CreateBattleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.CreateBattleResponse)
  return false;
#undef DO_
}

void CreateBattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.CreateBattleResponse)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_CreateBattleResponse];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battleid(), output);
  }

  // optional bool rst = 3;
  if (has_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.CreateBattleResponse)
}

::google::protobuf::uint8* CreateBattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.CreateBattleResponse)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_CreateBattleResponse];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battleid(), target);
  }

  // optional bool rst = 3;
  if (has_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.CreateBattleResponse)
  return target;
}

int CreateBattleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_CreateBattleResponse];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battleid());
    }

    // optional bool rst = 3;
    if (has_rst()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateBattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateBattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateBattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateBattleResponse::MergeFrom(const CreateBattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_rst()) {
      set_rst(from.rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateBattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBattleResponse::CopyFrom(const CreateBattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBattleResponse::IsInitialized() const {

  return true;
}

void CreateBattleResponse::Swap(CreateBattleResponse* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(battleid_, other->battleid_);
    std::swap(rst_, other->rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateBattleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateBattleResponse_descriptor_;
  metadata.reflection = CreateBattleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishBattle_BattleUserData::kGuidFieldNumber;
const int FinishBattle_BattleUserData::kHeroguidFieldNumber;
const int FinishBattle_BattleUserData::kTimeinsecondFieldNumber;
const int FinishBattle_BattleUserData::kIfEndFieldNumber;
const int FinishBattle_BattleUserData::kHeroidFieldNumber;
const int FinishBattle_BattleUserData::kRunepageFieldNumber;
const int FinishBattle_BattleUserData::kDeadtimesFieldNumber;
const int FinishBattle_BattleUserData::kHerokillsFieldNumber;
const int FinishBattle_BattleUserData::kDestorybuildingFieldNumber;
const int FinishBattle_BattleUserData::kDiamondusedFieldNumber;
const int FinishBattle_BattleUserData::kGoldusedFieldNumber;
const int FinishBattle_BattleUserData::kLasthitnumFieldNumber;
const int FinishBattle_BattleUserData::kAsskillnumFieldNumber;
const int FinishBattle_BattleUserData::kHerolvFieldNumber;
const int FinishBattle_BattleUserData::kTotalcpFieldNumber;
const int FinishBattle_BattleUserData::kIfAiRobotFieldNumber;
#endif  // !_MSC_VER

FinishBattle_BattleUserData::FinishBattle_BattleUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.FinishBattle.BattleUserData)
}

void FinishBattle_BattleUserData::InitAsDefaultInstance() {
}

FinishBattle_BattleUserData::FinishBattle_BattleUserData(const FinishBattle_BattleUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.FinishBattle.BattleUserData)
}

void FinishBattle_BattleUserData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  heroguid_ = GOOGLE_ULONGLONG(0);
  timeinsecond_ = 0u;
  ifend_ = false;
  heroid_ = 0;
  runepage_ = 0;
  deadtimes_ = 0u;
  herokills_ = 0u;
  destorybuilding_ = 0;
  diamondused_ = GOOGLE_LONGLONG(0);
  goldused_ = GOOGLE_LONGLONG(0);
  lasthitnum_ = 0;
  asskillnum_ = 0;
  herolv_ = 0;
  totalcp_ = 0;
  ifairobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishBattle_BattleUserData::~FinishBattle_BattleUserData() {
  // @@protoc_insertion_point(destructor:SSToCS.FinishBattle.BattleUserData)
  SharedDtor();
}

void FinishBattle_BattleUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishBattle_BattleUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishBattle_BattleUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishBattle_BattleUserData_descriptor_;
}

const FinishBattle_BattleUserData& FinishBattle_BattleUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

FinishBattle_BattleUserData* FinishBattle_BattleUserData::default_instance_ = NULL;

FinishBattle_BattleUserData* FinishBattle_BattleUserData::New() const {
  return new FinishBattle_BattleUserData;
}

void FinishBattle_BattleUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FinishBattle_BattleUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, herokills_);
    ifend_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(destorybuilding_, diamondused_);
    ZR_(ifairobot_, totalcp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishBattle_BattleUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.FinishBattle.BattleUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroguid;
        break;
      }

      // optional uint64 heroguid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &heroguid_)));
          set_has_heroguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timeinsecond;
        break;
      }

      // optional uint32 timeinsecond = 3;
      case 3: {
        if (tag == 24) {
         parse_timeinsecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeinsecond_)));
          set_has_timeinsecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifEnd;
        break;
      }

      // optional bool ifEnd = 4;
      case 4: {
        if (tag == 32) {
         parse_ifEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifend_)));
          set_has_ifend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 5;
      case 5: {
        if (tag == 40) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_runepage;
        break;
      }

      // optional int32 runepage = 6;
      case 6: {
        if (tag == 48) {
         parse_runepage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runepage_)));
          set_has_runepage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_deadtimes;
        break;
      }

      // optional uint32 deadtimes = 7;
      case 7: {
        if (tag == 56) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_herokills;
        break;
      }

      // optional uint32 herokills = 8;
      case 8: {
        if (tag == 64) {
         parse_herokills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokills_)));
          set_has_herokills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_destorybuilding;
        break;
      }

      // optional int32 destorybuilding = 9;
      case 9: {
        if (tag == 72) {
         parse_destorybuilding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destorybuilding_)));
          set_has_destorybuilding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_diamondused;
        break;
      }

      // optional int64 diamondused = 10;
      case 10: {
        if (tag == 80) {
         parse_diamondused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamondused_)));
          set_has_diamondused();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_goldused;
        break;
      }

      // optional int64 goldused = 11;
      case 11: {
        if (tag == 88) {
         parse_goldused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldused_)));
          set_has_goldused();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lasthitnum;
        break;
      }

      // optional int32 lasthitnum = 12;
      case 12: {
        if (tag == 96) {
         parse_lasthitnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasthitnum_)));
          set_has_lasthitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_asskillnum;
        break;
      }

      // optional int32 asskillnum = 13;
      case 13: {
        if (tag == 104) {
         parse_asskillnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asskillnum_)));
          set_has_asskillnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_herolv;
        break;
      }

      // optional int32 herolv = 14;
      case 14: {
        if (tag == 112) {
         parse_herolv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herolv_)));
          set_has_herolv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_totalcp;
        break;
      }

      // optional int32 totalcp = 15;
      case 15: {
        if (tag == 120) {
         parse_totalcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcp_)));
          set_has_totalcp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ifAiRobot;
        break;
      }

      // optional bool ifAiRobot = 16;
      case 16: {
        if (tag == 128) {
         parse_ifAiRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifairobot_)));
          set_has_ifairobot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.FinishBattle.BattleUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.FinishBattle.BattleUserData)
  return false;
#undef DO_
}

void FinishBattle_BattleUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.FinishBattle.BattleUserData)
  // optional uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint64 heroguid = 2;
  if (has_heroguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->heroguid(), output);
  }

  // optional uint32 timeinsecond = 3;
  if (has_timeinsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeinsecond(), output);
  }

  // optional bool ifEnd = 4;
  if (has_ifend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ifend(), output);
  }

  // optional int32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->heroid(), output);
  }

  // optional int32 runepage = 6;
  if (has_runepage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->runepage(), output);
  }

  // optional uint32 deadtimes = 7;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deadtimes(), output);
  }

  // optional uint32 herokills = 8;
  if (has_herokills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->herokills(), output);
  }

  // optional int32 destorybuilding = 9;
  if (has_destorybuilding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->destorybuilding(), output);
  }

  // optional int64 diamondused = 10;
  if (has_diamondused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->diamondused(), output);
  }

  // optional int64 goldused = 11;
  if (has_goldused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->goldused(), output);
  }

  // optional int32 lasthitnum = 12;
  if (has_lasthitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lasthitnum(), output);
  }

  // optional int32 asskillnum = 13;
  if (has_asskillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->asskillnum(), output);
  }

  // optional int32 herolv = 14;
  if (has_herolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->herolv(), output);
  }

  // optional int32 totalcp = 15;
  if (has_totalcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->totalcp(), output);
  }

  // optional bool ifAiRobot = 16;
  if (has_ifairobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->ifairobot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.FinishBattle.BattleUserData)
}

::google::protobuf::uint8* FinishBattle_BattleUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.FinishBattle.BattleUserData)
  // optional uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint64 heroguid = 2;
  if (has_heroguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->heroguid(), target);
  }

  // optional uint32 timeinsecond = 3;
  if (has_timeinsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeinsecond(), target);
  }

  // optional bool ifEnd = 4;
  if (has_ifend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ifend(), target);
  }

  // optional int32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->heroid(), target);
  }

  // optional int32 runepage = 6;
  if (has_runepage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->runepage(), target);
  }

  // optional uint32 deadtimes = 7;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deadtimes(), target);
  }

  // optional uint32 herokills = 8;
  if (has_herokills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->herokills(), target);
  }

  // optional int32 destorybuilding = 9;
  if (has_destorybuilding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->destorybuilding(), target);
  }

  // optional int64 diamondused = 10;
  if (has_diamondused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->diamondused(), target);
  }

  // optional int64 goldused = 11;
  if (has_goldused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->goldused(), target);
  }

  // optional int32 lasthitnum = 12;
  if (has_lasthitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lasthitnum(), target);
  }

  // optional int32 asskillnum = 13;
  if (has_asskillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->asskillnum(), target);
  }

  // optional int32 herolv = 14;
  if (has_herolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->herolv(), target);
  }

  // optional int32 totalcp = 15;
  if (has_totalcp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->totalcp(), target);
  }

  // optional bool ifAiRobot = 16;
  if (has_ifairobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->ifairobot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.FinishBattle.BattleUserData)
  return target;
}

int FinishBattle_BattleUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 heroguid = 2;
    if (has_heroguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->heroguid());
    }

    // optional uint32 timeinsecond = 3;
    if (has_timeinsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeinsecond());
    }

    // optional bool ifEnd = 4;
    if (has_ifend()) {
      total_size += 1 + 1;
    }

    // optional int32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

    // optional int32 runepage = 6;
    if (has_runepage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->runepage());
    }

    // optional uint32 deadtimes = 7;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadtimes());
    }

    // optional uint32 herokills = 8;
    if (has_herokills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokills());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 destorybuilding = 9;
    if (has_destorybuilding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destorybuilding());
    }

    // optional int64 diamondused = 10;
    if (has_diamondused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamondused());
    }

    // optional int64 goldused = 11;
    if (has_goldused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldused());
    }

    // optional int32 lasthitnum = 12;
    if (has_lasthitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasthitnum());
    }

    // optional int32 asskillnum = 13;
    if (has_asskillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asskillnum());
    }

    // optional int32 herolv = 14;
    if (has_herolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herolv());
    }

    // optional int32 totalcp = 15;
    if (has_totalcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcp());
    }

    // optional bool ifAiRobot = 16;
    if (has_ifairobot()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishBattle_BattleUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishBattle_BattleUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishBattle_BattleUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishBattle_BattleUserData::MergeFrom(const FinishBattle_BattleUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_heroguid()) {
      set_heroguid(from.heroguid());
    }
    if (from.has_timeinsecond()) {
      set_timeinsecond(from.timeinsecond());
    }
    if (from.has_ifend()) {
      set_ifend(from.ifend());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_runepage()) {
      set_runepage(from.runepage());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_herokills()) {
      set_herokills(from.herokills());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_destorybuilding()) {
      set_destorybuilding(from.destorybuilding());
    }
    if (from.has_diamondused()) {
      set_diamondused(from.diamondused());
    }
    if (from.has_goldused()) {
      set_goldused(from.goldused());
    }
    if (from.has_lasthitnum()) {
      set_lasthitnum(from.lasthitnum());
    }
    if (from.has_asskillnum()) {
      set_asskillnum(from.asskillnum());
    }
    if (from.has_herolv()) {
      set_herolv(from.herolv());
    }
    if (from.has_totalcp()) {
      set_totalcp(from.totalcp());
    }
    if (from.has_ifairobot()) {
      set_ifairobot(from.ifairobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishBattle_BattleUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishBattle_BattleUserData::CopyFrom(const FinishBattle_BattleUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishBattle_BattleUserData::IsInitialized() const {

  return true;
}

void FinishBattle_BattleUserData::Swap(FinishBattle_BattleUserData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(heroguid_, other->heroguid_);
    std::swap(timeinsecond_, other->timeinsecond_);
    std::swap(ifend_, other->ifend_);
    std::swap(heroid_, other->heroid_);
    std::swap(runepage_, other->runepage_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(herokills_, other->herokills_);
    std::swap(destorybuilding_, other->destorybuilding_);
    std::swap(diamondused_, other->diamondused_);
    std::swap(goldused_, other->goldused_);
    std::swap(lasthitnum_, other->lasthitnum_);
    std::swap(asskillnum_, other->asskillnum_);
    std::swap(herolv_, other->herolv_);
    std::swap(totalcp_, other->totalcp_);
    std::swap(ifairobot_, other->ifairobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishBattle_BattleUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishBattle_BattleUserData_descriptor_;
  metadata.reflection = FinishBattle_BattleUserData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FinishBattle::kMgsidFieldNumber;
const int FinishBattle::kBattleidFieldNumber;
const int FinishBattle::kWinGrpIDFieldNumber;
const int FinishBattle::kBattelUserDataListFieldNumber;
#endif  // !_MSC_VER

FinishBattle::FinishBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSToCS.FinishBattle)
}

void FinishBattle::InitAsDefaultInstance() {
}

FinishBattle::FinishBattle(const FinishBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSToCS.FinishBattle)
}

void FinishBattle::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 8310;
  battleid_ = GOOGLE_LONGLONG(0);
  wingrpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishBattle::~FinishBattle() {
  // @@protoc_insertion_point(destructor:SSToCS.FinishBattle)
  SharedDtor();
}

void FinishBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishBattle_descriptor_;
}

const FinishBattle& FinishBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SSToCS_2eproto();
  return *default_instance_;
}

FinishBattle* FinishBattle::default_instance_ = NULL;

FinishBattle* FinishBattle::New() const {
  return new FinishBattle;
}

void FinishBattle::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mgsid_ = 8310;
    battleid_ = GOOGLE_LONGLONG(0);
    wingrpid_ = 0;
  }
  batteluserdatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSToCS.FinishBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_FinishBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SSToCS::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::SSToCS::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional int64 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_winGrpID;
        break;
      }

      // optional int32 winGrpID = 3;
      case 3: {
        if (tag == 24) {
         parse_winGrpID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wingrpid_)));
          set_has_wingrpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_battelUserDataList;
        break;
      }

      // repeated .SSToCS.FinishBattle.BattleUserData battelUserDataList = 4;
      case 4: {
        if (tag == 34) {
         parse_battelUserDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batteluserdatalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_battelUserDataList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSToCS.FinishBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSToCS.FinishBattle)
  return false;
#undef DO_
}

void FinishBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSToCS.FinishBattle)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_FinishBattle];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional int64 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battleid(), output);
  }

  // optional int32 winGrpID = 3;
  if (has_wingrpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wingrpid(), output);
  }

  // repeated .SSToCS.FinishBattle.BattleUserData battelUserDataList = 4;
  for (int i = 0; i < this->batteluserdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->batteluserdatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSToCS.FinishBattle)
}

::google::protobuf::uint8* FinishBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSToCS.FinishBattle)
  // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_FinishBattle];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional int64 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battleid(), target);
  }

  // optional int32 winGrpID = 3;
  if (has_wingrpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wingrpid(), target);
  }

  // repeated .SSToCS.FinishBattle.BattleUserData battelUserDataList = 4;
  for (int i = 0; i < this->batteluserdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->batteluserdatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSToCS.FinishBattle)
  return target;
}

int FinishBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SSToCS.MsgID mgsid = 1 [default = eMsgToCSFromSS_FinishBattle];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional int64 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battleid());
    }

    // optional int32 winGrpID = 3;
    if (has_wingrpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wingrpid());
    }

  }
  // repeated .SSToCS.FinishBattle.BattleUserData battelUserDataList = 4;
  total_size += 1 * this->batteluserdatalist_size();
  for (int i = 0; i < this->batteluserdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batteluserdatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishBattle::MergeFrom(const FinishBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  batteluserdatalist_.MergeFrom(from.batteluserdatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_wingrpid()) {
      set_wingrpid(from.wingrpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishBattle::CopyFrom(const FinishBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishBattle::IsInitialized() const {

  return true;
}

void FinishBattle::Swap(FinishBattle* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(battleid_, other->battleid_);
    std::swap(wingrpid_, other->wingrpid_);
    batteluserdatalist_.Swap(&other->batteluserdatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishBattle_descriptor_;
  metadata.reflection = FinishBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSToCS

// @@protoc_insertion_point(global_scope)
