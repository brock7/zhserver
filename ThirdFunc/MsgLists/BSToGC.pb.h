// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BSToGC.proto

#ifndef PROTOBUF_BSToGC_2eproto__INCLUDED
#define PROTOBUF_BSToGC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace BSToGC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BSToGC_2eproto();
void protobuf_AssignDesc_BSToGC_2eproto();
void protobuf_ShutdownFile_BSToGC_2eproto();

class AskGateAddressRet;
class ClinetLoginCheckRet;

enum MsgID {
  eMsgToGCFromBS_AskGateAddressRet = 203,
  eMsgToGCFromBS_OneClinetLoginCheckRet = 204
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgToGCFromBS_AskGateAddressRet;
const MsgID MsgID_MAX = eMsgToGCFromBS_OneClinetLoginCheckRet;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class AskGateAddressRet : public ::google::protobuf::Message {
 public:
  AskGateAddressRet();
  virtual ~AskGateAddressRet();

  AskGateAddressRet(const AskGateAddressRet& from);

  inline AskGateAddressRet& operator=(const AskGateAddressRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskGateAddressRet& default_instance();

  void Swap(AskGateAddressRet* other);

  // implements Message ----------------------------------------------

  AskGateAddressRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskGateAddressRet& from);
  void MergeFrom(const AskGateAddressRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_AskGateAddressRet];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::BSToGC::MsgID mgsid() const;
  inline void set_mgsid(::BSToGC::MsgID value);

  // optional int32 gateclient = 2;
  inline bool has_gateclient() const;
  inline void clear_gateclient();
  static const int kGateclientFieldNumber = 2;
  inline ::google::protobuf::int32 gateclient() const;
  inline void set_gateclient(::google::protobuf::int32 value);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string user_name = 4;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional int32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:BSToGC.AskGateAddressRet)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_gateclient();
  inline void clear_has_gateclient();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::int32 gateclient_;
  ::std::string* token_;
  ::std::string* user_name_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_BSToGC_2eproto();
  friend void protobuf_AssignDesc_BSToGC_2eproto();
  friend void protobuf_ShutdownFile_BSToGC_2eproto();

  void InitAsDefaultInstance();
  static AskGateAddressRet* default_instance_;
};
// -------------------------------------------------------------------

class ClinetLoginCheckRet : public ::google::protobuf::Message {
 public:
  ClinetLoginCheckRet();
  virtual ~ClinetLoginCheckRet();

  ClinetLoginCheckRet(const ClinetLoginCheckRet& from);

  inline ClinetLoginCheckRet& operator=(const ClinetLoginCheckRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClinetLoginCheckRet& default_instance();

  void Swap(ClinetLoginCheckRet* other);

  // implements Message ----------------------------------------------

  ClinetLoginCheckRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClinetLoginCheckRet& from);
  void MergeFrom(const ClinetLoginCheckRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_OneClinetLoginCheckRet];
  inline bool has_mgsid() const;
  inline void clear_mgsid();
  static const int kMgsidFieldNumber = 1;
  inline ::BSToGC::MsgID mgsid() const;
  inline void set_mgsid(::BSToGC::MsgID value);

  // optional uint32 login_success = 2;
  inline bool has_login_success() const;
  inline void clear_login_success();
  static const int kLoginSuccessFieldNumber = 2;
  inline ::google::protobuf::uint32 login_success() const;
  inline void set_login_success(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BSToGC.ClinetLoginCheckRet)
 private:
  inline void set_has_mgsid();
  inline void clear_has_mgsid();
  inline void set_has_login_success();
  inline void clear_has_login_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mgsid_;
  ::google::protobuf::uint32 login_success_;
  friend void  protobuf_AddDesc_BSToGC_2eproto();
  friend void protobuf_AssignDesc_BSToGC_2eproto();
  friend void protobuf_ShutdownFile_BSToGC_2eproto();

  void InitAsDefaultInstance();
  static ClinetLoginCheckRet* default_instance_;
};
// ===================================================================


// ===================================================================

// AskGateAddressRet

// optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_AskGateAddressRet];
inline bool AskGateAddressRet::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskGateAddressRet::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskGateAddressRet::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskGateAddressRet::clear_mgsid() {
  mgsid_ = 203;
  clear_has_mgsid();
}
inline ::BSToGC::MsgID AskGateAddressRet::mgsid() const {
  // @@protoc_insertion_point(field_get:BSToGC.AskGateAddressRet.mgsid)
  return static_cast< ::BSToGC::MsgID >(mgsid_);
}
inline void AskGateAddressRet::set_mgsid(::BSToGC::MsgID value) {
  assert(::BSToGC::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:BSToGC.AskGateAddressRet.mgsid)
}

// optional int32 gateclient = 2;
inline bool AskGateAddressRet::has_gateclient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskGateAddressRet::set_has_gateclient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskGateAddressRet::clear_has_gateclient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskGateAddressRet::clear_gateclient() {
  gateclient_ = 0;
  clear_has_gateclient();
}
inline ::google::protobuf::int32 AskGateAddressRet::gateclient() const {
  // @@protoc_insertion_point(field_get:BSToGC.AskGateAddressRet.gateclient)
  return gateclient_;
}
inline void AskGateAddressRet::set_gateclient(::google::protobuf::int32 value) {
  set_has_gateclient();
  gateclient_ = value;
  // @@protoc_insertion_point(field_set:BSToGC.AskGateAddressRet.gateclient)
}

// optional string token = 3;
inline bool AskGateAddressRet::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskGateAddressRet::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskGateAddressRet::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskGateAddressRet::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AskGateAddressRet::token() const {
  // @@protoc_insertion_point(field_get:BSToGC.AskGateAddressRet.token)
  return *token_;
}
inline void AskGateAddressRet::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:BSToGC.AskGateAddressRet.token)
}
inline void AskGateAddressRet::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:BSToGC.AskGateAddressRet.token)
}
inline void AskGateAddressRet::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BSToGC.AskGateAddressRet.token)
}
inline ::std::string* AskGateAddressRet::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BSToGC.AskGateAddressRet.token)
  return token_;
}
inline ::std::string* AskGateAddressRet::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskGateAddressRet::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BSToGC.AskGateAddressRet.token)
}

// optional string user_name = 4;
inline bool AskGateAddressRet::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskGateAddressRet::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskGateAddressRet::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskGateAddressRet::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& AskGateAddressRet::user_name() const {
  // @@protoc_insertion_point(field_get:BSToGC.AskGateAddressRet.user_name)
  return *user_name_;
}
inline void AskGateAddressRet::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:BSToGC.AskGateAddressRet.user_name)
}
inline void AskGateAddressRet::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BSToGC.AskGateAddressRet.user_name)
}
inline void AskGateAddressRet::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BSToGC.AskGateAddressRet.user_name)
}
inline ::std::string* AskGateAddressRet::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BSToGC.AskGateAddressRet.user_name)
  return user_name_;
}
inline ::std::string* AskGateAddressRet::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskGateAddressRet::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BSToGC.AskGateAddressRet.user_name)
}

// optional int32 port = 5;
inline bool AskGateAddressRet::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AskGateAddressRet::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AskGateAddressRet::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AskGateAddressRet::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 AskGateAddressRet::port() const {
  // @@protoc_insertion_point(field_get:BSToGC.AskGateAddressRet.port)
  return port_;
}
inline void AskGateAddressRet::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:BSToGC.AskGateAddressRet.port)
}

// optional string ip = 6;
inline bool AskGateAddressRet::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AskGateAddressRet::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AskGateAddressRet::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AskGateAddressRet::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AskGateAddressRet::ip() const {
  // @@protoc_insertion_point(field_get:BSToGC.AskGateAddressRet.ip)
  return *ip_;
}
inline void AskGateAddressRet::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:BSToGC.AskGateAddressRet.ip)
}
inline void AskGateAddressRet::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:BSToGC.AskGateAddressRet.ip)
}
inline void AskGateAddressRet::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BSToGC.AskGateAddressRet.ip)
}
inline ::std::string* AskGateAddressRet::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BSToGC.AskGateAddressRet.ip)
  return ip_;
}
inline ::std::string* AskGateAddressRet::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AskGateAddressRet::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BSToGC.AskGateAddressRet.ip)
}

// -------------------------------------------------------------------

// ClinetLoginCheckRet

// optional .BSToGC.MsgID mgsid = 1 [default = eMsgToGCFromBS_OneClinetLoginCheckRet];
inline bool ClinetLoginCheckRet::has_mgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClinetLoginCheckRet::set_has_mgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClinetLoginCheckRet::clear_has_mgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClinetLoginCheckRet::clear_mgsid() {
  mgsid_ = 204;
  clear_has_mgsid();
}
inline ::BSToGC::MsgID ClinetLoginCheckRet::mgsid() const {
  // @@protoc_insertion_point(field_get:BSToGC.ClinetLoginCheckRet.mgsid)
  return static_cast< ::BSToGC::MsgID >(mgsid_);
}
inline void ClinetLoginCheckRet::set_mgsid(::BSToGC::MsgID value) {
  assert(::BSToGC::MsgID_IsValid(value));
  set_has_mgsid();
  mgsid_ = value;
  // @@protoc_insertion_point(field_set:BSToGC.ClinetLoginCheckRet.mgsid)
}

// optional uint32 login_success = 2;
inline bool ClinetLoginCheckRet::has_login_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClinetLoginCheckRet::set_has_login_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClinetLoginCheckRet::clear_has_login_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClinetLoginCheckRet::clear_login_success() {
  login_success_ = 0u;
  clear_has_login_success();
}
inline ::google::protobuf::uint32 ClinetLoginCheckRet::login_success() const {
  // @@protoc_insertion_point(field_get:BSToGC.ClinetLoginCheckRet.login_success)
  return login_success_;
}
inline void ClinetLoginCheckRet::set_login_success(::google::protobuf::uint32 value) {
  set_has_login_success();
  login_success_ = value;
  // @@protoc_insertion_point(field_set:BSToGC.ClinetLoginCheckRet.login_success)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BSToGC

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BSToGC::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BSToGC::MsgID>() {
  return ::BSToGC::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BSToGC_2eproto__INCLUDED
