// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToRC.proto

#ifndef PROTOBUF_CSToRC_2eproto__INCLUDED
#define PROTOBUF_CSToRC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CSToRC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSToRC_2eproto();
void protobuf_AssignDesc_CSToRC_2eproto();
void protobuf_ShutdownFile_CSToRC_2eproto();

class QueryCDkeyInfoResp;
class QueryCDkeyInfoResp_CDKey_Info;
class AddMailResp;
class AskRegistRsp;
class AllServerInfo;
class ServerUserInfo;
class NoticeInfo;
class AllNoticeInfo;
class AddNoticeResp;
class DeleteNoticeResp;

enum MsgID {
  eMsgCS2RC_Begin = 33500,
  eMsgCS2RC_AskRegistRsp = 33501,
  eMsgCS2RC_AllServerInfo = 33502,
  eMsgCS2RC_ServerUserInfo = 33503,
  eMsgCS2RC_AllNoticeInfo = 33504,
  eMsgCS2RC_AddNoticeResp = 33505,
  eMsgCS2RC_DeleteNoticeResp = 33506,
  eMsgCS2RC_AskAddOneMailResp = 33507,
  eMsgCS2RC_AskQueryCDkeyResp = 33508,
  eMsgCS2RC_End = 33999
};
bool MsgID_IsValid(int value);
const MsgID MsgID_MIN = eMsgCS2RC_Begin;
const MsgID MsgID_MAX = eMsgCS2RC_End;
const int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgID_descriptor();
inline const ::std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgID_descriptor(), value);
}
inline bool MsgID_Parse(
    const ::std::string& name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class QueryCDkeyInfoResp_CDKey_Info : public ::google::protobuf::Message {
 public:
  QueryCDkeyInfoResp_CDKey_Info();
  virtual ~QueryCDkeyInfoResp_CDKey_Info();

  QueryCDkeyInfoResp_CDKey_Info(const QueryCDkeyInfoResp_CDKey_Info& from);

  inline QueryCDkeyInfoResp_CDKey_Info& operator=(const QueryCDkeyInfoResp_CDKey_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryCDkeyInfoResp_CDKey_Info& default_instance();

  void Swap(QueryCDkeyInfoResp_CDKey_Info* other);

  // implements Message ----------------------------------------------

  QueryCDkeyInfoResp_CDKey_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryCDkeyInfoResp_CDKey_Info& from);
  void MergeFrom(const QueryCDkeyInfoResp_CDKey_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional int64 end_tiem = 4;
  inline bool has_end_tiem() const;
  inline void clear_end_tiem();
  static const int kEndTiemFieldNumber = 4;
  inline ::google::protobuf::int64 end_tiem() const;
  inline void set_end_tiem(::google::protobuf::int64 value);

  // optional int32 code_num = 5;
  inline bool has_code_num() const;
  inline void clear_code_num();
  static const int kCodeNumFieldNumber = 5;
  inline ::google::protobuf::int32 code_num() const;
  inline void set_code_num(::google::protobuf::int32 value);

  // optional int32 code_len = 6;
  inline bool has_code_len() const;
  inline void clear_code_len();
  static const int kCodeLenFieldNumber = 6;
  inline ::google::protobuf::int32 code_len() const;
  inline void set_code_len(::google::protobuf::int32 value);

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_end_tiem();
  inline void clear_has_end_tiem();
  inline void set_has_code_num();
  inline void clear_has_code_num();
  inline void set_has_code_len();
  inline void clear_has_code_len();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int64 end_tiem_;
  ::google::protobuf::int32 code_num_;
  ::google::protobuf::int32 code_len_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static QueryCDkeyInfoResp_CDKey_Info* default_instance_;
};
// -------------------------------------------------------------------

class QueryCDkeyInfoResp : public ::google::protobuf::Message {
 public:
  QueryCDkeyInfoResp();
  virtual ~QueryCDkeyInfoResp();

  QueryCDkeyInfoResp(const QueryCDkeyInfoResp& from);

  inline QueryCDkeyInfoResp& operator=(const QueryCDkeyInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryCDkeyInfoResp& default_instance();

  void Swap(QueryCDkeyInfoResp* other);

  // implements Message ----------------------------------------------

  QueryCDkeyInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryCDkeyInfoResp& from);
  void MergeFrom(const QueryCDkeyInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryCDkeyInfoResp_CDKey_Info CDKey_Info;

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::CSToRC::QueryCDkeyInfoResp_CDKey_Info& info(int index) const;
  inline ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* mutable_info(int index);
  inline ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToRC::QueryCDkeyInfoResp_CDKey_Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToRC::QueryCDkeyInfoResp_CDKey_Info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:CSToRC.QueryCDkeyInfoResp)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSToRC::QueryCDkeyInfoResp_CDKey_Info > info_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static QueryCDkeyInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class AddMailResp : public ::google::protobuf::Message {
 public:
  AddMailResp();
  virtual ~AddMailResp();

  AddMailResp(const AddMailResp& from);

  inline AddMailResp& operator=(const AddMailResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMailResp& default_instance();

  void Swap(AddMailResp* other);

  // implements Message ----------------------------------------------

  AddMailResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMailResp& from);
  void MergeFrom(const AddMailResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // optional bool rst = 2;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRstFieldNumber = 2;
  inline bool rst() const;
  inline void set_rst(bool value);

  // @@protoc_insertion_point(class_scope:CSToRC.AddMailResp)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rst();
  inline void clear_has_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  bool rst_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static AddMailResp* default_instance_;
};
// -------------------------------------------------------------------

class AskRegistRsp : public ::google::protobuf::Message {
 public:
  AskRegistRsp();
  virtual ~AskRegistRsp();

  AskRegistRsp(const AskRegistRsp& from);

  inline AskRegistRsp& operator=(const AskRegistRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskRegistRsp& default_instance();

  void Swap(AskRegistRsp* other);

  // implements Message ----------------------------------------------

  AskRegistRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskRegistRsp& from);
  void MergeFrom(const AskRegistRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // optional bool rst = 2;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRstFieldNumber = 2;
  inline bool rst() const;
  inline void set_rst(bool value);

  // @@protoc_insertion_point(class_scope:CSToRC.AskRegistRsp)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rst();
  inline void clear_has_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  bool rst_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static AskRegistRsp* default_instance_;
};
// -------------------------------------------------------------------

class AllServerInfo : public ::google::protobuf::Message {
 public:
  AllServerInfo();
  virtual ~AllServerInfo();

  AllServerInfo(const AllServerInfo& from);

  inline AllServerInfo& operator=(const AllServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllServerInfo& default_instance();

  void Swap(AllServerInfo* other);

  // implements Message ----------------------------------------------

  AllServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllServerInfo& from);
  void MergeFrom(const AllServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // optional bytes servername = 2;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 2;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const void* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // optional int32 roomUserNum = 3;
  inline bool has_roomusernum() const;
  inline void clear_roomusernum();
  static const int kRoomUserNumFieldNumber = 3;
  inline ::google::protobuf::int32 roomusernum() const;
  inline void set_roomusernum(::google::protobuf::int32 value);

  // optional int32 battleUserNum = 4;
  inline bool has_battleusernum() const;
  inline void clear_battleusernum();
  static const int kBattleUserNumFieldNumber = 4;
  inline ::google::protobuf::int32 battleusernum() const;
  inline void set_battleusernum(::google::protobuf::int32 value);

  // optional float loadFactory = 5;
  inline bool has_loadfactory() const;
  inline void clear_loadfactory();
  static const int kLoadFactoryFieldNumber = 5;
  inline float loadfactory() const;
  inline void set_loadfactory(float value);

  // optional int32 allUserNum = 6;
  inline bool has_allusernum() const;
  inline void clear_allusernum();
  static const int kAllUserNumFieldNumber = 6;
  inline ::google::protobuf::int32 allusernum() const;
  inline void set_allusernum(::google::protobuf::int32 value);

  // optional string curttime = 7;
  inline bool has_curttime() const;
  inline void clear_curttime();
  static const int kCurttimeFieldNumber = 7;
  inline const ::std::string& curttime() const;
  inline void set_curttime(const ::std::string& value);
  inline void set_curttime(const char* value);
  inline void set_curttime(const char* value, size_t size);
  inline ::std::string* mutable_curttime();
  inline ::std::string* release_curttime();
  inline void set_allocated_curttime(::std::string* curttime);

  // @@protoc_insertion_point(class_scope:CSToRC.AllServerInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_roomusernum();
  inline void clear_has_roomusernum();
  inline void set_has_battleusernum();
  inline void clear_has_battleusernum();
  inline void set_has_loadfactory();
  inline void clear_has_loadfactory();
  inline void set_has_allusernum();
  inline void clear_has_allusernum();
  inline void set_has_curttime();
  inline void clear_has_curttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servername_;
  int msgid_;
  ::google::protobuf::int32 roomusernum_;
  ::google::protobuf::int32 battleusernum_;
  float loadfactory_;
  ::std::string* curttime_;
  ::google::protobuf::int32 allusernum_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static AllServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerUserInfo : public ::google::protobuf::Message {
 public:
  ServerUserInfo();
  virtual ~ServerUserInfo();

  ServerUserInfo(const ServerUserInfo& from);

  inline ServerUserInfo& operator=(const ServerUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerUserInfo& default_instance();

  void Swap(ServerUserInfo* other);

  // implements Message ----------------------------------------------

  ServerUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerUserInfo& from);
  void MergeFrom(const ServerUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // optional int32 allUserNum = 2;
  inline bool has_allusernum() const;
  inline void clear_allusernum();
  static const int kAllUserNumFieldNumber = 2;
  inline ::google::protobuf::int32 allusernum() const;
  inline void set_allusernum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSToRC.ServerUserInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_allusernum();
  inline void clear_has_allusernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  ::google::protobuf::int32 allusernum_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static ServerUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class NoticeInfo : public ::google::protobuf::Message {
 public:
  NoticeInfo();
  virtual ~NoticeInfo();

  NoticeInfo(const NoticeInfo& from);

  inline NoticeInfo& operator=(const NoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeInfo& default_instance();

  void Swap(NoticeInfo* other);

  // implements Message ----------------------------------------------

  NoticeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeInfo& from);
  void MergeFrom(const NoticeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:CSToRC.NoticeInfo)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* notice_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static NoticeInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllNoticeInfo : public ::google::protobuf::Message {
 public:
  AllNoticeInfo();
  virtual ~AllNoticeInfo();

  AllNoticeInfo(const AllNoticeInfo& from);

  inline AllNoticeInfo& operator=(const AllNoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllNoticeInfo& default_instance();

  void Swap(AllNoticeInfo* other);

  // implements Message ----------------------------------------------

  AllNoticeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllNoticeInfo& from);
  void MergeFrom(const AllNoticeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // repeated .CSToRC.NoticeInfo notices = 2;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 2;
  inline const ::CSToRC::NoticeInfo& notices(int index) const;
  inline ::CSToRC::NoticeInfo* mutable_notices(int index);
  inline ::CSToRC::NoticeInfo* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::CSToRC::NoticeInfo >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::CSToRC::NoticeInfo >*
      mutable_notices();

  // @@protoc_insertion_point(class_scope:CSToRC.AllNoticeInfo)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CSToRC::NoticeInfo > notices_;
  int msgid_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static AllNoticeInfo* default_instance_;
};
// -------------------------------------------------------------------

class AddNoticeResp : public ::google::protobuf::Message {
 public:
  AddNoticeResp();
  virtual ~AddNoticeResp();

  AddNoticeResp(const AddNoticeResp& from);

  inline AddNoticeResp& operator=(const AddNoticeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNoticeResp& default_instance();

  void Swap(AddNoticeResp* other);

  // implements Message ----------------------------------------------

  AddNoticeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddNoticeResp& from);
  void MergeFrom(const AddNoticeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // optional bool rst = 2;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRstFieldNumber = 2;
  inline bool rst() const;
  inline void set_rst(bool value);

  // @@protoc_insertion_point(class_scope:CSToRC.AddNoticeResp)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rst();
  inline void clear_has_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  bool rst_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static AddNoticeResp* default_instance_;
};
// -------------------------------------------------------------------

class DeleteNoticeResp : public ::google::protobuf::Message {
 public:
  DeleteNoticeResp();
  virtual ~DeleteNoticeResp();

  DeleteNoticeResp(const DeleteNoticeResp& from);

  inline DeleteNoticeResp& operator=(const DeleteNoticeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNoticeResp& default_instance();

  void Swap(DeleteNoticeResp* other);

  // implements Message ----------------------------------------------

  DeleteNoticeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteNoticeResp& from);
  void MergeFrom(const DeleteNoticeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::CSToRC::MsgID msgid() const;
  inline void set_msgid(::CSToRC::MsgID value);

  // optional bool rst = 2;
  inline bool has_rst() const;
  inline void clear_rst();
  static const int kRstFieldNumber = 2;
  inline bool rst() const;
  inline void set_rst(bool value);

  // @@protoc_insertion_point(class_scope:CSToRC.DeleteNoticeResp)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_rst();
  inline void clear_has_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msgid_;
  bool rst_;
  friend void  protobuf_AddDesc_CSToRC_2eproto();
  friend void protobuf_AssignDesc_CSToRC_2eproto();
  friend void protobuf_ShutdownFile_CSToRC_2eproto();

  void InitAsDefaultInstance();
  static DeleteNoticeResp* default_instance_;
};
// ===================================================================


// ===================================================================

// QueryCDkeyInfoResp_CDKey_Info

// optional int32 id = 1;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 QueryCDkeyInfoResp_CDKey_Info::id() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.id)
  return id_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.id)
}

// optional string title = 2;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& QueryCDkeyInfoResp_CDKey_Info::title() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
  return *title_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
}
inline ::std::string* QueryCDkeyInfoResp_CDKey_Info::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
  return title_;
}
inline ::std::string* QueryCDkeyInfoResp_CDKey_Info::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
}

// optional int32 platform = 3;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 QueryCDkeyInfoResp_CDKey_Info::platform() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.platform)
  return platform_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.platform)
}

// optional int64 end_tiem = 4;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_end_tiem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_end_tiem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_end_tiem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_end_tiem() {
  end_tiem_ = GOOGLE_LONGLONG(0);
  clear_has_end_tiem();
}
inline ::google::protobuf::int64 QueryCDkeyInfoResp_CDKey_Info::end_tiem() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.end_tiem)
  return end_tiem_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_end_tiem(::google::protobuf::int64 value) {
  set_has_end_tiem();
  end_tiem_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.end_tiem)
}

// optional int32 code_num = 5;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_code_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_code_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_code_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_code_num() {
  code_num_ = 0;
  clear_has_code_num();
}
inline ::google::protobuf::int32 QueryCDkeyInfoResp_CDKey_Info::code_num() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_num)
  return code_num_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_code_num(::google::protobuf::int32 value) {
  set_has_code_num();
  code_num_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_num)
}

// optional int32 code_len = 6;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_code_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_code_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_code_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_code_len() {
  code_len_ = 0;
  clear_has_code_len();
}
inline ::google::protobuf::int32 QueryCDkeyInfoResp_CDKey_Info::code_len() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_len)
  return code_len_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_code_len(::google::protobuf::int32 value) {
  set_has_code_len();
  code_len_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_len)
}

// optional int32 type = 7;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 QueryCDkeyInfoResp_CDKey_Info::type() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.type)
  return type_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.type)
}

// -------------------------------------------------------------------

// QueryCDkeyInfoResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
inline bool QueryCDkeyInfoResp::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryCDkeyInfoResp::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryCDkeyInfoResp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryCDkeyInfoResp::clear_msgid() {
  msgid_ = 33508;
  clear_has_msgid();
}
inline ::CSToRC::MsgID QueryCDkeyInfoResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void QueryCDkeyInfoResp::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.msgid)
}

// repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
inline int QueryCDkeyInfoResp::info_size() const {
  return info_.size();
}
inline void QueryCDkeyInfoResp::clear_info() {
  info_.Clear();
}
inline const ::CSToRC::QueryCDkeyInfoResp_CDKey_Info& QueryCDkeyInfoResp::info(int index) const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.info)
  return info_.Get(index);
}
inline ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* QueryCDkeyInfoResp::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:CSToRC.QueryCDkeyInfoResp.info)
  return info_.Mutable(index);
}
inline ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* QueryCDkeyInfoResp::add_info() {
  // @@protoc_insertion_point(field_add:CSToRC.QueryCDkeyInfoResp.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToRC::QueryCDkeyInfoResp_CDKey_Info >&
QueryCDkeyInfoResp::info() const {
  // @@protoc_insertion_point(field_list:CSToRC.QueryCDkeyInfoResp.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToRC::QueryCDkeyInfoResp_CDKey_Info >*
QueryCDkeyInfoResp::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:CSToRC.QueryCDkeyInfoResp.info)
  return &info_;
}

// -------------------------------------------------------------------

// AddMailResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
inline bool AddMailResp::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMailResp::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMailResp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMailResp::clear_msgid() {
  msgid_ = 33507;
  clear_has_msgid();
}
inline ::CSToRC::MsgID AddMailResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddMailResp.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void AddMailResp::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AddMailResp.msgid)
}

// optional bool rst = 2;
inline bool AddMailResp::has_rst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMailResp::set_has_rst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMailResp::clear_has_rst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMailResp::clear_rst() {
  rst_ = false;
  clear_has_rst();
}
inline bool AddMailResp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddMailResp.rst)
  return rst_;
}
inline void AddMailResp::set_rst(bool value) {
  set_has_rst();
  rst_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AddMailResp.rst)
}

// -------------------------------------------------------------------

// AskRegistRsp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
inline bool AskRegistRsp::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskRegistRsp::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskRegistRsp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskRegistRsp::clear_msgid() {
  msgid_ = 33501;
  clear_has_msgid();
}
inline ::CSToRC::MsgID AskRegistRsp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AskRegistRsp.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void AskRegistRsp::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AskRegistRsp.msgid)
}

// optional bool rst = 2;
inline bool AskRegistRsp::has_rst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskRegistRsp::set_has_rst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskRegistRsp::clear_has_rst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskRegistRsp::clear_rst() {
  rst_ = false;
  clear_has_rst();
}
inline bool AskRegistRsp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.AskRegistRsp.rst)
  return rst_;
}
inline void AskRegistRsp::set_rst(bool value) {
  set_has_rst();
  rst_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AskRegistRsp.rst)
}

// -------------------------------------------------------------------

// AllServerInfo

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
inline bool AllServerInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllServerInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllServerInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllServerInfo::clear_msgid() {
  msgid_ = 33502;
  clear_has_msgid();
}
inline ::CSToRC::MsgID AllServerInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void AllServerInfo::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.msgid)
}

// optional bytes servername = 2;
inline bool AllServerInfo::has_servername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllServerInfo::set_has_servername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllServerInfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllServerInfo::clear_servername() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& AllServerInfo::servername() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.servername)
  return *servername_;
}
inline void AllServerInfo::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.servername)
}
inline void AllServerInfo::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToRC.AllServerInfo.servername)
}
inline void AllServerInfo::set_servername(const void* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToRC.AllServerInfo.servername)
}
inline ::std::string* AllServerInfo::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToRC.AllServerInfo.servername)
  return servername_;
}
inline ::std::string* AllServerInfo::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllServerInfo::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToRC.AllServerInfo.servername)
}

// optional int32 roomUserNum = 3;
inline bool AllServerInfo::has_roomusernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllServerInfo::set_has_roomusernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllServerInfo::clear_has_roomusernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllServerInfo::clear_roomusernum() {
  roomusernum_ = 0;
  clear_has_roomusernum();
}
inline ::google::protobuf::int32 AllServerInfo::roomusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.roomUserNum)
  return roomusernum_;
}
inline void AllServerInfo::set_roomusernum(::google::protobuf::int32 value) {
  set_has_roomusernum();
  roomusernum_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.roomUserNum)
}

// optional int32 battleUserNum = 4;
inline bool AllServerInfo::has_battleusernum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllServerInfo::set_has_battleusernum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllServerInfo::clear_has_battleusernum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllServerInfo::clear_battleusernum() {
  battleusernum_ = 0;
  clear_has_battleusernum();
}
inline ::google::protobuf::int32 AllServerInfo::battleusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.battleUserNum)
  return battleusernum_;
}
inline void AllServerInfo::set_battleusernum(::google::protobuf::int32 value) {
  set_has_battleusernum();
  battleusernum_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.battleUserNum)
}

// optional float loadFactory = 5;
inline bool AllServerInfo::has_loadfactory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllServerInfo::set_has_loadfactory() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllServerInfo::clear_has_loadfactory() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllServerInfo::clear_loadfactory() {
  loadfactory_ = 0;
  clear_has_loadfactory();
}
inline float AllServerInfo::loadfactory() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.loadFactory)
  return loadfactory_;
}
inline void AllServerInfo::set_loadfactory(float value) {
  set_has_loadfactory();
  loadfactory_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.loadFactory)
}

// optional int32 allUserNum = 6;
inline bool AllServerInfo::has_allusernum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllServerInfo::set_has_allusernum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllServerInfo::clear_has_allusernum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllServerInfo::clear_allusernum() {
  allusernum_ = 0;
  clear_has_allusernum();
}
inline ::google::protobuf::int32 AllServerInfo::allusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.allUserNum)
  return allusernum_;
}
inline void AllServerInfo::set_allusernum(::google::protobuf::int32 value) {
  set_has_allusernum();
  allusernum_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.allUserNum)
}

// optional string curttime = 7;
inline bool AllServerInfo::has_curttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllServerInfo::set_has_curttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllServerInfo::clear_has_curttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllServerInfo::clear_curttime() {
  if (curttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curttime_->clear();
  }
  clear_has_curttime();
}
inline const ::std::string& AllServerInfo::curttime() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.curttime)
  return *curttime_;
}
inline void AllServerInfo::set_curttime(const ::std::string& value) {
  set_has_curttime();
  if (curttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curttime_ = new ::std::string;
  }
  curttime_->assign(value);
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.curttime)
}
inline void AllServerInfo::set_curttime(const char* value) {
  set_has_curttime();
  if (curttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curttime_ = new ::std::string;
  }
  curttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToRC.AllServerInfo.curttime)
}
inline void AllServerInfo::set_curttime(const char* value, size_t size) {
  set_has_curttime();
  if (curttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curttime_ = new ::std::string;
  }
  curttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToRC.AllServerInfo.curttime)
}
inline ::std::string* AllServerInfo::mutable_curttime() {
  set_has_curttime();
  if (curttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToRC.AllServerInfo.curttime)
  return curttime_;
}
inline ::std::string* AllServerInfo::release_curttime() {
  clear_has_curttime();
  if (curttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curttime_;
    curttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllServerInfo::set_allocated_curttime(::std::string* curttime) {
  if (curttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curttime_;
  }
  if (curttime) {
    set_has_curttime();
    curttime_ = curttime;
  } else {
    clear_has_curttime();
    curttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToRC.AllServerInfo.curttime)
}

// -------------------------------------------------------------------

// ServerUserInfo

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
inline bool ServerUserInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerUserInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerUserInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerUserInfo::clear_msgid() {
  msgid_ = 33503;
  clear_has_msgid();
}
inline ::CSToRC::MsgID ServerUserInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.ServerUserInfo.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void ServerUserInfo::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.ServerUserInfo.msgid)
}

// optional int32 allUserNum = 2;
inline bool ServerUserInfo::has_allusernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerUserInfo::set_has_allusernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerUserInfo::clear_has_allusernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerUserInfo::clear_allusernum() {
  allusernum_ = 0;
  clear_has_allusernum();
}
inline ::google::protobuf::int32 ServerUserInfo::allusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.ServerUserInfo.allUserNum)
  return allusernum_;
}
inline void ServerUserInfo::set_allusernum(::google::protobuf::int32 value) {
  set_has_allusernum();
  allusernum_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.ServerUserInfo.allUserNum)
}

// -------------------------------------------------------------------

// NoticeInfo

// optional bytes notice = 1;
inline bool NoticeInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& NoticeInfo::notice() const {
  // @@protoc_insertion_point(field_get:CSToRC.NoticeInfo.notice)
  return *notice_;
}
inline void NoticeInfo::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:CSToRC.NoticeInfo.notice)
}
inline void NoticeInfo::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:CSToRC.NoticeInfo.notice)
}
inline void NoticeInfo::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSToRC.NoticeInfo.notice)
}
inline ::std::string* NoticeInfo::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CSToRC.NoticeInfo.notice)
  return notice_;
}
inline ::std::string* NoticeInfo::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NoticeInfo::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CSToRC.NoticeInfo.notice)
}

// -------------------------------------------------------------------

// AllNoticeInfo

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
inline bool AllNoticeInfo::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllNoticeInfo::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllNoticeInfo::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllNoticeInfo::clear_msgid() {
  msgid_ = 33504;
  clear_has_msgid();
}
inline ::CSToRC::MsgID AllNoticeInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllNoticeInfo.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void AllNoticeInfo::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AllNoticeInfo.msgid)
}

// repeated .CSToRC.NoticeInfo notices = 2;
inline int AllNoticeInfo::notices_size() const {
  return notices_.size();
}
inline void AllNoticeInfo::clear_notices() {
  notices_.Clear();
}
inline const ::CSToRC::NoticeInfo& AllNoticeInfo::notices(int index) const {
  // @@protoc_insertion_point(field_get:CSToRC.AllNoticeInfo.notices)
  return notices_.Get(index);
}
inline ::CSToRC::NoticeInfo* AllNoticeInfo::mutable_notices(int index) {
  // @@protoc_insertion_point(field_mutable:CSToRC.AllNoticeInfo.notices)
  return notices_.Mutable(index);
}
inline ::CSToRC::NoticeInfo* AllNoticeInfo::add_notices() {
  // @@protoc_insertion_point(field_add:CSToRC.AllNoticeInfo.notices)
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CSToRC::NoticeInfo >&
AllNoticeInfo::notices() const {
  // @@protoc_insertion_point(field_list:CSToRC.AllNoticeInfo.notices)
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::CSToRC::NoticeInfo >*
AllNoticeInfo::mutable_notices() {
  // @@protoc_insertion_point(field_mutable_list:CSToRC.AllNoticeInfo.notices)
  return &notices_;
}

// -------------------------------------------------------------------

// AddNoticeResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
inline bool AddNoticeResp::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddNoticeResp::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddNoticeResp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddNoticeResp::clear_msgid() {
  msgid_ = 33505;
  clear_has_msgid();
}
inline ::CSToRC::MsgID AddNoticeResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddNoticeResp.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void AddNoticeResp::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AddNoticeResp.msgid)
}

// optional bool rst = 2;
inline bool AddNoticeResp::has_rst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddNoticeResp::set_has_rst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddNoticeResp::clear_has_rst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddNoticeResp::clear_rst() {
  rst_ = false;
  clear_has_rst();
}
inline bool AddNoticeResp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddNoticeResp.rst)
  return rst_;
}
inline void AddNoticeResp::set_rst(bool value) {
  set_has_rst();
  rst_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.AddNoticeResp.rst)
}

// -------------------------------------------------------------------

// DeleteNoticeResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
inline bool DeleteNoticeResp::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteNoticeResp::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteNoticeResp::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteNoticeResp::clear_msgid() {
  msgid_ = 33506;
  clear_has_msgid();
}
inline ::CSToRC::MsgID DeleteNoticeResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.DeleteNoticeResp.msgid)
  return static_cast< ::CSToRC::MsgID >(msgid_);
}
inline void DeleteNoticeResp::set_msgid(::CSToRC::MsgID value) {
  assert(::CSToRC::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.DeleteNoticeResp.msgid)
}

// optional bool rst = 2;
inline bool DeleteNoticeResp::has_rst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteNoticeResp::set_has_rst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteNoticeResp::clear_has_rst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteNoticeResp::clear_rst() {
  rst_ = false;
  clear_has_rst();
}
inline bool DeleteNoticeResp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.DeleteNoticeResp.rst)
  return rst_;
}
inline void DeleteNoticeResp::set_rst(bool value) {
  set_has_rst();
  rst_ = value;
  // @@protoc_insertion_point(field_set:CSToRC.DeleteNoticeResp.rst)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSToRC

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CSToRC::MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSToRC::MsgID>() {
  return ::CSToRC::MsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSToRC_2eproto__INCLUDED
