// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToGC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GSToGC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GSToGC {

namespace {

const ::google::protobuf::Descriptor* TaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateAllTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateAllTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateAllDailyTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateAllDailyTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAddOneTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAddOneTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUpdateOneTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUpdateOneTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyDelOneTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyDelOneTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRewardsOneTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRewardsOneTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMailRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMailRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyIsOnSS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyIsOnSS_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOtherItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOtherItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOtherItemInfo_OtherItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOtherItemInfo_OtherItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoinRuneRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoinRuneRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnloadRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnloadRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideCSStepInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideCSStepInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideAward_awardtype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideAward_awardtype_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideAward_dtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuideKillsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideKillsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUserLvInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUserLvInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyNewHeaderid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyNewHeaderid_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOneMatchNeedOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOneMatchNeedOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyNewNickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyNewNickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunesSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunesSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunesBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunesBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRunesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRunesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRemoveCommodity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRemoveCommodity_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGetNewCommodity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGetNewCommodity_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMatchTeamBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMatchTeamBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMatchTeamPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMatchTeamPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMatchTeamSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMatchTeamSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMatchInviteJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMatchInviteJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHerosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHerosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHerosInfo_heropanelinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHerosInfo_heropanelinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHerosInfo_heropanelinfo_goodsmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHerosInfo_heropanelinfo_goodsmsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGoodsExpired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGoodsExpired_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShortMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShortMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelAndSortMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelAndSortMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsCfgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsCfgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsCfgInfo_Consume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsCfgInfo_Consume_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GoodsCfgInfo_CfgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GoodsBuyCfgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsBuyCfgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroAssist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroAssist_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleMatcherCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleMatcherCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSpanTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSpanTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleDelayTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleDelayTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBaseUpLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseUpLv_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecondGuideTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecondGuideTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecondGuideTask_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecondGuideTask_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTips_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUserReturnBattleRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUserReturnBattleRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBattleHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBattleHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBattleHeroInfo_HeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBattleHeroInfo_HeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBattleHeroInfo_BaseGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBattleHeroInfo_BaseGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideLastStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideLastStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUserCLDays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUserCLDays_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameNotice_Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNotice_Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideSteps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideSteps_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyQueryNickNameRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyQueryNickNameRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyQueryNickNameRet_QueryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyQueryNickNameRet_QueryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SNSInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SNSInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUserSNSList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUserSNSList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBattleManagerChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBattleManagerChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBeAddFriendMs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBeAddFriendMs_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMsgFromUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMsgFromUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyUserSNSListChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyUserSNSListChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBeInvitedToBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBeInvitedToBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAFPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAFPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAFPData_FPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAFPData_FPInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyAFPData_EnumFpType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySystemAnnounce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySystemAnnounce_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetClash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetClash_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningToSelectHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningToSelectHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelLeading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelLeading_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCSHeroList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCSHeroList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCSHeroList_HeroListCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCSHeroList_HeroListCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSeatPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSeatPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSeatPosInfo_PosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSeatPosInfo_PosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurBattleChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurBattleChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dir_reflection_ = NULL;
const ::google::protobuf::Descriptor* GOAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GOAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* GOAppear_AppearInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GOAppear_AppearInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisappearInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisappearInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreeState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunningState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunningState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareSkillState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareSkillState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleasingSkillState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleasingSkillState_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsingSkillState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsingSkillState_reflection_ = NULL;
const ::google::protobuf::Descriptor* LastingSkillState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastingSkillState_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGoodsInfo_GoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGoodsInfo_GoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleLoadingState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleLoadingState_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatInRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillHitTar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillHitTar_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TryToChooseHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TryToChooseHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyChooseHeroTimeEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyChooseHeroTimeEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillEntityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEntityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHPInfo_HPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHPInfo_HPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMPInfo_MPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMPInfo_MPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Exp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Exp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbsorbBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbsorbBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbsorbRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbsorbRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelAbsorb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelAbsorb_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroKills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroKills_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurDeadTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurDeadTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurAtkSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurAtkSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurAtkSpeed_SpeedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurAtkSpeed_SpeedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuryVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuryVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuryState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuryState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHeroReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHeroReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* RebornTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RebornTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RebornSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RebornSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonCPChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonCPChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBatteleRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBatteleRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBatteleRes_ResInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBatteleRes_ResInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBattelePersonalRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBattelePersonalRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastBuildingDestory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastBuildingDestory_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroMoveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroMoveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayFinishVedio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayFinishVedio_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveBattleSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveBattleSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* BornSoler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BornSoler_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AltarBSIco_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AltarBSIco_reflection_ = NULL;
const ::google::protobuf::Descriptor* GOReleaseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GOReleaseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GOSkillCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GOSkillCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmitSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmitSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyEmitEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyEmitEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitTar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitTar_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeEffectEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeEffectEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummonEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummonEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySummonLifeTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySummonLifeTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelStartForceMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelStartForceMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelStartForceMoveStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelStartForceMoveStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelStartForceMoveTeleport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelStartForceMoveTeleport_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelPurification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelPurification_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelStartLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelStartLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelStopLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelStopLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPassitiveSkillRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPassitiveSkillRelease_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPassitiveSkillLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPassitiveSkillLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPassitiveSkillUnLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPassitiveSkillUnLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillModelEmitTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillModelEmitTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBornObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBornObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyReconnectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyReconnectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyReconnectInfo_ReconnectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyReconnectInfo_ReconnectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOBReturnBattleRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOBReturnBattleRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOBAppear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOBAppear_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyKillNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyKillNPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAltarBSIco_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAltarBSIco_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySkillUpLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySkillUpLv_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBlastHurt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBlastHurt_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGameObjectReliveState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGameObjectReliveState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCurGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCurGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCurDiamond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCurDiamond_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetloginRewardSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetloginRewardSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetloginReward_Skin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetloginReward_Skin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetloginReward_Rune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetloginReward_Rune_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetloginReward_Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetloginReward_Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanInviteFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanInviteFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanInviteFriends_Friends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanInviteFriends_Friends_reflection_ = NULL;
const ::google::protobuf::Descriptor* LastHitNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastHitNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskRoomListRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskRoomListRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailCurtState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HPMPChangeReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GSToGC_2eproto() {
  protobuf_AddDesc_GSToGC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GSToGC.proto");
  GOOGLE_CHECK(file != NULL);
  TaskData_descriptor_ = file->message_type(0);
  static const int TaskData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, task_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, task_curcount_),
  };
  TaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskData_descriptor_,
      TaskData::default_instance_,
      TaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskData));
  NotifyUpdateAllTask_descriptor_ = file->message_type(1);
  static const int NotifyUpdateAllTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllTask, tasklist_),
  };
  NotifyUpdateAllTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateAllTask_descriptor_,
      NotifyUpdateAllTask::default_instance_,
      NotifyUpdateAllTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateAllTask));
  NotifyUpdateAllDailyTask_descriptor_ = file->message_type(2);
  static const int NotifyUpdateAllDailyTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllDailyTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllDailyTask, tasklist_),
  };
  NotifyUpdateAllDailyTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateAllDailyTask_descriptor_,
      NotifyUpdateAllDailyTask::default_instance_,
      NotifyUpdateAllDailyTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllDailyTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateAllDailyTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateAllDailyTask));
  NotifyAddOneTask_descriptor_ = file->message_type(3);
  static const int NotifyAddOneTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddOneTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddOneTask, onetask_),
  };
  NotifyAddOneTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAddOneTask_descriptor_,
      NotifyAddOneTask::default_instance_,
      NotifyAddOneTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddOneTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAddOneTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAddOneTask));
  NotifyUpdateOneTask_descriptor_ = file->message_type(4);
  static const int NotifyUpdateOneTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateOneTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateOneTask, onetask_),
  };
  NotifyUpdateOneTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUpdateOneTask_descriptor_,
      NotifyUpdateOneTask::default_instance_,
      NotifyUpdateOneTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateOneTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUpdateOneTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUpdateOneTask));
  NotifyDelOneTask_descriptor_ = file->message_type(5);
  static const int NotifyDelOneTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDelOneTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDelOneTask, task_guid_),
  };
  NotifyDelOneTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyDelOneTask_descriptor_,
      NotifyDelOneTask::default_instance_,
      NotifyDelOneTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDelOneTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyDelOneTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyDelOneTask));
  NotifyRewardsOneTask_descriptor_ = file->message_type(6);
  static const int NotifyRewardsOneTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRewardsOneTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRewardsOneTask, task_guid_),
  };
  NotifyRewardsOneTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRewardsOneTask_descriptor_,
      NotifyRewardsOneTask::default_instance_,
      NotifyRewardsOneTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRewardsOneTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRewardsOneTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRewardsOneTask));
  NotifyMailRet_descriptor_ = file->message_type(7);
  static const int NotifyMailRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailRet, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailRet, errcode_),
  };
  NotifyMailRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMailRet_descriptor_,
      NotifyMailRet::default_instance_,
      NotifyMailRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMailRet));
  NotifyIsOnSS_descriptor_ = file->message_type(8);
  static const int NotifyIsOnSS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyIsOnSS, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyIsOnSS, ssid_),
  };
  NotifyIsOnSS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyIsOnSS_descriptor_,
      NotifyIsOnSS::default_instance_,
      NotifyIsOnSS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyIsOnSS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyIsOnSS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyIsOnSS));
  NotifyOtherItemInfo_descriptor_ = file->message_type(9);
  static const int NotifyOtherItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo, item_),
  };
  NotifyOtherItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOtherItemInfo_descriptor_,
      NotifyOtherItemInfo::default_instance_,
      NotifyOtherItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOtherItemInfo));
  NotifyOtherItemInfo_OtherItem_descriptor_ = NotifyOtherItemInfo_descriptor_->nested_type(0);
  static const int NotifyOtherItemInfo_OtherItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo_OtherItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo_OtherItem, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo_OtherItem, expired_time_),
  };
  NotifyOtherItemInfo_OtherItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOtherItemInfo_OtherItem_descriptor_,
      NotifyOtherItemInfo_OtherItem::default_instance_,
      NotifyOtherItemInfo_OtherItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo_OtherItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOtherItemInfo_OtherItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOtherItemInfo_OtherItem));
  RecoinRuneRet_descriptor_ = file->message_type(10);
  static const int RecoinRuneRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoinRuneRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoinRuneRet, rune_id_),
  };
  RecoinRuneRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoinRuneRet_descriptor_,
      RecoinRuneRet::default_instance_,
      RecoinRuneRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoinRuneRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoinRuneRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoinRuneRet));
  UnloadRune_descriptor_ = file->message_type(11);
  static const int UnloadRune_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRune, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRune, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRune, pos_),
  };
  UnloadRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnloadRune_descriptor_,
      UnloadRune::default_instance_,
      UnloadRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnloadRune));
  GuideCSStepInfo_descriptor_ = file->message_type(12);
  static const int GuideCSStepInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepInfo, allcomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepInfo, taskid_),
  };
  GuideCSStepInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideCSStepInfo_descriptor_,
      GuideCSStepInfo::default_instance_,
      GuideCSStepInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCSStepInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideCSStepInfo));
  GuideAward_descriptor_ = file->message_type(13);
  static const int GuideAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward, awardlist_),
  };
  GuideAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideAward_descriptor_,
      GuideAward::default_instance_,
      GuideAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideAward));
  GuideAward_awardtype_descriptor_ = GuideAward_descriptor_->nested_type(0);
  static const int GuideAward_awardtype_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward_awardtype, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward_awardtype, idxn_),
  };
  GuideAward_awardtype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideAward_awardtype_descriptor_,
      GuideAward_awardtype::default_instance_,
      GuideAward_awardtype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward_awardtype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideAward_awardtype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideAward_awardtype));
  GuideAward_dtype_descriptor_ = GuideAward_descriptor_->enum_type(0);
  GuideKillsInfo_descriptor_ = file->message_type(14);
  static const int GuideKillsInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideKillsInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideKillsInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideKillsInfo, npctype_),
  };
  GuideKillsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideKillsInfo_descriptor_,
      GuideKillsInfo::default_instance_,
      GuideKillsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideKillsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideKillsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideKillsInfo));
  NotifyUserLvInfo_descriptor_ = file->message_type(15);
  static const int NotifyUserLvInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserLvInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserLvInfo, curlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserLvInfo, curexp_),
  };
  NotifyUserLvInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUserLvInfo_descriptor_,
      NotifyUserLvInfo::default_instance_,
      NotifyUserLvInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserLvInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserLvInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUserLvInfo));
  NotifyNewHeaderid_descriptor_ = file->message_type(16);
  static const int NotifyNewHeaderid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewHeaderid, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewHeaderid, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewHeaderid, newheaderid_),
  };
  NotifyNewHeaderid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyNewHeaderid_descriptor_,
      NotifyNewHeaderid::default_instance_,
      NotifyNewHeaderid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewHeaderid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewHeaderid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyNewHeaderid));
  NotifyOneMatchNeedOne_descriptor_ = file->message_type(17);
  static const int NotifyOneMatchNeedOne_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOne, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOne, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOne, fightid_),
  };
  NotifyOneMatchNeedOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOneMatchNeedOne_descriptor_,
      NotifyOneMatchNeedOne::default_instance_,
      NotifyOneMatchNeedOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOneMatchNeedOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOneMatchNeedOne));
  NotifyNewNickname_descriptor_ = file->message_type(18);
  static const int NotifyNewNickname_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewNickname, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewNickname, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewNickname, newnickname_),
  };
  NotifyNewNickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyNewNickname_descriptor_,
      NotifyNewNickname::default_instance_,
      NotifyNewNickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewNickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewNickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyNewNickname));
  RunesSlot_descriptor_ = file->message_type(19);
  static const int RunesSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesSlot, slotpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesSlot, runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesSlot, page_),
  };
  RunesSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunesSlot_descriptor_,
      RunesSlot::default_instance_,
      RunesSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunesSlot));
  RunesBagInfo_descriptor_ = file->message_type(20);
  static const int RunesBagInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesBagInfo, runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesBagInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesBagInfo, gottime_),
  };
  RunesBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunesBagInfo_descriptor_,
      RunesBagInfo::default_instance_,
      RunesBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunesBagInfo));
  NotifyRunesList_descriptor_ = file->message_type(21);
  static const int NotifyRunesList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRunesList, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRunesList, runesbaginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRunesList, runes_slot_info_),
  };
  NotifyRunesList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRunesList_descriptor_,
      NotifyRunesList::default_instance_,
      NotifyRunesList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRunesList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRunesList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRunesList));
  NotifyRemoveCommodity_descriptor_ = file->message_type(22);
  static const int NotifyRemoveCommodity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRemoveCommodity, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRemoveCommodity, commodityid_),
  };
  NotifyRemoveCommodity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRemoveCommodity_descriptor_,
      NotifyRemoveCommodity::default_instance_,
      NotifyRemoveCommodity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRemoveCommodity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRemoveCommodity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRemoveCommodity));
  NotifyGetNewCommodity_descriptor_ = file->message_type(23);
  static const int NotifyGetNewCommodity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGetNewCommodity, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGetNewCommodity, commodityid_),
  };
  NotifyGetNewCommodity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGetNewCommodity_descriptor_,
      NotifyGetNewCommodity::default_instance_,
      NotifyGetNewCommodity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGetNewCommodity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGetNewCommodity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGetNewCommodity));
  NotifyMatchTeamBaseInfo_descriptor_ = file->message_type(24);
  static const int NotifyMatchTeamBaseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamBaseInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamBaseInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamBaseInfo, matchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamBaseInfo, mapid_),
  };
  NotifyMatchTeamBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMatchTeamBaseInfo_descriptor_,
      NotifyMatchTeamBaseInfo::default_instance_,
      NotifyMatchTeamBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMatchTeamBaseInfo));
  NotifyMatchTeamPlayerInfo_descriptor_ = file->message_type(25);
  static const int NotifyMatchTeamPlayerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, isinsert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, userlevel_),
  };
  NotifyMatchTeamPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMatchTeamPlayerInfo_descriptor_,
      NotifyMatchTeamPlayerInfo::default_instance_,
      NotifyMatchTeamPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMatchTeamPlayerInfo));
  NotifyMatchTeamSwitch_descriptor_ = file->message_type(26);
  static const int NotifyMatchTeamSwitch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamSwitch, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamSwitch, startflag_),
  };
  NotifyMatchTeamSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMatchTeamSwitch_descriptor_,
      NotifyMatchTeamSwitch::default_instance_,
      NotifyMatchTeamSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchTeamSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMatchTeamSwitch));
  NotifyMatchInviteJoin_descriptor_ = file->message_type(27);
  static const int NotifyMatchInviteJoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchInviteJoin, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchInviteJoin, nickname_),
  };
  NotifyMatchInviteJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMatchInviteJoin_descriptor_,
      NotifyMatchInviteJoin::default_instance_,
      NotifyMatchInviteJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchInviteJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMatchInviteJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMatchInviteJoin));
  NotifyHerosInfo_descriptor_ = file->message_type(28);
  static const int NotifyHerosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo, info_),
  };
  NotifyHerosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHerosInfo_descriptor_,
      NotifyHerosInfo::default_instance_,
      NotifyHerosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHerosInfo));
  NotifyHerosInfo_heropanelinfo_descriptor_ = NotifyHerosInfo_descriptor_->nested_type(0);
  static const int NotifyHerosInfo_heropanelinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, camgpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, herolv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, asstimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, lasthit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, heroid_),
  };
  NotifyHerosInfo_heropanelinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHerosInfo_heropanelinfo_descriptor_,
      NotifyHerosInfo_heropanelinfo::default_instance_,
      NotifyHerosInfo_heropanelinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHerosInfo_heropanelinfo));
  NotifyHerosInfo_heropanelinfo_goodsmsg_descriptor_ = NotifyHerosInfo_heropanelinfo_descriptor_->nested_type(0);
  static const int NotifyHerosInfo_heropanelinfo_goodsmsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo_goodsmsg, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo_goodsmsg, goodid_),
  };
  NotifyHerosInfo_heropanelinfo_goodsmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHerosInfo_heropanelinfo_goodsmsg_descriptor_,
      NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance_,
      NotifyHerosInfo_heropanelinfo_goodsmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo_goodsmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHerosInfo_heropanelinfo_goodsmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHerosInfo_heropanelinfo_goodsmsg));
  NotifyGoodsExpired_descriptor_ = file->message_type(29);
  static const int NotifyGoodsExpired_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsExpired, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsExpired, commondityid_),
  };
  NotifyGoodsExpired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGoodsExpired_descriptor_,
      NotifyGoodsExpired::default_instance_,
      NotifyGoodsExpired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsExpired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsExpired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGoodsExpired));
  ShortMail_descriptor_ = file->message_type(30);
  static const int ShortMail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMail, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMail, mailtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMail, mailstate_),
  };
  ShortMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShortMail_descriptor_,
      ShortMail::default_instance_,
      ShortMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShortMail));
  DelAndSortMail_descriptor_ = file->message_type(31);
  static const int DelAndSortMail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelAndSortMail, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelAndSortMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelAndSortMail, mailiddel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelAndSortMail, sort_),
  };
  DelAndSortMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelAndSortMail_descriptor_,
      DelAndSortMail::default_instance_,
      DelAndSortMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelAndSortMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelAndSortMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelAndSortMail));
  MailInfo_descriptor_ = file->message_type(32);
  static const int MailInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailgift_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  NotifyMailList_descriptor_ = file->message_type(33);
  static const int NotifyMailList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailList, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailList, maillist_),
  };
  NotifyMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMailList_descriptor_,
      NotifyMailList::default_instance_,
      NotifyMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMailList));
  GoodsCfgInfo_descriptor_ = file->message_type(34);
  static const int GoodsCfgInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo, cfg_type_),
  };
  GoodsCfgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsCfgInfo_descriptor_,
      GoodsCfgInfo::default_instance_,
      GoodsCfgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsCfgInfo));
  GoodsCfgInfo_Consume_descriptor_ = GoodsCfgInfo_descriptor_->nested_type(0);
  static const int GoodsCfgInfo_Consume_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo_Consume, consumetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo_Consume, price_),
  };
  GoodsCfgInfo_Consume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsCfgInfo_Consume_descriptor_,
      GoodsCfgInfo_Consume::default_instance_,
      GoodsCfgInfo_Consume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo_Consume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsCfgInfo_Consume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsCfgInfo_Consume));
  GoodsCfgInfo_CfgType_descriptor_ = GoodsCfgInfo_descriptor_->enum_type(0);
  GoodsBuyCfgInfo_descriptor_ = file->message_type(35);
  static const int GoodsBuyCfgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsBuyCfgInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsBuyCfgInfo, info_),
  };
  GoodsBuyCfgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsBuyCfgInfo_descriptor_,
      GoodsBuyCfgInfo::default_instance_,
      GoodsBuyCfgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsBuyCfgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsBuyCfgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsBuyCfgInfo));
  HeroAttributes_descriptor_ = file->message_type(36);
  static const int HeroAttributes_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, playerspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, attackinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, attackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, resurgencetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, physicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, spellsattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, physicdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, spellsdef_),
  };
  HeroAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroAttributes_descriptor_,
      HeroAttributes::default_instance_,
      HeroAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroAttributes));
  HeroAssist_descriptor_ = file->message_type(37);
  static const int HeroAssist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAssist, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAssist, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAssist, assist_),
  };
  HeroAssist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroAssist_descriptor_,
      HeroAssist::default_instance_,
      HeroAssist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAssist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroAssist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroAssist));
  BattleMatcherCount_descriptor_ = file->message_type(38);
  static const int BattleMatcherCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMatcherCount, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMatcherCount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMatcherCount, maxcount_),
  };
  BattleMatcherCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleMatcherCount_descriptor_,
      BattleMatcherCount::default_instance_,
      BattleMatcherCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMatcherCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleMatcherCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleMatcherCount));
  BattleSpanTime_descriptor_ = file->message_type(39);
  static const int BattleSpanTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSpanTime, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSpanTime, spantime_),
  };
  BattleSpanTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSpanTime_descriptor_,
      BattleSpanTime::default_instance_,
      BattleSpanTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSpanTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSpanTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSpanTime));
  BattleDelayTime_descriptor_ = file->message_type(40);
  static const int BattleDelayTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDelayTime, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDelayTime, delaytime_),
  };
  BattleDelayTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleDelayTime_descriptor_,
      BattleDelayTime::default_instance_,
      BattleDelayTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDelayTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDelayTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleDelayTime));
  UserBaseUpLv_descriptor_ = file->message_type(41);
  static const int UserBaseUpLv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseUpLv, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseUpLv, lv_),
  };
  UserBaseUpLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseUpLv_descriptor_,
      UserBaseUpLv::default_instance_,
      UserBaseUpLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseUpLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseUpLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseUpLv));
  SecondGuideTask_descriptor_ = file->message_type(42);
  static const int SecondGuideTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask, taskinfo_),
  };
  SecondGuideTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecondGuideTask_descriptor_,
      SecondGuideTask::default_instance_,
      SecondGuideTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecondGuideTask));
  SecondGuideTask_task_info_descriptor_ = SecondGuideTask_descriptor_->nested_type(0);
  static const int SecondGuideTask_task_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask_task_info, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask_task_info, num_),
  };
  SecondGuideTask_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecondGuideTask_task_info_descriptor_,
      SecondGuideTask_task_info::default_instance_,
      SecondGuideTask_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecondGuideTask_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecondGuideTask_task_info));
  GameTips_descriptor_ = file->message_type(43);
  static const int GameTips_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, errocode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, campid_),
  };
  GameTips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTips_descriptor_,
      GameTips::default_instance_,
      GameTips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTips));
  NotifyUserReturnBattleRoom_descriptor_ = file->message_type(44);
  static const int NotifyUserReturnBattleRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserReturnBattleRoom, msgid_),
  };
  NotifyUserReturnBattleRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUserReturnBattleRoom_descriptor_,
      NotifyUserReturnBattleRoom::default_instance_,
      NotifyUserReturnBattleRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserReturnBattleRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserReturnBattleRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUserReturnBattleRoom));
  BroadcastBattleHeroInfo_descriptor_ = file->message_type(45);
  static const int BroadcastBattleHeroInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo, heroinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo, goodsinfo_),
  };
  BroadcastBattleHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBattleHeroInfo_descriptor_,
      BroadcastBattleHeroInfo::default_instance_,
      BroadcastBattleHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBattleHeroInfo));
  BroadcastBattleHeroInfo_HeroInfo_descriptor_ = BroadcastBattleHeroInfo_descriptor_->nested_type(0);
  static const int BroadcastBattleHeroInfo_HeroInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, masterguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, assist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, heroid_),
  };
  BroadcastBattleHeroInfo_HeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBattleHeroInfo_HeroInfo_descriptor_,
      BroadcastBattleHeroInfo_HeroInfo::default_instance_,
      BroadcastBattleHeroInfo_HeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_HeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBattleHeroInfo_HeroInfo));
  BroadcastBattleHeroInfo_BaseGoodsInfo_descriptor_ = BroadcastBattleHeroInfo_descriptor_->nested_type(1);
  static const int BroadcastBattleHeroInfo_BaseGoodsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_BaseGoodsInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_BaseGoodsInfo, id_),
  };
  BroadcastBattleHeroInfo_BaseGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBattleHeroInfo_BaseGoodsInfo_descriptor_,
      BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance_,
      BroadcastBattleHeroInfo_BaseGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_BaseGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattleHeroInfo_BaseGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBattleHeroInfo_BaseGoodsInfo));
  GuideLastStep_descriptor_ = file->message_type(46);
  static const int GuideLastStep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideLastStep, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideLastStep, ifcomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideLastStep, stepid_),
  };
  GuideLastStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideLastStep_descriptor_,
      GuideLastStep::default_instance_,
      GuideLastStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideLastStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideLastStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideLastStep));
  NotifyUserCLDays_descriptor_ = file->message_type(47);
  static const int NotifyUserCLDays_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, totalcldays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, cldays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, istodaycan_),
  };
  NotifyUserCLDays_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUserCLDays_descriptor_,
      NotifyUserCLDays::default_instance_,
      NotifyUserCLDays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserCLDays, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUserCLDays));
  GameNotice_descriptor_ = file->message_type(48);
  static const int GameNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, notice_),
  };
  GameNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameNotice_descriptor_,
      GameNotice::default_instance_,
      GameNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameNotice));
  GameNotice_Notice_descriptor_ = GameNotice_descriptor_->nested_type(0);
  static const int GameNotice_Notice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, notice_),
  };
  GameNotice_Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameNotice_Notice_descriptor_,
      GameNotice_Notice::default_instance_,
      GameNotice_Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNotice_Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameNotice_Notice));
  GuideSteps_descriptor_ = file->message_type(49);
  static const int GuideSteps_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, ifcomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, steps_),
  };
  GuideSteps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideSteps_descriptor_,
      GuideSteps::default_instance_,
      GuideSteps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideSteps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideSteps));
  PingRet_descriptor_ = file->message_type(50);
  static const int PingRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRet, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRet, flag_),
  };
  PingRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRet_descriptor_,
      PingRet::default_instance_,
      PingRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingRet));
  NotifyQueryNickNameRet_descriptor_ = file->message_type(51);
  static const int NotifyQueryNickNameRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet, info_),
  };
  NotifyQueryNickNameRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyQueryNickNameRet_descriptor_,
      NotifyQueryNickNameRet::default_instance_,
      NotifyQueryNickNameRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyQueryNickNameRet));
  NotifyQueryNickNameRet_QueryInfo_descriptor_ = NotifyQueryNickNameRet_descriptor_->nested_type(0);
  static const int NotifyQueryNickNameRet_QueryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet_QueryInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet_QueryInfo, headid_),
  };
  NotifyQueryNickNameRet_QueryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyQueryNickNameRet_QueryInfo_descriptor_,
      NotifyQueryNickNameRet_QueryInfo::default_instance_,
      NotifyQueryNickNameRet_QueryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet_QueryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQueryNickNameRet_QueryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyQueryNickNameRet_QueryInfo));
  SNSInfo_descriptor_ = file->message_type(52);
  static const int SNSInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, viplv_),
  };
  SNSInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SNSInfo_descriptor_,
      SNSInfo::default_instance_,
      SNSInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNSInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SNSInfo));
  NotifyUserSNSList_descriptor_ = file->message_type(53);
  static const int NotifyUserSNSList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSList, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSList, info_),
  };
  NotifyUserSNSList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUserSNSList_descriptor_,
      NotifyUserSNSList::default_instance_,
      NotifyUserSNSList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUserSNSList));
  NotifyBattleManagerChange_descriptor_ = file->message_type(54);
  static const int NotifyBattleManagerChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBattleManagerChange, msgid_),
  };
  NotifyBattleManagerChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBattleManagerChange_descriptor_,
      NotifyBattleManagerChange::default_instance_,
      NotifyBattleManagerChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBattleManagerChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBattleManagerChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBattleManagerChange));
  NotifyBeAddFriendMs_descriptor_ = file->message_type(55);
  static const int NotifyBeAddFriendMs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBeAddFriendMs, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBeAddFriendMs, sendnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBeAddFriendMs, recnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBeAddFriendMs, sdnder_guididx_),
  };
  NotifyBeAddFriendMs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBeAddFriendMs_descriptor_,
      NotifyBeAddFriendMs::default_instance_,
      NotifyBeAddFriendMs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBeAddFriendMs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBeAddFriendMs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBeAddFriendMs));
  NotifyMsgFromUser_descriptor_ = file->message_type(56);
  static const int NotifyMsgFromUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, chatstr_),
  };
  NotifyMsgFromUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMsgFromUser_descriptor_,
      NotifyMsgFromUser::default_instance_,
      NotifyMsgFromUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsgFromUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMsgFromUser));
  NotifyUserSNSListChange_descriptor_ = file->message_type(57);
  static const int NotifyUserSNSListChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSListChange, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSListChange, guididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSListChange, type_),
  };
  NotifyUserSNSListChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyUserSNSListChange_descriptor_,
      NotifyUserSNSListChange::default_instance_,
      NotifyUserSNSListChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSListChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyUserSNSListChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyUserSNSListChange));
  UserBeInvitedToBattle_descriptor_ = file->message_type(58);
  static const int UserBeInvitedToBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBeInvitedToBattle, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBeInvitedToBattle, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBeInvitedToBattle, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBeInvitedToBattle, invitor_),
  };
  UserBeInvitedToBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBeInvitedToBattle_descriptor_,
      UserBeInvitedToBattle::default_instance_,
      UserBeInvitedToBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBeInvitedToBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBeInvitedToBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBeInvitedToBattle));
  NotifyAFPData_descriptor_ = file->message_type(59);
  static const int NotifyAFPData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData, msgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData, info_),
  };
  NotifyAFPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAFPData_descriptor_,
      NotifyAFPData::default_instance_,
      NotifyAFPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAFPData));
  NotifyAFPData_FPInfo_descriptor_ = NotifyAFPData_descriptor_->nested_type(0);
  static const int NotifyAFPData_FPInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData_FPInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData_FPInfo, value_),
  };
  NotifyAFPData_FPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAFPData_FPInfo_descriptor_,
      NotifyAFPData_FPInfo::default_instance_,
      NotifyAFPData_FPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData_FPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAFPData_FPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAFPData_FPInfo));
  NotifyAFPData_EnumFpType_descriptor_ = NotifyAFPData_descriptor_->enum_type(0);
  UserBaseInfo_descriptor_ = file->message_type(60);
  static const int UserBaseInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, curscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, curdiamoand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, curgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, ifreconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, vip_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, cur_exp_),
  };
  UserBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseInfo_descriptor_,
      UserBaseInfo::default_instance_,
      UserBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseInfo));
  NotifySystemAnnounce_descriptor_ = file->message_type(61);
  static const int NotifySystemAnnounce_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySystemAnnounce, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySystemAnnounce, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySystemAnnounce, announce_),
  };
  NotifySystemAnnounce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySystemAnnounce_descriptor_,
      NotifySystemAnnounce::default_instance_,
      NotifySystemAnnounce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySystemAnnounce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySystemAnnounce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySystemAnnounce));
  NetClash_descriptor_ = file->message_type(62);
  static const int NetClash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetClash, msgid_),
  };
  NetClash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetClash_descriptor_,
      NetClash::default_instance_,
      NetClash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetClash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetClash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetClash));
  WarningToSelectHero_descriptor_ = file->message_type(63);
  static const int WarningToSelectHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningToSelectHero, msgid_),
  };
  WarningToSelectHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningToSelectHero_descriptor_,
      WarningToSelectHero::default_instance_,
      WarningToSelectHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningToSelectHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningToSelectHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningToSelectHero));
  NotifySkillModelLeading_descriptor_ = file->message_type(64);
  static const int NotifySkillModelLeading_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, state_),
  };
  NotifySkillModelLeading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelLeading_descriptor_,
      NotifySkillModelLeading::default_instance_,
      NotifySkillModelLeading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelLeading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelLeading));
  AskRet_descriptor_ = file->message_type(65);
  static const int AskRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRet, askid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRet, errorcode_),
  };
  AskRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRet_descriptor_,
      AskRet::default_instance_,
      AskRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRet));
  NotifyCSHeroList_descriptor_ = file->message_type(66);
  static const int NotifyCSHeroList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList, herocfg_),
  };
  NotifyCSHeroList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCSHeroList_descriptor_,
      NotifyCSHeroList::default_instance_,
      NotifyCSHeroList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCSHeroList));
  NotifyCSHeroList_HeroListCfg_descriptor_ = NotifyCSHeroList_descriptor_->nested_type(0);
  static const int NotifyCSHeroList_HeroListCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList_HeroListCfg, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList_HeroListCfg, expired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList_HeroListCfg, if_free_),
  };
  NotifyCSHeroList_HeroListCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCSHeroList_HeroListCfg_descriptor_,
      NotifyCSHeroList_HeroListCfg::default_instance_,
      NotifyCSHeroList_HeroListCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList_HeroListCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCSHeroList_HeroListCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCSHeroList_HeroListCfg));
  HeroList_descriptor_ = file->message_type(67);
  static const int HeroList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroList, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroList, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroList, timediff_),
  };
  HeroList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroList_descriptor_,
      HeroList::default_instance_,
      HeroList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroList));
  BattleBaseInfo_descriptor_ = file->message_type(68);
  static const int BattleBaseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBaseInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBaseInfo, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBaseInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBaseInfo, ifreconnect_),
  };
  BattleBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleBaseInfo_descriptor_,
      BattleBaseInfo::default_instance_,
      BattleBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleBaseInfo));
  RoomBaseInfo_descriptor_ = file->message_type(69);
  static const int RoomBaseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfo, mapid_),
  };
  RoomBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBaseInfo_descriptor_,
      RoomBaseInfo::default_instance_,
      RoomBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBaseInfo));
  BattleSeatPosInfo_descriptor_ = file->message_type(70);
  static const int BattleSeatPosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo, posinfo_),
  };
  BattleSeatPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSeatPosInfo_descriptor_,
      BattleSeatPosInfo::default_instance_,
      BattleSeatPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSeatPosInfo));
  BattleSeatPosInfo_PosInfo_descriptor_ = BattleSeatPosInfo_descriptor_->nested_type(0);
  static const int BattleSeatPosInfo_PosInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, ifmaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, ifready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, gold_),
  };
  BattleSeatPosInfo_PosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSeatPosInfo_PosInfo_descriptor_,
      BattleSeatPosInfo_PosInfo::default_instance_,
      BattleSeatPosInfo_PosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSeatPosInfo_PosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSeatPosInfo_PosInfo));
  BattleStateChange_descriptor_ = file->message_type(71);
  static const int BattleStateChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStateChange, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStateChange, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStateChange, statetimeleft_),
  };
  BattleStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleStateChange_descriptor_,
      BattleStateChange::default_instance_,
      BattleStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleStateChange));
  CurBattleChange_descriptor_ = file->message_type(72);
  static const int CurBattleChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurBattleChange, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurBattleChange, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurBattleChange, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurBattleChange, mapid_),
  };
  CurBattleChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurBattleChange_descriptor_,
      CurBattleChange::default_instance_,
      CurBattleChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurBattleChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurBattleChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurBattleChange));
  Pos_descriptor_ = file->message_type(73);
  static const int Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, z_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
  Dir_descriptor_ = file->message_type(74);
  static const int Dir_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, angle_),
  };
  Dir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dir_descriptor_,
      Dir::default_instance_,
      Dir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dir));
  GOAppear_descriptor_ = file->message_type(75);
  static const int GOAppear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear, info_),
  };
  GOAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GOAppear_descriptor_,
      GOAppear::default_instance_,
      GOAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GOAppear));
  GOAppear_AppearInfo_descriptor_ = GOAppear_descriptor_->nested_type(0);
  static const int GOAppear_AppearInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, masterguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, obj_type_id_),
  };
  GOAppear_AppearInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GOAppear_AppearInfo_descriptor_,
      GOAppear_AppearInfo::default_instance_,
      GOAppear_AppearInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOAppear_AppearInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GOAppear_AppearInfo));
  DisappearInfo_descriptor_ = file->message_type(76);
  static const int DisappearInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisappearInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisappearInfo, guid_),
  };
  DisappearInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisappearInfo_descriptor_,
      DisappearInfo::default_instance_,
      DisappearInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisappearInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisappearInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisappearInfo));
  FreeState_descriptor_ = file->message_type(77);
  static const int FreeState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeState, dir_),
  };
  FreeState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeState_descriptor_,
      FreeState::default_instance_,
      FreeState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeState));
  RunningState_descriptor_ = file->message_type(78);
  static const int RunningState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, movespeed_),
  };
  RunningState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunningState_descriptor_,
      RunningState::default_instance_,
      RunningState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunningState));
  PrepareSkillState_descriptor_ = file->message_type(79);
  static const int PrepareSkillState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, speed_),
  };
  PrepareSkillState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareSkillState_descriptor_,
      PrepareSkillState::default_instance_,
      PrepareSkillState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSkillState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareSkillState));
  ReleasingSkillState_descriptor_ = file->message_type(80);
  static const int ReleasingSkillState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, targuid_),
  };
  ReleasingSkillState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleasingSkillState_descriptor_,
      ReleasingSkillState::default_instance_,
      ReleasingSkillState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleasingSkillState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleasingSkillState));
  UsingSkillState_descriptor_ = file->message_type(81);
  static const int UsingSkillState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, targuid_),
  };
  UsingSkillState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsingSkillState_descriptor_,
      UsingSkillState::default_instance_,
      UsingSkillState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsingSkillState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsingSkillState));
  LastingSkillState_descriptor_ = file->message_type(82);
  static const int LastingSkillState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, targuid_),
  };
  LastingSkillState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastingSkillState_descriptor_,
      LastingSkillState::default_instance_,
      LastingSkillState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingSkillState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastingSkillState));
  DeadState_descriptor_ = file->message_type(83);
  static const int DeadState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, spot_),
  };
  DeadState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadState_descriptor_,
      DeadState::default_instance_,
      DeadState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadState));
  NotifyGoodsInfo_descriptor_ = file->message_type(84);
  static const int NotifyGoodsInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo, info_),
  };
  NotifyGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGoodsInfo_descriptor_,
      NotifyGoodsInfo::default_instance_,
      NotifyGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGoodsInfo));
  NotifyGoodsInfo_GoodsInfo_descriptor_ = NotifyGoodsInfo_descriptor_->nested_type(0);
  static const int NotifyGoodsInfo_GoodsInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, ifcomposed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, tyepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, statetime_),
  };
  NotifyGoodsInfo_GoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGoodsInfo_GoodsInfo_descriptor_,
      NotifyGoodsInfo_GoodsInfo::default_instance_,
      NotifyGoodsInfo_GoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGoodsInfo_GoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGoodsInfo_GoodsInfo));
  BattleLoadingState_descriptor_ = file->message_type(85);
  static const int BattleLoadingState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLoadingState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLoadingState, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLoadingState, loadper_),
  };
  BattleLoadingState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleLoadingState_descriptor_,
      BattleLoadingState::default_instance_,
      BattleLoadingState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLoadingState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLoadingState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleLoadingState));
  HeroPosInfo_descriptor_ = file->message_type(86);
  static const int HeroPosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPosInfo, heroid_),
  };
  HeroPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroPosInfo_descriptor_,
      HeroPosInfo::default_instance_,
      HeroPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroPosInfo));
  HeroInfo_descriptor_ = file->message_type(87);
  static const int HeroInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, heroposinfo_),
  };
  HeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroInfo_descriptor_,
      HeroInfo::default_instance_,
      HeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroInfo));
  ChatInRoom_descriptor_ = file->message_type(88);
  static const int ChatInRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInRoom, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInRoom, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInRoom, chat_),
  };
  ChatInRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatInRoom_descriptor_,
      ChatInRoom::default_instance_,
      ChatInRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatInRoom));
  SkillHitTar_descriptor_ = file->message_type(89);
  static const int SkillHitTar_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitTar, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitTar, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitTar, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitTar, targuid_),
  };
  SkillHitTar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillHitTar_descriptor_,
      SkillHitTar::default_instance_,
      SkillHitTar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitTar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitTar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillHitTar));
  HPChange_descriptor_ = file->message_type(90);
  static const int HPChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChange, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChange, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChange, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChange, reason_),
  };
  HPChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPChange_descriptor_,
      HPChange::default_instance_,
      HPChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPChange));
  MpChange_descriptor_ = file->message_type(91);
  static const int MpChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpChange, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpChange, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpChange, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpChange, reason_),
  };
  MpChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpChange_descriptor_,
      MpChange::default_instance_,
      MpChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpChange));
  TryToChooseHero_descriptor_ = file->message_type(92);
  static const int TryToChooseHero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryToChooseHero, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryToChooseHero, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryToChooseHero, heroid_),
  };
  TryToChooseHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TryToChooseHero_descriptor_,
      TryToChooseHero::default_instance_,
      TryToChooseHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryToChooseHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryToChooseHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TryToChooseHero));
  NotifyChooseHeroTimeEnd_descriptor_ = file->message_type(93);
  static const int NotifyChooseHeroTimeEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyChooseHeroTimeEnd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyChooseHeroTimeEnd, heroposinfo_),
  };
  NotifyChooseHeroTimeEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyChooseHeroTimeEnd_descriptor_,
      NotifyChooseHeroTimeEnd::default_instance_,
      NotifyChooseHeroTimeEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyChooseHeroTimeEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyChooseHeroTimeEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyChooseHeroTimeEnd));
  SkillEntityInfo_descriptor_ = file->message_type(94);
  static const int SkillEntityInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, tardir_),
  };
  SkillEntityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEntityInfo_descriptor_,
      SkillEntityInfo::default_instance_,
      SkillEntityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEntityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEntityInfo));
  FPInfo_descriptor_ = file->message_type(95);
  static const int FPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPInfo, info_),
  };
  FPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FPInfo_descriptor_,
      FPInfo::default_instance_,
      FPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FPInfo));
  NotifyHPInfo_descriptor_ = file->message_type(96);
  static const int NotifyHPInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo, hpinfo_),
  };
  NotifyHPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHPInfo_descriptor_,
      NotifyHPInfo::default_instance_,
      NotifyHPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHPInfo));
  NotifyHPInfo_HPInfo_descriptor_ = NotifyHPInfo_descriptor_->nested_type(0);
  static const int NotifyHPInfo_HPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo_HPInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo_HPInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo_HPInfo, maxhp_),
  };
  NotifyHPInfo_HPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHPInfo_HPInfo_descriptor_,
      NotifyHPInfo_HPInfo::default_instance_,
      NotifyHPInfo_HPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo_HPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHPInfo_HPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHPInfo_HPInfo));
  NotifyMPInfo_descriptor_ = file->message_type(97);
  static const int NotifyMPInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo, mpinfo_),
  };
  NotifyMPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMPInfo_descriptor_,
      NotifyMPInfo::default_instance_,
      NotifyMPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMPInfo));
  NotifyMPInfo_MPInfo_descriptor_ = NotifyMPInfo_descriptor_->nested_type(0);
  static const int NotifyMPInfo_MPInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo_MPInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo_MPInfo, curmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo_MPInfo, maxmp_),
  };
  NotifyMPInfo_MPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMPInfo_MPInfo_descriptor_,
      NotifyMPInfo_MPInfo::default_instance_,
      NotifyMPInfo_MPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo_MPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMPInfo_MPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMPInfo_MPInfo));
  NotifyHeroInfo_descriptor_ = file->message_type(98);
  static const int NotifyHeroInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, fury_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, absorb1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, absorb2_),
  };
  NotifyHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHeroInfo_descriptor_,
      NotifyHeroInfo::default_instance_,
      NotifyHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHeroInfo));
  NotifySkillInfo_descriptor_ = file->message_type(99);
  static const int NotifySkillInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, skillslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, time_),
  };
  NotifySkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillInfo_descriptor_,
      NotifySkillInfo::default_instance_,
      NotifySkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillInfo));
  BattleFinish_descriptor_ = file->message_type(100);
  static const int BattleFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, bulidguid_),
  };
  BattleFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFinish_descriptor_,
      BattleFinish::default_instance_,
      BattleFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFinish));
  Exp_descriptor_ = file->message_type(101);
  static const int Exp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exp, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exp, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exp, exp_),
  };
  Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Exp_descriptor_,
      Exp::default_instance_,
      Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Exp));
  LevelInfo_descriptor_ = file->message_type(102);
  static const int LevelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, level_),
  };
  LevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelInfo_descriptor_,
      LevelInfo::default_instance_,
      LevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelInfo));
  AbsorbBegin_descriptor_ = file->message_type(103);
  static const int AbsorbBegin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbBegin, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbBegin, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbBegin, monsterguid_),
  };
  AbsorbBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbsorbBegin_descriptor_,
      AbsorbBegin::default_instance_,
      AbsorbBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbsorbBegin));
  AbsorbRes_descriptor_ = file->message_type(104);
  static const int AbsorbRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, absorb1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, absorb2_),
  };
  AbsorbRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbsorbRes_descriptor_,
      AbsorbRes::default_instance_,
      AbsorbRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbsorbRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbsorbRes));
  CancelAbsorb_descriptor_ = file->message_type(105);
  static const int CancelAbsorb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAbsorb, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAbsorb, monsterid_),
  };
  CancelAbsorb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelAbsorb_descriptor_,
      CancelAbsorb::default_instance_,
      CancelAbsorb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAbsorb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAbsorb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelAbsorb));
  UserGameInfo_descriptor_ = file->message_type(106);
  static const int UserGameInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, upgradeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, totalgameinns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, totalwintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, herokills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, destorybuildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, total_achnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, achnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, vipscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, assistnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, ladderscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, exp_adtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, gold_addtime_),
  };
  UserGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGameInfo_descriptor_,
      UserGameInfo::default_instance_,
      UserGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGameInfo));
  HeroKills_descriptor_ = file->message_type(107);
  static const int HeroKills_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroKills, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroKills, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroKills, kills_),
  };
  HeroKills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroKills_descriptor_,
      HeroKills::default_instance_,
      HeroKills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroKills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroKills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroKills));
  CurDeadTimes_descriptor_ = file->message_type(108);
  static const int CurDeadTimes_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, killer_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, reasonheroguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, ifaced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, herostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, herotitle_),
  };
  CurDeadTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurDeadTimes_descriptor_,
      CurDeadTimes::default_instance_,
      CurDeadTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurDeadTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurDeadTimes));
  CurCP_descriptor_ = file->message_type(109);
  static const int CurCP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurCP, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurCP, targetguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurCP, person_cp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurCP, team_cp_),
  };
  CurCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurCP_descriptor_,
      CurCP::default_instance_,
      CurCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurCP));
  CurAtkSpeed_descriptor_ = file->message_type(110);
  static const int CurAtkSpeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed, info_),
  };
  CurAtkSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurAtkSpeed_descriptor_,
      CurAtkSpeed::default_instance_,
      CurAtkSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurAtkSpeed));
  CurAtkSpeed_SpeedInfo_descriptor_ = CurAtkSpeed_descriptor_->nested_type(0);
  static const int CurAtkSpeed_SpeedInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed_SpeedInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed_SpeedInfo, speed_),
  };
  CurAtkSpeed_SpeedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurAtkSpeed_SpeedInfo_descriptor_,
      CurAtkSpeed_SpeedInfo::default_instance_,
      CurAtkSpeed_SpeedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed_SpeedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurAtkSpeed_SpeedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurAtkSpeed_SpeedInfo));
  FuryVal_descriptor_ = file->message_type(111);
  static const int FuryVal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryVal, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryVal, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryVal, fury_),
  };
  FuryVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuryVal_descriptor_,
      FuryVal::default_instance_,
      FuryVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuryVal));
  FuryState_descriptor_ = file->message_type(112);
  static const int FuryState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryState, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryState, state_),
  };
  FuryState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuryState_descriptor_,
      FuryState::default_instance_,
      FuryState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuryState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuryState));
  NotifyHeroReborn_descriptor_ = file->message_type(113);
  static const int NotifyHeroReborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroReborn, msgid_),
  };
  NotifyHeroReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHeroReborn_descriptor_,
      NotifyHeroReborn::default_instance_,
      NotifyHeroReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeroReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHeroReborn));
  RebornTimes_descriptor_ = file->message_type(114);
  static const int RebornTimes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, masterguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, sendtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, remain_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, reborn_time_),
  };
  RebornTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RebornTimes_descriptor_,
      RebornTimes::default_instance_,
      RebornTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RebornTimes));
  RebornSuccess_descriptor_ = file->message_type(115);
  static const int RebornSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornSuccess, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornSuccess, guid_),
  };
  RebornSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RebornSuccess_descriptor_,
      RebornSuccess::default_instance_,
      RebornSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RebornSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RebornSuccess));
  PersonCPChange_descriptor_ = file->message_type(116);
  static const int PersonCPChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonCPChange, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonCPChange, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonCPChange, cp_),
  };
  PersonCPChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonCPChange_descriptor_,
      PersonCPChange::default_instance_,
      PersonCPChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonCPChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonCPChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonCPChange));
  BroadcastBatteleRes_descriptor_ = file->message_type(117);
  static const int BroadcastBatteleRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes, ifwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes, resinfo_),
  };
  BroadcastBatteleRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBatteleRes_descriptor_,
      BroadcastBatteleRes::default_instance_,
      BroadcastBatteleRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBatteleRes));
  BroadcastBatteleRes_ResInfo_descriptor_ = BroadcastBatteleRes_descriptor_->nested_type(0);
  static const int BroadcastBatteleRes_ResInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, curlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, killtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, deadtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, asstimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, totalcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, lasthit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, camgpid_),
  };
  BroadcastBatteleRes_ResInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBatteleRes_ResInfo_descriptor_,
      BroadcastBatteleRes_ResInfo::default_instance_,
      BroadcastBatteleRes_ResInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBatteleRes_ResInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBatteleRes_ResInfo));
  BroadcastBattelePersonalRes_descriptor_ = file->message_type(118);
  static const int BroadcastBattelePersonalRes_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, got_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, old_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, old_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, cur_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, got_exp_),
  };
  BroadcastBattelePersonalRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBattelePersonalRes_descriptor_,
      BroadcastBattelePersonalRes::default_instance_,
      BroadcastBattelePersonalRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBattelePersonalRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBattelePersonalRes));
  BroadcastBuildingDestory_descriptor_ = file->message_type(119);
  static const int BroadcastBuildingDestory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, buildingguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, building_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, killer_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, killer_camp_),
  };
  BroadcastBuildingDestory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastBuildingDestory_descriptor_,
      BroadcastBuildingDestory::default_instance_,
      BroadcastBuildingDestory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastBuildingDestory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastBuildingDestory));
  HeroMoveInfo_descriptor_ = file->message_type(120);
  static const int HeroMoveInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMoveInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMoveInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMoveInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMoveInfo, pos_),
  };
  HeroMoveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroMoveInfo_descriptor_,
      HeroMoveInfo::default_instance_,
      HeroMoveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMoveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMoveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroMoveInfo));
  PlayFinishVedio_descriptor_ = file->message_type(121);
  static const int PlayFinishVedio_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, wincamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, losercamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, guid_),
  };
  PlayFinishVedio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayFinishVedio_descriptor_,
      PlayFinishVedio::default_instance_,
      PlayFinishVedio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayFinishVedio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayFinishVedio));
  LeaveBattleSuccess_descriptor_ = file->message_type(122);
  static const int LeaveBattleSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleSuccess, msgid_),
  };
  LeaveBattleSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveBattleSuccess_descriptor_,
      LeaveBattleSuccess::default_instance_,
      LeaveBattleSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveBattleSuccess));
  BornSoler_descriptor_ = file->message_type(123);
  static const int BornSoler_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, guid_),
  };
  BornSoler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BornSoler_descriptor_,
      BornSoler::default_instance_,
      BornSoler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BornSoler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BornSoler));
  SkillEnd_descriptor_ = file->message_type(124);
  static const int SkillEnd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, uniqueid_),
  };
  SkillEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEnd_descriptor_,
      SkillEnd::default_instance_,
      SkillEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEnd));
  AltarBSIco_descriptor_ = file->message_type(125);
  static const int AltarBSIco_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AltarBSIco, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AltarBSIco, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AltarBSIco, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AltarBSIco, optype_),
  };
  AltarBSIco_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AltarBSIco_descriptor_,
      AltarBSIco::default_instance_,
      AltarBSIco_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AltarBSIco, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AltarBSIco, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AltarBSIco));
  GOReleaseSkill_descriptor_ = file->message_type(126);
  static const int GOReleaseSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, curdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, tarpos_),
  };
  GOReleaseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GOReleaseSkill_descriptor_,
      GOReleaseSkill::default_instance_,
      GOReleaseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOReleaseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GOReleaseSkill));
  GOSkillCD_descriptor_ = file->message_type(127);
  static const int GOSkillCD_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOSkillCD, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOSkillCD, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOSkillCD, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOSkillCD, time_),
  };
  GOSkillCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GOSkillCD_descriptor_,
      GOSkillCD::default_instance_,
      GOSkillCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOSkillCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOSkillCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GOSkillCD));
  EmitSkill_descriptor_ = file->message_type(128);
  static const int EmitSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, tarpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, ifabsorbskill_),
  };
  EmitSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmitSkill_descriptor_,
      EmitSkill::default_instance_,
      EmitSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmitSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmitSkill));
  DestroyEmitEffect_descriptor_ = file->message_type(129);
  static const int DestroyEmitEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEmitEffect, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEmitEffect, uniqueid_),
  };
  DestroyEmitEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyEmitEffect_descriptor_,
      DestroyEmitEffect::default_instance_,
      DestroyEmitEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEmitEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEmitEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyEmitEffect));
  HitTar_descriptor_ = file->message_type(130);
  static const int HitTar_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitTar, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitTar, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitTar, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitTar, targuid_),
  };
  HitTar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitTar_descriptor_,
      HitTar::default_instance_,
      HitTar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitTar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitTar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitTar));
  RangeEffect_descriptor_ = file->message_type(131);
  static const int RangeEffect_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, pos_),
  };
  RangeEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeEffect_descriptor_,
      RangeEffect::default_instance_,
      RangeEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeEffect));
  RangeEffectEnd_descriptor_ = file->message_type(132);
  static const int RangeEffectEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffectEnd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffectEnd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffectEnd, uniqueid_),
  };
  RangeEffectEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeEffectEnd_descriptor_,
      RangeEffectEnd::default_instance_,
      RangeEffectEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffectEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeEffectEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeEffectEnd));
  SummonEffect_descriptor_ = file->message_type(133);
  static const int SummonEffect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonEffect, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonEffect, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonEffect, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonEffect, npcguid_),
  };
  SummonEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummonEffect_descriptor_,
      SummonEffect::default_instance_,
      SummonEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummonEffect));
  BuffEffect_descriptor_ = file->message_type(134);
  static const int BuffEffect_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, state_),
  };
  BuffEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffEffect_descriptor_,
      BuffEffect::default_instance_,
      BuffEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffEffect));
  NotifySummonLifeTime_descriptor_ = file->message_type(135);
  static const int NotifySummonLifeTime_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, resttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, dir_),
  };
  NotifySummonLifeTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySummonLifeTime_descriptor_,
      NotifySummonLifeTime::default_instance_,
      NotifySummonLifeTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySummonLifeTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySummonLifeTime));
  NotifySkillModelStartForceMove_descriptor_ = file->message_type(136);
  static const int NotifySkillModelStartForceMove_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, pod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, speed_),
  };
  NotifySkillModelStartForceMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelStartForceMove_descriptor_,
      NotifySkillModelStartForceMove::default_instance_,
      NotifySkillModelStartForceMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelStartForceMove));
  NotifySkillModelStartForceMoveStop_descriptor_ = file->message_type(137);
  static const int NotifySkillModelStartForceMoveStop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveStop, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveStop, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveStop, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveStop, pos_),
  };
  NotifySkillModelStartForceMoveStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelStartForceMoveStop_descriptor_,
      NotifySkillModelStartForceMoveStop::default_instance_,
      NotifySkillModelStartForceMoveStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelStartForceMoveStop));
  NotifySkillModelStartForceMoveTeleport_descriptor_ = file->message_type(138);
  static const int NotifySkillModelStartForceMoveTeleport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, beginpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, begindir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, tarpos_),
  };
  NotifySkillModelStartForceMoveTeleport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelStartForceMoveTeleport_descriptor_,
      NotifySkillModelStartForceMoveTeleport::default_instance_,
      NotifySkillModelStartForceMoveTeleport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartForceMoveTeleport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelStartForceMoveTeleport));
  NotifySkillModelPurification_descriptor_ = file->message_type(139);
  static const int NotifySkillModelPurification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelPurification, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelPurification, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelPurification, targetguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelPurification, effectid_),
  };
  NotifySkillModelPurification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelPurification_descriptor_,
      NotifySkillModelPurification::default_instance_,
      NotifySkillModelPurification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelPurification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelPurification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelPurification));
  NotifySkillModelStartLink_descriptor_ = file->message_type(140);
  static const int NotifySkillModelStartLink_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, beginpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, targetguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, uniqueid_),
  };
  NotifySkillModelStartLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelStartLink_descriptor_,
      NotifySkillModelStartLink::default_instance_,
      NotifySkillModelStartLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStartLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelStartLink));
  NotifySkillModelStopLink_descriptor_ = file->message_type(141);
  static const int NotifySkillModelStopLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStopLink, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStopLink, uniqueid_),
  };
  NotifySkillModelStopLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelStopLink_descriptor_,
      NotifySkillModelStopLink::default_instance_,
      NotifySkillModelStopLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStopLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelStopLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelStopLink));
  NotifyPassitiveSkillRelease_descriptor_ = file->message_type(142);
  static const int NotifyPassitiveSkillRelease_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillRelease, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillRelease, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillRelease, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillRelease, timeleft_),
  };
  NotifyPassitiveSkillRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPassitiveSkillRelease_descriptor_,
      NotifyPassitiveSkillRelease::default_instance_,
      NotifyPassitiveSkillRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPassitiveSkillRelease));
  NotifyPassitiveSkillLoad_descriptor_ = file->message_type(143);
  static const int NotifyPassitiveSkillLoad_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillLoad, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillLoad, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillLoad, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillLoad, uniqueid_),
  };
  NotifyPassitiveSkillLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPassitiveSkillLoad_descriptor_,
      NotifyPassitiveSkillLoad::default_instance_,
      NotifyPassitiveSkillLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPassitiveSkillLoad));
  NotifyPassitiveSkillUnLoad_descriptor_ = file->message_type(144);
  static const int NotifyPassitiveSkillUnLoad_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillUnLoad, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillUnLoad, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillUnLoad, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillUnLoad, uniqueid_),
  };
  NotifyPassitiveSkillUnLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPassitiveSkillUnLoad_descriptor_,
      NotifyPassitiveSkillUnLoad::default_instance_,
      NotifyPassitiveSkillUnLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillUnLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPassitiveSkillUnLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPassitiveSkillUnLoad));
  NotifySkillModelEmitTurn_descriptor_ = file->message_type(145);
  static const int NotifySkillModelEmitTurn_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, progectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, targuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, tarpos_),
  };
  NotifySkillModelEmitTurn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillModelEmitTurn_descriptor_,
      NotifySkillModelEmitTurn::default_instance_,
      NotifySkillModelEmitTurn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillModelEmitTurn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillModelEmitTurn));
  NotifyBornObj_descriptor_ = file->message_type(146);
  static const int NotifyBornObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBornObj, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBornObj, type_),
  };
  NotifyBornObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBornObj_descriptor_,
      NotifyBornObj::default_instance_,
      NotifyBornObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBornObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBornObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBornObj));
  NotifyReconnectInfo_descriptor_ = file->message_type(147);
  static const int NotifyReconnectInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, battlestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, remain_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, ifob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, reconnectinfo_),
  };
  NotifyReconnectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyReconnectInfo_descriptor_,
      NotifyReconnectInfo::default_instance_,
      NotifyReconnectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyReconnectInfo));
  NotifyReconnectInfo_ReconnectInfo_descriptor_ = NotifyReconnectInfo_descriptor_->nested_type(0);
  static const int NotifyReconnectInfo_ReconnectInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, ifselected_),
  };
  NotifyReconnectInfo_ReconnectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyReconnectInfo_ReconnectInfo_descriptor_,
      NotifyReconnectInfo_ReconnectInfo::default_instance_,
      NotifyReconnectInfo_ReconnectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyReconnectInfo_ReconnectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyReconnectInfo_ReconnectInfo));
  NotifyOBReturnBattleRoom_descriptor_ = file->message_type(148);
  static const int NotifyOBReturnBattleRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBReturnBattleRoom, msgid_),
  };
  NotifyOBReturnBattleRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOBReturnBattleRoom_descriptor_,
      NotifyOBReturnBattleRoom::default_instance_,
      NotifyOBReturnBattleRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBReturnBattleRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBReturnBattleRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOBReturnBattleRoom));
  NotifyOBAppear_descriptor_ = file->message_type(149);
  static const int NotifyOBAppear_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBAppear, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBAppear, obid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBAppear, camp_),
  };
  NotifyOBAppear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOBAppear_descriptor_,
      NotifyOBAppear::default_instance_,
      NotifyOBAppear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBAppear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOBAppear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOBAppear));
  NotifyKillNPC_descriptor_ = file->message_type(150);
  static const int NotifyKillNPC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKillNPC, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKillNPC, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKillNPC, killnum_),
  };
  NotifyKillNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyKillNPC_descriptor_,
      NotifyKillNPC::default_instance_,
      NotifyKillNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKillNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyKillNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyKillNPC));
  NotifyAltarBSIco_descriptor_ = file->message_type(151);
  static const int NotifyAltarBSIco_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAltarBSIco, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAltarBSIco, altarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAltarBSIco, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAltarBSIco, optype_),
  };
  NotifyAltarBSIco_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAltarBSIco_descriptor_,
      NotifyAltarBSIco::default_instance_,
      NotifyAltarBSIco_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAltarBSIco, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAltarBSIco, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAltarBSIco));
  NotifySkillUpLv_descriptor_ = file->message_type(152);
  static const int NotifySkillUpLv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillUpLv, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillUpLv, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillUpLv, skillpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillUpLv, skillid_),
  };
  NotifySkillUpLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySkillUpLv_descriptor_,
      NotifySkillUpLv::default_instance_,
      NotifySkillUpLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillUpLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySkillUpLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySkillUpLv));
  NotifyBlastHurt_descriptor_ = file->message_type(153);
  static const int NotifyBlastHurt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBlastHurt, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBlastHurt, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBlastHurt, blasthp_),
  };
  NotifyBlastHurt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBlastHurt_descriptor_,
      NotifyBlastHurt::default_instance_,
      NotifyBlastHurt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBlastHurt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBlastHurt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBlastHurt));
  NotifyGameObjectReliveState_descriptor_ = file->message_type(154);
  static const int NotifyGameObjectReliveState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGameObjectReliveState, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGameObjectReliveState, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGameObjectReliveState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGameObjectReliveState, dir_),
  };
  NotifyGameObjectReliveState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGameObjectReliveState_descriptor_,
      NotifyGameObjectReliveState::default_instance_,
      NotifyGameObjectReliveState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGameObjectReliveState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGameObjectReliveState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGameObjectReliveState));
  NotifyCurGold_descriptor_ = file->message_type(155);
  static const int NotifyCurGold_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurGold, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurGold, gold_),
  };
  NotifyCurGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCurGold_descriptor_,
      NotifyCurGold::default_instance_,
      NotifyCurGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCurGold));
  NotifyCurDiamond_descriptor_ = file->message_type(156);
  static const int NotifyCurDiamond_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurDiamond, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurDiamond, diamond_),
  };
  NotifyCurDiamond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCurDiamond_descriptor_,
      NotifyCurDiamond::default_instance_,
      NotifyCurDiamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurDiamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCurDiamond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCurDiamond));
  GetloginRewardSuccess_descriptor_ = file->message_type(157);
  static const int GetloginRewardSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginRewardSuccess, msgid_),
  };
  GetloginRewardSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetloginRewardSuccess_descriptor_,
      GetloginRewardSuccess::default_instance_,
      GetloginRewardSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginRewardSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginRewardSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetloginRewardSuccess));
  GetloginReward_Skin_descriptor_ = file->message_type(158);
  static const int GetloginReward_Skin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Skin, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Skin, skinid_),
  };
  GetloginReward_Skin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetloginReward_Skin_descriptor_,
      GetloginReward_Skin::default_instance_,
      GetloginReward_Skin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Skin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Skin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetloginReward_Skin));
  GetloginReward_Rune_descriptor_ = file->message_type(159);
  static const int GetloginReward_Rune_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Rune, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Rune, runeid_),
  };
  GetloginReward_Rune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetloginReward_Rune_descriptor_,
      GetloginReward_Rune::default_instance_,
      GetloginReward_Rune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Rune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Rune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetloginReward_Rune));
  GetloginReward_Hero_descriptor_ = file->message_type(160);
  static const int GetloginReward_Hero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Hero, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Hero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Hero, expired_time_),
  };
  GetloginReward_Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetloginReward_Hero_descriptor_,
      GetloginReward_Hero::default_instance_,
      GetloginReward_Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetloginReward_Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetloginReward_Hero));
  CanInviteFriends_descriptor_ = file->message_type(161);
  static const int CanInviteFriends_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends, friends_),
  };
  CanInviteFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanInviteFriends_descriptor_,
      CanInviteFriends::default_instance_,
      CanInviteFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanInviteFriends));
  CanInviteFriends_Friends_descriptor_ = CanInviteFriends_descriptor_->nested_type(0);
  static const int CanInviteFriends_Friends_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends_Friends, headerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends_Friends, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends_Friends, guididx_),
  };
  CanInviteFriends_Friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanInviteFriends_Friends_descriptor_,
      CanInviteFriends_Friends::default_instance_,
      CanInviteFriends_Friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends_Friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanInviteFriends_Friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanInviteFriends_Friends));
  LastHitNum_descriptor_ = file->message_type(162);
  static const int LastHitNum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastHitNum, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastHitNum, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastHitNum, lhnum_),
  };
  LastHitNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastHitNum_descriptor_,
      LastHitNum::default_instance_,
      LastHitNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastHitNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastHitNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastHitNum));
  RoomInfo_descriptor_ = file->message_type(163);
  static const int RoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, ifpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, curusercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, maxusercount_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  AskRoomListRet_descriptor_ = file->message_type(164);
  static const int AskRoomListRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomListRet, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomListRet, roomlist_),
  };
  AskRoomListRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskRoomListRet_descriptor_,
      AskRoomListRet::default_instance_,
      AskRoomListRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomListRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskRoomListRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskRoomListRet));
  MsgID_descriptor_ = file->enum_type(0);
  MailType_descriptor_ = file->enum_type(1);
  EMailCurtState_descriptor_ = file->enum_type(2);
  BattleState_descriptor_ = file->enum_type(3);
  ObjType_descriptor_ = file->enum_type(4);
  HPMPChangeReason_descriptor_ = file->enum_type(5);
  SkillState_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GSToGC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskData_descriptor_, &TaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateAllTask_descriptor_, &NotifyUpdateAllTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateAllDailyTask_descriptor_, &NotifyUpdateAllDailyTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAddOneTask_descriptor_, &NotifyAddOneTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUpdateOneTask_descriptor_, &NotifyUpdateOneTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyDelOneTask_descriptor_, &NotifyDelOneTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRewardsOneTask_descriptor_, &NotifyRewardsOneTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMailRet_descriptor_, &NotifyMailRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyIsOnSS_descriptor_, &NotifyIsOnSS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOtherItemInfo_descriptor_, &NotifyOtherItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOtherItemInfo_OtherItem_descriptor_, &NotifyOtherItemInfo_OtherItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoinRuneRet_descriptor_, &RecoinRuneRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnloadRune_descriptor_, &UnloadRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideCSStepInfo_descriptor_, &GuideCSStepInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideAward_descriptor_, &GuideAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideAward_awardtype_descriptor_, &GuideAward_awardtype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideKillsInfo_descriptor_, &GuideKillsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUserLvInfo_descriptor_, &NotifyUserLvInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyNewHeaderid_descriptor_, &NotifyNewHeaderid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOneMatchNeedOne_descriptor_, &NotifyOneMatchNeedOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyNewNickname_descriptor_, &NotifyNewNickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunesSlot_descriptor_, &RunesSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunesBagInfo_descriptor_, &RunesBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRunesList_descriptor_, &NotifyRunesList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRemoveCommodity_descriptor_, &NotifyRemoveCommodity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGetNewCommodity_descriptor_, &NotifyGetNewCommodity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMatchTeamBaseInfo_descriptor_, &NotifyMatchTeamBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMatchTeamPlayerInfo_descriptor_, &NotifyMatchTeamPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMatchTeamSwitch_descriptor_, &NotifyMatchTeamSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMatchInviteJoin_descriptor_, &NotifyMatchInviteJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHerosInfo_descriptor_, &NotifyHerosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHerosInfo_heropanelinfo_descriptor_, &NotifyHerosInfo_heropanelinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHerosInfo_heropanelinfo_goodsmsg_descriptor_, &NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGoodsExpired_descriptor_, &NotifyGoodsExpired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShortMail_descriptor_, &ShortMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelAndSortMail_descriptor_, &DelAndSortMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMailList_descriptor_, &NotifyMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsCfgInfo_descriptor_, &GoodsCfgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsCfgInfo_Consume_descriptor_, &GoodsCfgInfo_Consume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsBuyCfgInfo_descriptor_, &GoodsBuyCfgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroAttributes_descriptor_, &HeroAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroAssist_descriptor_, &HeroAssist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleMatcherCount_descriptor_, &BattleMatcherCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSpanTime_descriptor_, &BattleSpanTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleDelayTime_descriptor_, &BattleDelayTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseUpLv_descriptor_, &UserBaseUpLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecondGuideTask_descriptor_, &SecondGuideTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecondGuideTask_task_info_descriptor_, &SecondGuideTask_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTips_descriptor_, &GameTips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUserReturnBattleRoom_descriptor_, &NotifyUserReturnBattleRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBattleHeroInfo_descriptor_, &BroadcastBattleHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBattleHeroInfo_HeroInfo_descriptor_, &BroadcastBattleHeroInfo_HeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBattleHeroInfo_BaseGoodsInfo_descriptor_, &BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideLastStep_descriptor_, &GuideLastStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUserCLDays_descriptor_, &NotifyUserCLDays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameNotice_descriptor_, &GameNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameNotice_Notice_descriptor_, &GameNotice_Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideSteps_descriptor_, &GuideSteps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRet_descriptor_, &PingRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyQueryNickNameRet_descriptor_, &NotifyQueryNickNameRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyQueryNickNameRet_QueryInfo_descriptor_, &NotifyQueryNickNameRet_QueryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SNSInfo_descriptor_, &SNSInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUserSNSList_descriptor_, &NotifyUserSNSList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBattleManagerChange_descriptor_, &NotifyBattleManagerChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBeAddFriendMs_descriptor_, &NotifyBeAddFriendMs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMsgFromUser_descriptor_, &NotifyMsgFromUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyUserSNSListChange_descriptor_, &NotifyUserSNSListChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBeInvitedToBattle_descriptor_, &UserBeInvitedToBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAFPData_descriptor_, &NotifyAFPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAFPData_FPInfo_descriptor_, &NotifyAFPData_FPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseInfo_descriptor_, &UserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySystemAnnounce_descriptor_, &NotifySystemAnnounce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetClash_descriptor_, &NetClash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningToSelectHero_descriptor_, &WarningToSelectHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelLeading_descriptor_, &NotifySkillModelLeading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRet_descriptor_, &AskRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCSHeroList_descriptor_, &NotifyCSHeroList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCSHeroList_HeroListCfg_descriptor_, &NotifyCSHeroList_HeroListCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroList_descriptor_, &HeroList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleBaseInfo_descriptor_, &BattleBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBaseInfo_descriptor_, &RoomBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSeatPosInfo_descriptor_, &BattleSeatPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSeatPosInfo_PosInfo_descriptor_, &BattleSeatPosInfo_PosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleStateChange_descriptor_, &BattleStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurBattleChange_descriptor_, &CurBattleChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dir_descriptor_, &Dir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GOAppear_descriptor_, &GOAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GOAppear_AppearInfo_descriptor_, &GOAppear_AppearInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisappearInfo_descriptor_, &DisappearInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeState_descriptor_, &FreeState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunningState_descriptor_, &RunningState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareSkillState_descriptor_, &PrepareSkillState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleasingSkillState_descriptor_, &ReleasingSkillState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsingSkillState_descriptor_, &UsingSkillState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastingSkillState_descriptor_, &LastingSkillState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadState_descriptor_, &DeadState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGoodsInfo_descriptor_, &NotifyGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGoodsInfo_GoodsInfo_descriptor_, &NotifyGoodsInfo_GoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleLoadingState_descriptor_, &BattleLoadingState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroPosInfo_descriptor_, &HeroPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroInfo_descriptor_, &HeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatInRoom_descriptor_, &ChatInRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillHitTar_descriptor_, &SkillHitTar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPChange_descriptor_, &HPChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpChange_descriptor_, &MpChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TryToChooseHero_descriptor_, &TryToChooseHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyChooseHeroTimeEnd_descriptor_, &NotifyChooseHeroTimeEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEntityInfo_descriptor_, &SkillEntityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FPInfo_descriptor_, &FPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHPInfo_descriptor_, &NotifyHPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHPInfo_HPInfo_descriptor_, &NotifyHPInfo_HPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMPInfo_descriptor_, &NotifyMPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMPInfo_MPInfo_descriptor_, &NotifyMPInfo_MPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHeroInfo_descriptor_, &NotifyHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillInfo_descriptor_, &NotifySkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFinish_descriptor_, &BattleFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Exp_descriptor_, &Exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelInfo_descriptor_, &LevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbsorbBegin_descriptor_, &AbsorbBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbsorbRes_descriptor_, &AbsorbRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelAbsorb_descriptor_, &CancelAbsorb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGameInfo_descriptor_, &UserGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroKills_descriptor_, &HeroKills::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurDeadTimes_descriptor_, &CurDeadTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurCP_descriptor_, &CurCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurAtkSpeed_descriptor_, &CurAtkSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurAtkSpeed_SpeedInfo_descriptor_, &CurAtkSpeed_SpeedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuryVal_descriptor_, &FuryVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuryState_descriptor_, &FuryState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHeroReborn_descriptor_, &NotifyHeroReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RebornTimes_descriptor_, &RebornTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RebornSuccess_descriptor_, &RebornSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonCPChange_descriptor_, &PersonCPChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBatteleRes_descriptor_, &BroadcastBatteleRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBatteleRes_ResInfo_descriptor_, &BroadcastBatteleRes_ResInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBattelePersonalRes_descriptor_, &BroadcastBattelePersonalRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastBuildingDestory_descriptor_, &BroadcastBuildingDestory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroMoveInfo_descriptor_, &HeroMoveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayFinishVedio_descriptor_, &PlayFinishVedio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveBattleSuccess_descriptor_, &LeaveBattleSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BornSoler_descriptor_, &BornSoler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEnd_descriptor_, &SkillEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AltarBSIco_descriptor_, &AltarBSIco::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GOReleaseSkill_descriptor_, &GOReleaseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GOSkillCD_descriptor_, &GOSkillCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmitSkill_descriptor_, &EmitSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyEmitEffect_descriptor_, &DestroyEmitEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitTar_descriptor_, &HitTar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeEffect_descriptor_, &RangeEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeEffectEnd_descriptor_, &RangeEffectEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummonEffect_descriptor_, &SummonEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffEffect_descriptor_, &BuffEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySummonLifeTime_descriptor_, &NotifySummonLifeTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelStartForceMove_descriptor_, &NotifySkillModelStartForceMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelStartForceMoveStop_descriptor_, &NotifySkillModelStartForceMoveStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelStartForceMoveTeleport_descriptor_, &NotifySkillModelStartForceMoveTeleport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelPurification_descriptor_, &NotifySkillModelPurification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelStartLink_descriptor_, &NotifySkillModelStartLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelStopLink_descriptor_, &NotifySkillModelStopLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPassitiveSkillRelease_descriptor_, &NotifyPassitiveSkillRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPassitiveSkillLoad_descriptor_, &NotifyPassitiveSkillLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPassitiveSkillUnLoad_descriptor_, &NotifyPassitiveSkillUnLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillModelEmitTurn_descriptor_, &NotifySkillModelEmitTurn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBornObj_descriptor_, &NotifyBornObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyReconnectInfo_descriptor_, &NotifyReconnectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyReconnectInfo_ReconnectInfo_descriptor_, &NotifyReconnectInfo_ReconnectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOBReturnBattleRoom_descriptor_, &NotifyOBReturnBattleRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOBAppear_descriptor_, &NotifyOBAppear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyKillNPC_descriptor_, &NotifyKillNPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAltarBSIco_descriptor_, &NotifyAltarBSIco::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySkillUpLv_descriptor_, &NotifySkillUpLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBlastHurt_descriptor_, &NotifyBlastHurt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGameObjectReliveState_descriptor_, &NotifyGameObjectReliveState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCurGold_descriptor_, &NotifyCurGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCurDiamond_descriptor_, &NotifyCurDiamond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetloginRewardSuccess_descriptor_, &GetloginRewardSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetloginReward_Skin_descriptor_, &GetloginReward_Skin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetloginReward_Rune_descriptor_, &GetloginReward_Rune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetloginReward_Hero_descriptor_, &GetloginReward_Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanInviteFriends_descriptor_, &CanInviteFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanInviteFriends_Friends_descriptor_, &CanInviteFriends_Friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastHitNum_descriptor_, &LastHitNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskRoomListRet_descriptor_, &AskRoomListRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GSToGC_2eproto() {
  delete TaskData::default_instance_;
  delete TaskData_reflection_;
  delete NotifyUpdateAllTask::default_instance_;
  delete NotifyUpdateAllTask_reflection_;
  delete NotifyUpdateAllDailyTask::default_instance_;
  delete NotifyUpdateAllDailyTask_reflection_;
  delete NotifyAddOneTask::default_instance_;
  delete NotifyAddOneTask_reflection_;
  delete NotifyUpdateOneTask::default_instance_;
  delete NotifyUpdateOneTask_reflection_;
  delete NotifyDelOneTask::default_instance_;
  delete NotifyDelOneTask_reflection_;
  delete NotifyRewardsOneTask::default_instance_;
  delete NotifyRewardsOneTask_reflection_;
  delete NotifyMailRet::default_instance_;
  delete NotifyMailRet_reflection_;
  delete NotifyIsOnSS::default_instance_;
  delete NotifyIsOnSS_reflection_;
  delete NotifyOtherItemInfo::default_instance_;
  delete NotifyOtherItemInfo_reflection_;
  delete NotifyOtherItemInfo_OtherItem::default_instance_;
  delete NotifyOtherItemInfo_OtherItem_reflection_;
  delete RecoinRuneRet::default_instance_;
  delete RecoinRuneRet_reflection_;
  delete UnloadRune::default_instance_;
  delete UnloadRune_reflection_;
  delete GuideCSStepInfo::default_instance_;
  delete GuideCSStepInfo_reflection_;
  delete GuideAward::default_instance_;
  delete GuideAward_reflection_;
  delete GuideAward_awardtype::default_instance_;
  delete GuideAward_awardtype_reflection_;
  delete GuideKillsInfo::default_instance_;
  delete GuideKillsInfo_reflection_;
  delete NotifyUserLvInfo::default_instance_;
  delete NotifyUserLvInfo_reflection_;
  delete NotifyNewHeaderid::default_instance_;
  delete NotifyNewHeaderid_reflection_;
  delete NotifyOneMatchNeedOne::default_instance_;
  delete NotifyOneMatchNeedOne_reflection_;
  delete NotifyNewNickname::default_instance_;
  delete NotifyNewNickname_reflection_;
  delete RunesSlot::default_instance_;
  delete RunesSlot_reflection_;
  delete RunesBagInfo::default_instance_;
  delete RunesBagInfo_reflection_;
  delete NotifyRunesList::default_instance_;
  delete NotifyRunesList_reflection_;
  delete NotifyRemoveCommodity::default_instance_;
  delete NotifyRemoveCommodity_reflection_;
  delete NotifyGetNewCommodity::default_instance_;
  delete NotifyGetNewCommodity_reflection_;
  delete NotifyMatchTeamBaseInfo::default_instance_;
  delete NotifyMatchTeamBaseInfo_reflection_;
  delete NotifyMatchTeamPlayerInfo::default_instance_;
  delete NotifyMatchTeamPlayerInfo_reflection_;
  delete NotifyMatchTeamSwitch::default_instance_;
  delete NotifyMatchTeamSwitch_reflection_;
  delete NotifyMatchInviteJoin::default_instance_;
  delete NotifyMatchInviteJoin_reflection_;
  delete NotifyHerosInfo::default_instance_;
  delete NotifyHerosInfo_reflection_;
  delete NotifyHerosInfo_heropanelinfo::default_instance_;
  delete NotifyHerosInfo_heropanelinfo_reflection_;
  delete NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance_;
  delete NotifyHerosInfo_heropanelinfo_goodsmsg_reflection_;
  delete NotifyGoodsExpired::default_instance_;
  delete NotifyGoodsExpired_reflection_;
  delete ShortMail::default_instance_;
  delete ShortMail_reflection_;
  delete DelAndSortMail::default_instance_;
  delete DelAndSortMail_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete NotifyMailList::default_instance_;
  delete NotifyMailList_reflection_;
  delete GoodsCfgInfo::default_instance_;
  delete GoodsCfgInfo_reflection_;
  delete GoodsCfgInfo_Consume::default_instance_;
  delete GoodsCfgInfo_Consume_reflection_;
  delete GoodsBuyCfgInfo::default_instance_;
  delete GoodsBuyCfgInfo_reflection_;
  delete HeroAttributes::default_instance_;
  delete HeroAttributes_reflection_;
  delete HeroAssist::default_instance_;
  delete HeroAssist_reflection_;
  delete BattleMatcherCount::default_instance_;
  delete BattleMatcherCount_reflection_;
  delete BattleSpanTime::default_instance_;
  delete BattleSpanTime_reflection_;
  delete BattleDelayTime::default_instance_;
  delete BattleDelayTime_reflection_;
  delete UserBaseUpLv::default_instance_;
  delete UserBaseUpLv_reflection_;
  delete SecondGuideTask::default_instance_;
  delete SecondGuideTask_reflection_;
  delete SecondGuideTask_task_info::default_instance_;
  delete SecondGuideTask_task_info_reflection_;
  delete GameTips::default_instance_;
  delete GameTips_reflection_;
  delete NotifyUserReturnBattleRoom::default_instance_;
  delete NotifyUserReturnBattleRoom_reflection_;
  delete BroadcastBattleHeroInfo::default_instance_;
  delete BroadcastBattleHeroInfo_reflection_;
  delete BroadcastBattleHeroInfo_HeroInfo::default_instance_;
  delete BroadcastBattleHeroInfo_HeroInfo_reflection_;
  delete BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance_;
  delete BroadcastBattleHeroInfo_BaseGoodsInfo_reflection_;
  delete GuideLastStep::default_instance_;
  delete GuideLastStep_reflection_;
  delete NotifyUserCLDays::default_instance_;
  delete NotifyUserCLDays_reflection_;
  delete GameNotice::default_instance_;
  delete GameNotice_reflection_;
  delete GameNotice_Notice::default_instance_;
  delete GameNotice_Notice_reflection_;
  delete GuideSteps::default_instance_;
  delete GuideSteps_reflection_;
  delete PingRet::default_instance_;
  delete PingRet_reflection_;
  delete NotifyQueryNickNameRet::default_instance_;
  delete NotifyQueryNickNameRet_reflection_;
  delete NotifyQueryNickNameRet_QueryInfo::default_instance_;
  delete NotifyQueryNickNameRet_QueryInfo_reflection_;
  delete SNSInfo::default_instance_;
  delete SNSInfo_reflection_;
  delete NotifyUserSNSList::default_instance_;
  delete NotifyUserSNSList_reflection_;
  delete NotifyBattleManagerChange::default_instance_;
  delete NotifyBattleManagerChange_reflection_;
  delete NotifyBeAddFriendMs::default_instance_;
  delete NotifyBeAddFriendMs_reflection_;
  delete NotifyMsgFromUser::default_instance_;
  delete NotifyMsgFromUser_reflection_;
  delete NotifyUserSNSListChange::default_instance_;
  delete NotifyUserSNSListChange_reflection_;
  delete UserBeInvitedToBattle::default_instance_;
  delete UserBeInvitedToBattle_reflection_;
  delete NotifyAFPData::default_instance_;
  delete NotifyAFPData_reflection_;
  delete NotifyAFPData_FPInfo::default_instance_;
  delete NotifyAFPData_FPInfo_reflection_;
  delete UserBaseInfo::default_instance_;
  delete UserBaseInfo_reflection_;
  delete NotifySystemAnnounce::default_instance_;
  delete NotifySystemAnnounce_reflection_;
  delete NetClash::default_instance_;
  delete NetClash_reflection_;
  delete WarningToSelectHero::default_instance_;
  delete WarningToSelectHero_reflection_;
  delete NotifySkillModelLeading::default_instance_;
  delete NotifySkillModelLeading_reflection_;
  delete AskRet::default_instance_;
  delete AskRet_reflection_;
  delete NotifyCSHeroList::default_instance_;
  delete NotifyCSHeroList_reflection_;
  delete NotifyCSHeroList_HeroListCfg::default_instance_;
  delete NotifyCSHeroList_HeroListCfg_reflection_;
  delete HeroList::default_instance_;
  delete HeroList_reflection_;
  delete BattleBaseInfo::default_instance_;
  delete BattleBaseInfo_reflection_;
  delete RoomBaseInfo::default_instance_;
  delete RoomBaseInfo_reflection_;
  delete BattleSeatPosInfo::default_instance_;
  delete BattleSeatPosInfo_reflection_;
  delete BattleSeatPosInfo_PosInfo::default_instance_;
  delete BattleSeatPosInfo_PosInfo_reflection_;
  delete BattleStateChange::default_instance_;
  delete BattleStateChange_reflection_;
  delete CurBattleChange::default_instance_;
  delete CurBattleChange_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
  delete Dir::default_instance_;
  delete Dir_reflection_;
  delete GOAppear::default_instance_;
  delete GOAppear_reflection_;
  delete GOAppear_AppearInfo::default_instance_;
  delete GOAppear_AppearInfo_reflection_;
  delete DisappearInfo::default_instance_;
  delete DisappearInfo_reflection_;
  delete FreeState::default_instance_;
  delete FreeState_reflection_;
  delete RunningState::default_instance_;
  delete RunningState_reflection_;
  delete PrepareSkillState::default_instance_;
  delete PrepareSkillState_reflection_;
  delete ReleasingSkillState::default_instance_;
  delete ReleasingSkillState_reflection_;
  delete UsingSkillState::default_instance_;
  delete UsingSkillState_reflection_;
  delete LastingSkillState::default_instance_;
  delete LastingSkillState_reflection_;
  delete DeadState::default_instance_;
  delete DeadState_reflection_;
  delete NotifyGoodsInfo::default_instance_;
  delete NotifyGoodsInfo_reflection_;
  delete NotifyGoodsInfo_GoodsInfo::default_instance_;
  delete NotifyGoodsInfo_GoodsInfo_reflection_;
  delete BattleLoadingState::default_instance_;
  delete BattleLoadingState_reflection_;
  delete HeroPosInfo::default_instance_;
  delete HeroPosInfo_reflection_;
  delete HeroInfo::default_instance_;
  delete HeroInfo_reflection_;
  delete ChatInRoom::default_instance_;
  delete ChatInRoom_reflection_;
  delete SkillHitTar::default_instance_;
  delete SkillHitTar_reflection_;
  delete HPChange::default_instance_;
  delete HPChange_reflection_;
  delete MpChange::default_instance_;
  delete MpChange_reflection_;
  delete TryToChooseHero::default_instance_;
  delete TryToChooseHero_reflection_;
  delete NotifyChooseHeroTimeEnd::default_instance_;
  delete NotifyChooseHeroTimeEnd_reflection_;
  delete SkillEntityInfo::default_instance_;
  delete SkillEntityInfo_reflection_;
  delete FPInfo::default_instance_;
  delete FPInfo_reflection_;
  delete NotifyHPInfo::default_instance_;
  delete NotifyHPInfo_reflection_;
  delete NotifyHPInfo_HPInfo::default_instance_;
  delete NotifyHPInfo_HPInfo_reflection_;
  delete NotifyMPInfo::default_instance_;
  delete NotifyMPInfo_reflection_;
  delete NotifyMPInfo_MPInfo::default_instance_;
  delete NotifyMPInfo_MPInfo_reflection_;
  delete NotifyHeroInfo::default_instance_;
  delete NotifyHeroInfo_reflection_;
  delete NotifySkillInfo::default_instance_;
  delete NotifySkillInfo_reflection_;
  delete BattleFinish::default_instance_;
  delete BattleFinish_reflection_;
  delete Exp::default_instance_;
  delete Exp_reflection_;
  delete LevelInfo::default_instance_;
  delete LevelInfo_reflection_;
  delete AbsorbBegin::default_instance_;
  delete AbsorbBegin_reflection_;
  delete AbsorbRes::default_instance_;
  delete AbsorbRes_reflection_;
  delete CancelAbsorb::default_instance_;
  delete CancelAbsorb_reflection_;
  delete UserGameInfo::default_instance_;
  delete UserGameInfo_reflection_;
  delete HeroKills::default_instance_;
  delete HeroKills_reflection_;
  delete CurDeadTimes::default_instance_;
  delete CurDeadTimes_reflection_;
  delete CurCP::default_instance_;
  delete CurCP_reflection_;
  delete CurAtkSpeed::default_instance_;
  delete CurAtkSpeed_reflection_;
  delete CurAtkSpeed_SpeedInfo::default_instance_;
  delete CurAtkSpeed_SpeedInfo_reflection_;
  delete FuryVal::default_instance_;
  delete FuryVal_reflection_;
  delete FuryState::default_instance_;
  delete FuryState_reflection_;
  delete NotifyHeroReborn::default_instance_;
  delete NotifyHeroReborn_reflection_;
  delete RebornTimes::default_instance_;
  delete RebornTimes_reflection_;
  delete RebornSuccess::default_instance_;
  delete RebornSuccess_reflection_;
  delete PersonCPChange::default_instance_;
  delete PersonCPChange_reflection_;
  delete BroadcastBatteleRes::default_instance_;
  delete BroadcastBatteleRes_reflection_;
  delete BroadcastBatteleRes_ResInfo::default_instance_;
  delete BroadcastBatteleRes_ResInfo_reflection_;
  delete BroadcastBattelePersonalRes::default_instance_;
  delete BroadcastBattelePersonalRes_reflection_;
  delete BroadcastBuildingDestory::default_instance_;
  delete BroadcastBuildingDestory_reflection_;
  delete HeroMoveInfo::default_instance_;
  delete HeroMoveInfo_reflection_;
  delete PlayFinishVedio::default_instance_;
  delete PlayFinishVedio_reflection_;
  delete LeaveBattleSuccess::default_instance_;
  delete LeaveBattleSuccess_reflection_;
  delete BornSoler::default_instance_;
  delete BornSoler_reflection_;
  delete SkillEnd::default_instance_;
  delete SkillEnd_reflection_;
  delete AltarBSIco::default_instance_;
  delete AltarBSIco_reflection_;
  delete GOReleaseSkill::default_instance_;
  delete GOReleaseSkill_reflection_;
  delete GOSkillCD::default_instance_;
  delete GOSkillCD_reflection_;
  delete EmitSkill::default_instance_;
  delete EmitSkill_reflection_;
  delete DestroyEmitEffect::default_instance_;
  delete DestroyEmitEffect_reflection_;
  delete HitTar::default_instance_;
  delete HitTar_reflection_;
  delete RangeEffect::default_instance_;
  delete RangeEffect_reflection_;
  delete RangeEffectEnd::default_instance_;
  delete RangeEffectEnd_reflection_;
  delete SummonEffect::default_instance_;
  delete SummonEffect_reflection_;
  delete BuffEffect::default_instance_;
  delete BuffEffect_reflection_;
  delete NotifySummonLifeTime::default_instance_;
  delete NotifySummonLifeTime_reflection_;
  delete NotifySkillModelStartForceMove::default_instance_;
  delete NotifySkillModelStartForceMove_reflection_;
  delete NotifySkillModelStartForceMoveStop::default_instance_;
  delete NotifySkillModelStartForceMoveStop_reflection_;
  delete NotifySkillModelStartForceMoveTeleport::default_instance_;
  delete NotifySkillModelStartForceMoveTeleport_reflection_;
  delete NotifySkillModelPurification::default_instance_;
  delete NotifySkillModelPurification_reflection_;
  delete NotifySkillModelStartLink::default_instance_;
  delete NotifySkillModelStartLink_reflection_;
  delete NotifySkillModelStopLink::default_instance_;
  delete NotifySkillModelStopLink_reflection_;
  delete NotifyPassitiveSkillRelease::default_instance_;
  delete NotifyPassitiveSkillRelease_reflection_;
  delete NotifyPassitiveSkillLoad::default_instance_;
  delete NotifyPassitiveSkillLoad_reflection_;
  delete NotifyPassitiveSkillUnLoad::default_instance_;
  delete NotifyPassitiveSkillUnLoad_reflection_;
  delete NotifySkillModelEmitTurn::default_instance_;
  delete NotifySkillModelEmitTurn_reflection_;
  delete NotifyBornObj::default_instance_;
  delete NotifyBornObj_reflection_;
  delete NotifyReconnectInfo::default_instance_;
  delete NotifyReconnectInfo_reflection_;
  delete NotifyReconnectInfo_ReconnectInfo::default_instance_;
  delete NotifyReconnectInfo_ReconnectInfo_reflection_;
  delete NotifyOBReturnBattleRoom::default_instance_;
  delete NotifyOBReturnBattleRoom_reflection_;
  delete NotifyOBAppear::default_instance_;
  delete NotifyOBAppear_reflection_;
  delete NotifyKillNPC::default_instance_;
  delete NotifyKillNPC_reflection_;
  delete NotifyAltarBSIco::default_instance_;
  delete NotifyAltarBSIco_reflection_;
  delete NotifySkillUpLv::default_instance_;
  delete NotifySkillUpLv_reflection_;
  delete NotifyBlastHurt::default_instance_;
  delete NotifyBlastHurt_reflection_;
  delete NotifyGameObjectReliveState::default_instance_;
  delete NotifyGameObjectReliveState_reflection_;
  delete NotifyCurGold::default_instance_;
  delete NotifyCurGold_reflection_;
  delete NotifyCurDiamond::default_instance_;
  delete NotifyCurDiamond_reflection_;
  delete GetloginRewardSuccess::default_instance_;
  delete GetloginRewardSuccess_reflection_;
  delete GetloginReward_Skin::default_instance_;
  delete GetloginReward_Skin_reflection_;
  delete GetloginReward_Rune::default_instance_;
  delete GetloginReward_Rune_reflection_;
  delete GetloginReward_Hero::default_instance_;
  delete GetloginReward_Hero_reflection_;
  delete CanInviteFriends::default_instance_;
  delete CanInviteFriends_reflection_;
  delete CanInviteFriends_Friends::default_instance_;
  delete CanInviteFriends_Friends_reflection_;
  delete LastHitNum::default_instance_;
  delete LastHitNum_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete AskRoomListRet::default_instance_;
  delete AskRoomListRet_reflection_;
}

void protobuf_AddDesc_GSToGC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GSToGC.proto\022\006GSToGC\"E\n\010TaskData\022\017\n\007ta"
    "sk_id\030\001 \001(\r\022\021\n\ttask_guid\030\002 \001(\r\022\025\n\rtask_c"
    "urCount\030\003 \001(\r\"u\n\023NotifyUpdateAllTask\022:\n\005"
    "msgid\030\001 \001(\0162\r.GSToGC.MsgID:\034eMsgToGCFrom"
    "GS_UpdateAllTask\022\"\n\010taskList\030\002 \003(\0132\020.GST"
    "oGC.TaskData\"\177\n\030NotifyUpdateAllDailyTask"
    "\022\?\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:!eMsgToGC"
    "FromGS_UpdateAllDailyTask\022\"\n\010taskList\030\002 "
    "\003(\0132\020.GSToGC.TaskData\"n\n\020NotifyAddOneTas"
    "k\0227\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\031eMsgToG"
    "CFromGS_AddOneTask\022!\n\007oneTask\030\002 \001(\0132\020.GS"
    "ToGC.TaskData\"t\n\023NotifyUpdateOneTask\022:\n\005"
    "msgid\030\001 \001(\0162\r.GSToGC.MsgID:\034eMsgToGCFrom"
    "GS_UpdateOneTask\022!\n\007oneTask\030\002 \001(\0132\020.GSTo"
    "GC.TaskData\"^\n\020NotifyDelOneTask\0227\n\005msgid"
    "\030\001 \001(\0162\r.GSToGC.MsgID:\031eMsgToGCFromGS_De"
    "lOneTask\022\021\n\ttask_guid\030\002 \001(\r\"f\n\024NotifyRew"
    "ardsOneTask\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:\035eMsgToGCFromGS_RewardsOneTask\022\021\n\ttask"
    "_guid\030\002 \001(\r\"l\n\rNotifyMailRet\022:\n\005msgid\030\001 "
    "\001(\0162\r.GSToGC.MsgID:\034eMsgToGCFromGS_Notif"
    "yMailRet\022\016\n\006mailid\030\002 \001(\005\022\017\n\007errcode\030\003 \001("
    "\005\"W\n\014NotifyIsOnSS\0229\n\005msgid\030\001 \001(\0162\r.GSToG"
    "C.MsgID:\033eMsgToGCFromCS_NotifyIsOnSS\022\014\n\004"
    "ssid\030\002 \001(\r\"\322\001\n\023NotifyOtherItemInfo\022@\n\005ms"
    "gid\030\001 \001(\0162\r.GSToGC.MsgID:\"eMsgToGCFromGS"
    "_NotifyOtherItemInfo\0223\n\004item\030\002 \003(\0132%.GST"
    "oGC.NotifyOtherItemInfo.OtherItem\032D\n\tOth"
    "erItem\022\017\n\007item_id\030\001 \001(\r\022\020\n\010item_num\030\002 \001("
    "\r\022\024\n\014expired_time\030\003 \001(\003\"\\\n\rRecoinRuneRet"
    "\022:\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\034eMsgToGC"
    "FromGS_RecoinRuneRet\022\017\n\007rune_id\030\002 \001(\r\"`\n"
    "\nUnloadRune\0227\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:\031eMsgToGCFromGS_UnloadRune\022\014\n\004page\030\002 \001"
    "(\005\022\013\n\003pos\030\003 \001(\005\"j\n\017GuideCSStepInfo\0226\n\005ms"
    "gid\030\001 \001(\0162\r.GSToGC.MsgID:\030eMsgToGCFromGS"
    "_GuideResp\022\017\n\007allcomp\030\002 \001(\010\022\016\n\006taskid\030\003 "
    "\003(\r\"\363\001\n\nGuideAward\0227\n\005msgid\030\001 \001(\0162\r.GSTo"
    "GC.MsgID:\031eMsgToGCFromGS_GuideAward\022/\n\ta"
    "wardlist\030\002 \003(\0132\034.GSToGC.GuideAward.award"
    "type\032\?\n\tawardtype\022$\n\002dt\030\001 \001(\0162\030.GSToGC.G"
    "uideAward.dtype\022\014\n\004idxn\030\002 \001(\r\":\n\005dtype\022\r"
    "\n\ttype_gold\020\001\022\020\n\014type_diamond\020\002\022\020\n\014type_"
    "goodsid\020\003\"l\n\016GuideKillsInfo\022;\n\005msgid\030\001 \001"
    "(\0162\r.GSToGC.MsgID:\035eMsgToGCFromCS_GuideK"
    "illsInfo\022\014\n\004guid\030\002 \001(\004\022\017\n\007npctype\030\003 \001(\005\""
    "p\n\020NotifyUserLvInfo\022=\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID:\037eMsgToGCFromGS_NotifyUserLvIn"
    "fo\022\r\n\005curlv\030\002 \001(\r\022\016\n\006curexp\030\003 \001(\r\"v\n\021Not"
    "ifyNewHeaderid\022>\n\005msgid\030\001 \001(\0162\r.GSToGC.M"
    "sgID: eMsgToGCFromGS_NotifyNewHeaderid\022\014"
    "\n\004guid\030\002 \001(\004\022\023\n\013newheaderid\030\003 \001(\r\"{\n\025Not"
    "ifyOneMatchNeedOne\022B\n\005msgid\030\001 \001(\0162\r.GSTo"
    "GC.MsgID:$eMsgToGCFromGS_NotifyOneMatchN"
    "eedOne\022\r\n\005mapid\030\002 \001(\r\022\017\n\007fightid\030\003 \001(\r\"v"
    "\n\021NotifyNewNickname\022>\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID: eMsgToGCFromGS_NotifyNewNickn"
    "ame\022\014\n\004guid\030\002 \001(\004\022\023\n\013newnickname\030\003 \001(\t\":"
    "\n\tRunesSlot\022\017\n\007slotpos\030\001 \001(\005\022\016\n\006runeid\030\002"
    " \001(\r\022\014\n\004page\030\003 \001(\005\"<\n\014RunesBagInfo\022\016\n\006ru"
    "neid\030\001 \001(\r\022\013\n\003num\030\002 \001(\005\022\017\n\007gottime\030\003 \001(\003"
    "\"\247\001\n\017NotifyRunesList\022<\n\005msgid\030\001 \001(\0162\r.GS"
    "ToGC.MsgID:\036eMsgToGCFromGS_NotifyRunesLi"
    "st\022*\n\014runesbaginfo\030\002 \003(\0132\024.GSToGC.RunesB"
    "agInfo\022*\n\017runes_slot_info\030\003 \003(\0132\021.GSToGC"
    ".RunesSlot\"p\n\025NotifyRemoveCommodity\022B\n\005m"
    "sgid\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToGCFromG"
    "S_NotifyRemoveCommodity\022\023\n\013Commodityid\030\002"
    " \003(\r\"p\n\025NotifyGetNewCommodity\022B\n\005msgid\030\001"
    " \001(\0162\r.GSToGC.MsgID:$eMsgToGCFromGS_Noti"
    "fyGetNewCommodity\022\023\n\013Commodityid\030\002 \001(\r\"\221"
    "\001\n\027NotifyMatchTeamBaseInfo\022D\n\005msgid\030\001 \001("
    "\0162\r.GSToGC.MsgID:&eMsgToGCFromGS_NotifyM"
    "atchTeamBaseInfo\022\016\n\006teamid\030\002 \001(\r\022\021\n\tmatc"
    "htype\030\003 \001(\r\022\r\n\005mapid\030\004 \001(\r\"\273\001\n\031NotifyMat"
    "chTeamPlayerInfo\022F\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID:(eMsgToGCFromGS_NotifyMatchTeamPl"
    "ayerInfo\022\017\n\007postion\030\002 \001(\r\022\020\n\010isInsert\030\003 "
    "\001(\010\022\020\n\010nickname\030\004 \001(\t\022\016\n\006headid\030\005 \001(\r\022\021\n"
    "\tuserlevel\030\006 \001(\r\"n\n\025NotifyMatchTeamSwitc"
    "h\022B\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToG"
    "CFromGS_NotifyMatchTeamSwitch\022\021\n\tstartfl"
    "ag\030\002 \001(\010\"m\n\025NotifyMatchInviteJoin\022B\n\005msg"
    "id\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToGCFromGS_"
    "NotifyMatchInviteJoin\022\020\n\010nickname\030\002 \001(\t\""
    "\227\003\n\017NotifyHerosInfo\022<\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID:\036eMsgToGCFromBS_NotifyHerosInf"
    "o\0223\n\004info\030\002 \003(\0132%.GSToGC.NotifyHerosInfo"
    ".heropanelinfo\032\220\002\n\rheropanelinfo\022\017\n\007camg"
    "pid\030\001 \001(\005\022\014\n\004guid\030\002 \001(\003\022\016\n\006herolv\030\003 \001(\005\022"
    "\020\n\010nickname\030\004 \001(\t\022\017\n\007killnum\030\005 \001(\005\022\021\n\tde"
    "adtimes\030\006 \001(\005\022\020\n\010asstimes\030\007 \001(\005\022\017\n\007lasth"
    "it\030\010 \001(\005\022=\n\005goods\030\t \003(\0132..GSToGC.NotifyH"
    "erosInfo.heropanelinfo.goodsmsg\022\016\n\006heroi"
    "d\030\n \001(\r\032(\n\010goodsmsg\022\014\n\004grid\030\001 \001(\005\022\016\n\006goo"
    "did\030\002 \001(\005\"k\n\022NotifyGoodsExpired\022\?\n\005msgid"
    "\030\001 \001(\0162\r.GSToGC.MsgID:!eMsgToGCFromBS_No"
    "tifyGoodsExpired\022\024\n\014commondityid\030\002 \003(\005\"}"
    "\n\tShortMail\022\016\n\006mailid\030\001 \001(\005\022\"\n\010mailType\030"
    "\002 \001(\0162\020.GSToGC.MailType\022\021\n\tmailTitle\030\003 \001"
    "(\t\022)\n\tmailState\030\004 \001(\0162\026.GSToGC.EMailCurt"
    "State\"\206\001\n\016DelAndSortMail\022C\n\005msgid\030\001 \001(\0162"
    "\r.GSToGC.MsgID:%eMsgToGCFromGS_NotifyIfM"
    "ailDelAndSort\022\016\n\006mailid\030\002 \001(\005\022\021\n\tmailidD"
    "el\030\003 \001(\010\022\014\n\004sort\030\004 \001(\010\"\242\001\n\010MailInfo\022;\n\005m"
    "sgid\030\001 \001(\0162\r.GSToGC.MsgID:\035eMsgToGCFromG"
    "S_NotifyMailInfo\022\016\n\006mailid\030\002 \001(\005\022\023\n\013mail"
    "content\030\003 \001(\t\022\016\n\006sender\030\004 \001(\t\022\022\n\ncreateT"
    "ime\030\005 \001(\t\022\020\n\010mailgift\030\006 \001(\t\"r\n\016NotifyMai"
    "lList\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\035eMs"
    "gToGCFromGS_NotifyUserMail\022#\n\010mailList\030\002"
    " \003(\0132\021.GSToGC.ShortMail\"\203\002\n\014GoodsCfgInfo"
    "\022\016\n\006goodid\030\001 \001(\005\022-\n\007consume\030\002 \003(\0132\034.GSTo"
    "GC.GoodsCfgInfo.Consume\022.\n\010cfg_type\030\003 \001("
    "\0162\034.GSToGC.GoodsCfgInfo.CfgType\032-\n\007Consu"
    "me\022\023\n\013consumetype\030\001 \001(\005\022\r\n\005price\030\002 \001(\005\"U"
    "\n\007CfgType\022\022\n\016CfgType_Common\020\000\022\024\n\020CfgType"
    "_Discount\020\001\022\017\n\013CfgType_hot\020\002\022\017\n\013CfgType_"
    "New\020\003\"v\n\017GoodsBuyCfgInfo\022\?\n\005msgid\030\001 \001(\0162"
    "\r.GSToGC.MsgID:!eMsgToGCFromGS_NotifyGoo"
    "dsCfgInfo\022\"\n\004info\030\002 \003(\0132\024.GSToGC.GoodsCf"
    "gInfo\"\215\002\n\016HeroAttributes\022A\n\005msgid\030\001 \001(\0162"
    "\r.GSToGC.MsgID:#eMsgToGCFromGS_NotifyHer"
    "oAttributes\022\014\n\004guid\030\002 \001(\004\022\023\n\013PlayerSpeed"
    "\030\003 \001(\005\022\026\n\016AttackInterval\030\004 \001(\005\022\023\n\013Attack"
    "Range\030\005 \001(\005\022\026\n\016ResurgenceTime\030\006 \001(\005\022\024\n\014P"
    "hysicAttack\030\007 \001(\005\022\024\n\014SpellsAttack\030\010 \001(\005\022"
    "\021\n\tPhysicDef\030\t \001(\005\022\021\n\tSpellsDef\030\n \001(\005\"i\n"
    "\nHeroAssist\022=\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:\037eMsgToGCFromGS_NotifyHeroAssist\022\014\n\004gu"
    "id\030\002 \001(\004\022\016\n\006assist\030\003 \001(\005\"{\n\022BattleMatche"
    "rCount\022D\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:&eM"
    "sgToGCFromGS_NotifyBattleMatherCount\022\r\n\005"
    "count\030\002 \001(\005\022\020\n\010maxcount\030\003 \001(\005\"e\n\016BattleS"
    "panTime\022A\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:#e"
    "MsgToGCFromGS_NotifyBattleSpanTime\022\020\n\010sp"
    "anTime\030\002 \001(\003\"h\n\017BattleDelayTime\022B\n\005msgid"
    "\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToGCFromGS_No"
    "tifyBattleDelayTime\022\021\n\tdelayTime\030\002 \001(\003\"["
    "\n\014UserBaseUpLv\022\?\n\005msgid\030\001 \001(\0162\r.GSToGC.M"
    "sgID:!eMsgToGCFromGS_NotifyUserBaseUpLv\022"
    "\n\n\002lv\030\002 \001(\005\"\267\001\n\017SecondGuideTask\022E\n\005msgid"
    "\030\001 \001(\0162\r.GSToGC.MsgID:\'eMsgToGCFromGs_No"
    "tifySecondaryGuideTask\0223\n\010taskinfo\030\002 \003(\013"
    "2!.GSToGC.SecondGuideTask.task_info\032(\n\tt"
    "ask_info\022\016\n\006taskid\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"j\n"
    "\010GameTips\022<\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:"
    "\036eMsgToGCFromGS_NotifyGuideTips\022\020\n\010erroc"
    "ode\030\002 \001(\005\022\016\n\006campid\030\003 \001(\005\"e\n\032NotifyUserR"
    "eturnBattleRoom\022G\n\005msgid\030\001 \001(\0162\r.GSToGC."
    "MsgID:)eMsgToGCFromGS_NotifyUserReturnBa"
    "ttleRoom\"\340\003\n\027BroadcastBattleHeroInfo\022D\n\005"
    "msgid\030\001 \001(\0162\r.GSToGC.MsgID:&eMsgToGCFrom"
    "GS_BroadcastBattleHeroInfo\022:\n\010heroinfo\030\002"
    " \003(\0132(.GSToGC.BroadcastBattleHeroInfo.He"
    "roInfo\022@\n\tgoodsinfo\030\003 \003(\0132-.GSToGC.Broad"
    "castBattleHeroInfo.BaseGoodsInfo\032\324\001\n\010Her"
    "oInfo\022\014\n\004guid\030\001 \001(\004\022\020\n\010nickname\030\002 \001(\t\022\r\n"
    "\005level\030\003 \001(\005\022\021\n\tdeadtimes\030\004 \001(\005\022\016\n\006campi"
    "d\030\005 \001(\005\022\016\n\006headid\030\006 \001(\005\022\n\n\002hp\030\007 \001(\005\022\n\n\002m"
    "p\030\010 \001(\005\022\013\n\003pos\030\t \001(\005\022\022\n\nmasterguid\030\n \001(\004"
    "\022\r\n\005kills\030\013 \001(\005\022\016\n\006assist\030\014 \001(\005\022\016\n\006heroi"
    "d\030\r \001(\005\032*\n\rBaseGoodsInfo\022\r\n\005index\030\r \001(\005\022"
    "\n\n\002id\030\016 \001(\005\"t\n\rGuideLastStep\022C\n\005msgid\030\001 "
    "\001(\0162\r.GSToGC.MsgID:%eMsgToGCFromCS_Notif"
    "yGuideLastComStep\022\016\n\006ifComp\030\002 \001(\010\022\016\n\006ste"
    "pid\030\003 \001(\005\"\250\001\n\020NotifyUserCLDays\022=\n\005msgid\030"
    "\001 \001(\0162\r.GSToGC.MsgID:\037eMsgToGCFromGS_Not"
    "ifyUserCLDays\022\r\n\005month\030\002 \001(\r\022\r\n\005today\030\003 "
    "\001(\r\022\023\n\013totalCldays\030\004 \001(\r\022\016\n\006cldays\030\005 \001(\r"
    "\022\022\n\nisTodayCan\030\006 \001(\010\"\313\001\n\nGameNotice\0229\n\005m"
    "sgid\030\001 \001(\0162\r.GSToGC.MsgID:\033eMsgToGCFromG"
    "S_NotifyNotice\022)\n\006notice\030\002 \003(\0132\031.GSToGC."
    "GameNotice.Notice\032W\n\006Notice\022\r\n\005title\030\001 \001"
    "(\t\022\014\n\004flag\030\002 \001(\r\022\016\n\006status\030\003 \001(\r\022\020\n\010prio"
    "rity\030\004 \001(\r\022\016\n\006notice\030\005 \001(\t\"\213\001\n\nGuideStep"
    "s\022B\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToG"
    "CFromGS_NotifyUserGuideSetups\022\014\n\004guid\030\002 "
    "\001(\004\022\014\n\004type\030\003 \001(\005\022\016\n\006ifComp\030\004 \001(\010\022\r\n\005ste"
    "ps\030\005 \001(\t\"`\n\007PingRet\0229\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID:\033eMsgToGCFromGS_GCAskPingRet\022\014"
    "\n\004time\030\002 \001(\003\022\014\n\004flag\030\003 \001(\005\"\304\001\n\026NotifyQue"
    "ryNickNameRet\022C\n\005msgid\030\001 \001(\0162\r.GSToGC.Ms"
    "gID:%eMsgToGCFromGS_NotifyQueryNickNameR"
    "et\0226\n\004info\030\002 \003(\0132(.GSToGC.NotifyQueryNic"
    "kNameRet.QueryInfo\032-\n\tQueryInfo\022\020\n\010nickn"
    "ame\030\001 \001(\t\022\016\n\006headid\030\002 \001(\005\"i\n\007SNSInfo\022\014\n\004"
    "type\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\016\n\006headid\030\003"
    " \001(\r\022\016\n\006status\030\004 \001(\005\022\017\n\007guididx\030\005 \001(\004\022\r\n"
    "\005viplv\030\006 \001(\r\"s\n\021NotifyUserSNSList\022\?\n\006msg"
    "num\030\001 \001(\0162\r.GSToGC.MsgID: eMsgToGCFromGS"
    "_NotifyUserSNSList\022\035\n\004info\030\002 \003(\0132\017.GSToG"
    "C.SNSInfo\"c\n\031NotifyBattleManagerChange\022F"
    "\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:(eMsgToGCFr"
    "omGS_NotifyBattleManagerChange\"\234\001\n\023Notif"
    "yBeAddFriendMs\022B\n\006msgnum\030\001 \001(\0162\r.GSToGC."
    "MsgID:#eMsgToGCFromGS_NotifyBeAddFriendM"
    "sg\022\024\n\014sendnickname\030\002 \001(\t\022\023\n\013recnickname\030"
    "\003 \001(\t\022\026\n\016sdnder_guididx\030\004 \001(\004\"\230\001\n\021Notify"
    "MsgFromUser\022\?\n\006msgnum\030\001 \001(\0162\r.GSToGC.Msg"
    "ID: eMsgToGCFromGS_NotifyMsgFromUser\022\017\n\007"
    "guididx\030\002 \001(\004\022\020\n\010nickname\030\003 \001(\t\022\016\n\006headi"
    "d\030\004 \001(\005\022\017\n\007chatstr\030\005 \001(\t\"\177\n\027NotifyUserSN"
    "SListChange\022E\n\006msgnum\030\001 \001(\0162\r.GSToGC.Msg"
    "ID:&eMsgToGCFromGS_NotifyUserSNSListChan"
    "ge\022\017\n\007guididx\030\002 \001(\004\022\014\n\004type\030\003 \001(\r\"\214\001\n\025Us"
    "erBeInvitedToBattle\022C\n\006msgnum\030\001 \001(\0162\r.GS"
    "ToGC.MsgID:$eMsgToGCFromGS_UserBeInvited"
    "ToBattle\022\020\n\010battleid\030\002 \001(\005\022\013\n\003pwd\030\003 \001(\t\022"
    "\017\n\007Invitor\030\004 \001(\t\"\332\006\n\rNotifyAFPData\022;\n\006ms"
    "gnum\030\001 \001(\0162\r.GSToGC.MsgID:\034eMsgToGCFromG"
    "S_NotifyAFPData\022\014\n\004guid\030\002 \001(\004\022*\n\004info\030\003 "
    "\003(\0132\034.GSToGC.NotifyAFPData.FPInfo\032%\n\006FPI"
    "nfo\022\014\n\004type\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\252\005\n\nEnu"
    "mFpType\022\013\n\007PhyHurt\020\001\022\r\n\tMagicHurt\020\002\022\t\n\005C"
    "urHP\020\003\022\t\n\005CurMP\020\004\022\r\n\tPhyAttack\020\005\022\017\n\013Magi"
    "cAttack\020\006\022\016\n\nPhyDefense\020\007\022\020\n\014MagicDefens"
    "e\020\010\022\r\n\tMoveSpeed\020\t\022\017\n\013AttackSpeed\020\n\022\t\n\005M"
    "axHP\020\013\022\t\n\005MaxMP\020\014\022\021\n\rHPRecoverRate\020\r\022\021\n\r"
    "MPRecoverRate\020\016\022\016\n\nReliveTime\020\017\022\r\n\tDizzi"
    "ness\020\020\022\013\n\007Silence\020\021\022\013\n\007PosMove\020\022\022\013\n\007Rebo"
    "und\020\023\022\020\n\014PhySuckBlood\020\024\022\n\n\006Disarm\020\025\022\014\n\010R"
    "estrain\020\026\022\016\n\nCriPersent\020\027\022\013\n\007CriHarm\020\030\022\r"
    "\n\tCPRecover\020\031\022\022\n\016PassitiveSkill\020\032\022\r\n\tInv"
    "isible\020\033\022\016\n\nAttackDist\020\034\022\014\n\010TrueHurt\020\035\022\016"
    "\n\nPhyPassNum\020\036\022\022\n\016PhyPassPercent\020\037\022\020\n\014Ma"
    "gicPassNum\020 \022\024\n\020MagicPassPercent\020!\022\022\n\016Co"
    "oldownReduce\020\"\022\020\n\014PhyDmgReduce\020#\022\022\n\016Magi"
    "cDmgReduce\020$\022\021\n\rTrueDmgReduce\020%\022\023\n\017PhyDm"
    "gReduceNum\020&\022\025\n\021MagicDmgReduceNum\020\'\022\024\n\020T"
    "rueDmgReduceNum\020(\022\022\n\016MagicSuckBlood\020)\"\316\002"
    "\n\014UserBaseInfo\022\?\n\005msgid\030\001 \001(\0162\r.GSToGC.M"
    "sgID:!eMsgToGCFromGS_NotifyUserBaseInfo\022"
    "\014\n\004guid\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\020\n\010nickname\030"
    "\004 \001(\t\022\016\n\006headid\030\005 \001(\005\022\013\n\003sex\030\006 \001(\005\022\020\n\010cu"
    "rscore\030\007 \001(\003\022\023\n\013curdiamoand\030\010 \001(\003\022\017\n\007cur"
    "gold\030\t \001(\003\022\r\n\005mapid\030\013 \001(\005\022\023\n\013ifreconnect"
    "\030\014 \001(\010\022\020\n\010battleid\030\r \001(\004\022\r\n\005level\030\016 \001(\005\022"
    "\021\n\tvip_level\030\017 \001(\005\022\021\n\tvip_score\030\020 \001(\005\022\017\n"
    "\007cur_exp\030\021 \001(\005\"y\n\024NotifySystemAnnounce\022A"
    "\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:#eMsgToGCFr"
    "omGS_NotifySystemAnnounce\022\014\n\004type\030\002 \001(\005\022"
    "\020\n\010announce\030\003 \001(\t\"G\n\010NetClash\022;\n\005msgid\030\001"
    " \001(\0162\r.GSToGC.MsgID:\035eMsgToGCFromGS_Noti"
    "fyNetClash\"W\n\023WarningToSelectHero\022@\n\005msg"
    "id\030\001 \001(\0162\r.GSToGC.MsgID:\"eMsgToGCFromGS_"
    "WarningToSelectHero\"\261\001\n\027NotifySkillModel"
    "Leading\022D\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:&e"
    "MsgToGCFromGS_NotifySkillModelLeading\022\014\n"
    "\004guid\030\002 \001(\004\022\020\n\010effectid\030\003 \001(\r\022\020\n\010uniquei"
    "d\030\004 \001(\005\022\017\n\007targuid\030\005 \001(\004\022\r\n\005state\030\006 \001(\005\""
    "a\n\006AskRet\0225\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:"
    "\027eMsgToGCFromGS_GCAskRet\022\r\n\005askid\030\002 \001(\005\022"
    "\021\n\terrorcode\030\003 \001(\005\"\316\001\n\020NotifyCSHeroList\022"
    "=\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\037eMsgToGCF"
    "romGS_NotifyCSHeroList\0225\n\007herocfg\030\002 \003(\0132"
    "$.GSToGC.NotifyCSHeroList.HeroListCfg\032D\n"
    "\013HeroListCfg\022\016\n\006heroid\030\001 \001(\r\022\024\n\014expired_"
    "time\030\002 \001(\003\022\017\n\007if_free\030\003 \001(\010\"i\n\010HeroList\022"
    ";\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\035eMsgToGCF"
    "romGS_NotifyHeroList\022\016\n\006heroid\030\002 \003(\r\022\020\n\010"
    "timeDiff\030\003 \001(\003\"\211\001\n\016BattleBaseInfo\022A\n\005msg"
    "id\030\001 \001(\0162\r.GSToGC.MsgID:#eMsgToGCFromGS_"
    "NotifyBattleBaseInfo\022\020\n\010battleid\030\002 \001(\004\022\r"
    "\n\005mapid\030\003 \001(\r\022\023\n\013ifReconnect\030\004 \001(\010\"n\n\014Ro"
    "omBaseInfo\022\?\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":!eMsgToGCFromGS_NotifyRoomBaseInfo\022\016\n\006r"
    "oomid\030\002 \001(\004\022\r\n\005mapid\030\003 \001(\r\"\206\002\n\021BattleSea"
    "tPosInfo\022D\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:&"
    "eMsgToGCFromGS_NotifyBattleSeatPosInfo\0222"
    "\n\007posinfo\030\002 \003(\0132!.GSToGC.BattleSeatPosIn"
    "fo.PosInfo\032w\n\007PosInfo\022\013\n\003pos\030\001 \001(\005\022\014\n\004gu"
    "id\030\002 \001(\004\022\020\n\010nickname\030\003 \001(\t\022\020\n\010ifmaster\030\004"
    " \001(\010\022\017\n\007ifready\030\005 \001(\010\022\016\n\006headid\030\006 \001(\005\022\014\n"
    "\004gold\030\007 \001(\003\"\177\n\021BattleStateChange\022D\n\005msgi"
    "d\030\001 \001(\0162\r.GSToGC.MsgID:&eMsgToGCFromGS_N"
    "otifyBattleStateChange\022\r\n\005state\030\002 \001(\005\022\025\n"
    "\rstatetimeleft\030\003 \001(\005\"\204\001\n\017CurBattleChange"
    "\022B\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToGC"
    "FromGS_NotifyCurBattleChange\022\014\n\004ssid\030\002 \001"
    "(\005\022\020\n\010battleid\030\003 \001(\004\022\r\n\005mapid\030\004 \001(\005\"\033\n\003P"
    "os\022\t\n\001x\030\001 \001(\005\022\t\n\001z\030\003 \001(\005\"\024\n\003Dir\022\r\n\005angle"
    "\030\004 \001(\005\"\300\002\n\010GOAppear\022C\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID:%eMsgToGCFromGS_NotifyGameObje"
    "ctAppear\022)\n\004info\030\002 \003(\0132\033.GSToGC.GOAppear"
    ".AppearInfo\032\303\001\n\nAppearInfo\022\022\n\nmasterguid"
    "\030\001 \001(\004\022\017\n\007objguid\030\002 \001(\004\022\014\n\004camp\030\003 \001(\005\022\030\n"
    "\003pos\030\004 \001(\0132\013.GSToGC.Pos\022\030\n\003dir\030\005 \001(\0132\013.G"
    "SToGC.Dir\022\n\n\002hp\030\006 \001(\r\022\n\n\002mp\030\007 \001(\r\022!\n\010obj"
    "_type\030\010 \001(\0162\017.GSToGC.ObjType\022\023\n\013obj_type"
    "_id\030\t \001(\r\"e\n\rDisappearInfo\022F\n\005msgid\030\001 \001("
    "\0162\r.GSToGC.MsgID:(eMsgToGCFromGS_NotifyG"
    "ameObjectDisappear\022\014\n\004guid\030\002 \003(\004\"\230\001\n\tFre"
    "eState\022F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:(eM"
    "sgToGCFromGS_NotifyGameObjectFreeState\022\017"
    "\n\007objguid\030\002 \001(\004\022\030\n\003pos\030\003 \001(\0132\013.GSToGC.Po"
    "s\022\030\n\003dir\030\004 \001(\0132\013.GSToGC.Dir\"\255\001\n\014RunningS"
    "tate\022E\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\'eMsg"
    "ToGCFromGS_NotifyGameObjectRunState\022\017\n\007o"
    "bjguid\030\002 \001(\004\022\030\n\003pos\030\003 \001(\0132\013.GSToGC.Pos\022\030"
    "\n\003dir\030\004 \001(\0132\013.GSToGC.Dir\022\021\n\tmovespeed\030\005 "
    "\001(\005\"\331\001\n\021PrepareSkillState\022N\n\005msgid\030\001 \001(\016"
    "2\r.GSToGC.MsgID:0eMsgToGCFromGS_NotifyGa"
    "meObjectPrepareSkillState\022\017\n\007objguid\030\002 \001"
    "(\004\022\017\n\007skillid\030\003 \001(\005\022\030\n\003pos\030\004 \001(\0132\013.GSToG"
    "C.Pos\022\030\n\003dir\030\005 \001(\0132\013.GSToGC.Dir\022\017\n\007targu"
    "id\030\006 \001(\004\022\r\n\005speed\030\007 \001(\005\"\314\001\n\023ReleasingSki"
    "llState\022N\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:0e"
    "MsgToGCFromGS_NotifyGameObjectReleaseSki"
    "llState\022\017\n\007objguid\030\002 \001(\004\022\017\n\007skillid\030\003 \001("
    "\005\022\030\n\003pos\030\004 \001(\0132\013.GSToGC.Pos\022\030\n\003dir\030\005 \001(\013"
    "2\013.GSToGC.Dir\022\017\n\007targuid\030\006 \001(\004\"\306\001\n\017Using"
    "SkillState\022L\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":.eMsgToGCFromGS_NotifyGameObjectUsingSk"
    "illState\022\017\n\007objguid\030\002 \001(\004\022\017\n\007skillid\030\003 \001"
    "(\005\022\030\n\003pos\030\004 \001(\0132\013.GSToGC.Pos\022\030\n\003dir\030\005 \001("
    "\0132\013.GSToGC.Dir\022\017\n\007targuid\030\006 \001(\004\"\312\001\n\021Last"
    "ingSkillState\022N\n\005msgid\030\001 \001(\0162\r.GSToGC.Ms"
    "gID:0eMsgToGCFromGS_NotifyGameObjectLast"
    "ingSkillState\022\017\n\007objguid\030\002 \001(\004\022\017\n\007skilli"
    "d\030\003 \001(\005\022\030\n\003pos\030\004 \001(\0132\013.GSToGC.Pos\022\030\n\003dir"
    "\030\005 \001(\0132\013.GSToGC.Dir\022\017\n\007targuid\030\006 \001(\004\"\246\001\n"
    "\tDeadState\022F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":(eMsgToGCFromGS_NotifyGameObjectDeadSta"
    "te\022\017\n\007objguid\030\002 \001(\004\022\030\n\003pos\030\003 \001(\0132\013.GSToG"
    "C.Pos\022\030\n\003dir\030\004 \001(\0132\013.GSToGC.Dir\022\014\n\004spot\030"
    "\005 \001(\010\"\372\001\n\017NotifyGoodsInfo\022;\n\005msgid\030\001 \001(\016"
    "2\r.GSToGC.MsgID:\035eMsgToGCFromGS_NotifyGo"
    "odsInf\022\014\n\004guid\030\002 \001(\004\022/\n\004info\030\003 \003(\0132!.GST"
    "oGC.NotifyGoodsInfo.GoodsInfo\032k\n\tGoodsIn"
    "fo\022\013\n\003num\030\001 \001(\005\022\013\n\003pos\030\002 \001(\005\022\022\n\nifCompos"
    "ed\030\003 \001(\010\022\016\n\006tyepid\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\022"
    "\021\n\tstatetime\030\006 \001(\005\"z\n\022BattleLoadingState"
    "\022E\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\'eMsgToGC"
    "FromGS_NotifyBattleLoadingState\022\014\n\004guid\030"
    "\002 \001(\003\022\017\n\007loadper\030\003 \001(\005\"*\n\013HeroPosInfo\022\013\n"
    "\003pos\030\002 \001(\005\022\016\n\006heroid\030\003 \001(\005\"w\n\010HeroInfo\022A"
    "\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:#eMsgToGCFr"
    "omGS_NotifyBattleHeroInfo\022(\n\013heroposinfo"
    "\030\002 \001(\0132\023.GSToGC.HeroPosInfo\"`\n\nChatInRoo"
    "m\0227\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\031eMsgToG"
    "CFromGS_ChatInRoom\022\013\n\003pos\030\002 \001(\005\022\014\n\004chat\030"
    "\003 \001(\t\"\200\001\n\013SkillHitTar\022A\n\005msgid\030\001 \001(\0162\r.G"
    "SToGC.MsgID:#eMsgToGCFromGS_NotifySkillH"
    "itTarget\022\014\n\004guid\030\002 \001(\003\022\017\n\007skillid\030\003 \001(\005\022"
    "\017\n\007targuid\030\004 \001(\003\"\213\001\n\010HPChange\022;\n\005msgid\030\001"
    " \001(\0162\r.GSToGC.MsgID:\035eMsgToGCFromGS_Noti"
    "fyHPChange\022\014\n\004guid\030\002 \001(\004\022\n\n\002hp\030\003 \001(\005\022(\n\006"
    "reason\030\004 \001(\0162\030.GSToGC.HPMPChangeReason\"\213"
    "\001\n\010MpChange\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:\035eMsgToGCFromGS_NotifyMPChange\022\014\n\004guid"
    "\030\002 \001(\004\022\n\n\002mp\030\003 \001(\005\022(\n\006reason\030\004 \001(\0162\030.GST"
    "oGC.HPMPChangeReason\"r\n\017TryToChooseHero\022"
    "B\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:$eMsgToGCF"
    "romGS_NotifyTryToChooseHero\022\013\n\003pos\030\002 \001(\005"
    "\022\016\n\006heroid\030\003 \001(\005\"\211\001\n\027NotifyChooseHeroTim"
    "eEnd\022D\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:&eMsg"
    "ToGCFromGS_NotifyChooseHeroTimeEnd\022(\n\013he"
    "roposinfo\030\002 \003(\0132\023.GSToGC.HeroPosInfo\"\316\001\n"
    "\017SkillEntityInfo\022B\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID:$eMsgToGCFromGS_NotifySkillEntity"
    "Info\022\014\n\004guid\030\002 \001(\003\022\017\n\007skillid\030\003 \001(\005\022\030\n\003d"
    "ir\030\004 \001(\0132\013.GSToGC.Dir\022\017\n\007targuid\030\005 \001(\003\022\020"
    "\n\010uniqueid\030\006 \001(\003\022\033\n\006tardir\030\007 \001(\0132\013.GSToG"
    "C.Dir\"j\n\006FPInfo\022D\n\005msgid\030\001 \001(\0162\r.GSToGC."
    "MsgID:&eMsgToGCFromGS_NotifyFightPropert"
    "yInfo\022\014\n\004guid\030\002 \001(\004\022\014\n\004info\030\003 \003(\005\"\254\001\n\014No"
    "tifyHPInfo\0229\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":\033eMsgToGCFromGS_NotifyHPInfo\022+\n\006hpinfo\030"
    "\002 \003(\0132\033.GSToGC.NotifyHPInfo.HPInfo\0324\n\006HP"
    "Info\022\014\n\004guid\030\001 \001(\004\022\r\n\005curhp\030\002 \001(\005\022\r\n\005max"
    "hp\030\003 \001(\005\"\254\001\n\014NotifyMPInfo\0229\n\005msgid\030\001 \001(\016"
    "2\r.GSToGC.MsgID:\033eMsgToGCFromGS_NotifyMP"
    "Info\022+\n\006mpinfo\030\002 \003(\0132\033.GSToGC.NotifyMPIn"
    "fo.MPInfo\0324\n\006MPInfo\022\014\n\004guid\030\001 \001(\004\022\r\n\005cur"
    "mp\030\002 \001(\005\022\r\n\005maxmp\030\003 \001(\005\"\247\001\n\016NotifyHeroIn"
    "fo\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\035eMsgTo"
    "GCFromGS_NotifyHeroInfo\022\014\n\004guid\030\002 \001(\004\022\r\n"
    "\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\014\n\004fury\030\005 \001(\005\022"
    "\017\n\007absorb1\030\006 \001(\005\022\017\n\007absorb2\030\007 \001(\005\"\217\001\n\017No"
    "tifySkillInfo\022<\n\005msgid\030\001 \001(\0162\r.GSToGC.Ms"
    "gID:\036eMsgToGCFromGS_NotifySkillInfo\022\014\n\004g"
    "uid\030\002 \001(\004\022\021\n\tskillslot\030\003 \001(\005\022\017\n\007skillid\030"
    "\004 \001(\005\022\014\n\004time\030\005 \001(\005\"b\n\014BattleFinish\022\?\n\005m"
    "sgid\030\001 \001(\0162\r.GSToGC.MsgID:!eMsgToGCFromG"
    "S_NotifyBattleFinish\022\021\n\tbulidguid\030\002 \001(\004\""
    "\\\n\003Exp\022:\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\034eM"
    "sgToGCFromGS_NotifyExpInfo\022\014\n\004guid\030\002 \001(\004"
    "\022\013\n\003exp\030\003 \001(\005\"j\n\tLevelInfo\022@\n\005msgid\030\001 \001("
    "\0162\r.GSToGC.MsgID:\"eMsgToGCFromGS_NotifyH"
    "eroLevelInfo\022\014\n\004guid\030\002 \001(\004\022\r\n\005level\030\003 \001("
    "\005\"p\n\013AbsorbBegin\022>\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID: eMsgToGCFromGS_NotifyAbsorbBegin"
    "\022\014\n\004guid\030\002 \001(\004\022\023\n\013monsterguid\030\003 \001(\004\"\220\001\n\t"
    "AbsorbRes\022F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:"
    "(eMsgToGCFromGS_NotifyAbsorbMonsterResul"
    "t\022\014\n\004guid\030\002 \001(\004\022\013\n\003res\030\003 \001(\010\022\017\n\007absorb1\030"
    "\004 \001(\005\022\017\n\007absorb2\030\005 \001(\005\"g\n\014CancelAbsorb\022D"
    "\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:&eMsgToGCFr"
    "omGS_NotifyCancelAbsorbSkill\022\021\n\tmonsteri"
    "d\030\002 \001(\005\"\257\003\n\014UserGameInfo\022\?\n\005msgid\030\001 \001(\0162"
    "\r.GSToGC.MsgID:!eMsgToGCFromGS_NotifyUse"
    "rGameInfo\022\016\n\006headid\030\002 \001(\005\022\020\n\010nickname\030\003 "
    "\001(\t\022\r\n\005level\030\004 \001(\005\022\022\n\nupgradeexp\030\005 \001(\005\022\016"
    "\n\006curexp\030\006 \001(\005\022\025\n\rtotalgameinns\030\007 \001(\005\022\025\n"
    "\rtotalwintimes\030\010 \001(\005\022\021\n\therokills\030\t \001(\005\022"
    "\030\n\020destorybuildings\030\n \001(\005\022\021\n\tdeadtimes\030\013"
    " \001(\005\022\024\n\014total_achnum\030\014 \001(\005\022\016\n\006achnum\030\r \001"
    "(\005\022\020\n\010vipscore\030\016 \001(\005\022\021\n\tassistnum\030\017 \001(\005\022"
    "\023\n\013ladderscore\030\020 \001(\005\022\021\n\tguildname\030\021 \001(\t\022"
    "\022\n\nexp_adtime\030\022 \001(\003\022\024\n\014gold_addtime\030\023 \001("
    "\003\"f\n\tHeroKills\022<\n\005msgid\030\001 \001(\0162\r.GSToGC.M"
    "sgID:\036eMsgToGCFromGS_NotifyHeroKills\022\014\n\004"
    "guid\030\002 \001(\004\022\r\n\005kills\030\003 \001(\005\"\344\001\n\014CurDeadTim"
    "es\022\?\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:!eMsgTo"
    "GCFromGS_NotifyCurDeadTimes\022\017\n\007objguid\030\002"
    " \001(\004\022\021\n\tdeadtimes\030\003 \001(\005\022\023\n\013killer_camp\030\004"
    " \001(\005\022\026\n\016reasonheroguid\030\005 \001(\004\022\016\n\006ifAced\030\006"
    " \001(\010\022\014\n\004camp\030\007 \001(\005\022\021\n\therostate\030\010 \001(\005\022\021\n"
    "\therotitle\030\t \001(\005\"y\n\005CurCP\0228\n\005msgid\030\001 \001(\016"
    "2\r.GSToGC.MsgID:\032eMsgToGCFromGS_NotifyCu"
    "rCP\022\022\n\ntargetguid\030\002 \001(\004\022\021\n\tperson_cp\030\003 \001"
    "(\005\022\017\n\007team_cp\030\004 \001(\005\"\244\001\n\013CurAtkSpeed\022>\n\005m"
    "sgid\030\001 \001(\0162\r.GSToGC.MsgID: eMsgToGCFromG"
    "S_NotifyCurAtkSpeed\022+\n\004info\030\002 \003(\0132\035.GSTo"
    "GC.CurAtkSpeed.SpeedInfo\032(\n\tSpeedInfo\022\014\n"
    "\004guid\030\001 \001(\004\022\r\n\005speed\030\002 \001(\005\"c\n\007FuryVal\022<\n"
    "\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\036eMsgToGCFro"
    "mGS_NotifyFuryValue\022\014\n\004guid\030\002 \001(\004\022\014\n\004fur"
    "y\030\003 \001(\005\"f\n\tFuryState\022<\n\005msgid\030\001 \001(\0162\r.GS"
    "ToGC.MsgID:\036eMsgToGCFromGS_NotifyFurySta"
    "te\022\014\n\004guid\030\002 \001(\004\022\r\n\005state\030\003 \001(\005\"Q\n\020Notif"
    "yHeroReborn\022=\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:\037eMsgToGCFromGS_NotifyHeroReborn\"\261\001\n\013R"
    "ebornTimes\022B\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":$eMsgToGCFromGS_NotifyHeroRebornTimes\022\022"
    "\n\nmasterguid\030\002 \001(\004\022\021\n\tsendtimes\030\003 \001(\003\022\014\n"
    "\004gold\030\004 \001(\003\022\024\n\014remain_times\030\005 \001(\005\022\023\n\013reb"
    "orn_time\030\006 \001(\005\"b\n\rRebornSuccess\022C\n\005msgid"
    "\030\001 \001(\0162\r.GSToGC.MsgID:%eMsgToGCFromGS_No"
    "tifyBuyRebornSuccess\022\014\n\004guid\030\002 \001(\004\"o\n\016Pe"
    "rsonCPChange\022C\n\005msgid\030\001 \001(\0162\r.GSToGC.Msg"
    "ID:%eMsgToGCFromGS_NotifyPersonalCPChang"
    "e\022\014\n\004guid\030\002 \001(\004\022\n\n\002cp\030\003 \001(\005\"\331\002\n\023Broadcas"
    "tBatteleRes\022A\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:#eMsgToGCFromGS_BroadCurBattleResult\022\r"
    "\n\005ifwin\030\002 \001(\010\0224\n\007resinfo\030\003 \003(\0132#.GSToGC."
    "BroadcastBatteleRes.ResInfo\032\271\001\n\007ResInfo\022"
    "\017\n\007objguid\030\001 \001(\004\022\016\n\006heroid\030\002 \001(\005\022\020\n\010nick"
    "name\030\003 \001(\t\022\020\n\010curlevel\030\004 \001(\005\022\021\n\tkilltime"
    "s\030\005 \001(\005\022\021\n\tdeadtimes\030\006 \001(\005\022\020\n\010asstimes\030\007"
    " \001(\005\022\017\n\007totalcp\030\010 \001(\005\022\017\n\007lasthit\030\t \001(\005\022\017"
    "\n\007camgpid\030\n \001(\005\"\312\001\n\033BroadcastBattelePers"
    "onalRes\022F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:(e"
    "MsgToGCFromGS_BroadBattlePersonalResult\022"
    "\020\n\010got_gold\030\002 \001(\003\022\016\n\006old_lv\030\003 \001(\005\022\017\n\007old"
    "_exp\030\004 \001(\005\022\016\n\006cur_lv\030\005 \001(\005\022\017\n\007cur_exp\030\006 "
    "\001(\005\022\017\n\007got_exp\030\007 \001(\005\"\271\001\n\030BroadcastBuildi"
    "ngDestory\022F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:"
    "(eMsgToGCFromGS_BroadBuildingDestroyByWh"
    "o\022\024\n\014buildingguid\030\002 \001(\004\022\025\n\rbuilding_camp"
    "\030\003 \001(\005\022\023\n\013killer_guid\030\004 \001(\004\022\023\n\013killer_ca"
    "mp\030\005 \001(\005\"\226\001\n\014HeroMoveInfo\022D\n\005msgid\030\001 \001(\016"
    "2\r.GSToGC.MsgID:&eMsgToGCFromGS_NotifyBa"
    "ttleSeatPosInfo\022\014\n\004guid\030\002 \001(\004\022\030\n\003dir\030\003 \001"
    "(\0132\013.GSToGC.Dir\022\030\n\003pos\030\004 \001(\0132\013.GSToGC.Po"
    "s\"\231\001\n\017PlayFinishVedio\022E\n\005msgid\030\001 \001(\0162\r.G"
    "SToGC.MsgID:\'eMsgToGCFromGS_BroadcastPla"
    "yFinishVedio\022\017\n\007wincamp\030\002 \001(\005\022\021\n\tloserca"
    "mp\030\003 \001(\005\022\r\n\005mapid\030\004 \001(\005\022\014\n\004guid\030\005 \001(\004\"[\n"
    "\022LeaveBattleSuccess\022E\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID:\'eMsgToGCFromGS_NotifyLeaveBat"
    "tleSuccess\"\216\001\n\tBornSoler\022=\n\005msgid\030\001 \001(\0162"
    "\r.GSToGC.MsgID:\037eMsgToGCFromGS_NotifyBor"
    "nSolder\022\014\n\004type\030\002 \001(\005\022\014\n\004camp\030\003 \001(\005\022\030\n\003p"
    "os\030\004 \001(\0132\013.GSToGC.Pos\022\014\n\004guid\030\005 \001(\004\"\211\001\n\010"
    "SkillEnd\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\035"
    "eMsgToGCFromGS_NotifySkillEnd\022\014\n\004guid\030\002 "
    "\001(\003\022\017\n\007skillid\030\003 \001(\005\022\017\n\007targuid\030\004 \001(\003\022\020\n"
    "\010uniqueid\030\005 \001(\005\"x\n\nAltarBSIco\022=\n\005msgid\030\001"
    " \001(\0162\r.GSToGC.MsgID:\037eMsgToGCFromGS_Noti"
    "fyAltarBSIco\022\r\n\005index\030\002 \001(\005\022\014\n\004type\030\003 \001("
    "\005\022\016\n\006optype\030\004 \001(\005\"\205\002\n\016GOReleaseSkill\022I\n\005"
    "msgid\030\001 \001(\0162\r.GSToGC.MsgID:+eMsgToGCFrom"
    "GS_NotifyGameObjectReleaseSkill\022\014\n\004guid\030"
    "\002 \001(\004\022\017\n\007skillid\030\003 \001(\005\022!\n\005state\030\004 \001(\0162\022."
    "GSToGC.SkillState\022\033\n\006curPos\030\005 \001(\0132\013.GSTo"
    "GC.Pos\022\033\n\006curDir\030\006 \001(\0132\013.GSToGC.Dir\022\017\n\007t"
    "arguid\030\007 \001(\004\022\033\n\006tarpos\030\010 \001(\0132\013.GSToGC.Po"
    "s\"~\n\tGOSkillCD\022D\n\005msgid\030\001 \001(\0162\r.GSToGC.M"
    "sgID:&eMsgToGCFromGS_NotifyGameObjectSki"
    "llCD\022\014\n\004guid\030\002 \001(\004\022\017\n\007skillid\030\003 \001(\005\022\014\n\004t"
    "ime\030\004 \001(\005\"\337\001\n\tEmitSkill\022A\n\005msgid\030\001 \001(\0162\r"
    ".GSToGC.MsgID:#eMsgToGCFromGS_NotifySkil"
    "lModelEmit\022\014\n\004guid\030\002 \001(\004\022\020\n\010effectid\030\003 \001"
    "(\r\022\020\n\010uniqueid\030\004 \001(\005\022\030\n\003dir\030\005 \001(\0132\013.GSTo"
    "GC.Dir\022\017\n\007targuid\030\006 \001(\004\022\033\n\006tarpos\030\007 \001(\0132"
    "\013.GSToGC.Pos\022\025\n\rifAbsorbSkill\030\010 \001(\010\"o\n\021D"
    "estroyEmitEffect\022H\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID:*eMsgToGCFromGS_NotifySkillModelE"
    "mitDestroy\022\020\n\010uniqueid\030\002 \001(\005\"\201\001\n\006HitTar\022"
    "F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:(eMsgToGCF"
    "romGS_NotifySkillModelHitTarget\022\014\n\004guid\030"
    "\002 \001(\004\022\020\n\010effectid\030\003 \001(\r\022\017\n\007targuid\030\004 \001(\004"
    "\"\267\001\n\013RangeEffect\022B\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID:$eMsgToGCFromGS_NotifySkillModelR"
    "ange\022\014\n\004guid\030\002 \001(\004\022\020\n\010effectid\030\003 \001(\r\022\020\n\010"
    "uniqueid\030\004 \001(\r\022\030\n\003dir\030\005 \001(\0132\013.GSToGC.Dir"
    "\022\030\n\003pos\030\006 \001(\0132\013.GSToGC.Pos\"w\n\016RangeEffec"
    "tEnd\022E\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\'eMsg"
    "ToGCFromGS_NotifySkillModelRangeEnd\022\014\n\004g"
    "uid\030\002 \001(\004\022\020\n\010uniqueid\030\003 \001(\r\"\212\001\n\014SummonEf"
    "fect\022I\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:+eMsg"
    "ToGCFromGS_NotifySkillModelSummonEffect\022"
    "\014\n\004guid\030\002 \001(\004\022\020\n\010effectid\030\003 \001(\r\022\017\n\007npcgu"
    "id\030\004 \001(\004\"\264\001\n\nBuffEffect\022F\n\005msgid\030\001 \001(\0162\r"
    ".GSToGC.MsgID:(eMsgToGCFromGS_NotifySkil"
    "lModelBufEffect\022\014\n\004guid\030\002 \001(\004\022\020\n\010effecti"
    "d\030\003 \001(\r\022\020\n\010uniqueid\030\004 \001(\r\022\017\n\007targuid\030\005 \001"
    "(\004\022\014\n\004time\030\006 \001(\005\022\r\n\005state\030\007 \001(\005\"\277\001\n\024Noti"
    "fySummonLifeTime\022A\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID:#eMsgToGCFromGS_NotifySummonLifeT"
    "ime\022\014\n\004guid\030\002 \001(\004\022\020\n\010lifetime\030\003 \001(\005\022\020\n\010r"
    "esttime\030\004 \001(\005\022\030\n\003pos\030\005 \001(\0132\013.GSToGC.Pos\022"
    "\030\n\003dir\030\006 \001(\0132\013.GSToGC.Dir\"\320\001\n\036NotifySkil"
    "lModelStartForceMove\022K\n\005msgid\030\001 \001(\0162\r.GS"
    "ToGC.MsgID:-eMsgToGCFromGS_NotifySkillMo"
    "delStartForceMove\022\014\n\004guid\030\002 \001(\004\022\020\n\010effec"
    "tid\030\003 \001(\005\022\030\n\003dir\030\004 \001(\0132\013.GSToGC.Dir\022\030\n\003p"
    "od\030\005 \001(\0132\013.GSToGC.Pos\022\r\n\005speed\030\006 \001(\005\"\257\001\n"
    "\"NotifySkillModelStartForceMoveStop\022O\n\005m"
    "sgid\030\001 \001(\0162\r.GSToGC.MsgID:1eMsgToGCFromG"
    "S_NotifySkillModelStartForceMoveStop\022\014\n\004"
    "guid\030\002 \001(\004\022\020\n\010effectid\030\003 \001(\005\022\030\n\003pos\030\004 \001("
    "\0132\013.GSToGC.Pos\"\370\001\n&NotifySkillModelStart"
    "ForceMoveTeleport\022S\n\005msgid\030\001 \001(\0162\r.GSToG"
    "C.MsgID:5eMsgToGCFromGS_NotifySkillModel"
    "StartForceMoveTeleport\022\014\n\004guid\030\002 \001(\004\022\020\n\010"
    "effectid\030\003 \001(\005\022\035\n\010beginpos\030\004 \001(\0132\013.GSToG"
    "C.Pos\022\035\n\010begindir\030\005 \001(\0132\013.GSToGC.Dir\022\033\n\006"
    "tarpos\030\006 \001(\0132\013.GSToGC.Pos\"\235\001\n\034NotifySkil"
    "lModelPurification\022I\n\005msgid\030\001 \001(\0162\r.GSTo"
    "GC.MsgID:+eMsgToGCFromGS_NotifySkillMode"
    "lPurification\022\014\n\004guid\030\002 \001(\004\022\022\n\ntargetgui"
    "d\030\003 \001(\004\022\020\n\010effectid\030\004 \001(\005\"\310\001\n\031NotifySkil"
    "lModelStartLink\022F\n\005msgid\030\001 \001(\0162\r.GSToGC."
    "MsgID:(eMsgToGCFromGS_NotifySkillModelSt"
    "artLink\022\014\n\004guid\030\002 \001(\004\022\035\n\010beginpos\030\003 \001(\0132"
    "\013.GSToGC.Pos\022\022\n\ntargetguid\030\004 \001(\004\022\020\n\010effe"
    "ctid\030\005 \001(\005\022\020\n\010uniqueid\030\006 \001(\r\"s\n\030NotifySk"
    "illModelStopLink\022E\n\005msgid\030\001 \001(\0162\r.GSToGC"
    ".MsgID:\'eMsgToGCFromGS_NotifySkillModelS"
    "topLink\022\020\n\010uniqueid\030\002 \001(\r\"\230\001\n\033NotifyPass"
    "itiveSkillRelease\022H\n\005msgid\030\001 \001(\0162\r.GSToG"
    "C.MsgID:*eMsgToGCFromGS_NotifyPassitiveS"
    "killRelease\022\014\n\004guid\030\002 \001(\004\022\017\n\007skillid\030\003 \001"
    "(\005\022\020\n\010timeLeft\030\004 \001(\005\"\222\001\n\030NotifyPassitive"
    "SkillLoad\022E\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:"
    "\'eMsgToGCFromGS_NotifyPassitiveSkillLoad"
    "\022\014\n\004guid\030\002 \001(\004\022\017\n\007skillid\030\003 \001(\005\022\020\n\010uniqu"
    "eid\030\004 \001(\005\"\226\001\n\032NotifyPassitiveSkillUnLoad"
    "\022G\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:)eMsgToGC"
    "FromGS_NotifyPassitiveSkillUnload\022\014\n\004gui"
    "d\030\002 \001(\004\022\017\n\007skillid\030\003 \001(\005\022\020\n\010uniqueid\030\004 \001"
    "(\005\"\366\001\n\030NotifySkillModelEmitTurn\022E\n\005msgid"
    "\030\001 \001(\0162\r.GSToGC.MsgID:\'eMsgToGCFromGS_No"
    "tifySkillModelEmitTurn\022\014\n\004guid\030\002 \001(\004\022\020\n\010"
    "effectid\030\003 \001(\r\022\021\n\tprogectid\030\004 \001(\005\022\030\n\003pos"
    "\030\005 \001(\0132\013.GSToGC.Pos\022\030\n\003dir\030\006 \001(\0132\013.GSToG"
    "C.Dir\022\017\n\007targuid\030\007 \001(\004\022\033\n\006tarpos\030\010 \001(\0132\013"
    ".GSToGC.Pos\"Y\n\rNotifyBornObj\022:\n\005msgid\030\001 "
    "\001(\0162\r.GSToGC.MsgID:\034eMsgToSSFromCS_Notif"
    "yBornObj\022\014\n\004type\030\002 \001(\005\"\264\002\n\023NotifyReconne"
    "ctInfo\022@\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\"eM"
    "sgToGCFromCS_NotifyReconnectInfo\022\023\n\013batt"
    "lestate\030\002 \001(\005\022\024\n\014remain_times\030\003 \001(\005\022\014\n\004i"
    "fob\030\004 \001(\010\022@\n\rreconnectinfo\030\005 \003(\0132).GSToG"
    "C.NotifyReconnectInfo.ReconnectInfo\032`\n\rR"
    "econnectInfo\022\013\n\003pos\030\001 \001(\005\022\014\n\004guid\030\002 \001(\004\022"
    "\020\n\010nickname\030\003 \001(\t\022\016\n\006heroid\030\004 \001(\r\022\022\n\nifs"
    "elected\030\005 \001(\010\"a\n\030NotifyOBReturnBattleRoo"
    "m\022E\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\'eMsgToG"
    "CFromGS_NotifyOBReturnBattleRoom\"i\n\016Noti"
    "fyOBAppear\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":\035eMsgToGCFromGS_NotifyOBAppear\022\014\n\004obid\030"
    "\002 \001(\004\022\014\n\004camp\030\003 \001(\005\"j\n\rNotifyKillNPC\022:\n\005"
    "msgid\030\001 \001(\0162\r.GSToGC.MsgID:\034eMsgToGCFrom"
    "GS_NotifyKillNPC\022\014\n\004guid\030\002 \001(\004\022\017\n\007killnu"
    "m\030\003 \001(\r\"\202\001\n\020NotifyAltarBSIco\022<\n\005msgid\030\001 "
    "\001(\0162\r.GSToGC.MsgID:\036eMsgToGCFromGS_Notif"
    "yAltarBSOk\022\017\n\007altarid\030\002 \001(\r\022\017\n\007objtype\030\003"
    " \001(\r\022\016\n\006optype\030\004 \001(\r\"\200\001\n\017NotifySkillUpLv"
    "\022<\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID:\036eMsgToGC"
    "FromGS_NotifySkillUpLv\022\014\n\004guid\030\002 \001(\004\022\020\n\010"
    "skillpos\030\003 \001(\r\022\017\n\007skillid\030\004 \001(\r\"n\n\017Notif"
    "yBlastHurt\022<\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgID"
    ":\036eMsgToGCFromGS_NotifyBlastHurt\022\014\n\004guid"
    "\030\002 \001(\004\022\017\n\007blasthp\030\003 \001(\005\"\251\001\n\033NotifyGameOb"
    "jectReliveState\022H\n\005msgid\030\001 \001(\0162\r.GSToGC."
    "MsgID:*eMsgToGCFromGS_NotifyGameObjectRe"
    "liveState\022\014\n\004guid\030\002 \001(\004\022\030\n\003pos\030\003 \001(\0132\013.G"
    "SToGC.Pos\022\030\n\003dir\030\004 \001(\0132\013.GSToGC.Dir\"Y\n\rN"
    "otifyCurGold\022:\n\005msgid\030\001 \001(\0162\r.GSToGC.Msg"
    "ID:\034eMsgToGCFromGs_NotifyCurGold\022\014\n\004gold"
    "\030\002 \001(\004\"b\n\020NotifyCurDiamond\022=\n\005msgid\030\001 \001("
    "\0162\r.GSToGC.MsgID:\037eMsgToGCFromGs_NotifyC"
    "urDiamond\022\017\n\007Diamond\030\002 \001(\004\"a\n\025GetloginRe"
    "wardSuccess\022H\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:*eMsgToGCFromGS_NotifyGetloginRewardSu"
    "ccess\"m\n\023GetloginReward_Skin\022F\n\005msgid\030\001 "
    "\001(\0162\r.GSToGC.MsgID:(eMsgToGCFromGS_Notif"
    "yGetloginReward_Skin\022\016\n\006skinid\030\002 \001(\003\"m\n\023"
    "GetloginReward_Rune\022F\n\005msgid\030\001 \001(\0162\r.GST"
    "oGC.MsgID:(eMsgToGCFromGS_NotifyGetlogin"
    "Reward_Rune\022\016\n\006runeid\030\002 \001(\003\"\203\001\n\023Getlogin"
    "Reward_Hero\022F\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:(eMsgToGCFromGS_NotifyGetloginReward_H"
    "ero\022\016\n\006heroid\030\002 \001(\r\022\024\n\014expired_time\030\003 \001("
    "\003\"\312\001\n\020CanInviteFriends\022C\n\005msgid\030\001 \001(\0162\r."
    "GSToGC.MsgID:%eMsgToGCFromBS_NotifyCanIn"
    "viteFriends\0221\n\007friends\030\002 \003(\0132 .GSToGC.Ca"
    "nInviteFriends.Friends\032>\n\007Friends\022\020\n\010Hea"
    "derId\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\017\n\007guididx"
    "\030\003 \001(\004\"k\n\nLastHitNum\022@\n\005msgid\030\001 \001(\0162\r.GS"
    "ToGC.MsgID:\"eMsgToGCFromBS_NotifyCurLast"
    "HitNum\022\014\n\004guid\030\002 \001(\004\022\r\n\005lhnum\030\003 \001(\005\"t\n\010R"
    "oomInfo\022\016\n\006roomId\030\001 \001(\005\022\r\n\005ifPwd\030\002 \001(\005\022\r"
    "\n\005mapId\030\003 \001(\005\022\016\n\006master\030\004 \001(\t\022\024\n\014curUser"
    "Count\030\005 \001(\005\022\024\n\014maxUserCount\030\006 \001(\005\"q\n\016Ask"
    "RoomListRet\022;\n\005msgid\030\001 \001(\0162\r.GSToGC.MsgI"
    "D:\035eMsgToGCFromGS_AskRoomListRet\022\"\n\010room"
    "list\030\002 \003(\0132\020.GSToGC.RoomInfo*\3725\n\005MsgID\022\030"
    "\n\024eMsgToGCFromGS_Begin\020\000\022\037\n\033eMsgToGCFrom"
    "GS_GCAskPingRet\020\001\022%\n!eMsgToGCFromGS_Noti"
    "fyUserBaseInfo\020\002\022\'\n#eMsgToGCFromGS_Notif"
    "ySystemAnnounce\020\003\022!\n\035eMsgToGCFromGS_Noti"
    "fyNetClash\020\004\022\033\n\027eMsgToGCFromGS_GCAskRet\020"
    "\005\022!\n\035eMsgToGCFromGS_NotifyHeroList\020\007\022\'\n#"
    "eMsgToGCFromGS_NotifyBattleBaseInfo\020\010\022*\n"
    "&eMsgToGCFromGS_NotifyBattleSeatPosInfo\020"
    "\t\022*\n&eMsgToGCFromGS_NotifyBattleStateCha"
    "nge\020\n\022(\n$eMsgToGCFromGS_NotifyCurBattleC"
    "hange\020\013\022)\n%eMsgToGCFromGS_NotifyGameObje"
    "ctAppear\020\014\022,\n(eMsgToGCFromGS_NotifyGameO"
    "bjectDisappear\020\r\022,\n(eMsgToGCFromGS_Notif"
    "yGameObjectFreeState\020\016\022+\n\'eMsgToGCFromGS"
    "_NotifyGameObjectRunState\020\017\0224\n0eMsgToGCF"
    "romGS_NotifyGameObjectPrepareSkillState\020"
    "\020\0224\n0eMsgToGCFromGS_NotifyGameObjectRele"
    "aseSkillState\020\021\022,\n(eMsgToGCFromGS_Notify"
    "GameObjectDeadState\020\022\022!\n\035eMsgToGCFromGS_"
    "NotifyGoodsInf\020\023\022+\n\'eMsgToGCFromGS_Notif"
    "yBattleLoadingState\020\024\022\'\n#eMsgToGCFromGS_"
    "NotifyBattleHeroInfo\020\025\022%\n!eMsgToGCFromGS"
    "_BagRunesInfoChange\020\026\022\037\n\033eMsgToGCFromGS_"
    "ExchangeGold\020\027\022\035\n\031eMsgToGCFromGS_ChatInR"
    "oom\020\030\022\'\n#eMsgToGCFromGS_NotifySkillHitTa"
    "rget\020\031\022!\n\035eMsgToGCFromGS_NotifyHPChange\020"
    "\032\022!\n\035eMsgToGCFromGS_NotifyMPChange\020\033\022(\n$"
    "eMsgToGCFromGS_NotifyTryToChooseHero\020\034\022*"
    "\n&eMsgToGCFromGS_NotifyChooseHeroTimeEnd"
    "\020\035\022(\n$eMsgToGCFromGS_NotifySkillEntityIn"
    "fo\020\036\022*\n&eMsgToGCFromGS_NotifyFightProper"
    "tyInfo\020\037\022\037\n\033eMsgToGCFromGS_NotifyHPInfo\020"
    "\"\022\037\n\033eMsgToGCFromGS_NotifyMPInfo\020#\022!\n\035eM"
    "sgToGCFromGS_NotifyHeroInfo\020$\022!\n\035eMsgToG"
    "CFromGS_NotifyBuffInfo\020%\022#\n\037eMsgToGCFrom"
    "GS_NotifyBuffRemove\020&\022\"\n\036eMsgToGCFromGS_"
    "NotifySkillInfo\020\'\022%\n!eMsgToGCFromGS_Noti"
    "fyBattleFinish\020(\022 \n\034eMsgToGCFromGS_Notif"
    "yExpInfo\020)\022&\n\"eMsgToGCFromGS_NotifyHeroL"
    "evelInfo\020*\022$\n eMsgToGCFromGS_NotifyAbsor"
    "bBegin\020+\022,\n(eMsgToGCFromGS_NotifyAbsorbM"
    "onsterResult\020,\022*\n&eMsgToGCFromGS_NotifyC"
    "ancelAbsorbSkill\020-\022%\n!eMsgToGCFromGS_Not"
    "ifyUserGameInfo\020.\022\"\n\036eMsgToGCFromGS_Noti"
    "fyHeroKills\020/\022%\n!eMsgToGCFromGS_NotifyCu"
    "rDeadTimes\0200\022\036\n\032eMsgToGCFromGS_NotifyCur"
    "CP\0201\022$\n eMsgToGCFromGS_NotifyCurAtkSpeed"
    "\0202\022\"\n\036eMsgToGCFromGS_NotifyFuryValue\0203\022\""
    "\n\036eMsgToGCFromGS_NotifyFuryState\0204\022(\n$eM"
    "sgToGCFromGS_NotifyHeroRebornTimes\0205\022)\n%"
    "eMsgToGCFromGS_NotifyBuyRebornSuccess\0206\022"
    "*\n&eMsgToGCFromGS_BroadcastBattleHeroInf"
    "o\0207\022)\n%eMsgToGCFromGS_NotifyPersonalCPCh"
    "ange\0208\022\'\n#eMsgToGCFromGS_BroadCurBattleR"
    "esult\0209\022,\n(eMsgToGCFromGS_BroadBuildingD"
    "estroyByWho\020:\022#\n\037eMsgToGCFromGS_NotifyVo"
    "ipRoomId\020;\022-\n)eMsgToGCFromGS_NotifyHeroD"
    "isplacementInfo\020<\022+\n\'eMsgToGCFromGS_Broa"
    "dcastPlayFinishVedio\020=\022+\n\'eMsgToGCFromGS"
    "_NotifyLeaveBattleSuccess\020>\022#\n\037eMsgToGCF"
    "romGS_NotifyBornSolder\020\?\022!\n\035eMsgToGCFrom"
    "GS_NotifySkillEnd\020@\022#\n\037eMsgToGCFromGS_No"
    "tifyAltarBSIco\020A\022&\n\"eMsgToGCFromGS_Warni"
    "ngToSelectHero\020B\022/\n+eMsgToGCFromGS_Notif"
    "yGameObjectReleaseSkill\020C\022*\n&eMsgToGCFro"
    "mGS_NotifyGameObjectSkillCD\020D\022\'\n#eMsgToG"
    "CFromGS_NotifySkillModelEmit\020E\022.\n*eMsgTo"
    "GCFromGS_NotifySkillModelEmitDestroy\020F\022,"
    "\n(eMsgToGCFromGS_NotifySkillModelHitTarg"
    "et\020G\022(\n$eMsgToGCFromGS_NotifySkillModelR"
    "ange\020H\022+\n\'eMsgToGCFromGS_NotifySkillMode"
    "lRangeEnd\020I\022*\n&eMsgToGCFromGS_NotifySkil"
    "lModelLeading\020J\022/\n+eMsgToGCFromGS_Notify"
    "SkillModelSummonEffect\020K\022,\n(eMsgToGCFrom"
    "GS_NotifySkillModelBufEffect\020L\022\'\n#eMsgTo"
    "GCFromGS_NotifySummonLifeTime\020M\0221\n-eMsgT"
    "oGCFromGS_NotifySkillModelStartForceMove"
    "\020N\0225\n1eMsgToGCFromGS_NotifySkillModelSta"
    "rtForceMoveStop\020O\0229\n5eMsgToGCFromGS_Noti"
    "fySkillModelStartForceMoveTeleport\020P\022.\n*"
    "eMsgToGCFromGS_NotifyPassitiveSkillRelea"
    "se\020Q\022+\n\'eMsgToGCFromGS_NotifyPassitiveSk"
    "illLoad\020R\022-\n)eMsgToGCFromGS_NotifyPassit"
    "iveSkillUnload\020S\022+\n\'eMsgToGCFromGS_Notif"
    "ySkillModelEmitTurn\020T\022 \n\034eMsgToGCFromGS_"
    "NotifyAFPData\020U\022,\n(eMsgToGCFromGS_Notify"
    "BattleManagerChange\020V\022 \n\034eMsgToGCFromGS_"
    "NotifyBornObj\020W\022&\n\"eMsgToGCFromGS_Notify"
    "ReconnectInfo\020X\022&\n\"eMsgToGCFromGS_Notify"
    "HeroGoodsInfo\020Y\022+\n\'eMsgToGCFromGS_Notify"
    "OBReturnBattleRoom\020Z\022-\n)eMsgToGCFromGS_N"
    "otifyUserReturnBattleRoom\020[\022*\n&eMsgToGCF"
    "romGS_NotifyBattleAllUserInfo\020\\\022.\n*eMsgT"
    "oGCFromGS_NotifyUserBeAddedFirendInfo\020]\022"
    "%\n!eMsgToGCFromCS_NotifyDefaultHeros\020^\022!"
    "\n\035eMsgToGCFromGS_NotifyOBAppear\020_\022 \n\034eMs"
    "gToGCFromGS_NotifyKillNPC\020`\022\"\n\036eMsgToGCF"
    "romGS_NotifyAltarBSOk\020a\022\"\n\036eMsgToGCFromG"
    "S_NotifySkillUpLv\020b\022$\n eMsgToGCFromGS_No"
    "tifyUserSNSList\020c\022*\n&eMsgToGCFromGS_Noti"
    "fyUserSNSListChange\020d\022(\n$eMsgToGCFromGS_"
    "UserBeInvitedToBattle\020e\022$\n eMsgToGCFromG"
    "S_NotifyMsgFromUser\020f\022\'\n#eMsgToGCFromGS_"
    "NotifyBeAddFriendMsg\020g\022)\n%eMsgToGCFromGS"
    "_NotifyQueryNickNameRet\020h\022)\n%eMsgToGCFro"
    "mCS_NotifyGuideLastComStep\020j\022\"\n\036eMsgToGC"
    "FromGS_NotifyBlastHurt\020k\022#\n\037eMsgToGCFrom"
    "GS_NotifyHeroReborn\020n\022.\n*eMsgToGCFromGS_"
    "NotifyGameObjectReliveState\020o\022(\n$eMsgToG"
    "CFromGS_NotifyUserGuideSetups\020p\022$\n eMsgT"
    "oGCFromBS_AskGateAddressRet\020q\022!\n\035eMsgToG"
    "CFromGS_NotifyUserName\020r\022&\n\"eMsgToGCFrom"
    "CS_NotifyReconnectInfo\020s\022 \n\034eMsgToSSFrom"
    "CS_NotifyBornObj\020t\022\037\n\033eMsgToGCFromGS_Not"
    "ifyNotice\020u\022\"\n\036eMsgToGCFromGS_NotifyGuid"
    "eTips\020v\022#\n\037eMsgToGCFromGS_NotifyUserCLDa"
    "ys\020w\022+\n\'eMsgToGCFromGs_NotifySecondaryGu"
    "ideTask\020y\022 \n\034eMsgToGCFromGs_NotifyCurGol"
    "d\020z\022#\n\037eMsgToGCFromGs_NotifyCurDiamond\020{"
    "\022.\n*eMsgToGCFromGS_NotifyGetloginRewardS"
    "uccess\020|\022,\n(eMsgToGCFromGS_NotifyGetlogi"
    "nReward_Skin\020}\022,\n(eMsgToGCFromGS_NotifyG"
    "etloginReward_Rune\020~\022,\n(eMsgToGCFromGS_N"
    "otifyGetloginReward_Hero\020\177\022&\n!eMsgToGCFr"
    "omGS_NotifyUserBaseUpLv\020\200\001\022(\n#eMsgToGCFr"
    "omGS_NotifyBattleSpanTime\020\201\001\022+\n&eMsgToGC"
    "FromGS_NotifyBattleMatherCount\020\202\001\022$\n\037eMs"
    "gToGCFromGS_NotifyHeroAssist\020\203\001\022(\n#eMsgT"
    "oGCFromGS_NotifyHeroAttributes\020\204\001\022&\n!eMs"
    "gToGCFromGS_NotifyGoodsCfgInfo\020\205\001\022\"\n\035eMs"
    "gToGCFromGS_NotifyUserMail\020\206\001\022\"\n\035eMsgToG"
    "CFromGS_NotifyMailInfo\020\207\001\022*\n%eMsgToGCFro"
    "mGS_NotifyIfMailDelAndSort\020\210\001\022&\n!eMsgToG"
    "CFromGS_NotifyRoomBaseInfo\020\214\001\022*\n%eMsgToG"
    "CFromBS_NotifyCanInviteFriends\020\215\001\022\'\n\"eMs"
    "gToGCFromBS_NotifyCurLastHitNum\020\216\001\022\"\n\035eM"
    "sgToGCFromGS_AskRoomListRet\020\217\001\022#\n\036eMsgTo"
    "GCFromBS_NotifyHerosInfo\020\220\001\022&\n!eMsgToGCF"
    "romBS_NotifyGoodsExpired\020\221\001\0220\n+eMsgToGCF"
    "romGS_NotifySkillModelPurification\020\334\001\022$\n"
    "\037eMsgToGCFromGS_NotifyCSHeroList\020\335\001\022+\n&e"
    "MsgToGCFromGS_NotifyMatchTeamBaseInfo\020\336\001"
    "\022-\n(eMsgToGCFromGS_NotifyMatchTeamPlayer"
    "Info\020\337\001\022)\n$eMsgToGCFromGS_NotifyMatchTea"
    "mSwitch\020\340\001\022)\n$eMsgToGCFromGS_NotifyMatch"
    "InviteJoin\020\341\001\022)\n$eMsgToGCFromGS_NotifyGe"
    "tNewCommodity\020\342\001\022)\n$eMsgToGCFromGS_Notif"
    "yRemoveCommodity\020\343\001\022#\n\036eMsgToGCFromGS_No"
    "tifyRunesList\020\344\001\022%\n eMsgToGCFromGS_Notif"
    "yNewNickname\020\345\001\022)\n$eMsgToGCFromGS_Notify"
    "OneMatchNeedOne\020\346\001\022%\n eMsgToGCFromGS_Not"
    "ifyNewHeaderid\020\347\001\022$\n\037eMsgToGCFromGS_Noti"
    "fyUserLvInfo\020\350\001\022-\n(eMsgToGCFromGS_BroadB"
    "attlePersonalResult\020\351\001\022\036\n\031eMsgToGCFromGS"
    "_UnloadRune\020\352\001\022)\n$eMsgToGCFromGS_NotifyB"
    "attleDelayTime\020\353\001\022!\n\034eMsgToGCFromGS_Reco"
    "inRuneRet\020\354\001\022\'\n\"eMsgToGCFromGS_NotifyOth"
    "erItemInfo\020\355\001\022 \n\033eMsgToGCFromCS_NotifyIs"
    "OnSS\020\356\001\0223\n.eMsgToGCFromGS_NotifyGameObje"
    "ctUsingSkillState\020\360\001\0225\n0eMsgToGCFromGS_N"
    "otifyGameObjectLastingSkillState\020\361\001\022\035\n\030e"
    "MsgToGCFromGS_GuideResp\020\254\002\022\"\n\035eMsgToGCFr"
    "omCS_GuideKillsInfo\020\255\002\022\036\n\031eMsgToGCFromGS"
    "_GuideAward\020\256\002\022!\n\034eMsgToGCFromGS_UpdateA"
    "llTask\020\220\003\022&\n!eMsgToGCFromGS_UpdateAllDai"
    "lyTask\020\221\003\022\036\n\031eMsgToGCFromGS_AddOneTask\020\222"
    "\003\022!\n\034eMsgToGCFromGS_UpdateOneTask\020\223\003\022\036\n\031"
    "eMsgToGCFromGS_DelOneTask\020\224\003\022\"\n\035eMsgToGC"
    "FromGS_RewardsOneTask\020\225\003\022-\n(eMsgToGCFrom"
    "GS_NotifySkillModelStartLink\020\246\004\022,\n\'eMsgT"
    "oGCFromGS_NotifySkillModelStopLink\020\247\004\022!\n"
    "\034eMsgToGCFromGS_NotifyMailRet\020\331\004\022\027\n\022eMsg"
    "ToGCFromGS_End\020\350\007*]\n\010MailType\022\021\n\rmailTyp"
    "e_None\020\000\022\016\n\nmailType_1\020\001\022\016\n\nmailType_2\020\002"
    "\022\016\n\nmailType_3\020\003\022\016\n\nmailType_4\020\004*\206\001\n\016EMa"
    "ilCurtState\022\023\n\017eMailState_None\020\000\022\022\n\016eMai"
    "lState_New\020\001\022\"\n\036eMailState_LookedButNotG"
    "otGift\020\002\022\023\n\017eMailState_Look\020\003\022\022\n\016eMailSt"
    "ate_Del\020\004*Z\n\013BattleState\022\010\n\004free\020\000\022\013\n\007wa"
    "iting\020\001\022\016\n\nselecthero\020\002\022\013\n\007loading\020\003\022\013\n\007"
    "playing\020\004\022\n\n\006finish\020\005*,\n\007ObjType\022\020\n\014ObjT"
    "ype_Hero\020\001\022\017\n\013ObjType_NPC\020\002*z\n\020HPMPChang"
    "eReason\022\016\n\nNormalHurt\020\000\022\016\n\nBloastHurt\020\001\022"
    "\r\n\tSkillHurt\020\002\022\017\n\013RecoverHurt\020\003\022\020\n\014Skill"
    "Consume\020\004\022\024\n\020BuffEffectReason\020\005*9\n\nSkill"
    "State\022\010\n\004sing\020\000\022\013\n\007prepare\020\001\022\013\n\007release\020"
    "\002\022\007\n\003end\020\003", 32730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GSToGC.proto", &protobuf_RegisterTypes);
  TaskData::default_instance_ = new TaskData();
  NotifyUpdateAllTask::default_instance_ = new NotifyUpdateAllTask();
  NotifyUpdateAllDailyTask::default_instance_ = new NotifyUpdateAllDailyTask();
  NotifyAddOneTask::default_instance_ = new NotifyAddOneTask();
  NotifyUpdateOneTask::default_instance_ = new NotifyUpdateOneTask();
  NotifyDelOneTask::default_instance_ = new NotifyDelOneTask();
  NotifyRewardsOneTask::default_instance_ = new NotifyRewardsOneTask();
  NotifyMailRet::default_instance_ = new NotifyMailRet();
  NotifyIsOnSS::default_instance_ = new NotifyIsOnSS();
  NotifyOtherItemInfo::default_instance_ = new NotifyOtherItemInfo();
  NotifyOtherItemInfo_OtherItem::default_instance_ = new NotifyOtherItemInfo_OtherItem();
  RecoinRuneRet::default_instance_ = new RecoinRuneRet();
  UnloadRune::default_instance_ = new UnloadRune();
  GuideCSStepInfo::default_instance_ = new GuideCSStepInfo();
  GuideAward::default_instance_ = new GuideAward();
  GuideAward_awardtype::default_instance_ = new GuideAward_awardtype();
  GuideKillsInfo::default_instance_ = new GuideKillsInfo();
  NotifyUserLvInfo::default_instance_ = new NotifyUserLvInfo();
  NotifyNewHeaderid::default_instance_ = new NotifyNewHeaderid();
  NotifyOneMatchNeedOne::default_instance_ = new NotifyOneMatchNeedOne();
  NotifyNewNickname::default_instance_ = new NotifyNewNickname();
  RunesSlot::default_instance_ = new RunesSlot();
  RunesBagInfo::default_instance_ = new RunesBagInfo();
  NotifyRunesList::default_instance_ = new NotifyRunesList();
  NotifyRemoveCommodity::default_instance_ = new NotifyRemoveCommodity();
  NotifyGetNewCommodity::default_instance_ = new NotifyGetNewCommodity();
  NotifyMatchTeamBaseInfo::default_instance_ = new NotifyMatchTeamBaseInfo();
  NotifyMatchTeamPlayerInfo::default_instance_ = new NotifyMatchTeamPlayerInfo();
  NotifyMatchTeamSwitch::default_instance_ = new NotifyMatchTeamSwitch();
  NotifyMatchInviteJoin::default_instance_ = new NotifyMatchInviteJoin();
  NotifyHerosInfo::default_instance_ = new NotifyHerosInfo();
  NotifyHerosInfo_heropanelinfo::default_instance_ = new NotifyHerosInfo_heropanelinfo();
  NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance_ = new NotifyHerosInfo_heropanelinfo_goodsmsg();
  NotifyGoodsExpired::default_instance_ = new NotifyGoodsExpired();
  ShortMail::default_instance_ = new ShortMail();
  DelAndSortMail::default_instance_ = new DelAndSortMail();
  MailInfo::default_instance_ = new MailInfo();
  NotifyMailList::default_instance_ = new NotifyMailList();
  GoodsCfgInfo::default_instance_ = new GoodsCfgInfo();
  GoodsCfgInfo_Consume::default_instance_ = new GoodsCfgInfo_Consume();
  GoodsBuyCfgInfo::default_instance_ = new GoodsBuyCfgInfo();
  HeroAttributes::default_instance_ = new HeroAttributes();
  HeroAssist::default_instance_ = new HeroAssist();
  BattleMatcherCount::default_instance_ = new BattleMatcherCount();
  BattleSpanTime::default_instance_ = new BattleSpanTime();
  BattleDelayTime::default_instance_ = new BattleDelayTime();
  UserBaseUpLv::default_instance_ = new UserBaseUpLv();
  SecondGuideTask::default_instance_ = new SecondGuideTask();
  SecondGuideTask_task_info::default_instance_ = new SecondGuideTask_task_info();
  GameTips::default_instance_ = new GameTips();
  NotifyUserReturnBattleRoom::default_instance_ = new NotifyUserReturnBattleRoom();
  BroadcastBattleHeroInfo::default_instance_ = new BroadcastBattleHeroInfo();
  BroadcastBattleHeroInfo_HeroInfo::default_instance_ = new BroadcastBattleHeroInfo_HeroInfo();
  BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance_ = new BroadcastBattleHeroInfo_BaseGoodsInfo();
  GuideLastStep::default_instance_ = new GuideLastStep();
  NotifyUserCLDays::default_instance_ = new NotifyUserCLDays();
  GameNotice::default_instance_ = new GameNotice();
  GameNotice_Notice::default_instance_ = new GameNotice_Notice();
  GuideSteps::default_instance_ = new GuideSteps();
  PingRet::default_instance_ = new PingRet();
  NotifyQueryNickNameRet::default_instance_ = new NotifyQueryNickNameRet();
  NotifyQueryNickNameRet_QueryInfo::default_instance_ = new NotifyQueryNickNameRet_QueryInfo();
  SNSInfo::default_instance_ = new SNSInfo();
  NotifyUserSNSList::default_instance_ = new NotifyUserSNSList();
  NotifyBattleManagerChange::default_instance_ = new NotifyBattleManagerChange();
  NotifyBeAddFriendMs::default_instance_ = new NotifyBeAddFriendMs();
  NotifyMsgFromUser::default_instance_ = new NotifyMsgFromUser();
  NotifyUserSNSListChange::default_instance_ = new NotifyUserSNSListChange();
  UserBeInvitedToBattle::default_instance_ = new UserBeInvitedToBattle();
  NotifyAFPData::default_instance_ = new NotifyAFPData();
  NotifyAFPData_FPInfo::default_instance_ = new NotifyAFPData_FPInfo();
  UserBaseInfo::default_instance_ = new UserBaseInfo();
  NotifySystemAnnounce::default_instance_ = new NotifySystemAnnounce();
  NetClash::default_instance_ = new NetClash();
  WarningToSelectHero::default_instance_ = new WarningToSelectHero();
  NotifySkillModelLeading::default_instance_ = new NotifySkillModelLeading();
  AskRet::default_instance_ = new AskRet();
  NotifyCSHeroList::default_instance_ = new NotifyCSHeroList();
  NotifyCSHeroList_HeroListCfg::default_instance_ = new NotifyCSHeroList_HeroListCfg();
  HeroList::default_instance_ = new HeroList();
  BattleBaseInfo::default_instance_ = new BattleBaseInfo();
  RoomBaseInfo::default_instance_ = new RoomBaseInfo();
  BattleSeatPosInfo::default_instance_ = new BattleSeatPosInfo();
  BattleSeatPosInfo_PosInfo::default_instance_ = new BattleSeatPosInfo_PosInfo();
  BattleStateChange::default_instance_ = new BattleStateChange();
  CurBattleChange::default_instance_ = new CurBattleChange();
  Pos::default_instance_ = new Pos();
  Dir::default_instance_ = new Dir();
  GOAppear::default_instance_ = new GOAppear();
  GOAppear_AppearInfo::default_instance_ = new GOAppear_AppearInfo();
  DisappearInfo::default_instance_ = new DisappearInfo();
  FreeState::default_instance_ = new FreeState();
  RunningState::default_instance_ = new RunningState();
  PrepareSkillState::default_instance_ = new PrepareSkillState();
  ReleasingSkillState::default_instance_ = new ReleasingSkillState();
  UsingSkillState::default_instance_ = new UsingSkillState();
  LastingSkillState::default_instance_ = new LastingSkillState();
  DeadState::default_instance_ = new DeadState();
  NotifyGoodsInfo::default_instance_ = new NotifyGoodsInfo();
  NotifyGoodsInfo_GoodsInfo::default_instance_ = new NotifyGoodsInfo_GoodsInfo();
  BattleLoadingState::default_instance_ = new BattleLoadingState();
  HeroPosInfo::default_instance_ = new HeroPosInfo();
  HeroInfo::default_instance_ = new HeroInfo();
  ChatInRoom::default_instance_ = new ChatInRoom();
  SkillHitTar::default_instance_ = new SkillHitTar();
  HPChange::default_instance_ = new HPChange();
  MpChange::default_instance_ = new MpChange();
  TryToChooseHero::default_instance_ = new TryToChooseHero();
  NotifyChooseHeroTimeEnd::default_instance_ = new NotifyChooseHeroTimeEnd();
  SkillEntityInfo::default_instance_ = new SkillEntityInfo();
  FPInfo::default_instance_ = new FPInfo();
  NotifyHPInfo::default_instance_ = new NotifyHPInfo();
  NotifyHPInfo_HPInfo::default_instance_ = new NotifyHPInfo_HPInfo();
  NotifyMPInfo::default_instance_ = new NotifyMPInfo();
  NotifyMPInfo_MPInfo::default_instance_ = new NotifyMPInfo_MPInfo();
  NotifyHeroInfo::default_instance_ = new NotifyHeroInfo();
  NotifySkillInfo::default_instance_ = new NotifySkillInfo();
  BattleFinish::default_instance_ = new BattleFinish();
  Exp::default_instance_ = new Exp();
  LevelInfo::default_instance_ = new LevelInfo();
  AbsorbBegin::default_instance_ = new AbsorbBegin();
  AbsorbRes::default_instance_ = new AbsorbRes();
  CancelAbsorb::default_instance_ = new CancelAbsorb();
  UserGameInfo::default_instance_ = new UserGameInfo();
  HeroKills::default_instance_ = new HeroKills();
  CurDeadTimes::default_instance_ = new CurDeadTimes();
  CurCP::default_instance_ = new CurCP();
  CurAtkSpeed::default_instance_ = new CurAtkSpeed();
  CurAtkSpeed_SpeedInfo::default_instance_ = new CurAtkSpeed_SpeedInfo();
  FuryVal::default_instance_ = new FuryVal();
  FuryState::default_instance_ = new FuryState();
  NotifyHeroReborn::default_instance_ = new NotifyHeroReborn();
  RebornTimes::default_instance_ = new RebornTimes();
  RebornSuccess::default_instance_ = new RebornSuccess();
  PersonCPChange::default_instance_ = new PersonCPChange();
  BroadcastBatteleRes::default_instance_ = new BroadcastBatteleRes();
  BroadcastBatteleRes_ResInfo::default_instance_ = new BroadcastBatteleRes_ResInfo();
  BroadcastBattelePersonalRes::default_instance_ = new BroadcastBattelePersonalRes();
  BroadcastBuildingDestory::default_instance_ = new BroadcastBuildingDestory();
  HeroMoveInfo::default_instance_ = new HeroMoveInfo();
  PlayFinishVedio::default_instance_ = new PlayFinishVedio();
  LeaveBattleSuccess::default_instance_ = new LeaveBattleSuccess();
  BornSoler::default_instance_ = new BornSoler();
  SkillEnd::default_instance_ = new SkillEnd();
  AltarBSIco::default_instance_ = new AltarBSIco();
  GOReleaseSkill::default_instance_ = new GOReleaseSkill();
  GOSkillCD::default_instance_ = new GOSkillCD();
  EmitSkill::default_instance_ = new EmitSkill();
  DestroyEmitEffect::default_instance_ = new DestroyEmitEffect();
  HitTar::default_instance_ = new HitTar();
  RangeEffect::default_instance_ = new RangeEffect();
  RangeEffectEnd::default_instance_ = new RangeEffectEnd();
  SummonEffect::default_instance_ = new SummonEffect();
  BuffEffect::default_instance_ = new BuffEffect();
  NotifySummonLifeTime::default_instance_ = new NotifySummonLifeTime();
  NotifySkillModelStartForceMove::default_instance_ = new NotifySkillModelStartForceMove();
  NotifySkillModelStartForceMoveStop::default_instance_ = new NotifySkillModelStartForceMoveStop();
  NotifySkillModelStartForceMoveTeleport::default_instance_ = new NotifySkillModelStartForceMoveTeleport();
  NotifySkillModelPurification::default_instance_ = new NotifySkillModelPurification();
  NotifySkillModelStartLink::default_instance_ = new NotifySkillModelStartLink();
  NotifySkillModelStopLink::default_instance_ = new NotifySkillModelStopLink();
  NotifyPassitiveSkillRelease::default_instance_ = new NotifyPassitiveSkillRelease();
  NotifyPassitiveSkillLoad::default_instance_ = new NotifyPassitiveSkillLoad();
  NotifyPassitiveSkillUnLoad::default_instance_ = new NotifyPassitiveSkillUnLoad();
  NotifySkillModelEmitTurn::default_instance_ = new NotifySkillModelEmitTurn();
  NotifyBornObj::default_instance_ = new NotifyBornObj();
  NotifyReconnectInfo::default_instance_ = new NotifyReconnectInfo();
  NotifyReconnectInfo_ReconnectInfo::default_instance_ = new NotifyReconnectInfo_ReconnectInfo();
  NotifyOBReturnBattleRoom::default_instance_ = new NotifyOBReturnBattleRoom();
  NotifyOBAppear::default_instance_ = new NotifyOBAppear();
  NotifyKillNPC::default_instance_ = new NotifyKillNPC();
  NotifyAltarBSIco::default_instance_ = new NotifyAltarBSIco();
  NotifySkillUpLv::default_instance_ = new NotifySkillUpLv();
  NotifyBlastHurt::default_instance_ = new NotifyBlastHurt();
  NotifyGameObjectReliveState::default_instance_ = new NotifyGameObjectReliveState();
  NotifyCurGold::default_instance_ = new NotifyCurGold();
  NotifyCurDiamond::default_instance_ = new NotifyCurDiamond();
  GetloginRewardSuccess::default_instance_ = new GetloginRewardSuccess();
  GetloginReward_Skin::default_instance_ = new GetloginReward_Skin();
  GetloginReward_Rune::default_instance_ = new GetloginReward_Rune();
  GetloginReward_Hero::default_instance_ = new GetloginReward_Hero();
  CanInviteFriends::default_instance_ = new CanInviteFriends();
  CanInviteFriends_Friends::default_instance_ = new CanInviteFriends_Friends();
  LastHitNum::default_instance_ = new LastHitNum();
  RoomInfo::default_instance_ = new RoomInfo();
  AskRoomListRet::default_instance_ = new AskRoomListRet();
  TaskData::default_instance_->InitAsDefaultInstance();
  NotifyUpdateAllTask::default_instance_->InitAsDefaultInstance();
  NotifyUpdateAllDailyTask::default_instance_->InitAsDefaultInstance();
  NotifyAddOneTask::default_instance_->InitAsDefaultInstance();
  NotifyUpdateOneTask::default_instance_->InitAsDefaultInstance();
  NotifyDelOneTask::default_instance_->InitAsDefaultInstance();
  NotifyRewardsOneTask::default_instance_->InitAsDefaultInstance();
  NotifyMailRet::default_instance_->InitAsDefaultInstance();
  NotifyIsOnSS::default_instance_->InitAsDefaultInstance();
  NotifyOtherItemInfo::default_instance_->InitAsDefaultInstance();
  NotifyOtherItemInfo_OtherItem::default_instance_->InitAsDefaultInstance();
  RecoinRuneRet::default_instance_->InitAsDefaultInstance();
  UnloadRune::default_instance_->InitAsDefaultInstance();
  GuideCSStepInfo::default_instance_->InitAsDefaultInstance();
  GuideAward::default_instance_->InitAsDefaultInstance();
  GuideAward_awardtype::default_instance_->InitAsDefaultInstance();
  GuideKillsInfo::default_instance_->InitAsDefaultInstance();
  NotifyUserLvInfo::default_instance_->InitAsDefaultInstance();
  NotifyNewHeaderid::default_instance_->InitAsDefaultInstance();
  NotifyOneMatchNeedOne::default_instance_->InitAsDefaultInstance();
  NotifyNewNickname::default_instance_->InitAsDefaultInstance();
  RunesSlot::default_instance_->InitAsDefaultInstance();
  RunesBagInfo::default_instance_->InitAsDefaultInstance();
  NotifyRunesList::default_instance_->InitAsDefaultInstance();
  NotifyRemoveCommodity::default_instance_->InitAsDefaultInstance();
  NotifyGetNewCommodity::default_instance_->InitAsDefaultInstance();
  NotifyMatchTeamBaseInfo::default_instance_->InitAsDefaultInstance();
  NotifyMatchTeamPlayerInfo::default_instance_->InitAsDefaultInstance();
  NotifyMatchTeamSwitch::default_instance_->InitAsDefaultInstance();
  NotifyMatchInviteJoin::default_instance_->InitAsDefaultInstance();
  NotifyHerosInfo::default_instance_->InitAsDefaultInstance();
  NotifyHerosInfo_heropanelinfo::default_instance_->InitAsDefaultInstance();
  NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance_->InitAsDefaultInstance();
  NotifyGoodsExpired::default_instance_->InitAsDefaultInstance();
  ShortMail::default_instance_->InitAsDefaultInstance();
  DelAndSortMail::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  NotifyMailList::default_instance_->InitAsDefaultInstance();
  GoodsCfgInfo::default_instance_->InitAsDefaultInstance();
  GoodsCfgInfo_Consume::default_instance_->InitAsDefaultInstance();
  GoodsBuyCfgInfo::default_instance_->InitAsDefaultInstance();
  HeroAttributes::default_instance_->InitAsDefaultInstance();
  HeroAssist::default_instance_->InitAsDefaultInstance();
  BattleMatcherCount::default_instance_->InitAsDefaultInstance();
  BattleSpanTime::default_instance_->InitAsDefaultInstance();
  BattleDelayTime::default_instance_->InitAsDefaultInstance();
  UserBaseUpLv::default_instance_->InitAsDefaultInstance();
  SecondGuideTask::default_instance_->InitAsDefaultInstance();
  SecondGuideTask_task_info::default_instance_->InitAsDefaultInstance();
  GameTips::default_instance_->InitAsDefaultInstance();
  NotifyUserReturnBattleRoom::default_instance_->InitAsDefaultInstance();
  BroadcastBattleHeroInfo::default_instance_->InitAsDefaultInstance();
  BroadcastBattleHeroInfo_HeroInfo::default_instance_->InitAsDefaultInstance();
  BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance_->InitAsDefaultInstance();
  GuideLastStep::default_instance_->InitAsDefaultInstance();
  NotifyUserCLDays::default_instance_->InitAsDefaultInstance();
  GameNotice::default_instance_->InitAsDefaultInstance();
  GameNotice_Notice::default_instance_->InitAsDefaultInstance();
  GuideSteps::default_instance_->InitAsDefaultInstance();
  PingRet::default_instance_->InitAsDefaultInstance();
  NotifyQueryNickNameRet::default_instance_->InitAsDefaultInstance();
  NotifyQueryNickNameRet_QueryInfo::default_instance_->InitAsDefaultInstance();
  SNSInfo::default_instance_->InitAsDefaultInstance();
  NotifyUserSNSList::default_instance_->InitAsDefaultInstance();
  NotifyBattleManagerChange::default_instance_->InitAsDefaultInstance();
  NotifyBeAddFriendMs::default_instance_->InitAsDefaultInstance();
  NotifyMsgFromUser::default_instance_->InitAsDefaultInstance();
  NotifyUserSNSListChange::default_instance_->InitAsDefaultInstance();
  UserBeInvitedToBattle::default_instance_->InitAsDefaultInstance();
  NotifyAFPData::default_instance_->InitAsDefaultInstance();
  NotifyAFPData_FPInfo::default_instance_->InitAsDefaultInstance();
  UserBaseInfo::default_instance_->InitAsDefaultInstance();
  NotifySystemAnnounce::default_instance_->InitAsDefaultInstance();
  NetClash::default_instance_->InitAsDefaultInstance();
  WarningToSelectHero::default_instance_->InitAsDefaultInstance();
  NotifySkillModelLeading::default_instance_->InitAsDefaultInstance();
  AskRet::default_instance_->InitAsDefaultInstance();
  NotifyCSHeroList::default_instance_->InitAsDefaultInstance();
  NotifyCSHeroList_HeroListCfg::default_instance_->InitAsDefaultInstance();
  HeroList::default_instance_->InitAsDefaultInstance();
  BattleBaseInfo::default_instance_->InitAsDefaultInstance();
  RoomBaseInfo::default_instance_->InitAsDefaultInstance();
  BattleSeatPosInfo::default_instance_->InitAsDefaultInstance();
  BattleSeatPosInfo_PosInfo::default_instance_->InitAsDefaultInstance();
  BattleStateChange::default_instance_->InitAsDefaultInstance();
  CurBattleChange::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  Dir::default_instance_->InitAsDefaultInstance();
  GOAppear::default_instance_->InitAsDefaultInstance();
  GOAppear_AppearInfo::default_instance_->InitAsDefaultInstance();
  DisappearInfo::default_instance_->InitAsDefaultInstance();
  FreeState::default_instance_->InitAsDefaultInstance();
  RunningState::default_instance_->InitAsDefaultInstance();
  PrepareSkillState::default_instance_->InitAsDefaultInstance();
  ReleasingSkillState::default_instance_->InitAsDefaultInstance();
  UsingSkillState::default_instance_->InitAsDefaultInstance();
  LastingSkillState::default_instance_->InitAsDefaultInstance();
  DeadState::default_instance_->InitAsDefaultInstance();
  NotifyGoodsInfo::default_instance_->InitAsDefaultInstance();
  NotifyGoodsInfo_GoodsInfo::default_instance_->InitAsDefaultInstance();
  BattleLoadingState::default_instance_->InitAsDefaultInstance();
  HeroPosInfo::default_instance_->InitAsDefaultInstance();
  HeroInfo::default_instance_->InitAsDefaultInstance();
  ChatInRoom::default_instance_->InitAsDefaultInstance();
  SkillHitTar::default_instance_->InitAsDefaultInstance();
  HPChange::default_instance_->InitAsDefaultInstance();
  MpChange::default_instance_->InitAsDefaultInstance();
  TryToChooseHero::default_instance_->InitAsDefaultInstance();
  NotifyChooseHeroTimeEnd::default_instance_->InitAsDefaultInstance();
  SkillEntityInfo::default_instance_->InitAsDefaultInstance();
  FPInfo::default_instance_->InitAsDefaultInstance();
  NotifyHPInfo::default_instance_->InitAsDefaultInstance();
  NotifyHPInfo_HPInfo::default_instance_->InitAsDefaultInstance();
  NotifyMPInfo::default_instance_->InitAsDefaultInstance();
  NotifyMPInfo_MPInfo::default_instance_->InitAsDefaultInstance();
  NotifyHeroInfo::default_instance_->InitAsDefaultInstance();
  NotifySkillInfo::default_instance_->InitAsDefaultInstance();
  BattleFinish::default_instance_->InitAsDefaultInstance();
  Exp::default_instance_->InitAsDefaultInstance();
  LevelInfo::default_instance_->InitAsDefaultInstance();
  AbsorbBegin::default_instance_->InitAsDefaultInstance();
  AbsorbRes::default_instance_->InitAsDefaultInstance();
  CancelAbsorb::default_instance_->InitAsDefaultInstance();
  UserGameInfo::default_instance_->InitAsDefaultInstance();
  HeroKills::default_instance_->InitAsDefaultInstance();
  CurDeadTimes::default_instance_->InitAsDefaultInstance();
  CurCP::default_instance_->InitAsDefaultInstance();
  CurAtkSpeed::default_instance_->InitAsDefaultInstance();
  CurAtkSpeed_SpeedInfo::default_instance_->InitAsDefaultInstance();
  FuryVal::default_instance_->InitAsDefaultInstance();
  FuryState::default_instance_->InitAsDefaultInstance();
  NotifyHeroReborn::default_instance_->InitAsDefaultInstance();
  RebornTimes::default_instance_->InitAsDefaultInstance();
  RebornSuccess::default_instance_->InitAsDefaultInstance();
  PersonCPChange::default_instance_->InitAsDefaultInstance();
  BroadcastBatteleRes::default_instance_->InitAsDefaultInstance();
  BroadcastBatteleRes_ResInfo::default_instance_->InitAsDefaultInstance();
  BroadcastBattelePersonalRes::default_instance_->InitAsDefaultInstance();
  BroadcastBuildingDestory::default_instance_->InitAsDefaultInstance();
  HeroMoveInfo::default_instance_->InitAsDefaultInstance();
  PlayFinishVedio::default_instance_->InitAsDefaultInstance();
  LeaveBattleSuccess::default_instance_->InitAsDefaultInstance();
  BornSoler::default_instance_->InitAsDefaultInstance();
  SkillEnd::default_instance_->InitAsDefaultInstance();
  AltarBSIco::default_instance_->InitAsDefaultInstance();
  GOReleaseSkill::default_instance_->InitAsDefaultInstance();
  GOSkillCD::default_instance_->InitAsDefaultInstance();
  EmitSkill::default_instance_->InitAsDefaultInstance();
  DestroyEmitEffect::default_instance_->InitAsDefaultInstance();
  HitTar::default_instance_->InitAsDefaultInstance();
  RangeEffect::default_instance_->InitAsDefaultInstance();
  RangeEffectEnd::default_instance_->InitAsDefaultInstance();
  SummonEffect::default_instance_->InitAsDefaultInstance();
  BuffEffect::default_instance_->InitAsDefaultInstance();
  NotifySummonLifeTime::default_instance_->InitAsDefaultInstance();
  NotifySkillModelStartForceMove::default_instance_->InitAsDefaultInstance();
  NotifySkillModelStartForceMoveStop::default_instance_->InitAsDefaultInstance();
  NotifySkillModelStartForceMoveTeleport::default_instance_->InitAsDefaultInstance();
  NotifySkillModelPurification::default_instance_->InitAsDefaultInstance();
  NotifySkillModelStartLink::default_instance_->InitAsDefaultInstance();
  NotifySkillModelStopLink::default_instance_->InitAsDefaultInstance();
  NotifyPassitiveSkillRelease::default_instance_->InitAsDefaultInstance();
  NotifyPassitiveSkillLoad::default_instance_->InitAsDefaultInstance();
  NotifyPassitiveSkillUnLoad::default_instance_->InitAsDefaultInstance();
  NotifySkillModelEmitTurn::default_instance_->InitAsDefaultInstance();
  NotifyBornObj::default_instance_->InitAsDefaultInstance();
  NotifyReconnectInfo::default_instance_->InitAsDefaultInstance();
  NotifyReconnectInfo_ReconnectInfo::default_instance_->InitAsDefaultInstance();
  NotifyOBReturnBattleRoom::default_instance_->InitAsDefaultInstance();
  NotifyOBAppear::default_instance_->InitAsDefaultInstance();
  NotifyKillNPC::default_instance_->InitAsDefaultInstance();
  NotifyAltarBSIco::default_instance_->InitAsDefaultInstance();
  NotifySkillUpLv::default_instance_->InitAsDefaultInstance();
  NotifyBlastHurt::default_instance_->InitAsDefaultInstance();
  NotifyGameObjectReliveState::default_instance_->InitAsDefaultInstance();
  NotifyCurGold::default_instance_->InitAsDefaultInstance();
  NotifyCurDiamond::default_instance_->InitAsDefaultInstance();
  GetloginRewardSuccess::default_instance_->InitAsDefaultInstance();
  GetloginReward_Skin::default_instance_->InitAsDefaultInstance();
  GetloginReward_Rune::default_instance_->InitAsDefaultInstance();
  GetloginReward_Hero::default_instance_->InitAsDefaultInstance();
  CanInviteFriends::default_instance_->InitAsDefaultInstance();
  CanInviteFriends_Friends::default_instance_->InitAsDefaultInstance();
  LastHitNum::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  AskRoomListRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GSToGC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GSToGC_2eproto {
  StaticDescriptorInitializer_GSToGC_2eproto() {
    protobuf_AddDesc_GSToGC_2eproto();
  }
} static_descriptor_initializer_GSToGC_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 106:
    case 107:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
    case 300:
    case 301:
    case 302:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 550:
    case 551:
    case 601:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailType_descriptor_;
}
bool MailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailCurtState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailCurtState_descriptor_;
}
bool EMailCurtState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleState_descriptor_;
}
bool BattleState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjType_descriptor_;
}
bool ObjType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HPMPChangeReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPMPChangeReason_descriptor_;
}
bool HPMPChangeReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillState_descriptor_;
}
bool SkillState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TaskData::kTaskIdFieldNumber;
const int TaskData::kTaskGuidFieldNumber;
const int TaskData::kTaskCurCountFieldNumber;
#endif  // !_MSC_VER

TaskData::TaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.TaskData)
}

void TaskData::InitAsDefaultInstance() {
}

TaskData::TaskData(const TaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.TaskData)
}

void TaskData::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  task_guid_ = 0u;
  task_curcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskData::~TaskData() {
  // @@protoc_insertion_point(destructor:GSToGC.TaskData)
  SharedDtor();
}

void TaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskData_descriptor_;
}

const TaskData& TaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

TaskData* TaskData::default_instance_ = NULL;

TaskData* TaskData::New() const {
  return new TaskData;
}

void TaskData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_id_, task_curcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.TaskData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_guid;
        break;
      }

      // optional uint32 task_guid = 2;
      case 2: {
        if (tag == 16) {
         parse_task_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_guid_)));
          set_has_task_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_curCount;
        break;
      }

      // optional uint32 task_curCount = 3;
      case 3: {
        if (tag == 24) {
         parse_task_curCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_curcount_)));
          set_has_task_curcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.TaskData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.TaskData)
  return false;
#undef DO_
}

void TaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.TaskData)
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_guid(), output);
  }

  // optional uint32 task_curCount = 3;
  if (has_task_curcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_curcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.TaskData)
}

::google::protobuf::uint8* TaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.TaskData)
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_guid(), target);
  }

  // optional uint32 task_curCount = 3;
  if (has_task_curcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_curcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.TaskData)
  return target;
}

int TaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 task_guid = 2;
    if (has_task_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_guid());
    }

    // optional uint32 task_curCount = 3;
    if (has_task_curcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_curcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskData::MergeFrom(const TaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_guid()) {
      set_task_guid(from.task_guid());
    }
    if (from.has_task_curcount()) {
      set_task_curcount(from.task_curcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskData::CopyFrom(const TaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskData::IsInitialized() const {

  return true;
}

void TaskData::Swap(TaskData* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_guid_, other->task_guid_);
    std::swap(task_curcount_, other->task_curcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskData_descriptor_;
  metadata.reflection = TaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateAllTask::kMsgidFieldNumber;
const int NotifyUpdateAllTask::kTaskListFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateAllTask::NotifyUpdateAllTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUpdateAllTask)
}

void NotifyUpdateAllTask::InitAsDefaultInstance() {
}

NotifyUpdateAllTask::NotifyUpdateAllTask(const NotifyUpdateAllTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUpdateAllTask)
}

void NotifyUpdateAllTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 400;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateAllTask::~NotifyUpdateAllTask() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUpdateAllTask)
  SharedDtor();
}

void NotifyUpdateAllTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUpdateAllTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateAllTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateAllTask_descriptor_;
}

const NotifyUpdateAllTask& NotifyUpdateAllTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUpdateAllTask* NotifyUpdateAllTask::default_instance_ = NULL;

NotifyUpdateAllTask* NotifyUpdateAllTask::New() const {
  return new NotifyUpdateAllTask;
}

void NotifyUpdateAllTask::Clear() {
  msgid_ = 400;
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateAllTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUpdateAllTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taskList;
        break;
      }

      // repeated .GSToGC.TaskData taskList = 2;
      case 2: {
        if (tag == 18) {
         parse_taskList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taskList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUpdateAllTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUpdateAllTask)
  return false;
#undef DO_
}

void NotifyUpdateAllTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUpdateAllTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.TaskData taskList = 2;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUpdateAllTask)
}

::google::protobuf::uint8* NotifyUpdateAllTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUpdateAllTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.TaskData taskList = 2;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUpdateAllTask)
  return target;
}

int NotifyUpdateAllTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.TaskData taskList = 2;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateAllTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateAllTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateAllTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateAllTask::MergeFrom(const NotifyUpdateAllTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateAllTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateAllTask::CopyFrom(const NotifyUpdateAllTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateAllTask::IsInitialized() const {

  return true;
}

void NotifyUpdateAllTask::Swap(NotifyUpdateAllTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    tasklist_.Swap(&other->tasklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateAllTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateAllTask_descriptor_;
  metadata.reflection = NotifyUpdateAllTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateAllDailyTask::kMsgidFieldNumber;
const int NotifyUpdateAllDailyTask::kTaskListFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateAllDailyTask::NotifyUpdateAllDailyTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUpdateAllDailyTask)
}

void NotifyUpdateAllDailyTask::InitAsDefaultInstance() {
}

NotifyUpdateAllDailyTask::NotifyUpdateAllDailyTask(const NotifyUpdateAllDailyTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUpdateAllDailyTask)
}

void NotifyUpdateAllDailyTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 401;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateAllDailyTask::~NotifyUpdateAllDailyTask() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUpdateAllDailyTask)
  SharedDtor();
}

void NotifyUpdateAllDailyTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUpdateAllDailyTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateAllDailyTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateAllDailyTask_descriptor_;
}

const NotifyUpdateAllDailyTask& NotifyUpdateAllDailyTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUpdateAllDailyTask* NotifyUpdateAllDailyTask::default_instance_ = NULL;

NotifyUpdateAllDailyTask* NotifyUpdateAllDailyTask::New() const {
  return new NotifyUpdateAllDailyTask;
}

void NotifyUpdateAllDailyTask::Clear() {
  msgid_ = 401;
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateAllDailyTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUpdateAllDailyTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllDailyTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taskList;
        break;
      }

      // repeated .GSToGC.TaskData taskList = 2;
      case 2: {
        if (tag == 18) {
         parse_taskList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taskList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUpdateAllDailyTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUpdateAllDailyTask)
  return false;
#undef DO_
}

void NotifyUpdateAllDailyTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUpdateAllDailyTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllDailyTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.TaskData taskList = 2;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUpdateAllDailyTask)
}

::google::protobuf::uint8* NotifyUpdateAllDailyTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUpdateAllDailyTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllDailyTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.TaskData taskList = 2;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUpdateAllDailyTask)
  return target;
}

int NotifyUpdateAllDailyTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateAllDailyTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.TaskData taskList = 2;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateAllDailyTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateAllDailyTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateAllDailyTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateAllDailyTask::MergeFrom(const NotifyUpdateAllDailyTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateAllDailyTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateAllDailyTask::CopyFrom(const NotifyUpdateAllDailyTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateAllDailyTask::IsInitialized() const {

  return true;
}

void NotifyUpdateAllDailyTask::Swap(NotifyUpdateAllDailyTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    tasklist_.Swap(&other->tasklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateAllDailyTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateAllDailyTask_descriptor_;
  metadata.reflection = NotifyUpdateAllDailyTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAddOneTask::kMsgidFieldNumber;
const int NotifyAddOneTask::kOneTaskFieldNumber;
#endif  // !_MSC_VER

NotifyAddOneTask::NotifyAddOneTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyAddOneTask)
}

void NotifyAddOneTask::InitAsDefaultInstance() {
  onetask_ = const_cast< ::GSToGC::TaskData*>(&::GSToGC::TaskData::default_instance());
}

NotifyAddOneTask::NotifyAddOneTask(const NotifyAddOneTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyAddOneTask)
}

void NotifyAddOneTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 402;
  onetask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAddOneTask::~NotifyAddOneTask() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyAddOneTask)
  SharedDtor();
}

void NotifyAddOneTask::SharedDtor() {
  if (this != default_instance_) {
    delete onetask_;
  }
}

void NotifyAddOneTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAddOneTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAddOneTask_descriptor_;
}

const NotifyAddOneTask& NotifyAddOneTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyAddOneTask* NotifyAddOneTask::default_instance_ = NULL;

NotifyAddOneTask* NotifyAddOneTask::New() const {
  return new NotifyAddOneTask;
}

void NotifyAddOneTask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 402;
    if (has_onetask()) {
      if (onetask_ != NULL) onetask_->::GSToGC::TaskData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAddOneTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyAddOneTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AddOneTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_oneTask;
        break;
      }

      // optional .GSToGC.TaskData oneTask = 2;
      case 2: {
        if (tag == 18) {
         parse_oneTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onetask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyAddOneTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyAddOneTask)
  return false;
#undef DO_
}

void NotifyAddOneTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyAddOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AddOneTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional .GSToGC.TaskData oneTask = 2;
  if (has_onetask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->onetask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyAddOneTask)
}

::google::protobuf::uint8* NotifyAddOneTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyAddOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AddOneTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional .GSToGC.TaskData oneTask = 2;
  if (has_onetask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->onetask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyAddOneTask)
  return target;
}

int NotifyAddOneTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AddOneTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional .GSToGC.TaskData oneTask = 2;
    if (has_onetask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onetask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAddOneTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAddOneTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAddOneTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAddOneTask::MergeFrom(const NotifyAddOneTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_onetask()) {
      mutable_onetask()->::GSToGC::TaskData::MergeFrom(from.onetask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAddOneTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAddOneTask::CopyFrom(const NotifyAddOneTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAddOneTask::IsInitialized() const {

  return true;
}

void NotifyAddOneTask::Swap(NotifyAddOneTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(onetask_, other->onetask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAddOneTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAddOneTask_descriptor_;
  metadata.reflection = NotifyAddOneTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUpdateOneTask::kMsgidFieldNumber;
const int NotifyUpdateOneTask::kOneTaskFieldNumber;
#endif  // !_MSC_VER

NotifyUpdateOneTask::NotifyUpdateOneTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUpdateOneTask)
}

void NotifyUpdateOneTask::InitAsDefaultInstance() {
  onetask_ = const_cast< ::GSToGC::TaskData*>(&::GSToGC::TaskData::default_instance());
}

NotifyUpdateOneTask::NotifyUpdateOneTask(const NotifyUpdateOneTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUpdateOneTask)
}

void NotifyUpdateOneTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 403;
  onetask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUpdateOneTask::~NotifyUpdateOneTask() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUpdateOneTask)
  SharedDtor();
}

void NotifyUpdateOneTask::SharedDtor() {
  if (this != default_instance_) {
    delete onetask_;
  }
}

void NotifyUpdateOneTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUpdateOneTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUpdateOneTask_descriptor_;
}

const NotifyUpdateOneTask& NotifyUpdateOneTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUpdateOneTask* NotifyUpdateOneTask::default_instance_ = NULL;

NotifyUpdateOneTask* NotifyUpdateOneTask::New() const {
  return new NotifyUpdateOneTask;
}

void NotifyUpdateOneTask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 403;
    if (has_onetask()) {
      if (onetask_ != NULL) onetask_->::GSToGC::TaskData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUpdateOneTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUpdateOneTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateOneTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_oneTask;
        break;
      }

      // optional .GSToGC.TaskData oneTask = 2;
      case 2: {
        if (tag == 18) {
         parse_oneTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onetask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUpdateOneTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUpdateOneTask)
  return false;
#undef DO_
}

void NotifyUpdateOneTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUpdateOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateOneTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional .GSToGC.TaskData oneTask = 2;
  if (has_onetask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->onetask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUpdateOneTask)
}

::google::protobuf::uint8* NotifyUpdateOneTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUpdateOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateOneTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional .GSToGC.TaskData oneTask = 2;
  if (has_onetask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->onetask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUpdateOneTask)
  return target;
}

int NotifyUpdateOneTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UpdateOneTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional .GSToGC.TaskData oneTask = 2;
    if (has_onetask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onetask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUpdateOneTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUpdateOneTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUpdateOneTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUpdateOneTask::MergeFrom(const NotifyUpdateOneTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_onetask()) {
      mutable_onetask()->::GSToGC::TaskData::MergeFrom(from.onetask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUpdateOneTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUpdateOneTask::CopyFrom(const NotifyUpdateOneTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUpdateOneTask::IsInitialized() const {

  return true;
}

void NotifyUpdateOneTask::Swap(NotifyUpdateOneTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(onetask_, other->onetask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUpdateOneTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUpdateOneTask_descriptor_;
  metadata.reflection = NotifyUpdateOneTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyDelOneTask::kMsgidFieldNumber;
const int NotifyDelOneTask::kTaskGuidFieldNumber;
#endif  // !_MSC_VER

NotifyDelOneTask::NotifyDelOneTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyDelOneTask)
}

void NotifyDelOneTask::InitAsDefaultInstance() {
}

NotifyDelOneTask::NotifyDelOneTask(const NotifyDelOneTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyDelOneTask)
}

void NotifyDelOneTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 404;
  task_guid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyDelOneTask::~NotifyDelOneTask() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyDelOneTask)
  SharedDtor();
}

void NotifyDelOneTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyDelOneTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyDelOneTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyDelOneTask_descriptor_;
}

const NotifyDelOneTask& NotifyDelOneTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyDelOneTask* NotifyDelOneTask::default_instance_ = NULL;

NotifyDelOneTask* NotifyDelOneTask::New() const {
  return new NotifyDelOneTask;
}

void NotifyDelOneTask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 404;
    task_guid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyDelOneTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyDelOneTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_DelOneTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_guid;
        break;
      }

      // optional uint32 task_guid = 2;
      case 2: {
        if (tag == 16) {
         parse_task_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_guid_)));
          set_has_task_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyDelOneTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyDelOneTask)
  return false;
#undef DO_
}

void NotifyDelOneTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyDelOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_DelOneTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyDelOneTask)
}

::google::protobuf::uint8* NotifyDelOneTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyDelOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_DelOneTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyDelOneTask)
  return target;
}

int NotifyDelOneTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_DelOneTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 task_guid = 2;
    if (has_task_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyDelOneTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyDelOneTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyDelOneTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyDelOneTask::MergeFrom(const NotifyDelOneTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_task_guid()) {
      set_task_guid(from.task_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyDelOneTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyDelOneTask::CopyFrom(const NotifyDelOneTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyDelOneTask::IsInitialized() const {

  return true;
}

void NotifyDelOneTask::Swap(NotifyDelOneTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(task_guid_, other->task_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyDelOneTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyDelOneTask_descriptor_;
  metadata.reflection = NotifyDelOneTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRewardsOneTask::kMsgidFieldNumber;
const int NotifyRewardsOneTask::kTaskGuidFieldNumber;
#endif  // !_MSC_VER

NotifyRewardsOneTask::NotifyRewardsOneTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyRewardsOneTask)
}

void NotifyRewardsOneTask::InitAsDefaultInstance() {
}

NotifyRewardsOneTask::NotifyRewardsOneTask(const NotifyRewardsOneTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyRewardsOneTask)
}

void NotifyRewardsOneTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 405;
  task_guid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRewardsOneTask::~NotifyRewardsOneTask() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyRewardsOneTask)
  SharedDtor();
}

void NotifyRewardsOneTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRewardsOneTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRewardsOneTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRewardsOneTask_descriptor_;
}

const NotifyRewardsOneTask& NotifyRewardsOneTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyRewardsOneTask* NotifyRewardsOneTask::default_instance_ = NULL;

NotifyRewardsOneTask* NotifyRewardsOneTask::New() const {
  return new NotifyRewardsOneTask;
}

void NotifyRewardsOneTask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 405;
    task_guid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRewardsOneTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyRewardsOneTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RewardsOneTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_guid;
        break;
      }

      // optional uint32 task_guid = 2;
      case 2: {
        if (tag == 16) {
         parse_task_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_guid_)));
          set_has_task_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyRewardsOneTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyRewardsOneTask)
  return false;
#undef DO_
}

void NotifyRewardsOneTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyRewardsOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RewardsOneTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyRewardsOneTask)
}

::google::protobuf::uint8* NotifyRewardsOneTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyRewardsOneTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RewardsOneTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 task_guid = 2;
  if (has_task_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyRewardsOneTask)
  return target;
}

int NotifyRewardsOneTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RewardsOneTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 task_guid = 2;
    if (has_task_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRewardsOneTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRewardsOneTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRewardsOneTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRewardsOneTask::MergeFrom(const NotifyRewardsOneTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_task_guid()) {
      set_task_guid(from.task_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRewardsOneTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRewardsOneTask::CopyFrom(const NotifyRewardsOneTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRewardsOneTask::IsInitialized() const {

  return true;
}

void NotifyRewardsOneTask::Swap(NotifyRewardsOneTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(task_guid_, other->task_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRewardsOneTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRewardsOneTask_descriptor_;
  metadata.reflection = NotifyRewardsOneTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMailRet::kMsgidFieldNumber;
const int NotifyMailRet::kMailidFieldNumber;
const int NotifyMailRet::kErrcodeFieldNumber;
#endif  // !_MSC_VER

NotifyMailRet::NotifyMailRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMailRet)
}

void NotifyMailRet::InitAsDefaultInstance() {
}

NotifyMailRet::NotifyMailRet(const NotifyMailRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMailRet)
}

void NotifyMailRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 601;
  mailid_ = 0;
  errcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMailRet::~NotifyMailRet() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMailRet)
  SharedDtor();
}

void NotifyMailRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMailRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMailRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMailRet_descriptor_;
}

const NotifyMailRet& NotifyMailRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMailRet* NotifyMailRet::default_instance_ = NULL;

NotifyMailRet* NotifyMailRet::New() const {
  return new NotifyMailRet;
}

void NotifyMailRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyMailRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mailid_, errcode_);
    msgid_ = 601;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMailRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMailRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // optional int32 mailid = 2;
      case 2: {
        if (tag == 16) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }

      // optional int32 errcode = 3;
      case 3: {
        if (tag == 24) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMailRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMailRet)
  return false;
#undef DO_
}

void NotifyMailRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMailRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  // optional int32 errcode = 3;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMailRet)
}

::google::protobuf::uint8* NotifyMailRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMailRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  // optional int32 errcode = 3;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMailRet)
  return target;
}

int NotifyMailRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMailRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMailRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMailRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMailRet::MergeFrom(const NotifyMailRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMailRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMailRet::CopyFrom(const NotifyMailRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMailRet::IsInitialized() const {

  return true;
}

void NotifyMailRet::Swap(NotifyMailRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(mailid_, other->mailid_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMailRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMailRet_descriptor_;
  metadata.reflection = NotifyMailRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyIsOnSS::kMsgidFieldNumber;
const int NotifyIsOnSS::kSsidFieldNumber;
#endif  // !_MSC_VER

NotifyIsOnSS::NotifyIsOnSS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyIsOnSS)
}

void NotifyIsOnSS::InitAsDefaultInstance() {
}

NotifyIsOnSS::NotifyIsOnSS(const NotifyIsOnSS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyIsOnSS)
}

void NotifyIsOnSS::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 238;
  ssid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyIsOnSS::~NotifyIsOnSS() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyIsOnSS)
  SharedDtor();
}

void NotifyIsOnSS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyIsOnSS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyIsOnSS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyIsOnSS_descriptor_;
}

const NotifyIsOnSS& NotifyIsOnSS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyIsOnSS* NotifyIsOnSS::default_instance_ = NULL;

NotifyIsOnSS* NotifyIsOnSS::New() const {
  return new NotifyIsOnSS;
}

void NotifyIsOnSS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 238;
    ssid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyIsOnSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyIsOnSS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyIsOnSS];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional uint32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyIsOnSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyIsOnSS)
  return false;
#undef DO_
}

void NotifyIsOnSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyIsOnSS)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyIsOnSS];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ssid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyIsOnSS)
}

::google::protobuf::uint8* NotifyIsOnSS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyIsOnSS)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyIsOnSS];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 ssid = 2;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ssid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyIsOnSS)
  return target;
}

int NotifyIsOnSS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyIsOnSS];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyIsOnSS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyIsOnSS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyIsOnSS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyIsOnSS::MergeFrom(const NotifyIsOnSS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyIsOnSS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyIsOnSS::CopyFrom(const NotifyIsOnSS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyIsOnSS::IsInitialized() const {

  return true;
}

void NotifyIsOnSS::Swap(NotifyIsOnSS* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyIsOnSS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyIsOnSS_descriptor_;
  metadata.reflection = NotifyIsOnSS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOtherItemInfo_OtherItem::kItemIdFieldNumber;
const int NotifyOtherItemInfo_OtherItem::kItemNumFieldNumber;
const int NotifyOtherItemInfo_OtherItem::kExpiredTimeFieldNumber;
#endif  // !_MSC_VER

NotifyOtherItemInfo_OtherItem::NotifyOtherItemInfo_OtherItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyOtherItemInfo.OtherItem)
}

void NotifyOtherItemInfo_OtherItem::InitAsDefaultInstance() {
}

NotifyOtherItemInfo_OtherItem::NotifyOtherItemInfo_OtherItem(const NotifyOtherItemInfo_OtherItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyOtherItemInfo.OtherItem)
}

void NotifyOtherItemInfo_OtherItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  expired_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOtherItemInfo_OtherItem::~NotifyOtherItemInfo_OtherItem() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyOtherItemInfo.OtherItem)
  SharedDtor();
}

void NotifyOtherItemInfo_OtherItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyOtherItemInfo_OtherItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOtherItemInfo_OtherItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOtherItemInfo_OtherItem_descriptor_;
}

const NotifyOtherItemInfo_OtherItem& NotifyOtherItemInfo_OtherItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyOtherItemInfo_OtherItem* NotifyOtherItemInfo_OtherItem::default_instance_ = NULL;

NotifyOtherItemInfo_OtherItem* NotifyOtherItemInfo_OtherItem::New() const {
  return new NotifyOtherItemInfo_OtherItem;
}

void NotifyOtherItemInfo_OtherItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyOtherItemInfo_OtherItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, expired_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOtherItemInfo_OtherItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyOtherItemInfo.OtherItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 2;
      case 2: {
        if (tag == 16) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expired_time;
        break;
      }

      // optional int64 expired_time = 3;
      case 3: {
        if (tag == 24) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyOtherItemInfo.OtherItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyOtherItemInfo.OtherItem)
  return false;
#undef DO_
}

void NotifyOtherItemInfo_OtherItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyOtherItemInfo.OtherItem)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  // optional int64 expired_time = 3;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expired_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyOtherItemInfo.OtherItem)
}

::google::protobuf::uint8* NotifyOtherItemInfo_OtherItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyOtherItemInfo.OtherItem)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  // optional int64 expired_time = 3;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expired_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyOtherItemInfo.OtherItem)
  return target;
}

int NotifyOtherItemInfo_OtherItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional int64 expired_time = 3;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expired_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOtherItemInfo_OtherItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOtherItemInfo_OtherItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOtherItemInfo_OtherItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOtherItemInfo_OtherItem::MergeFrom(const NotifyOtherItemInfo_OtherItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOtherItemInfo_OtherItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOtherItemInfo_OtherItem::CopyFrom(const NotifyOtherItemInfo_OtherItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOtherItemInfo_OtherItem::IsInitialized() const {

  return true;
}

void NotifyOtherItemInfo_OtherItem::Swap(NotifyOtherItemInfo_OtherItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOtherItemInfo_OtherItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOtherItemInfo_OtherItem_descriptor_;
  metadata.reflection = NotifyOtherItemInfo_OtherItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyOtherItemInfo::kMsgidFieldNumber;
const int NotifyOtherItemInfo::kItemFieldNumber;
#endif  // !_MSC_VER

NotifyOtherItemInfo::NotifyOtherItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyOtherItemInfo)
}

void NotifyOtherItemInfo::InitAsDefaultInstance() {
}

NotifyOtherItemInfo::NotifyOtherItemInfo(const NotifyOtherItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyOtherItemInfo)
}

void NotifyOtherItemInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 237;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOtherItemInfo::~NotifyOtherItemInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyOtherItemInfo)
  SharedDtor();
}

void NotifyOtherItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyOtherItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOtherItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOtherItemInfo_descriptor_;
}

const NotifyOtherItemInfo& NotifyOtherItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyOtherItemInfo* NotifyOtherItemInfo::default_instance_ = NULL;

NotifyOtherItemInfo* NotifyOtherItemInfo::New() const {
  return new NotifyOtherItemInfo;
}

void NotifyOtherItemInfo::Clear() {
  msgid_ = 237;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOtherItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyOtherItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOtherItemInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .GSToGC.NotifyOtherItemInfo.OtherItem item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyOtherItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyOtherItemInfo)
  return false;
#undef DO_
}

void NotifyOtherItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyOtherItemInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOtherItemInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.NotifyOtherItemInfo.OtherItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyOtherItemInfo)
}

::google::protobuf::uint8* NotifyOtherItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyOtherItemInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOtherItemInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.NotifyOtherItemInfo.OtherItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyOtherItemInfo)
  return target;
}

int NotifyOtherItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOtherItemInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.NotifyOtherItemInfo.OtherItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOtherItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOtherItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOtherItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOtherItemInfo::MergeFrom(const NotifyOtherItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOtherItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOtherItemInfo::CopyFrom(const NotifyOtherItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOtherItemInfo::IsInitialized() const {

  return true;
}

void NotifyOtherItemInfo::Swap(NotifyOtherItemInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOtherItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOtherItemInfo_descriptor_;
  metadata.reflection = NotifyOtherItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoinRuneRet::kMsgidFieldNumber;
const int RecoinRuneRet::kRuneIdFieldNumber;
#endif  // !_MSC_VER

RecoinRuneRet::RecoinRuneRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RecoinRuneRet)
}

void RecoinRuneRet::InitAsDefaultInstance() {
}

RecoinRuneRet::RecoinRuneRet(const RecoinRuneRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RecoinRuneRet)
}

void RecoinRuneRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 236;
  rune_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoinRuneRet::~RecoinRuneRet() {
  // @@protoc_insertion_point(destructor:GSToGC.RecoinRuneRet)
  SharedDtor();
}

void RecoinRuneRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoinRuneRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoinRuneRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoinRuneRet_descriptor_;
}

const RecoinRuneRet& RecoinRuneRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RecoinRuneRet* RecoinRuneRet::default_instance_ = NULL;

RecoinRuneRet* RecoinRuneRet::New() const {
  return new RecoinRuneRet;
}

void RecoinRuneRet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 236;
    rune_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoinRuneRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RecoinRuneRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RecoinRuneRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rune_id;
        break;
      }

      // optional uint32 rune_id = 2;
      case 2: {
        if (tag == 16) {
         parse_rune_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_id_)));
          set_has_rune_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RecoinRuneRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RecoinRuneRet)
  return false;
#undef DO_
}

void RecoinRuneRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RecoinRuneRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RecoinRuneRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 rune_id = 2;
  if (has_rune_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rune_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RecoinRuneRet)
}

::google::protobuf::uint8* RecoinRuneRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RecoinRuneRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RecoinRuneRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 rune_id = 2;
  if (has_rune_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rune_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RecoinRuneRet)
  return target;
}

int RecoinRuneRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_RecoinRuneRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 rune_id = 2;
    if (has_rune_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoinRuneRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoinRuneRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoinRuneRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoinRuneRet::MergeFrom(const RecoinRuneRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_rune_id()) {
      set_rune_id(from.rune_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoinRuneRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoinRuneRet::CopyFrom(const RecoinRuneRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoinRuneRet::IsInitialized() const {

  return true;
}

void RecoinRuneRet::Swap(RecoinRuneRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(rune_id_, other->rune_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoinRuneRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoinRuneRet_descriptor_;
  metadata.reflection = RecoinRuneRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnloadRune::kMsgidFieldNumber;
const int UnloadRune::kPageFieldNumber;
const int UnloadRune::kPosFieldNumber;
#endif  // !_MSC_VER

UnloadRune::UnloadRune()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.UnloadRune)
}

void UnloadRune::InitAsDefaultInstance() {
}

UnloadRune::UnloadRune(const UnloadRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.UnloadRune)
}

void UnloadRune::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 234;
  page_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnloadRune::~UnloadRune() {
  // @@protoc_insertion_point(destructor:GSToGC.UnloadRune)
  SharedDtor();
}

void UnloadRune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnloadRune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnloadRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnloadRune_descriptor_;
}

const UnloadRune& UnloadRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

UnloadRune* UnloadRune::default_instance_ = NULL;

UnloadRune* UnloadRune::New() const {
  return new UnloadRune;
}

void UnloadRune::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnloadRune*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(page_, pos_);
    msgid_ = 234;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnloadRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.UnloadRune)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UnloadRune];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2;
      case 2: {
        if (tag == 16) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.UnloadRune)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.UnloadRune)
  return false;
#undef DO_
}

void UnloadRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.UnloadRune)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UnloadRune];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.UnloadRune)
}

::google::protobuf::uint8* UnloadRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.UnloadRune)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UnloadRune];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.UnloadRune)
  return target;
}

int UnloadRune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_UnloadRune];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnloadRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnloadRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnloadRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnloadRune::MergeFrom(const UnloadRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnloadRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloadRune::CopyFrom(const UnloadRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadRune::IsInitialized() const {

  return true;
}

void UnloadRune::Swap(UnloadRune* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(page_, other->page_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnloadRune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnloadRune_descriptor_;
  metadata.reflection = UnloadRune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideCSStepInfo::kMsgidFieldNumber;
const int GuideCSStepInfo::kAllcompFieldNumber;
const int GuideCSStepInfo::kTaskidFieldNumber;
#endif  // !_MSC_VER

GuideCSStepInfo::GuideCSStepInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GuideCSStepInfo)
}

void GuideCSStepInfo::InitAsDefaultInstance() {
}

GuideCSStepInfo::GuideCSStepInfo(const GuideCSStepInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GuideCSStepInfo)
}

void GuideCSStepInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 300;
  allcomp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideCSStepInfo::~GuideCSStepInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.GuideCSStepInfo)
  SharedDtor();
}

void GuideCSStepInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideCSStepInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideCSStepInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideCSStepInfo_descriptor_;
}

const GuideCSStepInfo& GuideCSStepInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GuideCSStepInfo* GuideCSStepInfo::default_instance_ = NULL;

GuideCSStepInfo* GuideCSStepInfo::New() const {
  return new GuideCSStepInfo;
}

void GuideCSStepInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 300;
    allcomp_ = false;
  }
  taskid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideCSStepInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GuideCSStepInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideResp];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allcomp;
        break;
      }

      // optional bool allcomp = 2;
      case 2: {
        if (tag == 16) {
         parse_allcomp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allcomp_)));
          set_has_allcomp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskid;
        break;
      }

      // repeated uint32 taskid = 3;
      case 3: {
        if (tag == 24) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_taskid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_taskid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GuideCSStepInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GuideCSStepInfo)
  return false;
#undef DO_
}

void GuideCSStepInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GuideCSStepInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideResp];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool allcomp = 2;
  if (has_allcomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allcomp(), output);
  }

  // repeated uint32 taskid = 3;
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->taskid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GuideCSStepInfo)
}

::google::protobuf::uint8* GuideCSStepInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GuideCSStepInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideResp];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool allcomp = 2;
  if (has_allcomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allcomp(), target);
  }

  // repeated uint32 taskid = 3;
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->taskid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GuideCSStepInfo)
  return target;
}

int GuideCSStepInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideResp];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool allcomp = 2;
    if (has_allcomp()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 taskid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->taskid(i));
    }
    total_size += 1 * this->taskid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideCSStepInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideCSStepInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideCSStepInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideCSStepInfo::MergeFrom(const GuideCSStepInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskid_.MergeFrom(from.taskid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_allcomp()) {
      set_allcomp(from.allcomp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideCSStepInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideCSStepInfo::CopyFrom(const GuideCSStepInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCSStepInfo::IsInitialized() const {

  return true;
}

void GuideCSStepInfo::Swap(GuideCSStepInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(allcomp_, other->allcomp_);
    taskid_.Swap(&other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideCSStepInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideCSStepInfo_descriptor_;
  metadata.reflection = GuideCSStepInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuideAward_dtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideAward_dtype_descriptor_;
}
bool GuideAward_dtype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuideAward_dtype GuideAward::type_gold;
const GuideAward_dtype GuideAward::type_diamond;
const GuideAward_dtype GuideAward::type_goodsid;
const GuideAward_dtype GuideAward::dtype_MIN;
const GuideAward_dtype GuideAward::dtype_MAX;
const int GuideAward::dtype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuideAward_awardtype::kDtFieldNumber;
const int GuideAward_awardtype::kIdxnFieldNumber;
#endif  // !_MSC_VER

GuideAward_awardtype::GuideAward_awardtype()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GuideAward.awardtype)
}

void GuideAward_awardtype::InitAsDefaultInstance() {
}

GuideAward_awardtype::GuideAward_awardtype(const GuideAward_awardtype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GuideAward.awardtype)
}

void GuideAward_awardtype::SharedCtor() {
  _cached_size_ = 0;
  dt_ = 1;
  idxn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideAward_awardtype::~GuideAward_awardtype() {
  // @@protoc_insertion_point(destructor:GSToGC.GuideAward.awardtype)
  SharedDtor();
}

void GuideAward_awardtype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideAward_awardtype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideAward_awardtype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideAward_awardtype_descriptor_;
}

const GuideAward_awardtype& GuideAward_awardtype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GuideAward_awardtype* GuideAward_awardtype::default_instance_ = NULL;

GuideAward_awardtype* GuideAward_awardtype::New() const {
  return new GuideAward_awardtype;
}

void GuideAward_awardtype::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    dt_ = 1;
    idxn_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideAward_awardtype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GuideAward.awardtype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.GuideAward.dtype dt = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::GuideAward_dtype_IsValid(value)) {
            set_dt(static_cast< ::GSToGC::GuideAward_dtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idxn;
        break;
      }

      // optional uint32 idxn = 2;
      case 2: {
        if (tag == 16) {
         parse_idxn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idxn_)));
          set_has_idxn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GuideAward.awardtype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GuideAward.awardtype)
  return false;
#undef DO_
}

void GuideAward_awardtype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GuideAward.awardtype)
  // optional .GSToGC.GuideAward.dtype dt = 1;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dt(), output);
  }

  // optional uint32 idxn = 2;
  if (has_idxn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idxn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GuideAward.awardtype)
}

::google::protobuf::uint8* GuideAward_awardtype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GuideAward.awardtype)
  // optional .GSToGC.GuideAward.dtype dt = 1;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dt(), target);
  }

  // optional uint32 idxn = 2;
  if (has_idxn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idxn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GuideAward.awardtype)
  return target;
}

int GuideAward_awardtype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.GuideAward.dtype dt = 1;
    if (has_dt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dt());
    }

    // optional uint32 idxn = 2;
    if (has_idxn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idxn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideAward_awardtype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideAward_awardtype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideAward_awardtype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideAward_awardtype::MergeFrom(const GuideAward_awardtype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_idxn()) {
      set_idxn(from.idxn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideAward_awardtype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideAward_awardtype::CopyFrom(const GuideAward_awardtype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideAward_awardtype::IsInitialized() const {

  return true;
}

void GuideAward_awardtype::Swap(GuideAward_awardtype* other) {
  if (other != this) {
    std::swap(dt_, other->dt_);
    std::swap(idxn_, other->idxn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideAward_awardtype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideAward_awardtype_descriptor_;
  metadata.reflection = GuideAward_awardtype_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GuideAward::kMsgidFieldNumber;
const int GuideAward::kAwardlistFieldNumber;
#endif  // !_MSC_VER

GuideAward::GuideAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GuideAward)
}

void GuideAward::InitAsDefaultInstance() {
}

GuideAward::GuideAward(const GuideAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GuideAward)
}

void GuideAward::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 302;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideAward::~GuideAward() {
  // @@protoc_insertion_point(destructor:GSToGC.GuideAward)
  SharedDtor();
}

void GuideAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideAward_descriptor_;
}

const GuideAward& GuideAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GuideAward* GuideAward::default_instance_ = NULL;

GuideAward* GuideAward::New() const {
  return new GuideAward;
}

void GuideAward::Clear() {
  msgid_ = 302;
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GuideAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideAward];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_awardlist;
        break;
      }

      // repeated .GSToGC.GuideAward.awardtype awardlist = 2;
      case 2: {
        if (tag == 18) {
         parse_awardlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_awardlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GuideAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GuideAward)
  return false;
#undef DO_
}

void GuideAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GuideAward)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideAward];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.GuideAward.awardtype awardlist = 2;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->awardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GuideAward)
}

::google::protobuf::uint8* GuideAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GuideAward)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideAward];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.GuideAward.awardtype awardlist = 2;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->awardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GuideAward)
  return target;
}

int GuideAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GuideAward];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.GuideAward.awardtype awardlist = 2;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideAward::MergeFrom(const GuideAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideAward::CopyFrom(const GuideAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideAward::IsInitialized() const {

  return true;
}

void GuideAward::Swap(GuideAward* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    awardlist_.Swap(&other->awardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideAward_descriptor_;
  metadata.reflection = GuideAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideKillsInfo::kMsgidFieldNumber;
const int GuideKillsInfo::kGuidFieldNumber;
const int GuideKillsInfo::kNpctypeFieldNumber;
#endif  // !_MSC_VER

GuideKillsInfo::GuideKillsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GuideKillsInfo)
}

void GuideKillsInfo::InitAsDefaultInstance() {
}

GuideKillsInfo::GuideKillsInfo(const GuideKillsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GuideKillsInfo)
}

void GuideKillsInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 301;
  guid_ = GOOGLE_ULONGLONG(0);
  npctype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideKillsInfo::~GuideKillsInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.GuideKillsInfo)
  SharedDtor();
}

void GuideKillsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideKillsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideKillsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideKillsInfo_descriptor_;
}

const GuideKillsInfo& GuideKillsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GuideKillsInfo* GuideKillsInfo::default_instance_ = NULL;

GuideKillsInfo* GuideKillsInfo::New() const {
  return new GuideKillsInfo;
}

void GuideKillsInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 301;
    guid_ = GOOGLE_ULONGLONG(0);
    npctype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideKillsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GuideKillsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_GuideKillsInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npctype;
        break;
      }

      // optional int32 npctype = 3;
      case 3: {
        if (tag == 24) {
         parse_npctype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npctype_)));
          set_has_npctype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GuideKillsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GuideKillsInfo)
  return false;
#undef DO_
}

void GuideKillsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GuideKillsInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_GuideKillsInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 npctype = 3;
  if (has_npctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npctype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GuideKillsInfo)
}

::google::protobuf::uint8* GuideKillsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GuideKillsInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_GuideKillsInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 npctype = 3;
  if (has_npctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npctype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GuideKillsInfo)
  return target;
}

int GuideKillsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_GuideKillsInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 npctype = 3;
    if (has_npctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npctype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideKillsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideKillsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideKillsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideKillsInfo::MergeFrom(const GuideKillsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_npctype()) {
      set_npctype(from.npctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideKillsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideKillsInfo::CopyFrom(const GuideKillsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideKillsInfo::IsInitialized() const {

  return true;
}

void GuideKillsInfo::Swap(GuideKillsInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(npctype_, other->npctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideKillsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideKillsInfo_descriptor_;
  metadata.reflection = GuideKillsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUserLvInfo::kMsgidFieldNumber;
const int NotifyUserLvInfo::kCurlvFieldNumber;
const int NotifyUserLvInfo::kCurexpFieldNumber;
#endif  // !_MSC_VER

NotifyUserLvInfo::NotifyUserLvInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUserLvInfo)
}

void NotifyUserLvInfo::InitAsDefaultInstance() {
}

NotifyUserLvInfo::NotifyUserLvInfo(const NotifyUserLvInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUserLvInfo)
}

void NotifyUserLvInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 232;
  curlv_ = 0u;
  curexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUserLvInfo::~NotifyUserLvInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUserLvInfo)
  SharedDtor();
}

void NotifyUserLvInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUserLvInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUserLvInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUserLvInfo_descriptor_;
}

const NotifyUserLvInfo& NotifyUserLvInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUserLvInfo* NotifyUserLvInfo::default_instance_ = NULL;

NotifyUserLvInfo* NotifyUserLvInfo::New() const {
  return new NotifyUserLvInfo;
}

void NotifyUserLvInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyUserLvInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(curlv_, curexp_);
    msgid_ = 232;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUserLvInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUserLvInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserLvInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curlv;
        break;
      }

      // optional uint32 curlv = 2;
      case 2: {
        if (tag == 16) {
         parse_curlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curexp;
        break;
      }

      // optional uint32 curexp = 3;
      case 3: {
        if (tag == 24) {
         parse_curexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUserLvInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUserLvInfo)
  return false;
#undef DO_
}

void NotifyUserLvInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUserLvInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserLvInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 curlv = 2;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curlv(), output);
  }

  // optional uint32 curexp = 3;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUserLvInfo)
}

::google::protobuf::uint8* NotifyUserLvInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUserLvInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserLvInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 curlv = 2;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curlv(), target);
  }

  // optional uint32 curexp = 3;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUserLvInfo)
  return target;
}

int NotifyUserLvInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserLvInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 curlv = 2;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlv());
    }

    // optional uint32 curexp = 3;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUserLvInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUserLvInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUserLvInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUserLvInfo::MergeFrom(const NotifyUserLvInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUserLvInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUserLvInfo::CopyFrom(const NotifyUserLvInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUserLvInfo::IsInitialized() const {

  return true;
}

void NotifyUserLvInfo::Swap(NotifyUserLvInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(curlv_, other->curlv_);
    std::swap(curexp_, other->curexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUserLvInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUserLvInfo_descriptor_;
  metadata.reflection = NotifyUserLvInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyNewHeaderid::kMsgidFieldNumber;
const int NotifyNewHeaderid::kGuidFieldNumber;
const int NotifyNewHeaderid::kNewheaderidFieldNumber;
#endif  // !_MSC_VER

NotifyNewHeaderid::NotifyNewHeaderid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyNewHeaderid)
}

void NotifyNewHeaderid::InitAsDefaultInstance() {
}

NotifyNewHeaderid::NotifyNewHeaderid(const NotifyNewHeaderid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyNewHeaderid)
}

void NotifyNewHeaderid::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 231;
  guid_ = GOOGLE_ULONGLONG(0);
  newheaderid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyNewHeaderid::~NotifyNewHeaderid() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyNewHeaderid)
  SharedDtor();
}

void NotifyNewHeaderid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyNewHeaderid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNewHeaderid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNewHeaderid_descriptor_;
}

const NotifyNewHeaderid& NotifyNewHeaderid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyNewHeaderid* NotifyNewHeaderid::default_instance_ = NULL;

NotifyNewHeaderid* NotifyNewHeaderid::New() const {
  return new NotifyNewHeaderid;
}

void NotifyNewHeaderid::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 231;
    guid_ = GOOGLE_ULONGLONG(0);
    newheaderid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyNewHeaderid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyNewHeaderid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewHeaderid];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newheaderid;
        break;
      }

      // optional uint32 newheaderid = 3;
      case 3: {
        if (tag == 24) {
         parse_newheaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newheaderid_)));
          set_has_newheaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyNewHeaderid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyNewHeaderid)
  return false;
#undef DO_
}

void NotifyNewHeaderid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyNewHeaderid)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewHeaderid];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 newheaderid = 3;
  if (has_newheaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newheaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyNewHeaderid)
}

::google::protobuf::uint8* NotifyNewHeaderid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyNewHeaderid)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewHeaderid];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 newheaderid = 3;
  if (has_newheaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newheaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyNewHeaderid)
  return target;
}

int NotifyNewHeaderid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewHeaderid];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 newheaderid = 3;
    if (has_newheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newheaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNewHeaderid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyNewHeaderid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyNewHeaderid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyNewHeaderid::MergeFrom(const NotifyNewHeaderid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_newheaderid()) {
      set_newheaderid(from.newheaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyNewHeaderid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNewHeaderid::CopyFrom(const NotifyNewHeaderid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewHeaderid::IsInitialized() const {

  return true;
}

void NotifyNewHeaderid::Swap(NotifyNewHeaderid* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(newheaderid_, other->newheaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyNewHeaderid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyNewHeaderid_descriptor_;
  metadata.reflection = NotifyNewHeaderid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOneMatchNeedOne::kMsgidFieldNumber;
const int NotifyOneMatchNeedOne::kMapidFieldNumber;
const int NotifyOneMatchNeedOne::kFightidFieldNumber;
#endif  // !_MSC_VER

NotifyOneMatchNeedOne::NotifyOneMatchNeedOne()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyOneMatchNeedOne)
}

void NotifyOneMatchNeedOne::InitAsDefaultInstance() {
}

NotifyOneMatchNeedOne::NotifyOneMatchNeedOne(const NotifyOneMatchNeedOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyOneMatchNeedOne)
}

void NotifyOneMatchNeedOne::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 230;
  mapid_ = 0u;
  fightid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOneMatchNeedOne::~NotifyOneMatchNeedOne() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyOneMatchNeedOne)
  SharedDtor();
}

void NotifyOneMatchNeedOne::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyOneMatchNeedOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOneMatchNeedOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOneMatchNeedOne_descriptor_;
}

const NotifyOneMatchNeedOne& NotifyOneMatchNeedOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyOneMatchNeedOne* NotifyOneMatchNeedOne::default_instance_ = NULL;

NotifyOneMatchNeedOne* NotifyOneMatchNeedOne::New() const {
  return new NotifyOneMatchNeedOne;
}

void NotifyOneMatchNeedOne::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyOneMatchNeedOne*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mapid_, fightid_);
    msgid_ = 230;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOneMatchNeedOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyOneMatchNeedOne)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOneMatchNeedOne];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fightid;
        break;
      }

      // optional uint32 fightid = 3;
      case 3: {
        if (tag == 24) {
         parse_fightid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightid_)));
          set_has_fightid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyOneMatchNeedOne)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyOneMatchNeedOne)
  return false;
#undef DO_
}

void NotifyOneMatchNeedOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyOneMatchNeedOne)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOneMatchNeedOne];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint32 fightid = 3;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyOneMatchNeedOne)
}

::google::protobuf::uint8* NotifyOneMatchNeedOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyOneMatchNeedOne)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOneMatchNeedOne];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint32 fightid = 3;
  if (has_fightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyOneMatchNeedOne)
  return target;
}

int NotifyOneMatchNeedOne::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOneMatchNeedOne];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 fightid = 3;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOneMatchNeedOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOneMatchNeedOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOneMatchNeedOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOneMatchNeedOne::MergeFrom(const NotifyOneMatchNeedOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOneMatchNeedOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOneMatchNeedOne::CopyFrom(const NotifyOneMatchNeedOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOneMatchNeedOne::IsInitialized() const {

  return true;
}

void NotifyOneMatchNeedOne::Swap(NotifyOneMatchNeedOne* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(mapid_, other->mapid_);
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOneMatchNeedOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOneMatchNeedOne_descriptor_;
  metadata.reflection = NotifyOneMatchNeedOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyNewNickname::kMsgidFieldNumber;
const int NotifyNewNickname::kGuidFieldNumber;
const int NotifyNewNickname::kNewnicknameFieldNumber;
#endif  // !_MSC_VER

NotifyNewNickname::NotifyNewNickname()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyNewNickname)
}

void NotifyNewNickname::InitAsDefaultInstance() {
}

NotifyNewNickname::NotifyNewNickname(const NotifyNewNickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyNewNickname)
}

void NotifyNewNickname::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 229;
  guid_ = GOOGLE_ULONGLONG(0);
  newnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyNewNickname::~NotifyNewNickname() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyNewNickname)
  SharedDtor();
}

void NotifyNewNickname::SharedDtor() {
  if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newnickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyNewNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNewNickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNewNickname_descriptor_;
}

const NotifyNewNickname& NotifyNewNickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyNewNickname* NotifyNewNickname::default_instance_ = NULL;

NotifyNewNickname* NotifyNewNickname::New() const {
  return new NotifyNewNickname;
}

void NotifyNewNickname::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 229;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_newnickname()) {
      if (newnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyNewNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyNewNickname)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewNickname];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newnickname;
        break;
      }

      // optional string newnickname = 3;
      case 3: {
        if (tag == 26) {
         parse_newnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newnickname().data(), this->newnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyNewNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyNewNickname)
  return false;
#undef DO_
}

void NotifyNewNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyNewNickname)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewNickname];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional string newnickname = 3;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->newnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyNewNickname)
}

::google::protobuf::uint8* NotifyNewNickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyNewNickname)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewNickname];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional string newnickname = 3;
  if (has_newnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newnickname().data(), this->newnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyNewNickname)
  return target;
}

int NotifyNewNickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNewNickname];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string newnickname = 3;
    if (has_newnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNewNickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyNewNickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyNewNickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyNewNickname::MergeFrom(const NotifyNewNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_newnickname()) {
      set_newnickname(from.newnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyNewNickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNewNickname::CopyFrom(const NotifyNewNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewNickname::IsInitialized() const {

  return true;
}

void NotifyNewNickname::Swap(NotifyNewNickname* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(newnickname_, other->newnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyNewNickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyNewNickname_descriptor_;
  metadata.reflection = NotifyNewNickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunesSlot::kSlotposFieldNumber;
const int RunesSlot::kRuneidFieldNumber;
const int RunesSlot::kPageFieldNumber;
#endif  // !_MSC_VER

RunesSlot::RunesSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RunesSlot)
}

void RunesSlot::InitAsDefaultInstance() {
}

RunesSlot::RunesSlot(const RunesSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RunesSlot)
}

void RunesSlot::SharedCtor() {
  _cached_size_ = 0;
  slotpos_ = 0;
  runeid_ = 0u;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunesSlot::~RunesSlot() {
  // @@protoc_insertion_point(destructor:GSToGC.RunesSlot)
  SharedDtor();
}

void RunesSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunesSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunesSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunesSlot_descriptor_;
}

const RunesSlot& RunesSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RunesSlot* RunesSlot::default_instance_ = NULL;

RunesSlot* RunesSlot::New() const {
  return new RunesSlot;
}

void RunesSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RunesSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(slotpos_, page_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunesSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RunesSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slotpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotpos_)));
          set_has_slotpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_runeid;
        break;
      }

      // optional uint32 runeid = 2;
      case 2: {
        if (tag == 16) {
         parse_runeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runeid_)));
          set_has_runeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // optional int32 page = 3;
      case 3: {
        if (tag == 24) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RunesSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RunesSlot)
  return false;
#undef DO_
}

void RunesSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RunesSlot)
  // optional int32 slotpos = 1;
  if (has_slotpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slotpos(), output);
  }

  // optional uint32 runeid = 2;
  if (has_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->runeid(), output);
  }

  // optional int32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RunesSlot)
}

::google::protobuf::uint8* RunesSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RunesSlot)
  // optional int32 slotpos = 1;
  if (has_slotpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slotpos(), target);
  }

  // optional uint32 runeid = 2;
  if (has_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->runeid(), target);
  }

  // optional int32 page = 3;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RunesSlot)
  return target;
}

int RunesSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slotpos = 1;
    if (has_slotpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotpos());
    }

    // optional uint32 runeid = 2;
    if (has_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runeid());
    }

    // optional int32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunesSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunesSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunesSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunesSlot::MergeFrom(const RunesSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotpos()) {
      set_slotpos(from.slotpos());
    }
    if (from.has_runeid()) {
      set_runeid(from.runeid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunesSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunesSlot::CopyFrom(const RunesSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunesSlot::IsInitialized() const {

  return true;
}

void RunesSlot::Swap(RunesSlot* other) {
  if (other != this) {
    std::swap(slotpos_, other->slotpos_);
    std::swap(runeid_, other->runeid_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunesSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunesSlot_descriptor_;
  metadata.reflection = RunesSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunesBagInfo::kRuneidFieldNumber;
const int RunesBagInfo::kNumFieldNumber;
const int RunesBagInfo::kGottimeFieldNumber;
#endif  // !_MSC_VER

RunesBagInfo::RunesBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RunesBagInfo)
}

void RunesBagInfo::InitAsDefaultInstance() {
}

RunesBagInfo::RunesBagInfo(const RunesBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RunesBagInfo)
}

void RunesBagInfo::SharedCtor() {
  _cached_size_ = 0;
  runeid_ = 0u;
  num_ = 0;
  gottime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunesBagInfo::~RunesBagInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.RunesBagInfo)
  SharedDtor();
}

void RunesBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunesBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunesBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunesBagInfo_descriptor_;
}

const RunesBagInfo& RunesBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RunesBagInfo* RunesBagInfo::default_instance_ = NULL;

RunesBagInfo* RunesBagInfo::New() const {
  return new RunesBagInfo;
}

void RunesBagInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RunesBagInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(runeid_, gottime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunesBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RunesBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 runeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runeid_)));
          set_has_runeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gottime;
        break;
      }

      // optional int64 gottime = 3;
      case 3: {
        if (tag == 24) {
         parse_gottime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gottime_)));
          set_has_gottime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RunesBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RunesBagInfo)
  return false;
#undef DO_
}

void RunesBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RunesBagInfo)
  // optional uint32 runeid = 1;
  if (has_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->runeid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int64 gottime = 3;
  if (has_gottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gottime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RunesBagInfo)
}

::google::protobuf::uint8* RunesBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RunesBagInfo)
  // optional uint32 runeid = 1;
  if (has_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->runeid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int64 gottime = 3;
  if (has_gottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gottime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RunesBagInfo)
  return target;
}

int RunesBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 runeid = 1;
    if (has_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runeid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 gottime = 3;
    if (has_gottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gottime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunesBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunesBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunesBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunesBagInfo::MergeFrom(const RunesBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_runeid()) {
      set_runeid(from.runeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_gottime()) {
      set_gottime(from.gottime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunesBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunesBagInfo::CopyFrom(const RunesBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunesBagInfo::IsInitialized() const {

  return true;
}

void RunesBagInfo::Swap(RunesBagInfo* other) {
  if (other != this) {
    std::swap(runeid_, other->runeid_);
    std::swap(num_, other->num_);
    std::swap(gottime_, other->gottime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunesBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunesBagInfo_descriptor_;
  metadata.reflection = RunesBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRunesList::kMsgidFieldNumber;
const int NotifyRunesList::kRunesbaginfoFieldNumber;
const int NotifyRunesList::kRunesSlotInfoFieldNumber;
#endif  // !_MSC_VER

NotifyRunesList::NotifyRunesList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyRunesList)
}

void NotifyRunesList::InitAsDefaultInstance() {
}

NotifyRunesList::NotifyRunesList(const NotifyRunesList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyRunesList)
}

void NotifyRunesList::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 228;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRunesList::~NotifyRunesList() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyRunesList)
  SharedDtor();
}

void NotifyRunesList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRunesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRunesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRunesList_descriptor_;
}

const NotifyRunesList& NotifyRunesList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyRunesList* NotifyRunesList::default_instance_ = NULL;

NotifyRunesList* NotifyRunesList::New() const {
  return new NotifyRunesList;
}

void NotifyRunesList::Clear() {
  msgid_ = 228;
  runesbaginfo_.Clear();
  runes_slot_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRunesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyRunesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRunesList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_runesbaginfo;
        break;
      }

      // repeated .GSToGC.RunesBagInfo runesbaginfo = 2;
      case 2: {
        if (tag == 18) {
         parse_runesbaginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runesbaginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_runesbaginfo;
        if (input->ExpectTag(26)) goto parse_runes_slot_info;
        break;
      }

      // repeated .GSToGC.RunesSlot runes_slot_info = 3;
      case 3: {
        if (tag == 26) {
         parse_runes_slot_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runes_slot_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_runes_slot_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyRunesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyRunesList)
  return false;
#undef DO_
}

void NotifyRunesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyRunesList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRunesList];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.RunesBagInfo runesbaginfo = 2;
  for (int i = 0; i < this->runesbaginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->runesbaginfo(i), output);
  }

  // repeated .GSToGC.RunesSlot runes_slot_info = 3;
  for (int i = 0; i < this->runes_slot_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->runes_slot_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyRunesList)
}

::google::protobuf::uint8* NotifyRunesList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyRunesList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRunesList];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.RunesBagInfo runesbaginfo = 2;
  for (int i = 0; i < this->runesbaginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->runesbaginfo(i), target);
  }

  // repeated .GSToGC.RunesSlot runes_slot_info = 3;
  for (int i = 0; i < this->runes_slot_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->runes_slot_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyRunesList)
  return target;
}

int NotifyRunesList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRunesList];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.RunesBagInfo runesbaginfo = 2;
  total_size += 1 * this->runesbaginfo_size();
  for (int i = 0; i < this->runesbaginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runesbaginfo(i));
  }

  // repeated .GSToGC.RunesSlot runes_slot_info = 3;
  total_size += 1 * this->runes_slot_info_size();
  for (int i = 0; i < this->runes_slot_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runes_slot_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRunesList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRunesList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRunesList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRunesList::MergeFrom(const NotifyRunesList& from) {
  GOOGLE_CHECK_NE(&from, this);
  runesbaginfo_.MergeFrom(from.runesbaginfo_);
  runes_slot_info_.MergeFrom(from.runes_slot_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRunesList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRunesList::CopyFrom(const NotifyRunesList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRunesList::IsInitialized() const {

  return true;
}

void NotifyRunesList::Swap(NotifyRunesList* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    runesbaginfo_.Swap(&other->runesbaginfo_);
    runes_slot_info_.Swap(&other->runes_slot_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRunesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRunesList_descriptor_;
  metadata.reflection = NotifyRunesList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRemoveCommodity::kMsgidFieldNumber;
const int NotifyRemoveCommodity::kCommodityidFieldNumber;
#endif  // !_MSC_VER

NotifyRemoveCommodity::NotifyRemoveCommodity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyRemoveCommodity)
}

void NotifyRemoveCommodity::InitAsDefaultInstance() {
}

NotifyRemoveCommodity::NotifyRemoveCommodity(const NotifyRemoveCommodity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyRemoveCommodity)
}

void NotifyRemoveCommodity::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 227;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRemoveCommodity::~NotifyRemoveCommodity() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyRemoveCommodity)
  SharedDtor();
}

void NotifyRemoveCommodity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRemoveCommodity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRemoveCommodity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRemoveCommodity_descriptor_;
}

const NotifyRemoveCommodity& NotifyRemoveCommodity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyRemoveCommodity* NotifyRemoveCommodity::default_instance_ = NULL;

NotifyRemoveCommodity* NotifyRemoveCommodity::New() const {
  return new NotifyRemoveCommodity;
}

void NotifyRemoveCommodity::Clear() {
  msgid_ = 227;
  commodityid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRemoveCommodity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyRemoveCommodity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRemoveCommodity];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Commodityid;
        break;
      }

      // repeated uint32 Commodityid = 2;
      case 2: {
        if (tag == 16) {
         parse_Commodityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_commodityid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_commodityid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Commodityid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyRemoveCommodity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyRemoveCommodity)
  return false;
#undef DO_
}

void NotifyRemoveCommodity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyRemoveCommodity)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRemoveCommodity];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated uint32 Commodityid = 2;
  for (int i = 0; i < this->commodityid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->commodityid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyRemoveCommodity)
}

::google::protobuf::uint8* NotifyRemoveCommodity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyRemoveCommodity)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRemoveCommodity];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated uint32 Commodityid = 2;
  for (int i = 0; i < this->commodityid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->commodityid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyRemoveCommodity)
  return target;
}

int NotifyRemoveCommodity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRemoveCommodity];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated uint32 Commodityid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->commodityid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->commodityid(i));
    }
    total_size += 1 * this->commodityid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRemoveCommodity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRemoveCommodity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRemoveCommodity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRemoveCommodity::MergeFrom(const NotifyRemoveCommodity& from) {
  GOOGLE_CHECK_NE(&from, this);
  commodityid_.MergeFrom(from.commodityid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRemoveCommodity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRemoveCommodity::CopyFrom(const NotifyRemoveCommodity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRemoveCommodity::IsInitialized() const {

  return true;
}

void NotifyRemoveCommodity::Swap(NotifyRemoveCommodity* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    commodityid_.Swap(&other->commodityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRemoveCommodity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRemoveCommodity_descriptor_;
  metadata.reflection = NotifyRemoveCommodity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGetNewCommodity::kMsgidFieldNumber;
const int NotifyGetNewCommodity::kCommodityidFieldNumber;
#endif  // !_MSC_VER

NotifyGetNewCommodity::NotifyGetNewCommodity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyGetNewCommodity)
}

void NotifyGetNewCommodity::InitAsDefaultInstance() {
}

NotifyGetNewCommodity::NotifyGetNewCommodity(const NotifyGetNewCommodity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyGetNewCommodity)
}

void NotifyGetNewCommodity::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 226;
  commodityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGetNewCommodity::~NotifyGetNewCommodity() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyGetNewCommodity)
  SharedDtor();
}

void NotifyGetNewCommodity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGetNewCommodity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGetNewCommodity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGetNewCommodity_descriptor_;
}

const NotifyGetNewCommodity& NotifyGetNewCommodity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyGetNewCommodity* NotifyGetNewCommodity::default_instance_ = NULL;

NotifyGetNewCommodity* NotifyGetNewCommodity::New() const {
  return new NotifyGetNewCommodity;
}

void NotifyGetNewCommodity::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 226;
    commodityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGetNewCommodity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyGetNewCommodity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetNewCommodity];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Commodityid;
        break;
      }

      // optional uint32 Commodityid = 2;
      case 2: {
        if (tag == 16) {
         parse_Commodityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commodityid_)));
          set_has_commodityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyGetNewCommodity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyGetNewCommodity)
  return false;
#undef DO_
}

void NotifyGetNewCommodity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyGetNewCommodity)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetNewCommodity];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 Commodityid = 2;
  if (has_commodityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commodityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyGetNewCommodity)
}

::google::protobuf::uint8* NotifyGetNewCommodity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyGetNewCommodity)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetNewCommodity];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 Commodityid = 2;
  if (has_commodityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->commodityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyGetNewCommodity)
  return target;
}

int NotifyGetNewCommodity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetNewCommodity];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 Commodityid = 2;
    if (has_commodityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commodityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGetNewCommodity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGetNewCommodity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGetNewCommodity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGetNewCommodity::MergeFrom(const NotifyGetNewCommodity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_commodityid()) {
      set_commodityid(from.commodityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGetNewCommodity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGetNewCommodity::CopyFrom(const NotifyGetNewCommodity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGetNewCommodity::IsInitialized() const {

  return true;
}

void NotifyGetNewCommodity::Swap(NotifyGetNewCommodity* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(commodityid_, other->commodityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGetNewCommodity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGetNewCommodity_descriptor_;
  metadata.reflection = NotifyGetNewCommodity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMatchTeamBaseInfo::kMsgidFieldNumber;
const int NotifyMatchTeamBaseInfo::kTeamidFieldNumber;
const int NotifyMatchTeamBaseInfo::kMatchtypeFieldNumber;
const int NotifyMatchTeamBaseInfo::kMapidFieldNumber;
#endif  // !_MSC_VER

NotifyMatchTeamBaseInfo::NotifyMatchTeamBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMatchTeamBaseInfo)
}

void NotifyMatchTeamBaseInfo::InitAsDefaultInstance() {
}

NotifyMatchTeamBaseInfo::NotifyMatchTeamBaseInfo(const NotifyMatchTeamBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMatchTeamBaseInfo)
}

void NotifyMatchTeamBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 222;
  teamid_ = 0u;
  matchtype_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMatchTeamBaseInfo::~NotifyMatchTeamBaseInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMatchTeamBaseInfo)
  SharedDtor();
}

void NotifyMatchTeamBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMatchTeamBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMatchTeamBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMatchTeamBaseInfo_descriptor_;
}

const NotifyMatchTeamBaseInfo& NotifyMatchTeamBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMatchTeamBaseInfo* NotifyMatchTeamBaseInfo::default_instance_ = NULL;

NotifyMatchTeamBaseInfo* NotifyMatchTeamBaseInfo::New() const {
  return new NotifyMatchTeamBaseInfo;
}

void NotifyMatchTeamBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyMatchTeamBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, mapid_);
    msgid_ = 222;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMatchTeamBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMatchTeamBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamBaseInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 2;
      case 2: {
        if (tag == 16) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_matchtype;
        break;
      }

      // optional uint32 matchtype = 3;
      case 3: {
        if (tag == 24) {
         parse_matchtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchtype_)));
          set_has_matchtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMatchTeamBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMatchTeamBaseInfo)
  return false;
#undef DO_
}

void NotifyMatchTeamBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMatchTeamBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamBaseInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // optional uint32 matchtype = 3;
  if (has_matchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchtype(), output);
  }

  // optional uint32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMatchTeamBaseInfo)
}

::google::protobuf::uint8* NotifyMatchTeamBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMatchTeamBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamBaseInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // optional uint32 matchtype = 3;
  if (has_matchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchtype(), target);
  }

  // optional uint32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMatchTeamBaseInfo)
  return target;
}

int NotifyMatchTeamBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamBaseInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 matchtype = 3;
    if (has_matchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchtype());
    }

    // optional uint32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMatchTeamBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMatchTeamBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMatchTeamBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMatchTeamBaseInfo::MergeFrom(const NotifyMatchTeamBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_matchtype()) {
      set_matchtype(from.matchtype());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMatchTeamBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMatchTeamBaseInfo::CopyFrom(const NotifyMatchTeamBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMatchTeamBaseInfo::IsInitialized() const {

  return true;
}

void NotifyMatchTeamBaseInfo::Swap(NotifyMatchTeamBaseInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(teamid_, other->teamid_);
    std::swap(matchtype_, other->matchtype_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMatchTeamBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMatchTeamBaseInfo_descriptor_;
  metadata.reflection = NotifyMatchTeamBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMatchTeamPlayerInfo::kMsgidFieldNumber;
const int NotifyMatchTeamPlayerInfo::kPostionFieldNumber;
const int NotifyMatchTeamPlayerInfo::kIsInsertFieldNumber;
const int NotifyMatchTeamPlayerInfo::kNicknameFieldNumber;
const int NotifyMatchTeamPlayerInfo::kHeadidFieldNumber;
const int NotifyMatchTeamPlayerInfo::kUserlevelFieldNumber;
#endif  // !_MSC_VER

NotifyMatchTeamPlayerInfo::NotifyMatchTeamPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMatchTeamPlayerInfo)
}

void NotifyMatchTeamPlayerInfo::InitAsDefaultInstance() {
}

NotifyMatchTeamPlayerInfo::NotifyMatchTeamPlayerInfo(const NotifyMatchTeamPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMatchTeamPlayerInfo)
}

void NotifyMatchTeamPlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 223;
  postion_ = 0u;
  isinsert_ = false;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headid_ = 0u;
  userlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMatchTeamPlayerInfo::~NotifyMatchTeamPlayerInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMatchTeamPlayerInfo)
  SharedDtor();
}

void NotifyMatchTeamPlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyMatchTeamPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMatchTeamPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMatchTeamPlayerInfo_descriptor_;
}

const NotifyMatchTeamPlayerInfo& NotifyMatchTeamPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMatchTeamPlayerInfo* NotifyMatchTeamPlayerInfo::default_instance_ = NULL;

NotifyMatchTeamPlayerInfo* NotifyMatchTeamPlayerInfo::New() const {
  return new NotifyMatchTeamPlayerInfo;
}

void NotifyMatchTeamPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyMatchTeamPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(isinsert_, userlevel_);
    msgid_ = 223;
    postion_ = 0u;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMatchTeamPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMatchTeamPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamPlayerInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_postion;
        break;
      }

      // optional uint32 postion = 2;
      case 2: {
        if (tag == 16) {
         parse_postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postion_)));
          set_has_postion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isInsert;
        break;
      }

      // optional bool isInsert = 3;
      case 3: {
        if (tag == 24) {
         parse_isInsert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinsert_)));
          set_has_isinsert();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_headid;
        break;
      }

      // optional uint32 headid = 5;
      case 5: {
        if (tag == 40) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_userlevel;
        break;
      }

      // optional uint32 userlevel = 6;
      case 6: {
        if (tag == 48) {
         parse_userlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMatchTeamPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMatchTeamPlayerInfo)
  return false;
#undef DO_
}

void NotifyMatchTeamPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMatchTeamPlayerInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamPlayerInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 postion = 2;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->postion(), output);
  }

  // optional bool isInsert = 3;
  if (has_isinsert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isinsert(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional uint32 headid = 5;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->headid(), output);
  }

  // optional uint32 userlevel = 6;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->userlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMatchTeamPlayerInfo)
}

::google::protobuf::uint8* NotifyMatchTeamPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMatchTeamPlayerInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamPlayerInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 postion = 2;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->postion(), target);
  }

  // optional bool isInsert = 3;
  if (has_isinsert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isinsert(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional uint32 headid = 5;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->headid(), target);
  }

  // optional uint32 userlevel = 6;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->userlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMatchTeamPlayerInfo)
  return target;
}

int NotifyMatchTeamPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamPlayerInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 postion = 2;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postion());
    }

    // optional bool isInsert = 3;
    if (has_isinsert()) {
      total_size += 1 + 1;
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 headid = 5;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 userlevel = 6;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMatchTeamPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMatchTeamPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMatchTeamPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMatchTeamPlayerInfo::MergeFrom(const NotifyMatchTeamPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_postion()) {
      set_postion(from.postion());
    }
    if (from.has_isinsert()) {
      set_isinsert(from.isinsert());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMatchTeamPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMatchTeamPlayerInfo::CopyFrom(const NotifyMatchTeamPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMatchTeamPlayerInfo::IsInitialized() const {

  return true;
}

void NotifyMatchTeamPlayerInfo::Swap(NotifyMatchTeamPlayerInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(postion_, other->postion_);
    std::swap(isinsert_, other->isinsert_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMatchTeamPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMatchTeamPlayerInfo_descriptor_;
  metadata.reflection = NotifyMatchTeamPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMatchTeamSwitch::kMsgidFieldNumber;
const int NotifyMatchTeamSwitch::kStartflagFieldNumber;
#endif  // !_MSC_VER

NotifyMatchTeamSwitch::NotifyMatchTeamSwitch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMatchTeamSwitch)
}

void NotifyMatchTeamSwitch::InitAsDefaultInstance() {
}

NotifyMatchTeamSwitch::NotifyMatchTeamSwitch(const NotifyMatchTeamSwitch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMatchTeamSwitch)
}

void NotifyMatchTeamSwitch::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 224;
  startflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMatchTeamSwitch::~NotifyMatchTeamSwitch() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMatchTeamSwitch)
  SharedDtor();
}

void NotifyMatchTeamSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMatchTeamSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMatchTeamSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMatchTeamSwitch_descriptor_;
}

const NotifyMatchTeamSwitch& NotifyMatchTeamSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMatchTeamSwitch* NotifyMatchTeamSwitch::default_instance_ = NULL;

NotifyMatchTeamSwitch* NotifyMatchTeamSwitch::New() const {
  return new NotifyMatchTeamSwitch;
}

void NotifyMatchTeamSwitch::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 224;
    startflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMatchTeamSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMatchTeamSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamSwitch];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startflag;
        break;
      }

      // optional bool startflag = 2;
      case 2: {
        if (tag == 16) {
         parse_startflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startflag_)));
          set_has_startflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMatchTeamSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMatchTeamSwitch)
  return false;
#undef DO_
}

void NotifyMatchTeamSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMatchTeamSwitch)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamSwitch];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool startflag = 2;
  if (has_startflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->startflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMatchTeamSwitch)
}

::google::protobuf::uint8* NotifyMatchTeamSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMatchTeamSwitch)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamSwitch];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool startflag = 2;
  if (has_startflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->startflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMatchTeamSwitch)
  return target;
}

int NotifyMatchTeamSwitch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchTeamSwitch];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool startflag = 2;
    if (has_startflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMatchTeamSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMatchTeamSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMatchTeamSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMatchTeamSwitch::MergeFrom(const NotifyMatchTeamSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_startflag()) {
      set_startflag(from.startflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMatchTeamSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMatchTeamSwitch::CopyFrom(const NotifyMatchTeamSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMatchTeamSwitch::IsInitialized() const {

  return true;
}

void NotifyMatchTeamSwitch::Swap(NotifyMatchTeamSwitch* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(startflag_, other->startflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMatchTeamSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMatchTeamSwitch_descriptor_;
  metadata.reflection = NotifyMatchTeamSwitch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMatchInviteJoin::kMsgidFieldNumber;
const int NotifyMatchInviteJoin::kNicknameFieldNumber;
#endif  // !_MSC_VER

NotifyMatchInviteJoin::NotifyMatchInviteJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMatchInviteJoin)
}

void NotifyMatchInviteJoin::InitAsDefaultInstance() {
}

NotifyMatchInviteJoin::NotifyMatchInviteJoin(const NotifyMatchInviteJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMatchInviteJoin)
}

void NotifyMatchInviteJoin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 225;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMatchInviteJoin::~NotifyMatchInviteJoin() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMatchInviteJoin)
  SharedDtor();
}

void NotifyMatchInviteJoin::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyMatchInviteJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMatchInviteJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMatchInviteJoin_descriptor_;
}

const NotifyMatchInviteJoin& NotifyMatchInviteJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMatchInviteJoin* NotifyMatchInviteJoin::default_instance_ = NULL;

NotifyMatchInviteJoin* NotifyMatchInviteJoin::New() const {
  return new NotifyMatchInviteJoin;
}

void NotifyMatchInviteJoin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 225;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMatchInviteJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMatchInviteJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchInviteJoin];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMatchInviteJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMatchInviteJoin)
  return false;
#undef DO_
}

void NotifyMatchInviteJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMatchInviteJoin)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchInviteJoin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMatchInviteJoin)
}

::google::protobuf::uint8* NotifyMatchInviteJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMatchInviteJoin)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchInviteJoin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMatchInviteJoin)
  return target;
}

int NotifyMatchInviteJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMatchInviteJoin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMatchInviteJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMatchInviteJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMatchInviteJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMatchInviteJoin::MergeFrom(const NotifyMatchInviteJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMatchInviteJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMatchInviteJoin::CopyFrom(const NotifyMatchInviteJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMatchInviteJoin::IsInitialized() const {

  return true;
}

void NotifyMatchInviteJoin::Swap(NotifyMatchInviteJoin* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMatchInviteJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMatchInviteJoin_descriptor_;
  metadata.reflection = NotifyMatchInviteJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHerosInfo_heropanelinfo_goodsmsg::kGridFieldNumber;
const int NotifyHerosInfo_heropanelinfo_goodsmsg::kGoodidFieldNumber;
#endif  // !_MSC_VER

NotifyHerosInfo_heropanelinfo_goodsmsg::NotifyHerosInfo_heropanelinfo_goodsmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::InitAsDefaultInstance() {
}

NotifyHerosInfo_heropanelinfo_goodsmsg::NotifyHerosInfo_heropanelinfo_goodsmsg(const NotifyHerosInfo_heropanelinfo_goodsmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::SharedCtor() {
  _cached_size_ = 0;
  grid_ = 0;
  goodid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHerosInfo_heropanelinfo_goodsmsg::~NotifyHerosInfo_heropanelinfo_goodsmsg() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  SharedDtor();
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHerosInfo_heropanelinfo_goodsmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHerosInfo_heropanelinfo_goodsmsg_descriptor_;
}

const NotifyHerosInfo_heropanelinfo_goodsmsg& NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHerosInfo_heropanelinfo_goodsmsg* NotifyHerosInfo_heropanelinfo_goodsmsg::default_instance_ = NULL;

NotifyHerosInfo_heropanelinfo_goodsmsg* NotifyHerosInfo_heropanelinfo_goodsmsg::New() const {
  return new NotifyHerosInfo_heropanelinfo_goodsmsg;
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyHerosInfo_heropanelinfo_goodsmsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(grid_, goodid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHerosInfo_heropanelinfo_goodsmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goodid;
        break;
      }

      // optional int32 goodid = 2;
      case 2: {
        if (tag == 16) {
         parse_goodid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  return false;
#undef DO_
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  // optional int32 grid = 1;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grid(), output);
  }

  // optional int32 goodid = 2;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goodid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
}

::google::protobuf::uint8* NotifyHerosInfo_heropanelinfo_goodsmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  // optional int32 grid = 1;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grid(), target);
  }

  // optional int32 goodid = 2;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goodid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg)
  return target;
}

int NotifyHerosInfo_heropanelinfo_goodsmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grid = 1;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid());
    }

    // optional int32 goodid = 2;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHerosInfo_heropanelinfo_goodsmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHerosInfo_heropanelinfo_goodsmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::MergeFrom(const NotifyHerosInfo_heropanelinfo_goodsmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid()) {
      set_grid(from.grid());
    }
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::CopyFrom(const NotifyHerosInfo_heropanelinfo_goodsmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHerosInfo_heropanelinfo_goodsmsg::IsInitialized() const {

  return true;
}

void NotifyHerosInfo_heropanelinfo_goodsmsg::Swap(NotifyHerosInfo_heropanelinfo_goodsmsg* other) {
  if (other != this) {
    std::swap(grid_, other->grid_);
    std::swap(goodid_, other->goodid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHerosInfo_heropanelinfo_goodsmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHerosInfo_heropanelinfo_goodsmsg_descriptor_;
  metadata.reflection = NotifyHerosInfo_heropanelinfo_goodsmsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyHerosInfo_heropanelinfo::kCamgpidFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kGuidFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kHerolvFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kNicknameFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kKillnumFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kDeadtimesFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kAsstimesFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kLasthitFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kGoodsFieldNumber;
const int NotifyHerosInfo_heropanelinfo::kHeroidFieldNumber;
#endif  // !_MSC_VER

NotifyHerosInfo_heropanelinfo::NotifyHerosInfo_heropanelinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHerosInfo.heropanelinfo)
}

void NotifyHerosInfo_heropanelinfo::InitAsDefaultInstance() {
}

NotifyHerosInfo_heropanelinfo::NotifyHerosInfo_heropanelinfo(const NotifyHerosInfo_heropanelinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHerosInfo.heropanelinfo)
}

void NotifyHerosInfo_heropanelinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camgpid_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  herolv_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killnum_ = 0;
  deadtimes_ = 0;
  asstimes_ = 0;
  lasthit_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHerosInfo_heropanelinfo::~NotifyHerosInfo_heropanelinfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHerosInfo.heropanelinfo)
  SharedDtor();
}

void NotifyHerosInfo_heropanelinfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyHerosInfo_heropanelinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHerosInfo_heropanelinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHerosInfo_heropanelinfo_descriptor_;
}

const NotifyHerosInfo_heropanelinfo& NotifyHerosInfo_heropanelinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHerosInfo_heropanelinfo* NotifyHerosInfo_heropanelinfo::default_instance_ = NULL;

NotifyHerosInfo_heropanelinfo* NotifyHerosInfo_heropanelinfo::New() const {
  return new NotifyHerosInfo_heropanelinfo;
}

void NotifyHerosInfo_heropanelinfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyHerosInfo_heropanelinfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, herolv_);
    ZR_(killnum_, lasthit_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  heroid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHerosInfo_heropanelinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHerosInfo.heropanelinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 camgpid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camgpid_)));
          set_has_camgpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_herolv;
        break;
      }

      // optional int32 herolv = 3;
      case 3: {
        if (tag == 24) {
         parse_herolv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herolv_)));
          set_has_herolv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killnum;
        break;
      }

      // optional int32 killnum = 5;
      case 5: {
        if (tag == 40) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deadtimes;
        break;
      }

      // optional int32 deadtimes = 6;
      case 6: {
        if (tag == 48) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_asstimes;
        break;
      }

      // optional int32 asstimes = 7;
      case 7: {
        if (tag == 56) {
         parse_asstimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asstimes_)));
          set_has_asstimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lasthit;
        break;
      }

      // optional int32 lasthit = 8;
      case 8: {
        if (tag == 64) {
         parse_lasthit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasthit_)));
          set_has_lasthit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_goods;
        break;
      }

      // repeated .GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg goods = 9;
      case 9: {
        if (tag == 74) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_goods;
        if (input->ExpectTag(80)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 10;
      case 10: {
        if (tag == 80) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHerosInfo.heropanelinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHerosInfo.heropanelinfo)
  return false;
#undef DO_
}

void NotifyHerosInfo_heropanelinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHerosInfo.heropanelinfo)
  // optional int32 camgpid = 1;
  if (has_camgpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camgpid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 herolv = 3;
  if (has_herolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->herolv(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 killnum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killnum(), output);
  }

  // optional int32 deadtimes = 6;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deadtimes(), output);
  }

  // optional int32 asstimes = 7;
  if (has_asstimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->asstimes(), output);
  }

  // optional int32 lasthit = 8;
  if (has_lasthit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lasthit(), output);
  }

  // repeated .GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg goods = 9;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->goods(i), output);
  }

  // optional uint32 heroid = 10;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHerosInfo.heropanelinfo)
}

::google::protobuf::uint8* NotifyHerosInfo_heropanelinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHerosInfo.heropanelinfo)
  // optional int32 camgpid = 1;
  if (has_camgpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camgpid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 herolv = 3;
  if (has_herolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->herolv(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 killnum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killnum(), target);
  }

  // optional int32 deadtimes = 6;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deadtimes(), target);
  }

  // optional int32 asstimes = 7;
  if (has_asstimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->asstimes(), target);
  }

  // optional int32 lasthit = 8;
  if (has_lasthit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lasthit(), target);
  }

  // repeated .GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg goods = 9;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->goods(i), target);
  }

  // optional uint32 heroid = 10;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHerosInfo.heropanelinfo)
  return target;
}

int NotifyHerosInfo_heropanelinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 camgpid = 1;
    if (has_camgpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camgpid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 herolv = 3;
    if (has_herolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herolv());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 killnum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

    // optional int32 deadtimes = 6;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadtimes());
    }

    // optional int32 asstimes = 7;
    if (has_asstimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asstimes());
    }

    // optional int32 lasthit = 8;
    if (has_lasthit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasthit());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 heroid = 10;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  // repeated .GSToGC.NotifyHerosInfo.heropanelinfo.goodsmsg goods = 9;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHerosInfo_heropanelinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHerosInfo_heropanelinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHerosInfo_heropanelinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHerosInfo_heropanelinfo::MergeFrom(const NotifyHerosInfo_heropanelinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camgpid()) {
      set_camgpid(from.camgpid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_herolv()) {
      set_herolv(from.herolv());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_asstimes()) {
      set_asstimes(from.asstimes());
    }
    if (from.has_lasthit()) {
      set_lasthit(from.lasthit());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHerosInfo_heropanelinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHerosInfo_heropanelinfo::CopyFrom(const NotifyHerosInfo_heropanelinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHerosInfo_heropanelinfo::IsInitialized() const {

  return true;
}

void NotifyHerosInfo_heropanelinfo::Swap(NotifyHerosInfo_heropanelinfo* other) {
  if (other != this) {
    std::swap(camgpid_, other->camgpid_);
    std::swap(guid_, other->guid_);
    std::swap(herolv_, other->herolv_);
    std::swap(nickname_, other->nickname_);
    std::swap(killnum_, other->killnum_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(asstimes_, other->asstimes_);
    std::swap(lasthit_, other->lasthit_);
    goods_.Swap(&other->goods_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHerosInfo_heropanelinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHerosInfo_heropanelinfo_descriptor_;
  metadata.reflection = NotifyHerosInfo_heropanelinfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyHerosInfo::kMsgidFieldNumber;
const int NotifyHerosInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyHerosInfo::NotifyHerosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHerosInfo)
}

void NotifyHerosInfo::InitAsDefaultInstance() {
}

NotifyHerosInfo::NotifyHerosInfo(const NotifyHerosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHerosInfo)
}

void NotifyHerosInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 144;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHerosInfo::~NotifyHerosInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHerosInfo)
  SharedDtor();
}

void NotifyHerosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHerosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHerosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHerosInfo_descriptor_;
}

const NotifyHerosInfo& NotifyHerosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHerosInfo* NotifyHerosInfo::default_instance_ = NULL;

NotifyHerosInfo* NotifyHerosInfo::New() const {
  return new NotifyHerosInfo;
}

void NotifyHerosInfo::Clear() {
  msgid_ = 144;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHerosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHerosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyHerosInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GSToGC.NotifyHerosInfo.heropanelinfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHerosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHerosInfo)
  return false;
#undef DO_
}

void NotifyHerosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHerosInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyHerosInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.NotifyHerosInfo.heropanelinfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHerosInfo)
}

::google::protobuf::uint8* NotifyHerosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHerosInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyHerosInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.NotifyHerosInfo.heropanelinfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHerosInfo)
  return target;
}

int NotifyHerosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyHerosInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.NotifyHerosInfo.heropanelinfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHerosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHerosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHerosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHerosInfo::MergeFrom(const NotifyHerosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHerosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHerosInfo::CopyFrom(const NotifyHerosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHerosInfo::IsInitialized() const {

  return true;
}

void NotifyHerosInfo::Swap(NotifyHerosInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHerosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHerosInfo_descriptor_;
  metadata.reflection = NotifyHerosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGoodsExpired::kMsgidFieldNumber;
const int NotifyGoodsExpired::kCommondityidFieldNumber;
#endif  // !_MSC_VER

NotifyGoodsExpired::NotifyGoodsExpired()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyGoodsExpired)
}

void NotifyGoodsExpired::InitAsDefaultInstance() {
}

NotifyGoodsExpired::NotifyGoodsExpired(const NotifyGoodsExpired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyGoodsExpired)
}

void NotifyGoodsExpired::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 145;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGoodsExpired::~NotifyGoodsExpired() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyGoodsExpired)
  SharedDtor();
}

void NotifyGoodsExpired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGoodsExpired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGoodsExpired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGoodsExpired_descriptor_;
}

const NotifyGoodsExpired& NotifyGoodsExpired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyGoodsExpired* NotifyGoodsExpired::default_instance_ = NULL;

NotifyGoodsExpired* NotifyGoodsExpired::New() const {
  return new NotifyGoodsExpired;
}

void NotifyGoodsExpired::Clear() {
  msgid_ = 145;
  commondityid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGoodsExpired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyGoodsExpired)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyGoodsExpired];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commondityid;
        break;
      }

      // repeated int32 commondityid = 2;
      case 2: {
        if (tag == 16) {
         parse_commondityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_commondityid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_commondityid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commondityid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyGoodsExpired)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyGoodsExpired)
  return false;
#undef DO_
}

void NotifyGoodsExpired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyGoodsExpired)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyGoodsExpired];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated int32 commondityid = 2;
  for (int i = 0; i < this->commondityid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->commondityid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyGoodsExpired)
}

::google::protobuf::uint8* NotifyGoodsExpired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyGoodsExpired)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyGoodsExpired];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated int32 commondityid = 2;
  for (int i = 0; i < this->commondityid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->commondityid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyGoodsExpired)
  return target;
}

int NotifyGoodsExpired::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyGoodsExpired];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated int32 commondityid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->commondityid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->commondityid(i));
    }
    total_size += 1 * this->commondityid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGoodsExpired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGoodsExpired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGoodsExpired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGoodsExpired::MergeFrom(const NotifyGoodsExpired& from) {
  GOOGLE_CHECK_NE(&from, this);
  commondityid_.MergeFrom(from.commondityid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGoodsExpired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGoodsExpired::CopyFrom(const NotifyGoodsExpired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGoodsExpired::IsInitialized() const {

  return true;
}

void NotifyGoodsExpired::Swap(NotifyGoodsExpired* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    commondityid_.Swap(&other->commondityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGoodsExpired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGoodsExpired_descriptor_;
  metadata.reflection = NotifyGoodsExpired_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShortMail::kMailidFieldNumber;
const int ShortMail::kMailTypeFieldNumber;
const int ShortMail::kMailTitleFieldNumber;
const int ShortMail::kMailStateFieldNumber;
#endif  // !_MSC_VER

ShortMail::ShortMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.ShortMail)
}

void ShortMail::InitAsDefaultInstance() {
}

ShortMail::ShortMail(const ShortMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.ShortMail)
}

void ShortMail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mailid_ = 0;
  mailtype_ = 0;
  mailtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mailstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortMail::~ShortMail() {
  // @@protoc_insertion_point(destructor:GSToGC.ShortMail)
  SharedDtor();
}

void ShortMail::SharedDtor() {
  if (mailtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailtitle_;
  }
  if (this != default_instance_) {
  }
}

void ShortMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMail_descriptor_;
}

const ShortMail& ShortMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

ShortMail* ShortMail::default_instance_ = NULL;

ShortMail* ShortMail::New() const {
  return new ShortMail;
}

void ShortMail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShortMail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mailid_, mailtype_);
    if (has_mailtitle()) {
      if (mailtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailtitle_->clear();
      }
    }
    mailstate_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShortMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.ShortMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailType;
        break;
      }

      // optional .GSToGC.MailType mailType = 2;
      case 2: {
        if (tag == 16) {
         parse_mailType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MailType_IsValid(value)) {
            set_mailtype(static_cast< ::GSToGC::MailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mailTitle;
        break;
      }

      // optional string mailTitle = 3;
      case 3: {
        if (tag == 26) {
         parse_mailTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailtitle().data(), this->mailtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailtitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mailState;
        break;
      }

      // optional .GSToGC.EMailCurtState mailState = 4;
      case 4: {
        if (tag == 32) {
         parse_mailState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::EMailCurtState_IsValid(value)) {
            set_mailstate(static_cast< ::GSToGC::EMailCurtState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.ShortMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.ShortMail)
  return false;
#undef DO_
}

void ShortMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.ShortMail)
  // optional int32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // optional .GSToGC.MailType mailType = 2;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mailtype(), output);
  }

  // optional string mailTitle = 3;
  if (has_mailtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailtitle().data(), this->mailtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mailtitle(), output);
  }

  // optional .GSToGC.EMailCurtState mailState = 4;
  if (has_mailstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mailstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.ShortMail)
}

::google::protobuf::uint8* ShortMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.ShortMail)
  // optional int32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mailid(), target);
  }

  // optional .GSToGC.MailType mailType = 2;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mailtype(), target);
  }

  // optional string mailTitle = 3;
  if (has_mailtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailtitle().data(), this->mailtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mailtitle(), target);
  }

  // optional .GSToGC.EMailCurtState mailState = 4;
  if (has_mailstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mailstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.ShortMail)
  return target;
}

int ShortMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional .GSToGC.MailType mailType = 2;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mailtype());
    }

    // optional string mailTitle = 3;
    if (has_mailtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailtitle());
    }

    // optional .GSToGC.EMailCurtState mailState = 4;
    if (has_mailstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mailstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShortMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShortMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShortMail::MergeFrom(const ShortMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_mailtitle()) {
      set_mailtitle(from.mailtitle());
    }
    if (from.has_mailstate()) {
      set_mailstate(from.mailstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShortMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortMail::CopyFrom(const ShortMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortMail::IsInitialized() const {

  return true;
}

void ShortMail::Swap(ShortMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(mailtitle_, other->mailtitle_);
    std::swap(mailstate_, other->mailstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShortMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShortMail_descriptor_;
  metadata.reflection = ShortMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelAndSortMail::kMsgidFieldNumber;
const int DelAndSortMail::kMailidFieldNumber;
const int DelAndSortMail::kMailidDelFieldNumber;
const int DelAndSortMail::kSortFieldNumber;
#endif  // !_MSC_VER

DelAndSortMail::DelAndSortMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.DelAndSortMail)
}

void DelAndSortMail::InitAsDefaultInstance() {
}

DelAndSortMail::DelAndSortMail(const DelAndSortMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.DelAndSortMail)
}

void DelAndSortMail::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 136;
  mailid_ = 0;
  mailiddel_ = false;
  sort_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelAndSortMail::~DelAndSortMail() {
  // @@protoc_insertion_point(destructor:GSToGC.DelAndSortMail)
  SharedDtor();
}

void DelAndSortMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelAndSortMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelAndSortMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelAndSortMail_descriptor_;
}

const DelAndSortMail& DelAndSortMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

DelAndSortMail* DelAndSortMail::default_instance_ = NULL;

DelAndSortMail* DelAndSortMail::New() const {
  return new DelAndSortMail;
}

void DelAndSortMail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DelAndSortMail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mailid_, sort_);
    msgid_ = 136;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelAndSortMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.DelAndSortMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyIfMailDelAndSort];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // optional int32 mailid = 2;
      case 2: {
        if (tag == 16) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mailidDel;
        break;
      }

      // optional bool mailidDel = 3;
      case 3: {
        if (tag == 24) {
         parse_mailidDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mailiddel_)));
          set_has_mailiddel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sort;
        break;
      }

      // optional bool sort = 4;
      case 4: {
        if (tag == 32) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.DelAndSortMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.DelAndSortMail)
  return false;
#undef DO_
}

void DelAndSortMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.DelAndSortMail)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyIfMailDelAndSort];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  // optional bool mailidDel = 3;
  if (has_mailiddel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mailiddel(), output);
  }

  // optional bool sort = 4;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.DelAndSortMail)
}

::google::protobuf::uint8* DelAndSortMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.DelAndSortMail)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyIfMailDelAndSort];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  // optional bool mailidDel = 3;
  if (has_mailiddel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mailiddel(), target);
  }

  // optional bool sort = 4;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.DelAndSortMail)
  return target;
}

int DelAndSortMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyIfMailDelAndSort];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional bool mailidDel = 3;
    if (has_mailiddel()) {
      total_size += 1 + 1;
    }

    // optional bool sort = 4;
    if (has_sort()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelAndSortMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelAndSortMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelAndSortMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelAndSortMail::MergeFrom(const DelAndSortMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailiddel()) {
      set_mailiddel(from.mailiddel());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelAndSortMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelAndSortMail::CopyFrom(const DelAndSortMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelAndSortMail::IsInitialized() const {

  return true;
}

void DelAndSortMail::Swap(DelAndSortMail* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailiddel_, other->mailiddel_);
    std::swap(sort_, other->sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelAndSortMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelAndSortMail_descriptor_;
  metadata.reflection = DelAndSortMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMsgidFieldNumber;
const int MailInfo::kMailidFieldNumber;
const int MailInfo::kMailcontentFieldNumber;
const int MailInfo::kSenderFieldNumber;
const int MailInfo::kCreateTimeFieldNumber;
const int MailInfo::kMailgiftFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.MailInfo)
}

void MailInfo::InitAsDefaultInstance() {
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.MailInfo)
}

void MailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 135;
  mailid_ = 0;
  mailcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mailgift_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.MailInfo)
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (mailcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailcontent_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (mailgift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailgift_;
  }
  if (this != default_instance_) {
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 135;
    mailid_ = 0;
    if (has_mailcontent()) {
      if (mailcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailcontent_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
    if (has_mailgift()) {
      if (mailgift_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailgift_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.MailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // optional int32 mailid = 2;
      case 2: {
        if (tag == 16) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mailcontent;
        break;
      }

      // optional string mailcontent = 3;
      case 3: {
        if (tag == 26) {
         parse_mailcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailcontent().data(), this->mailcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailcontent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }

      // optional string sender = 4;
      case 4: {
        if (tag == 34) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_createTime;
        break;
      }

      // optional string createTime = 5;
      case 5: {
        if (tag == 42) {
         parse_createTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mailgift;
        break;
      }

      // optional string mailgift = 6;
      case 6: {
        if (tag == 50) {
         parse_mailgift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailgift()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailgift().data(), this->mailgift().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailgift");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.MailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.MailInfo)
  return false;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.MailInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mailid(), output);
  }

  // optional string mailcontent = 3;
  if (has_mailcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailcontent().data(), this->mailcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailcontent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mailcontent(), output);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender(), output);
  }

  // optional string createTime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->createtime(), output);
  }

  // optional string mailgift = 6;
  if (has_mailgift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailgift().data(), this->mailgift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailgift");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mailgift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.MailInfo)
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.MailInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mailid(), target);
  }

  // optional string mailcontent = 3;
  if (has_mailcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailcontent().data(), this->mailcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailcontent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mailcontent(), target);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender(), target);
  }

  // optional string createTime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->createtime(), target);
  }

  // optional string mailgift = 6;
  if (has_mailgift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailgift().data(), this->mailgift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailgift");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mailgift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.MailInfo)
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMailInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional string mailcontent = 3;
    if (has_mailcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailcontent());
    }

    // optional string sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string createTime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional string mailgift = 6;
    if (has_mailgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailgift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailcontent()) {
      set_mailcontent(from.mailcontent());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_mailgift()) {
      set_mailgift(from.mailgift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailcontent_, other->mailcontent_);
    std::swap(sender_, other->sender_);
    std::swap(createtime_, other->createtime_);
    std::swap(mailgift_, other->mailgift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMailList::kMsgidFieldNumber;
const int NotifyMailList::kMailListFieldNumber;
#endif  // !_MSC_VER

NotifyMailList::NotifyMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMailList)
}

void NotifyMailList::InitAsDefaultInstance() {
}

NotifyMailList::NotifyMailList(const NotifyMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMailList)
}

void NotifyMailList::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 134;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMailList::~NotifyMailList() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMailList)
  SharedDtor();
}

void NotifyMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMailList_descriptor_;
}

const NotifyMailList& NotifyMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMailList* NotifyMailList::default_instance_ = NULL;

NotifyMailList* NotifyMailList::New() const {
  return new NotifyMailList;
}

void NotifyMailList::Clear() {
  msgid_ = 134;
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMailList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserMail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailList;
        break;
      }

      // repeated .GSToGC.ShortMail mailList = 2;
      case 2: {
        if (tag == 18) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMailList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMailList)
  return false;
#undef DO_
}

void NotifyMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMailList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserMail];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.ShortMail mailList = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maillist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMailList)
}

::google::protobuf::uint8* NotifyMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMailList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserMail];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.ShortMail mailList = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maillist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMailList)
  return target;
}

int NotifyMailList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserMail];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.ShortMail mailList = 2;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMailList::MergeFrom(const NotifyMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMailList::CopyFrom(const NotifyMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMailList::IsInitialized() const {

  return true;
}

void NotifyMailList::Swap(NotifyMailList* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMailList_descriptor_;
  metadata.reflection = NotifyMailList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GoodsCfgInfo_CfgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsCfgInfo_CfgType_descriptor_;
}
bool GoodsCfgInfo_CfgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GoodsCfgInfo_CfgType GoodsCfgInfo::CfgType_Common;
const GoodsCfgInfo_CfgType GoodsCfgInfo::CfgType_Discount;
const GoodsCfgInfo_CfgType GoodsCfgInfo::CfgType_hot;
const GoodsCfgInfo_CfgType GoodsCfgInfo::CfgType_New;
const GoodsCfgInfo_CfgType GoodsCfgInfo::CfgType_MIN;
const GoodsCfgInfo_CfgType GoodsCfgInfo::CfgType_MAX;
const int GoodsCfgInfo::CfgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GoodsCfgInfo_Consume::kConsumetypeFieldNumber;
const int GoodsCfgInfo_Consume::kPriceFieldNumber;
#endif  // !_MSC_VER

GoodsCfgInfo_Consume::GoodsCfgInfo_Consume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GoodsCfgInfo.Consume)
}

void GoodsCfgInfo_Consume::InitAsDefaultInstance() {
}

GoodsCfgInfo_Consume::GoodsCfgInfo_Consume(const GoodsCfgInfo_Consume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GoodsCfgInfo.Consume)
}

void GoodsCfgInfo_Consume::SharedCtor() {
  _cached_size_ = 0;
  consumetype_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsCfgInfo_Consume::~GoodsCfgInfo_Consume() {
  // @@protoc_insertion_point(destructor:GSToGC.GoodsCfgInfo.Consume)
  SharedDtor();
}

void GoodsCfgInfo_Consume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsCfgInfo_Consume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsCfgInfo_Consume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsCfgInfo_Consume_descriptor_;
}

const GoodsCfgInfo_Consume& GoodsCfgInfo_Consume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GoodsCfgInfo_Consume* GoodsCfgInfo_Consume::default_instance_ = NULL;

GoodsCfgInfo_Consume* GoodsCfgInfo_Consume::New() const {
  return new GoodsCfgInfo_Consume;
}

void GoodsCfgInfo_Consume::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoodsCfgInfo_Consume*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(consumetype_, price_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsCfgInfo_Consume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GoodsCfgInfo.Consume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 consumetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumetype_)));
          set_has_consumetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GoodsCfgInfo.Consume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GoodsCfgInfo.Consume)
  return false;
#undef DO_
}

void GoodsCfgInfo_Consume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GoodsCfgInfo.Consume)
  // optional int32 consumetype = 1;
  if (has_consumetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->consumetype(), output);
  }

  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GoodsCfgInfo.Consume)
}

::google::protobuf::uint8* GoodsCfgInfo_Consume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GoodsCfgInfo.Consume)
  // optional int32 consumetype = 1;
  if (has_consumetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->consumetype(), target);
  }

  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GoodsCfgInfo.Consume)
  return target;
}

int GoodsCfgInfo_Consume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 consumetype = 1;
    if (has_consumetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumetype());
    }

    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsCfgInfo_Consume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsCfgInfo_Consume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsCfgInfo_Consume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsCfgInfo_Consume::MergeFrom(const GoodsCfgInfo_Consume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consumetype()) {
      set_consumetype(from.consumetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsCfgInfo_Consume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsCfgInfo_Consume::CopyFrom(const GoodsCfgInfo_Consume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsCfgInfo_Consume::IsInitialized() const {

  return true;
}

void GoodsCfgInfo_Consume::Swap(GoodsCfgInfo_Consume* other) {
  if (other != this) {
    std::swap(consumetype_, other->consumetype_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsCfgInfo_Consume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsCfgInfo_Consume_descriptor_;
  metadata.reflection = GoodsCfgInfo_Consume_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GoodsCfgInfo::kGoodidFieldNumber;
const int GoodsCfgInfo::kConsumeFieldNumber;
const int GoodsCfgInfo::kCfgTypeFieldNumber;
#endif  // !_MSC_VER

GoodsCfgInfo::GoodsCfgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GoodsCfgInfo)
}

void GoodsCfgInfo::InitAsDefaultInstance() {
}

GoodsCfgInfo::GoodsCfgInfo(const GoodsCfgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GoodsCfgInfo)
}

void GoodsCfgInfo::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  cfg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsCfgInfo::~GoodsCfgInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.GoodsCfgInfo)
  SharedDtor();
}

void GoodsCfgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsCfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsCfgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsCfgInfo_descriptor_;
}

const GoodsCfgInfo& GoodsCfgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GoodsCfgInfo* GoodsCfgInfo::default_instance_ = NULL;

GoodsCfgInfo* GoodsCfgInfo::New() const {
  return new GoodsCfgInfo;
}

void GoodsCfgInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoodsCfgInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodid_, cfg_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsCfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GoodsCfgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 goodid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .GSToGC.GoodsCfgInfo.Consume consume = 2;
      case 2: {
        if (tag == 18) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectTag(24)) goto parse_cfg_type;
        break;
      }

      // optional .GSToGC.GoodsCfgInfo.CfgType cfg_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cfg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::GoodsCfgInfo_CfgType_IsValid(value)) {
            set_cfg_type(static_cast< ::GSToGC::GoodsCfgInfo_CfgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GoodsCfgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GoodsCfgInfo)
  return false;
#undef DO_
}

void GoodsCfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GoodsCfgInfo)
  // optional int32 goodid = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }

  // repeated .GSToGC.GoodsCfgInfo.Consume consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  // optional .GSToGC.GoodsCfgInfo.CfgType cfg_type = 3;
  if (has_cfg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cfg_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GoodsCfgInfo)
}

::google::protobuf::uint8* GoodsCfgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GoodsCfgInfo)
  // optional int32 goodid = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }

  // repeated .GSToGC.GoodsCfgInfo.Consume consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  // optional .GSToGC.GoodsCfgInfo.CfgType cfg_type = 3;
  if (has_cfg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cfg_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GoodsCfgInfo)
  return target;
}

int GoodsCfgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 goodid = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }

    // optional .GSToGC.GoodsCfgInfo.CfgType cfg_type = 3;
    if (has_cfg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cfg_type());
    }

  }
  // repeated .GSToGC.GoodsCfgInfo.Consume consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsCfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsCfgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsCfgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsCfgInfo::MergeFrom(const GoodsCfgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_cfg_type()) {
      set_cfg_type(from.cfg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsCfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsCfgInfo::CopyFrom(const GoodsCfgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsCfgInfo::IsInitialized() const {

  return true;
}

void GoodsCfgInfo::Swap(GoodsCfgInfo* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    consume_.Swap(&other->consume_);
    std::swap(cfg_type_, other->cfg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsCfgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsCfgInfo_descriptor_;
  metadata.reflection = GoodsCfgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsBuyCfgInfo::kMsgidFieldNumber;
const int GoodsBuyCfgInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GoodsBuyCfgInfo::GoodsBuyCfgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GoodsBuyCfgInfo)
}

void GoodsBuyCfgInfo::InitAsDefaultInstance() {
}

GoodsBuyCfgInfo::GoodsBuyCfgInfo(const GoodsBuyCfgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GoodsBuyCfgInfo)
}

void GoodsBuyCfgInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 133;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsBuyCfgInfo::~GoodsBuyCfgInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.GoodsBuyCfgInfo)
  SharedDtor();
}

void GoodsBuyCfgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoodsBuyCfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsBuyCfgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsBuyCfgInfo_descriptor_;
}

const GoodsBuyCfgInfo& GoodsBuyCfgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GoodsBuyCfgInfo* GoodsBuyCfgInfo::default_instance_ = NULL;

GoodsBuyCfgInfo* GoodsBuyCfgInfo::New() const {
  return new GoodsBuyCfgInfo;
}

void GoodsBuyCfgInfo::Clear() {
  msgid_ = 133;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsBuyCfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GoodsBuyCfgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsCfgInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GSToGC.GoodsCfgInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GoodsBuyCfgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GoodsBuyCfgInfo)
  return false;
#undef DO_
}

void GoodsBuyCfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GoodsBuyCfgInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsCfgInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.GoodsCfgInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GoodsBuyCfgInfo)
}

::google::protobuf::uint8* GoodsBuyCfgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GoodsBuyCfgInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsCfgInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.GoodsCfgInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GoodsBuyCfgInfo)
  return target;
}

int GoodsBuyCfgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsCfgInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.GoodsCfgInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsBuyCfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsBuyCfgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsBuyCfgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsBuyCfgInfo::MergeFrom(const GoodsBuyCfgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsBuyCfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsBuyCfgInfo::CopyFrom(const GoodsBuyCfgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsBuyCfgInfo::IsInitialized() const {

  return true;
}

void GoodsBuyCfgInfo::Swap(GoodsBuyCfgInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsBuyCfgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsBuyCfgInfo_descriptor_;
  metadata.reflection = GoodsBuyCfgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroAttributes::kMsgidFieldNumber;
const int HeroAttributes::kGuidFieldNumber;
const int HeroAttributes::kPlayerSpeedFieldNumber;
const int HeroAttributes::kAttackIntervalFieldNumber;
const int HeroAttributes::kAttackRangeFieldNumber;
const int HeroAttributes::kResurgenceTimeFieldNumber;
const int HeroAttributes::kPhysicAttackFieldNumber;
const int HeroAttributes::kSpellsAttackFieldNumber;
const int HeroAttributes::kPhysicDefFieldNumber;
const int HeroAttributes::kSpellsDefFieldNumber;
#endif  // !_MSC_VER

HeroAttributes::HeroAttributes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroAttributes)
}

void HeroAttributes::InitAsDefaultInstance() {
}

HeroAttributes::HeroAttributes(const HeroAttributes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroAttributes)
}

void HeroAttributes::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 132;
  guid_ = GOOGLE_ULONGLONG(0);
  playerspeed_ = 0;
  attackinterval_ = 0;
  attackrange_ = 0;
  resurgencetime_ = 0;
  physicattack_ = 0;
  spellsattack_ = 0;
  physicdef_ = 0;
  spellsdef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroAttributes::~HeroAttributes() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroAttributes)
  SharedDtor();
}

void HeroAttributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroAttributes_descriptor_;
}

const HeroAttributes& HeroAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroAttributes* HeroAttributes::default_instance_ = NULL;

HeroAttributes* HeroAttributes::New() const {
  return new HeroAttributes;
}

void HeroAttributes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroAttributes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(playerspeed_, spellsattack_);
    msgid_ = 132;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ZR_(physicdef_, spellsdef_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAttributes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PlayerSpeed;
        break;
      }

      // optional int32 PlayerSpeed = 3;
      case 3: {
        if (tag == 24) {
         parse_PlayerSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerspeed_)));
          set_has_playerspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AttackInterval;
        break;
      }

      // optional int32 AttackInterval = 4;
      case 4: {
        if (tag == 32) {
         parse_AttackInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackinterval_)));
          set_has_attackinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AttackRange;
        break;
      }

      // optional int32 AttackRange = 5;
      case 5: {
        if (tag == 40) {
         parse_AttackRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackrange_)));
          set_has_attackrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResurgenceTime;
        break;
      }

      // optional int32 ResurgenceTime = 6;
      case 6: {
        if (tag == 48) {
         parse_ResurgenceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resurgencetime_)));
          set_has_resurgencetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PhysicAttack;
        break;
      }

      // optional int32 PhysicAttack = 7;
      case 7: {
        if (tag == 56) {
         parse_PhysicAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicattack_)));
          set_has_physicattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SpellsAttack;
        break;
      }

      // optional int32 SpellsAttack = 8;
      case 8: {
        if (tag == 64) {
         parse_SpellsAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellsattack_)));
          set_has_spellsattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PhysicDef;
        break;
      }

      // optional int32 PhysicDef = 9;
      case 9: {
        if (tag == 72) {
         parse_PhysicDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicdef_)));
          set_has_physicdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SpellsDef;
        break;
      }

      // optional int32 SpellsDef = 10;
      case 10: {
        if (tag == 80) {
         parse_SpellsDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellsdef_)));
          set_has_spellsdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroAttributes)
  return false;
#undef DO_
}

void HeroAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroAttributes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAttributes];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 PlayerSpeed = 3;
  if (has_playerspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerspeed(), output);
  }

  // optional int32 AttackInterval = 4;
  if (has_attackinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attackinterval(), output);
  }

  // optional int32 AttackRange = 5;
  if (has_attackrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attackrange(), output);
  }

  // optional int32 ResurgenceTime = 6;
  if (has_resurgencetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resurgencetime(), output);
  }

  // optional int32 PhysicAttack = 7;
  if (has_physicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->physicattack(), output);
  }

  // optional int32 SpellsAttack = 8;
  if (has_spellsattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spellsattack(), output);
  }

  // optional int32 PhysicDef = 9;
  if (has_physicdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->physicdef(), output);
  }

  // optional int32 SpellsDef = 10;
  if (has_spellsdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->spellsdef(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroAttributes)
}

::google::protobuf::uint8* HeroAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroAttributes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAttributes];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 PlayerSpeed = 3;
  if (has_playerspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerspeed(), target);
  }

  // optional int32 AttackInterval = 4;
  if (has_attackinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attackinterval(), target);
  }

  // optional int32 AttackRange = 5;
  if (has_attackrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attackrange(), target);
  }

  // optional int32 ResurgenceTime = 6;
  if (has_resurgencetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resurgencetime(), target);
  }

  // optional int32 PhysicAttack = 7;
  if (has_physicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->physicattack(), target);
  }

  // optional int32 SpellsAttack = 8;
  if (has_spellsattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spellsattack(), target);
  }

  // optional int32 PhysicDef = 9;
  if (has_physicdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->physicdef(), target);
  }

  // optional int32 SpellsDef = 10;
  if (has_spellsdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->spellsdef(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroAttributes)
  return target;
}

int HeroAttributes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAttributes];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 PlayerSpeed = 3;
    if (has_playerspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerspeed());
    }

    // optional int32 AttackInterval = 4;
    if (has_attackinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackinterval());
    }

    // optional int32 AttackRange = 5;
    if (has_attackrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackrange());
    }

    // optional int32 ResurgenceTime = 6;
    if (has_resurgencetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resurgencetime());
    }

    // optional int32 PhysicAttack = 7;
    if (has_physicattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicattack());
    }

    // optional int32 SpellsAttack = 8;
    if (has_spellsattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellsattack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 PhysicDef = 9;
    if (has_physicdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicdef());
    }

    // optional int32 SpellsDef = 10;
    if (has_spellsdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spellsdef());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroAttributes::MergeFrom(const HeroAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_playerspeed()) {
      set_playerspeed(from.playerspeed());
    }
    if (from.has_attackinterval()) {
      set_attackinterval(from.attackinterval());
    }
    if (from.has_attackrange()) {
      set_attackrange(from.attackrange());
    }
    if (from.has_resurgencetime()) {
      set_resurgencetime(from.resurgencetime());
    }
    if (from.has_physicattack()) {
      set_physicattack(from.physicattack());
    }
    if (from.has_spellsattack()) {
      set_spellsattack(from.spellsattack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_physicdef()) {
      set_physicdef(from.physicdef());
    }
    if (from.has_spellsdef()) {
      set_spellsdef(from.spellsdef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAttributes::CopyFrom(const HeroAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroAttributes::IsInitialized() const {

  return true;
}

void HeroAttributes::Swap(HeroAttributes* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(playerspeed_, other->playerspeed_);
    std::swap(attackinterval_, other->attackinterval_);
    std::swap(attackrange_, other->attackrange_);
    std::swap(resurgencetime_, other->resurgencetime_);
    std::swap(physicattack_, other->physicattack_);
    std::swap(spellsattack_, other->spellsattack_);
    std::swap(physicdef_, other->physicdef_);
    std::swap(spellsdef_, other->spellsdef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroAttributes_descriptor_;
  metadata.reflection = HeroAttributes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroAssist::kMsgidFieldNumber;
const int HeroAssist::kGuidFieldNumber;
const int HeroAssist::kAssistFieldNumber;
#endif  // !_MSC_VER

HeroAssist::HeroAssist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroAssist)
}

void HeroAssist::InitAsDefaultInstance() {
}

HeroAssist::HeroAssist(const HeroAssist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroAssist)
}

void HeroAssist::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 131;
  guid_ = GOOGLE_ULONGLONG(0);
  assist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroAssist::~HeroAssist() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroAssist)
  SharedDtor();
}

void HeroAssist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroAssist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroAssist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroAssist_descriptor_;
}

const HeroAssist& HeroAssist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroAssist* HeroAssist::default_instance_ = NULL;

HeroAssist* HeroAssist::New() const {
  return new HeroAssist;
}

void HeroAssist::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 131;
    guid_ = GOOGLE_ULONGLONG(0);
    assist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroAssist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroAssist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAssist];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_assist;
        break;
      }

      // optional int32 assist = 3;
      case 3: {
        if (tag == 24) {
         parse_assist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assist_)));
          set_has_assist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroAssist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroAssist)
  return false;
#undef DO_
}

void HeroAssist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroAssist)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAssist];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 assist = 3;
  if (has_assist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->assist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroAssist)
}

::google::protobuf::uint8* HeroAssist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroAssist)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAssist];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 assist = 3;
  if (has_assist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->assist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroAssist)
  return target;
}

int HeroAssist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroAssist];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 assist = 3;
    if (has_assist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroAssist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroAssist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroAssist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroAssist::MergeFrom(const HeroAssist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_assist()) {
      set_assist(from.assist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroAssist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAssist::CopyFrom(const HeroAssist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroAssist::IsInitialized() const {

  return true;
}

void HeroAssist::Swap(HeroAssist* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(assist_, other->assist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroAssist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroAssist_descriptor_;
  metadata.reflection = HeroAssist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleMatcherCount::kMsgidFieldNumber;
const int BattleMatcherCount::kCountFieldNumber;
const int BattleMatcherCount::kMaxcountFieldNumber;
#endif  // !_MSC_VER

BattleMatcherCount::BattleMatcherCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleMatcherCount)
}

void BattleMatcherCount::InitAsDefaultInstance() {
}

BattleMatcherCount::BattleMatcherCount(const BattleMatcherCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleMatcherCount)
}

void BattleMatcherCount::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 130;
  count_ = 0;
  maxcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleMatcherCount::~BattleMatcherCount() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleMatcherCount)
  SharedDtor();
}

void BattleMatcherCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleMatcherCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleMatcherCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleMatcherCount_descriptor_;
}

const BattleMatcherCount& BattleMatcherCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleMatcherCount* BattleMatcherCount::default_instance_ = NULL;

BattleMatcherCount* BattleMatcherCount::New() const {
  return new BattleMatcherCount;
}

void BattleMatcherCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleMatcherCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(count_, maxcount_);
    msgid_ = 130;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleMatcherCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleMatcherCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleMatherCount];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxcount;
        break;
      }

      // optional int32 maxcount = 3;
      case 3: {
        if (tag == 24) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleMatcherCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleMatcherCount)
  return false;
#undef DO_
}

void BattleMatcherCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleMatcherCount)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleMatherCount];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 maxcount = 3;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleMatcherCount)
}

::google::protobuf::uint8* BattleMatcherCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleMatcherCount)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleMatherCount];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 maxcount = 3;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleMatcherCount)
  return target;
}

int BattleMatcherCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleMatherCount];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 maxcount = 3;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleMatcherCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleMatcherCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleMatcherCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleMatcherCount::MergeFrom(const BattleMatcherCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleMatcherCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleMatcherCount::CopyFrom(const BattleMatcherCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMatcherCount::IsInitialized() const {

  return true;
}

void BattleMatcherCount::Swap(BattleMatcherCount* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(count_, other->count_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleMatcherCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleMatcherCount_descriptor_;
  metadata.reflection = BattleMatcherCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSpanTime::kMsgidFieldNumber;
const int BattleSpanTime::kSpanTimeFieldNumber;
#endif  // !_MSC_VER

BattleSpanTime::BattleSpanTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleSpanTime)
}

void BattleSpanTime::InitAsDefaultInstance() {
}

BattleSpanTime::BattleSpanTime(const BattleSpanTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleSpanTime)
}

void BattleSpanTime::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 129;
  spantime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSpanTime::~BattleSpanTime() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleSpanTime)
  SharedDtor();
}

void BattleSpanTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSpanTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSpanTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSpanTime_descriptor_;
}

const BattleSpanTime& BattleSpanTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleSpanTime* BattleSpanTime::default_instance_ = NULL;

BattleSpanTime* BattleSpanTime::New() const {
  return new BattleSpanTime;
}

void BattleSpanTime::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 129;
    spantime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSpanTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleSpanTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSpanTime];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_spanTime;
        break;
      }

      // optional int64 spanTime = 2;
      case 2: {
        if (tag == 16) {
         parse_spanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spantime_)));
          set_has_spantime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleSpanTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleSpanTime)
  return false;
#undef DO_
}

void BattleSpanTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleSpanTime)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSpanTime];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 spanTime = 2;
  if (has_spantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->spantime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleSpanTime)
}

::google::protobuf::uint8* BattleSpanTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleSpanTime)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSpanTime];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 spanTime = 2;
  if (has_spantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->spantime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleSpanTime)
  return target;
}

int BattleSpanTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSpanTime];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 spanTime = 2;
    if (has_spantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->spantime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSpanTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSpanTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSpanTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSpanTime::MergeFrom(const BattleSpanTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_spantime()) {
      set_spantime(from.spantime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSpanTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSpanTime::CopyFrom(const BattleSpanTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSpanTime::IsInitialized() const {

  return true;
}

void BattleSpanTime::Swap(BattleSpanTime* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(spantime_, other->spantime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSpanTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSpanTime_descriptor_;
  metadata.reflection = BattleSpanTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleDelayTime::kMsgidFieldNumber;
const int BattleDelayTime::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BattleDelayTime::BattleDelayTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleDelayTime)
}

void BattleDelayTime::InitAsDefaultInstance() {
}

BattleDelayTime::BattleDelayTime(const BattleDelayTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleDelayTime)
}

void BattleDelayTime::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 235;
  delaytime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleDelayTime::~BattleDelayTime() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleDelayTime)
  SharedDtor();
}

void BattleDelayTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleDelayTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleDelayTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleDelayTime_descriptor_;
}

const BattleDelayTime& BattleDelayTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleDelayTime* BattleDelayTime::default_instance_ = NULL;

BattleDelayTime* BattleDelayTime::New() const {
  return new BattleDelayTime;
}

void BattleDelayTime::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 235;
    delaytime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleDelayTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleDelayTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleDelayTime];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delayTime;
        break;
      }

      // optional int64 delayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_delayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleDelayTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleDelayTime)
  return false;
#undef DO_
}

void BattleDelayTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleDelayTime)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleDelayTime];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 delayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleDelayTime)
}

::google::protobuf::uint8* BattleDelayTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleDelayTime)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleDelayTime];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 delayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleDelayTime)
  return target;
}

int BattleDelayTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleDelayTime];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 delayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleDelayTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleDelayTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleDelayTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleDelayTime::MergeFrom(const BattleDelayTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleDelayTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleDelayTime::CopyFrom(const BattleDelayTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleDelayTime::IsInitialized() const {

  return true;
}

void BattleDelayTime::Swap(BattleDelayTime* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleDelayTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleDelayTime_descriptor_;
  metadata.reflection = BattleDelayTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseUpLv::kMsgidFieldNumber;
const int UserBaseUpLv::kLvFieldNumber;
#endif  // !_MSC_VER

UserBaseUpLv::UserBaseUpLv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.UserBaseUpLv)
}

void UserBaseUpLv::InitAsDefaultInstance() {
}

UserBaseUpLv::UserBaseUpLv(const UserBaseUpLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.UserBaseUpLv)
}

void UserBaseUpLv::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 128;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseUpLv::~UserBaseUpLv() {
  // @@protoc_insertion_point(destructor:GSToGC.UserBaseUpLv)
  SharedDtor();
}

void UserBaseUpLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBaseUpLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseUpLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseUpLv_descriptor_;
}

const UserBaseUpLv& UserBaseUpLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

UserBaseUpLv* UserBaseUpLv::default_instance_ = NULL;

UserBaseUpLv* UserBaseUpLv::New() const {
  return new UserBaseUpLv;
}

void UserBaseUpLv::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 128;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseUpLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.UserBaseUpLv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseUpLv];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.UserBaseUpLv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.UserBaseUpLv)
  return false;
#undef DO_
}

void UserBaseUpLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.UserBaseUpLv)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseUpLv];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.UserBaseUpLv)
}

::google::protobuf::uint8* UserBaseUpLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.UserBaseUpLv)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseUpLv];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.UserBaseUpLv)
  return target;
}

int UserBaseUpLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseUpLv];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseUpLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseUpLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseUpLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseUpLv::MergeFrom(const UserBaseUpLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseUpLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseUpLv::CopyFrom(const UserBaseUpLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseUpLv::IsInitialized() const {

  return true;
}

void UserBaseUpLv::Swap(UserBaseUpLv* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseUpLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseUpLv_descriptor_;
  metadata.reflection = UserBaseUpLv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecondGuideTask_task_info::kTaskidFieldNumber;
const int SecondGuideTask_task_info::kNumFieldNumber;
#endif  // !_MSC_VER

SecondGuideTask_task_info::SecondGuideTask_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SecondGuideTask.task_info)
}

void SecondGuideTask_task_info::InitAsDefaultInstance() {
}

SecondGuideTask_task_info::SecondGuideTask_task_info(const SecondGuideTask_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SecondGuideTask.task_info)
}

void SecondGuideTask_task_info::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecondGuideTask_task_info::~SecondGuideTask_task_info() {
  // @@protoc_insertion_point(destructor:GSToGC.SecondGuideTask.task_info)
  SharedDtor();
}

void SecondGuideTask_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecondGuideTask_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecondGuideTask_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecondGuideTask_task_info_descriptor_;
}

const SecondGuideTask_task_info& SecondGuideTask_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SecondGuideTask_task_info* SecondGuideTask_task_info::default_instance_ = NULL;

SecondGuideTask_task_info* SecondGuideTask_task_info::New() const {
  return new SecondGuideTask_task_info;
}

void SecondGuideTask_task_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SecondGuideTask_task_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecondGuideTask_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SecondGuideTask.task_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SecondGuideTask.task_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SecondGuideTask.task_info)
  return false;
#undef DO_
}

void SecondGuideTask_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SecondGuideTask.task_info)
  // optional int32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SecondGuideTask.task_info)
}

::google::protobuf::uint8* SecondGuideTask_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SecondGuideTask.task_info)
  // optional int32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SecondGuideTask.task_info)
  return target;
}

int SecondGuideTask_task_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecondGuideTask_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecondGuideTask_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecondGuideTask_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecondGuideTask_task_info::MergeFrom(const SecondGuideTask_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecondGuideTask_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecondGuideTask_task_info::CopyFrom(const SecondGuideTask_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecondGuideTask_task_info::IsInitialized() const {

  return true;
}

void SecondGuideTask_task_info::Swap(SecondGuideTask_task_info* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecondGuideTask_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecondGuideTask_task_info_descriptor_;
  metadata.reflection = SecondGuideTask_task_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SecondGuideTask::kMsgidFieldNumber;
const int SecondGuideTask::kTaskinfoFieldNumber;
#endif  // !_MSC_VER

SecondGuideTask::SecondGuideTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SecondGuideTask)
}

void SecondGuideTask::InitAsDefaultInstance() {
}

SecondGuideTask::SecondGuideTask(const SecondGuideTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SecondGuideTask)
}

void SecondGuideTask::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 121;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecondGuideTask::~SecondGuideTask() {
  // @@protoc_insertion_point(destructor:GSToGC.SecondGuideTask)
  SharedDtor();
}

void SecondGuideTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecondGuideTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecondGuideTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecondGuideTask_descriptor_;
}

const SecondGuideTask& SecondGuideTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SecondGuideTask* SecondGuideTask::default_instance_ = NULL;

SecondGuideTask* SecondGuideTask::New() const {
  return new SecondGuideTask;
}

void SecondGuideTask::Clear() {
  msgid_ = 121;
  taskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecondGuideTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SecondGuideTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifySecondaryGuideTask];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taskinfo;
        break;
      }

      // repeated .GSToGC.SecondGuideTask.task_info taskinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_taskinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taskinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SecondGuideTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SecondGuideTask)
  return false;
#undef DO_
}

void SecondGuideTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SecondGuideTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifySecondaryGuideTask];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.SecondGuideTask.task_info taskinfo = 2;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SecondGuideTask)
}

::google::protobuf::uint8* SecondGuideTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SecondGuideTask)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifySecondaryGuideTask];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.SecondGuideTask.task_info taskinfo = 2;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->taskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SecondGuideTask)
  return target;
}

int SecondGuideTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifySecondaryGuideTask];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.SecondGuideTask.task_info taskinfo = 2;
  total_size += 1 * this->taskinfo_size();
  for (int i = 0; i < this->taskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecondGuideTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecondGuideTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecondGuideTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecondGuideTask::MergeFrom(const SecondGuideTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfo_.MergeFrom(from.taskinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecondGuideTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecondGuideTask::CopyFrom(const SecondGuideTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecondGuideTask::IsInitialized() const {

  return true;
}

void SecondGuideTask::Swap(SecondGuideTask* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    taskinfo_.Swap(&other->taskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecondGuideTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecondGuideTask_descriptor_;
  metadata.reflection = SecondGuideTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTips::kMsgidFieldNumber;
const int GameTips::kErrocodeFieldNumber;
const int GameTips::kCampidFieldNumber;
#endif  // !_MSC_VER

GameTips::GameTips()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GameTips)
}

void GameTips::InitAsDefaultInstance() {
}

GameTips::GameTips(const GameTips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GameTips)
}

void GameTips::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 118;
  errocode_ = 0;
  campid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTips::~GameTips() {
  // @@protoc_insertion_point(destructor:GSToGC.GameTips)
  SharedDtor();
}

void GameTips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTips_descriptor_;
}

const GameTips& GameTips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GameTips* GameTips::default_instance_ = NULL;

GameTips* GameTips::New() const {
  return new GameTips;
}

void GameTips::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameTips*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(errocode_, campid_);
    msgid_ = 118;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GameTips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGuideTips];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errocode;
        break;
      }

      // optional int32 errocode = 2;
      case 2: {
        if (tag == 16) {
         parse_errocode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errocode_)));
          set_has_errocode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // optional int32 campid = 3;
      case 3: {
        if (tag == 24) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GameTips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GameTips)
  return false;
#undef DO_
}

void GameTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GameTips)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGuideTips];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 errocode = 2;
  if (has_errocode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errocode(), output);
  }

  // optional int32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GameTips)
}

::google::protobuf::uint8* GameTips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GameTips)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGuideTips];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 errocode = 2;
  if (has_errocode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errocode(), target);
  }

  // optional int32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GameTips)
  return target;
}

int GameTips::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGuideTips];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 errocode = 2;
    if (has_errocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errocode());
    }

    // optional int32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTips::MergeFrom(const GameTips& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_errocode()) {
      set_errocode(from.errocode());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTips::CopyFrom(const GameTips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTips::IsInitialized() const {

  return true;
}

void GameTips::Swap(GameTips* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(errocode_, other->errocode_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTips_descriptor_;
  metadata.reflection = GameTips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUserReturnBattleRoom::kMsgidFieldNumber;
#endif  // !_MSC_VER

NotifyUserReturnBattleRoom::NotifyUserReturnBattleRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUserReturnBattleRoom)
}

void NotifyUserReturnBattleRoom::InitAsDefaultInstance() {
}

NotifyUserReturnBattleRoom::NotifyUserReturnBattleRoom(const NotifyUserReturnBattleRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUserReturnBattleRoom)
}

void NotifyUserReturnBattleRoom::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 91;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUserReturnBattleRoom::~NotifyUserReturnBattleRoom() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUserReturnBattleRoom)
  SharedDtor();
}

void NotifyUserReturnBattleRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUserReturnBattleRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUserReturnBattleRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUserReturnBattleRoom_descriptor_;
}

const NotifyUserReturnBattleRoom& NotifyUserReturnBattleRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUserReturnBattleRoom* NotifyUserReturnBattleRoom::default_instance_ = NULL;

NotifyUserReturnBattleRoom* NotifyUserReturnBattleRoom::New() const {
  return new NotifyUserReturnBattleRoom;
}

void NotifyUserReturnBattleRoom::Clear() {
  msgid_ = 91;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUserReturnBattleRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUserReturnBattleRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserReturnBattleRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUserReturnBattleRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUserReturnBattleRoom)
  return false;
#undef DO_
}

void NotifyUserReturnBattleRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUserReturnBattleRoom)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserReturnBattleRoom];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUserReturnBattleRoom)
}

::google::protobuf::uint8* NotifyUserReturnBattleRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUserReturnBattleRoom)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserReturnBattleRoom];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUserReturnBattleRoom)
  return target;
}

int NotifyUserReturnBattleRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserReturnBattleRoom];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUserReturnBattleRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUserReturnBattleRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUserReturnBattleRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUserReturnBattleRoom::MergeFrom(const NotifyUserReturnBattleRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUserReturnBattleRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUserReturnBattleRoom::CopyFrom(const NotifyUserReturnBattleRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUserReturnBattleRoom::IsInitialized() const {

  return true;
}

void NotifyUserReturnBattleRoom::Swap(NotifyUserReturnBattleRoom* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUserReturnBattleRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUserReturnBattleRoom_descriptor_;
  metadata.reflection = NotifyUserReturnBattleRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastBattleHeroInfo_HeroInfo::kGuidFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kNicknameFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kLevelFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kDeadtimesFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kCampidFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kHeadidFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kHpFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kMpFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kPosFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kMasterguidFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kKillsFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kAssistFieldNumber;
const int BroadcastBattleHeroInfo_HeroInfo::kHeroidFieldNumber;
#endif  // !_MSC_VER

BroadcastBattleHeroInfo_HeroInfo::BroadcastBattleHeroInfo_HeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
}

void BroadcastBattleHeroInfo_HeroInfo::InitAsDefaultInstance() {
}

BroadcastBattleHeroInfo_HeroInfo::BroadcastBattleHeroInfo_HeroInfo(const BroadcastBattleHeroInfo_HeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
}

void BroadcastBattleHeroInfo_HeroInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  deadtimes_ = 0;
  campid_ = 0;
  headid_ = 0;
  hp_ = 0;
  mp_ = 0;
  pos_ = 0;
  masterguid_ = GOOGLE_ULONGLONG(0);
  kills_ = 0;
  assist_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBattleHeroInfo_HeroInfo::~BroadcastBattleHeroInfo_HeroInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  SharedDtor();
}

void BroadcastBattleHeroInfo_HeroInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastBattleHeroInfo_HeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBattleHeroInfo_HeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBattleHeroInfo_HeroInfo_descriptor_;
}

const BroadcastBattleHeroInfo_HeroInfo& BroadcastBattleHeroInfo_HeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBattleHeroInfo_HeroInfo* BroadcastBattleHeroInfo_HeroInfo::default_instance_ = NULL;

BroadcastBattleHeroInfo_HeroInfo* BroadcastBattleHeroInfo_HeroInfo::New() const {
  return new BroadcastBattleHeroInfo_HeroInfo;
}

void BroadcastBattleHeroInfo_HeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastBattleHeroInfo_HeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, mp_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(masterguid_, heroid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBattleHeroInfo_HeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deadtimes;
        break;
      }

      // optional int32 deadtimes = 4;
      case 4: {
        if (tag == 32) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_campid;
        break;
      }

      // optional int32 campid = 5;
      case 5: {
        if (tag == 40) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_headid;
        break;
      }

      // optional int32 headid = 6;
      case 6: {
        if (tag == 48) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional int32 hp = 7;
      case 7: {
        if (tag == 56) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mp;
        break;
      }

      // optional int32 mp = 8;
      case 8: {
        if (tag == 64) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional int32 pos = 9;
      case 9: {
        if (tag == 72) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_masterguid;
        break;
      }

      // optional uint64 masterguid = 10;
      case 10: {
        if (tag == 80) {
         parse_masterguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterguid_)));
          set_has_masterguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kills;
        break;
      }

      // optional int32 kills = 11;
      case 11: {
        if (tag == 88) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_assist;
        break;
      }

      // optional int32 assist = 12;
      case 12: {
        if (tag == 96) {
         parse_assist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assist_)));
          set_has_assist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 13;
      case 13: {
        if (tag == 104) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  return false;
#undef DO_
}

void BroadcastBattleHeroInfo_HeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 deadtimes = 4;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deadtimes(), output);
  }

  // optional int32 campid = 5;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->campid(), output);
  }

  // optional int32 headid = 6;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->headid(), output);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }

  // optional int32 mp = 8;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mp(), output);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pos(), output);
  }

  // optional uint64 masterguid = 10;
  if (has_masterguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->masterguid(), output);
  }

  // optional int32 kills = 11;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->kills(), output);
  }

  // optional int32 assist = 12;
  if (has_assist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->assist(), output);
  }

  // optional int32 heroid = 13;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
}

::google::protobuf::uint8* BroadcastBattleHeroInfo_HeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 deadtimes = 4;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deadtimes(), target);
  }

  // optional int32 campid = 5;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->campid(), target);
  }

  // optional int32 headid = 6;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->headid(), target);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }

  // optional int32 mp = 8;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mp(), target);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pos(), target);
  }

  // optional uint64 masterguid = 10;
  if (has_masterguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->masterguid(), target);
  }

  // optional int32 kills = 11;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->kills(), target);
  }

  // optional int32 assist = 12;
  if (has_assist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->assist(), target);
  }

  // optional int32 heroid = 13;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBattleHeroInfo.HeroInfo)
  return target;
}

int BroadcastBattleHeroInfo_HeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 deadtimes = 4;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadtimes());
    }

    // optional int32 campid = 5;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }

    // optional int32 headid = 6;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 8;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional uint64 masterguid = 10;
    if (has_masterguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterguid());
    }

    // optional int32 kills = 11;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kills());
    }

    // optional int32 assist = 12;
    if (has_assist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assist());
    }

    // optional int32 heroid = 13;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBattleHeroInfo_HeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBattleHeroInfo_HeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBattleHeroInfo_HeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBattleHeroInfo_HeroInfo::MergeFrom(const BroadcastBattleHeroInfo_HeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_masterguid()) {
      set_masterguid(from.masterguid());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_assist()) {
      set_assist(from.assist());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBattleHeroInfo_HeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBattleHeroInfo_HeroInfo::CopyFrom(const BroadcastBattleHeroInfo_HeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBattleHeroInfo_HeroInfo::IsInitialized() const {

  return true;
}

void BroadcastBattleHeroInfo_HeroInfo::Swap(BroadcastBattleHeroInfo_HeroInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(campid_, other->campid_);
    std::swap(headid_, other->headid_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(pos_, other->pos_);
    std::swap(masterguid_, other->masterguid_);
    std::swap(kills_, other->kills_);
    std::swap(assist_, other->assist_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBattleHeroInfo_HeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBattleHeroInfo_HeroInfo_descriptor_;
  metadata.reflection = BroadcastBattleHeroInfo_HeroInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BroadcastBattleHeroInfo_BaseGoodsInfo::kIndexFieldNumber;
const int BroadcastBattleHeroInfo_BaseGoodsInfo::kIdFieldNumber;
#endif  // !_MSC_VER

BroadcastBattleHeroInfo_BaseGoodsInfo::BroadcastBattleHeroInfo_BaseGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::InitAsDefaultInstance() {
}

BroadcastBattleHeroInfo_BaseGoodsInfo::BroadcastBattleHeroInfo_BaseGoodsInfo(const BroadcastBattleHeroInfo_BaseGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBattleHeroInfo_BaseGoodsInfo::~BroadcastBattleHeroInfo_BaseGoodsInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  SharedDtor();
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBattleHeroInfo_BaseGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBattleHeroInfo_BaseGoodsInfo_descriptor_;
}

const BroadcastBattleHeroInfo_BaseGoodsInfo& BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBattleHeroInfo_BaseGoodsInfo* BroadcastBattleHeroInfo_BaseGoodsInfo::default_instance_ = NULL;

BroadcastBattleHeroInfo_BaseGoodsInfo* BroadcastBattleHeroInfo_BaseGoodsInfo::New() const {
  return new BroadcastBattleHeroInfo_BaseGoodsInfo;
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastBattleHeroInfo_BaseGoodsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBattleHeroInfo_BaseGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 13;
      case 13: {
        if (tag == 104) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_id;
        break;
      }

      // optional int32 id = 14;
      case 14: {
        if (tag == 112) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  return false;
#undef DO_
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  // optional int32 index = 13;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->index(), output);
  }

  // optional int32 id = 14;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
}

::google::protobuf::uint8* BroadcastBattleHeroInfo_BaseGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  // optional int32 index = 13;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->index(), target);
  }

  // optional int32 id = 14;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo)
  return target;
}

int BroadcastBattleHeroInfo_BaseGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 13;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 id = 14;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBattleHeroInfo_BaseGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBattleHeroInfo_BaseGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::MergeFrom(const BroadcastBattleHeroInfo_BaseGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::CopyFrom(const BroadcastBattleHeroInfo_BaseGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBattleHeroInfo_BaseGoodsInfo::IsInitialized() const {

  return true;
}

void BroadcastBattleHeroInfo_BaseGoodsInfo::Swap(BroadcastBattleHeroInfo_BaseGoodsInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBattleHeroInfo_BaseGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBattleHeroInfo_BaseGoodsInfo_descriptor_;
  metadata.reflection = BroadcastBattleHeroInfo_BaseGoodsInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BroadcastBattleHeroInfo::kMsgidFieldNumber;
const int BroadcastBattleHeroInfo::kHeroinfoFieldNumber;
const int BroadcastBattleHeroInfo::kGoodsinfoFieldNumber;
#endif  // !_MSC_VER

BroadcastBattleHeroInfo::BroadcastBattleHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBattleHeroInfo)
}

void BroadcastBattleHeroInfo::InitAsDefaultInstance() {
}

BroadcastBattleHeroInfo::BroadcastBattleHeroInfo(const BroadcastBattleHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBattleHeroInfo)
}

void BroadcastBattleHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 55;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBattleHeroInfo::~BroadcastBattleHeroInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBattleHeroInfo)
  SharedDtor();
}

void BroadcastBattleHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastBattleHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBattleHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBattleHeroInfo_descriptor_;
}

const BroadcastBattleHeroInfo& BroadcastBattleHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBattleHeroInfo* BroadcastBattleHeroInfo::default_instance_ = NULL;

BroadcastBattleHeroInfo* BroadcastBattleHeroInfo::New() const {
  return new BroadcastBattleHeroInfo;
}

void BroadcastBattleHeroInfo::Clear() {
  msgid_ = 55;
  heroinfo_.Clear();
  goodsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBattleHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBattleHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastBattleHeroInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroinfo;
        break;
      }

      // repeated .GSToGC.BroadcastBattleHeroInfo.HeroInfo heroinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_heroinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroinfo;
        if (input->ExpectTag(26)) goto parse_goodsinfo;
        break;
      }

      // repeated .GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo goodsinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_goodsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_goodsinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBattleHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBattleHeroInfo)
  return false;
#undef DO_
}

void BroadcastBattleHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBattleHeroInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastBattleHeroInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.BroadcastBattleHeroInfo.HeroInfo heroinfo = 2;
  for (int i = 0; i < this->heroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroinfo(i), output);
  }

  // repeated .GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo goodsinfo = 3;
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goodsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBattleHeroInfo)
}

::google::protobuf::uint8* BroadcastBattleHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBattleHeroInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastBattleHeroInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.BroadcastBattleHeroInfo.HeroInfo heroinfo = 2;
  for (int i = 0; i < this->heroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroinfo(i), target);
  }

  // repeated .GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo goodsinfo = 3;
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goodsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBattleHeroInfo)
  return target;
}

int BroadcastBattleHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastBattleHeroInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.BroadcastBattleHeroInfo.HeroInfo heroinfo = 2;
  total_size += 1 * this->heroinfo_size();
  for (int i = 0; i < this->heroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroinfo(i));
  }

  // repeated .GSToGC.BroadcastBattleHeroInfo.BaseGoodsInfo goodsinfo = 3;
  total_size += 1 * this->goodsinfo_size();
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBattleHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBattleHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBattleHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBattleHeroInfo::MergeFrom(const BroadcastBattleHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroinfo_.MergeFrom(from.heroinfo_);
  goodsinfo_.MergeFrom(from.goodsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBattleHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBattleHeroInfo::CopyFrom(const BroadcastBattleHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBattleHeroInfo::IsInitialized() const {

  return true;
}

void BroadcastBattleHeroInfo::Swap(BroadcastBattleHeroInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    heroinfo_.Swap(&other->heroinfo_);
    goodsinfo_.Swap(&other->goodsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBattleHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBattleHeroInfo_descriptor_;
  metadata.reflection = BroadcastBattleHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideLastStep::kMsgidFieldNumber;
const int GuideLastStep::kIfCompFieldNumber;
const int GuideLastStep::kStepidFieldNumber;
#endif  // !_MSC_VER

GuideLastStep::GuideLastStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GuideLastStep)
}

void GuideLastStep::InitAsDefaultInstance() {
}

GuideLastStep::GuideLastStep(const GuideLastStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GuideLastStep)
}

void GuideLastStep::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 106;
  ifcomp_ = false;
  stepid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideLastStep::~GuideLastStep() {
  // @@protoc_insertion_point(destructor:GSToGC.GuideLastStep)
  SharedDtor();
}

void GuideLastStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideLastStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideLastStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideLastStep_descriptor_;
}

const GuideLastStep& GuideLastStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GuideLastStep* GuideLastStep::default_instance_ = NULL;

GuideLastStep* GuideLastStep::New() const {
  return new GuideLastStep;
}

void GuideLastStep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuideLastStep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ifcomp_, stepid_);
    msgid_ = 106;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideLastStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GuideLastStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyGuideLastComStep];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ifComp;
        break;
      }

      // optional bool ifComp = 2;
      case 2: {
        if (tag == 16) {
         parse_ifComp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifcomp_)));
          set_has_ifcomp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stepid;
        break;
      }

      // optional int32 stepid = 3;
      case 3: {
        if (tag == 24) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GuideLastStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GuideLastStep)
  return false;
#undef DO_
}

void GuideLastStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GuideLastStep)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyGuideLastComStep];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool ifComp = 2;
  if (has_ifcomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ifcomp(), output);
  }

  // optional int32 stepid = 3;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GuideLastStep)
}

::google::protobuf::uint8* GuideLastStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GuideLastStep)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyGuideLastComStep];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool ifComp = 2;
  if (has_ifcomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ifcomp(), target);
  }

  // optional int32 stepid = 3;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GuideLastStep)
  return target;
}

int GuideLastStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyGuideLastComStep];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool ifComp = 2;
    if (has_ifcomp()) {
      total_size += 1 + 1;
    }

    // optional int32 stepid = 3;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideLastStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideLastStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideLastStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideLastStep::MergeFrom(const GuideLastStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_ifcomp()) {
      set_ifcomp(from.ifcomp());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideLastStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideLastStep::CopyFrom(const GuideLastStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideLastStep::IsInitialized() const {

  return true;
}

void GuideLastStep::Swap(GuideLastStep* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(ifcomp_, other->ifcomp_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideLastStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideLastStep_descriptor_;
  metadata.reflection = GuideLastStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUserCLDays::kMsgidFieldNumber;
const int NotifyUserCLDays::kMonthFieldNumber;
const int NotifyUserCLDays::kTodayFieldNumber;
const int NotifyUserCLDays::kTotalCldaysFieldNumber;
const int NotifyUserCLDays::kCldaysFieldNumber;
const int NotifyUserCLDays::kIsTodayCanFieldNumber;
#endif  // !_MSC_VER

NotifyUserCLDays::NotifyUserCLDays()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUserCLDays)
}

void NotifyUserCLDays::InitAsDefaultInstance() {
}

NotifyUserCLDays::NotifyUserCLDays(const NotifyUserCLDays& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUserCLDays)
}

void NotifyUserCLDays::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 119;
  month_ = 0u;
  today_ = 0u;
  totalcldays_ = 0u;
  cldays_ = 0u;
  istodaycan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUserCLDays::~NotifyUserCLDays() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUserCLDays)
  SharedDtor();
}

void NotifyUserCLDays::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUserCLDays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUserCLDays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUserCLDays_descriptor_;
}

const NotifyUserCLDays& NotifyUserCLDays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUserCLDays* NotifyUserCLDays::default_instance_ = NULL;

NotifyUserCLDays* NotifyUserCLDays::New() const {
  return new NotifyUserCLDays;
}

void NotifyUserCLDays::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyUserCLDays*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(month_, istodaycan_);
    msgid_ = 119;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUserCLDays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUserCLDays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserCLDays];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional uint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_today;
        break;
      }

      // optional uint32 today = 3;
      case 3: {
        if (tag == 24) {
         parse_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_)));
          set_has_today();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalCldays;
        break;
      }

      // optional uint32 totalCldays = 4;
      case 4: {
        if (tag == 32) {
         parse_totalCldays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcldays_)));
          set_has_totalcldays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cldays;
        break;
      }

      // optional uint32 cldays = 5;
      case 5: {
        if (tag == 40) {
         parse_cldays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cldays_)));
          set_has_cldays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isTodayCan;
        break;
      }

      // optional bool isTodayCan = 6;
      case 6: {
        if (tag == 48) {
         parse_isTodayCan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istodaycan_)));
          set_has_istodaycan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUserCLDays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUserCLDays)
  return false;
#undef DO_
}

void NotifyUserCLDays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUserCLDays)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserCLDays];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // optional uint32 today = 3;
  if (has_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today(), output);
  }

  // optional uint32 totalCldays = 4;
  if (has_totalcldays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalcldays(), output);
  }

  // optional uint32 cldays = 5;
  if (has_cldays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cldays(), output);
  }

  // optional bool isTodayCan = 6;
  if (has_istodaycan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->istodaycan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUserCLDays)
}

::google::protobuf::uint8* NotifyUserCLDays::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUserCLDays)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserCLDays];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // optional uint32 today = 3;
  if (has_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today(), target);
  }

  // optional uint32 totalCldays = 4;
  if (has_totalcldays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalcldays(), target);
  }

  // optional uint32 cldays = 5;
  if (has_cldays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cldays(), target);
  }

  // optional bool isTodayCan = 6;
  if (has_istodaycan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->istodaycan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUserCLDays)
  return target;
}

int NotifyUserCLDays::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserCLDays];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 today = 3;
    if (has_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today());
    }

    // optional uint32 totalCldays = 4;
    if (has_totalcldays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcldays());
    }

    // optional uint32 cldays = 5;
    if (has_cldays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cldays());
    }

    // optional bool isTodayCan = 6;
    if (has_istodaycan()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUserCLDays::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUserCLDays* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUserCLDays*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUserCLDays::MergeFrom(const NotifyUserCLDays& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_today()) {
      set_today(from.today());
    }
    if (from.has_totalcldays()) {
      set_totalcldays(from.totalcldays());
    }
    if (from.has_cldays()) {
      set_cldays(from.cldays());
    }
    if (from.has_istodaycan()) {
      set_istodaycan(from.istodaycan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUserCLDays::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUserCLDays::CopyFrom(const NotifyUserCLDays& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUserCLDays::IsInitialized() const {

  return true;
}

void NotifyUserCLDays::Swap(NotifyUserCLDays* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(month_, other->month_);
    std::swap(today_, other->today_);
    std::swap(totalcldays_, other->totalcldays_);
    std::swap(cldays_, other->cldays_);
    std::swap(istodaycan_, other->istodaycan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUserCLDays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUserCLDays_descriptor_;
  metadata.reflection = NotifyUserCLDays_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameNotice_Notice::kTitleFieldNumber;
const int GameNotice_Notice::kFlagFieldNumber;
const int GameNotice_Notice::kStatusFieldNumber;
const int GameNotice_Notice::kPriorityFieldNumber;
const int GameNotice_Notice::kNoticeFieldNumber;
#endif  // !_MSC_VER

GameNotice_Notice::GameNotice_Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GameNotice.Notice)
}

void GameNotice_Notice::InitAsDefaultInstance() {
}

GameNotice_Notice::GameNotice_Notice(const GameNotice_Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GameNotice.Notice)
}

void GameNotice_Notice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0u;
  status_ = 0u;
  priority_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNotice_Notice::~GameNotice_Notice() {
  // @@protoc_insertion_point(destructor:GSToGC.GameNotice.Notice)
  SharedDtor();
}

void GameNotice_Notice::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GameNotice_Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotice_Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNotice_Notice_descriptor_;
}

const GameNotice_Notice& GameNotice_Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GameNotice_Notice* GameNotice_Notice::default_instance_ = NULL;

GameNotice_Notice* GameNotice_Notice::New() const {
  return new GameNotice_Notice;
}

void GameNotice_Notice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameNotice_Notice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(flag_, status_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    priority_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameNotice_Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GameNotice.Notice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional string notice = 5;
      case 5: {
        if (tag == 42) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GameNotice.Notice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GameNotice.Notice)
  return false;
#undef DO_
}

void GameNotice_Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GameNotice.Notice)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priority(), output);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GameNotice.Notice)
}

::google::protobuf::uint8* GameNotice_Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GameNotice.Notice)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priority(), target);
  }

  // optional string notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GameNotice.Notice)
  return target;
}

int GameNotice_Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional string notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotice_Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameNotice_Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameNotice_Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNotice_Notice::MergeFrom(const GameNotice_Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameNotice_Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotice_Notice::CopyFrom(const GameNotice_Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotice_Notice::IsInitialized() const {

  return true;
}

void GameNotice_Notice::Swap(GameNotice_Notice* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(flag_, other->flag_);
    std::swap(status_, other->status_);
    std::swap(priority_, other->priority_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameNotice_Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNotice_Notice_descriptor_;
  metadata.reflection = GameNotice_Notice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameNotice::kMsgidFieldNumber;
const int GameNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

GameNotice::GameNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GameNotice)
}

void GameNotice::InitAsDefaultInstance() {
}

GameNotice::GameNotice(const GameNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GameNotice)
}

void GameNotice::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 117;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNotice::~GameNotice() {
  // @@protoc_insertion_point(destructor:GSToGC.GameNotice)
  SharedDtor();
}

void GameNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNotice_descriptor_;
}

const GameNotice& GameNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GameNotice* GameNotice::default_instance_ = NULL;

GameNotice* GameNotice::New() const {
  return new GameNotice;
}

void GameNotice::Clear() {
  msgid_ = 117;
  notice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GameNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNotice];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // repeated .GSToGC.GameNotice.Notice notice = 2;
      case 2: {
        if (tag == 18) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GameNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GameNotice)
  return false;
#undef DO_
}

void GameNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GameNotice)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNotice];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.GameNotice.Notice notice = 2;
  for (int i = 0; i < this->notice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GameNotice)
}

::google::protobuf::uint8* GameNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GameNotice)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNotice];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.GameNotice.Notice notice = 2;
  for (int i = 0; i < this->notice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GameNotice)
  return target;
}

int GameNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNotice];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.GameNotice.Notice notice = 2;
  total_size += 1 * this->notice_size();
  for (int i = 0; i < this->notice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNotice::MergeFrom(const GameNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  notice_.MergeFrom(from.notice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNotice::CopyFrom(const GameNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNotice::IsInitialized() const {

  return true;
}

void GameNotice::Swap(GameNotice* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    notice_.Swap(&other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNotice_descriptor_;
  metadata.reflection = GameNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideSteps::kMsgidFieldNumber;
const int GuideSteps::kGuidFieldNumber;
const int GuideSteps::kTypeFieldNumber;
const int GuideSteps::kIfCompFieldNumber;
const int GuideSteps::kStepsFieldNumber;
#endif  // !_MSC_VER

GuideSteps::GuideSteps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GuideSteps)
}

void GuideSteps::InitAsDefaultInstance() {
}

GuideSteps::GuideSteps(const GuideSteps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GuideSteps)
}

void GuideSteps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 112;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ifcomp_ = false;
  steps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideSteps::~GuideSteps() {
  // @@protoc_insertion_point(destructor:GSToGC.GuideSteps)
  SharedDtor();
}

void GuideSteps::SharedDtor() {
  if (steps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete steps_;
  }
  if (this != default_instance_) {
  }
}

void GuideSteps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideSteps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideSteps_descriptor_;
}

const GuideSteps& GuideSteps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GuideSteps* GuideSteps::default_instance_ = NULL;

GuideSteps* GuideSteps::New() const {
  return new GuideSteps;
}

void GuideSteps::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgid_ = 112;
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    ifcomp_ = false;
    if (has_steps()) {
      if (steps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        steps_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideSteps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GuideSteps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGuideSetups];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifComp;
        break;
      }

      // optional bool ifComp = 4;
      case 4: {
        if (tag == 32) {
         parse_ifComp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifcomp_)));
          set_has_ifcomp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_steps;
        break;
      }

      // optional string steps = 5;
      case 5: {
        if (tag == 42) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steps().data(), this->steps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "steps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GuideSteps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GuideSteps)
  return false;
#undef DO_
}

void GuideSteps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GuideSteps)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGuideSetups];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional bool ifComp = 4;
  if (has_ifcomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ifcomp(), output);
  }

  // optional string steps = 5;
  if (has_steps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steps().data(), this->steps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "steps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->steps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GuideSteps)
}

::google::protobuf::uint8* GuideSteps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GuideSteps)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGuideSetups];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional bool ifComp = 4;
  if (has_ifcomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ifcomp(), target);
  }

  // optional string steps = 5;
  if (has_steps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steps().data(), this->steps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "steps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->steps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GuideSteps)
  return target;
}

int GuideSteps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGuideSetups];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool ifComp = 4;
    if (has_ifcomp()) {
      total_size += 1 + 1;
    }

    // optional string steps = 5;
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideSteps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideSteps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideSteps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideSteps::MergeFrom(const GuideSteps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ifcomp()) {
      set_ifcomp(from.ifcomp());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideSteps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideSteps::CopyFrom(const GuideSteps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideSteps::IsInitialized() const {

  return true;
}

void GuideSteps::Swap(GuideSteps* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(ifcomp_, other->ifcomp_);
    std::swap(steps_, other->steps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideSteps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideSteps_descriptor_;
  metadata.reflection = GuideSteps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingRet::kMsgidFieldNumber;
const int PingRet::kTimeFieldNumber;
const int PingRet::kFlagFieldNumber;
#endif  // !_MSC_VER

PingRet::PingRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.PingRet)
}

void PingRet::InitAsDefaultInstance() {
}

PingRet::PingRet(const PingRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.PingRet)
}

void PingRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  time_ = GOOGLE_LONGLONG(0);
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRet::~PingRet() {
  // @@protoc_insertion_point(destructor:GSToGC.PingRet)
  SharedDtor();
}

void PingRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRet_descriptor_;
}

const PingRet& PingRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

PingRet* PingRet::default_instance_ = NULL;

PingRet* PingRet::New() const {
  return new PingRet;
}

void PingRet::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 1;
    time_ = GOOGLE_LONGLONG(0);
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.PingRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskPingRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.PingRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.PingRet)
  return false;
#undef DO_
}

void PingRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.PingRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskPingRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.PingRet)
}

::google::protobuf::uint8* PingRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.PingRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskPingRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.PingRet)
  return target;
}

int PingRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskPingRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRet::MergeFrom(const PingRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRet::CopyFrom(const PingRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRet::IsInitialized() const {

  return true;
}

void PingRet::Swap(PingRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(time_, other->time_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingRet_descriptor_;
  metadata.reflection = PingRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyQueryNickNameRet_QueryInfo::kNicknameFieldNumber;
const int NotifyQueryNickNameRet_QueryInfo::kHeadidFieldNumber;
#endif  // !_MSC_VER

NotifyQueryNickNameRet_QueryInfo::NotifyQueryNickNameRet_QueryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyQueryNickNameRet.QueryInfo)
}

void NotifyQueryNickNameRet_QueryInfo::InitAsDefaultInstance() {
}

NotifyQueryNickNameRet_QueryInfo::NotifyQueryNickNameRet_QueryInfo(const NotifyQueryNickNameRet_QueryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyQueryNickNameRet.QueryInfo)
}

void NotifyQueryNickNameRet_QueryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyQueryNickNameRet_QueryInfo::~NotifyQueryNickNameRet_QueryInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  SharedDtor();
}

void NotifyQueryNickNameRet_QueryInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyQueryNickNameRet_QueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyQueryNickNameRet_QueryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyQueryNickNameRet_QueryInfo_descriptor_;
}

const NotifyQueryNickNameRet_QueryInfo& NotifyQueryNickNameRet_QueryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyQueryNickNameRet_QueryInfo* NotifyQueryNickNameRet_QueryInfo::default_instance_ = NULL;

NotifyQueryNickNameRet_QueryInfo* NotifyQueryNickNameRet_QueryInfo::New() const {
  return new NotifyQueryNickNameRet_QueryInfo;
}

void NotifyQueryNickNameRet_QueryInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyQueryNickNameRet_QueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_headid;
        break;
      }

      // optional int32 headid = 2;
      case 2: {
        if (tag == 16) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  return false;
#undef DO_
}

void NotifyQueryNickNameRet_QueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional int32 headid = 2;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyQueryNickNameRet.QueryInfo)
}

::google::protobuf::uint8* NotifyQueryNickNameRet_QueryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional int32 headid = 2;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyQueryNickNameRet.QueryInfo)
  return target;
}

int NotifyQueryNickNameRet_QueryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 headid = 2;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyQueryNickNameRet_QueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyQueryNickNameRet_QueryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyQueryNickNameRet_QueryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyQueryNickNameRet_QueryInfo::MergeFrom(const NotifyQueryNickNameRet_QueryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyQueryNickNameRet_QueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyQueryNickNameRet_QueryInfo::CopyFrom(const NotifyQueryNickNameRet_QueryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyQueryNickNameRet_QueryInfo::IsInitialized() const {

  return true;
}

void NotifyQueryNickNameRet_QueryInfo::Swap(NotifyQueryNickNameRet_QueryInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyQueryNickNameRet_QueryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyQueryNickNameRet_QueryInfo_descriptor_;
  metadata.reflection = NotifyQueryNickNameRet_QueryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyQueryNickNameRet::kMsgidFieldNumber;
const int NotifyQueryNickNameRet::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyQueryNickNameRet::NotifyQueryNickNameRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyQueryNickNameRet)
}

void NotifyQueryNickNameRet::InitAsDefaultInstance() {
}

NotifyQueryNickNameRet::NotifyQueryNickNameRet(const NotifyQueryNickNameRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyQueryNickNameRet)
}

void NotifyQueryNickNameRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 104;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyQueryNickNameRet::~NotifyQueryNickNameRet() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyQueryNickNameRet)
  SharedDtor();
}

void NotifyQueryNickNameRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyQueryNickNameRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyQueryNickNameRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyQueryNickNameRet_descriptor_;
}

const NotifyQueryNickNameRet& NotifyQueryNickNameRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyQueryNickNameRet* NotifyQueryNickNameRet::default_instance_ = NULL;

NotifyQueryNickNameRet* NotifyQueryNickNameRet::New() const {
  return new NotifyQueryNickNameRet;
}

void NotifyQueryNickNameRet::Clear() {
  msgid_ = 104;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyQueryNickNameRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyQueryNickNameRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyQueryNickNameRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GSToGC.NotifyQueryNickNameRet.QueryInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyQueryNickNameRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyQueryNickNameRet)
  return false;
#undef DO_
}

void NotifyQueryNickNameRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyQueryNickNameRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyQueryNickNameRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.NotifyQueryNickNameRet.QueryInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyQueryNickNameRet)
}

::google::protobuf::uint8* NotifyQueryNickNameRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyQueryNickNameRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyQueryNickNameRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.NotifyQueryNickNameRet.QueryInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyQueryNickNameRet)
  return target;
}

int NotifyQueryNickNameRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyQueryNickNameRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.NotifyQueryNickNameRet.QueryInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyQueryNickNameRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyQueryNickNameRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyQueryNickNameRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyQueryNickNameRet::MergeFrom(const NotifyQueryNickNameRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyQueryNickNameRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyQueryNickNameRet::CopyFrom(const NotifyQueryNickNameRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyQueryNickNameRet::IsInitialized() const {

  return true;
}

void NotifyQueryNickNameRet::Swap(NotifyQueryNickNameRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyQueryNickNameRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyQueryNickNameRet_descriptor_;
  metadata.reflection = NotifyQueryNickNameRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SNSInfo::kTypeFieldNumber;
const int SNSInfo::kNicknameFieldNumber;
const int SNSInfo::kHeadidFieldNumber;
const int SNSInfo::kStatusFieldNumber;
const int SNSInfo::kGuididxFieldNumber;
const int SNSInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

SNSInfo::SNSInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SNSInfo)
}

void SNSInfo::InitAsDefaultInstance() {
}

SNSInfo::SNSInfo(const SNSInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SNSInfo)
}

void SNSInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headid_ = 0u;
  status_ = 0;
  guididx_ = GOOGLE_ULONGLONG(0);
  viplv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SNSInfo::~SNSInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.SNSInfo)
  SharedDtor();
}

void SNSInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void SNSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SNSInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SNSInfo_descriptor_;
}

const SNSInfo& SNSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SNSInfo* SNSInfo::default_instance_ = NULL;

SNSInfo* SNSInfo::New() const {
  return new SNSInfo;
}

void SNSInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SNSInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, viplv_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SNSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SNSInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // optional uint32 headid = 3;
      case 3: {
        if (tag == 24) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 5;
      case 5: {
        if (tag == 40) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_viplv;
        break;
      }

      // optional uint32 viplv = 6;
      case 6: {
        if (tag == 48) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SNSInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SNSInfo)
  return false;
#undef DO_
}

void SNSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SNSInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional uint32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->headid(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional uint64 guididx = 5;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guididx(), output);
  }

  // optional uint32 viplv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SNSInfo)
}

::google::protobuf::uint8* SNSInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SNSInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->headid(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional uint64 guididx = 5;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guididx(), target);
  }

  // optional uint32 viplv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SNSInfo)
  return target;
}

int SNSInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint64 guididx = 5;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

    // optional uint32 viplv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SNSInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SNSInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SNSInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SNSInfo::MergeFrom(const SNSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SNSInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNSInfo::CopyFrom(const SNSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNSInfo::IsInitialized() const {

  return true;
}

void SNSInfo::Swap(SNSInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(status_, other->status_);
    std::swap(guididx_, other->guididx_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SNSInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SNSInfo_descriptor_;
  metadata.reflection = SNSInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUserSNSList::kMsgnumFieldNumber;
const int NotifyUserSNSList::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyUserSNSList::NotifyUserSNSList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUserSNSList)
}

void NotifyUserSNSList::InitAsDefaultInstance() {
}

NotifyUserSNSList::NotifyUserSNSList(const NotifyUserSNSList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUserSNSList)
}

void NotifyUserSNSList::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 99;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUserSNSList::~NotifyUserSNSList() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUserSNSList)
  SharedDtor();
}

void NotifyUserSNSList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUserSNSList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUserSNSList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUserSNSList_descriptor_;
}

const NotifyUserSNSList& NotifyUserSNSList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUserSNSList* NotifyUserSNSList::default_instance_ = NULL;

NotifyUserSNSList* NotifyUserSNSList::New() const {
  return new NotifyUserSNSList;
}

void NotifyUserSNSList::Clear() {
  msgnum_ = 99;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUserSNSList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUserSNSList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgnum(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GSToGC.SNSInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUserSNSList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUserSNSList)
  return false;
#undef DO_
}

void NotifyUserSNSList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUserSNSList)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSList];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // repeated .GSToGC.SNSInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUserSNSList)
}

::google::protobuf::uint8* NotifyUserSNSList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUserSNSList)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSList];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // repeated .GSToGC.SNSInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUserSNSList)
  return target;
}

int NotifyUserSNSList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSList];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

  }
  // repeated .GSToGC.SNSInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUserSNSList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUserSNSList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUserSNSList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUserSNSList::MergeFrom(const NotifyUserSNSList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUserSNSList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUserSNSList::CopyFrom(const NotifyUserSNSList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUserSNSList::IsInitialized() const {

  return true;
}

void NotifyUserSNSList::Swap(NotifyUserSNSList* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUserSNSList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUserSNSList_descriptor_;
  metadata.reflection = NotifyUserSNSList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBattleManagerChange::kMsgidFieldNumber;
#endif  // !_MSC_VER

NotifyBattleManagerChange::NotifyBattleManagerChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyBattleManagerChange)
}

void NotifyBattleManagerChange::InitAsDefaultInstance() {
}

NotifyBattleManagerChange::NotifyBattleManagerChange(const NotifyBattleManagerChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyBattleManagerChange)
}

void NotifyBattleManagerChange::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 86;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBattleManagerChange::~NotifyBattleManagerChange() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyBattleManagerChange)
  SharedDtor();
}

void NotifyBattleManagerChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBattleManagerChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBattleManagerChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBattleManagerChange_descriptor_;
}

const NotifyBattleManagerChange& NotifyBattleManagerChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyBattleManagerChange* NotifyBattleManagerChange::default_instance_ = NULL;

NotifyBattleManagerChange* NotifyBattleManagerChange::New() const {
  return new NotifyBattleManagerChange;
}

void NotifyBattleManagerChange::Clear() {
  msgid_ = 86;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBattleManagerChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyBattleManagerChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleManagerChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyBattleManagerChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyBattleManagerChange)
  return false;
#undef DO_
}

void NotifyBattleManagerChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyBattleManagerChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleManagerChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyBattleManagerChange)
}

::google::protobuf::uint8* NotifyBattleManagerChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyBattleManagerChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleManagerChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyBattleManagerChange)
  return target;
}

int NotifyBattleManagerChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleManagerChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBattleManagerChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBattleManagerChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBattleManagerChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBattleManagerChange::MergeFrom(const NotifyBattleManagerChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBattleManagerChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBattleManagerChange::CopyFrom(const NotifyBattleManagerChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBattleManagerChange::IsInitialized() const {

  return true;
}

void NotifyBattleManagerChange::Swap(NotifyBattleManagerChange* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBattleManagerChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBattleManagerChange_descriptor_;
  metadata.reflection = NotifyBattleManagerChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBeAddFriendMs::kMsgnumFieldNumber;
const int NotifyBeAddFriendMs::kSendnicknameFieldNumber;
const int NotifyBeAddFriendMs::kRecnicknameFieldNumber;
const int NotifyBeAddFriendMs::kSdnderGuididxFieldNumber;
#endif  // !_MSC_VER

NotifyBeAddFriendMs::NotifyBeAddFriendMs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyBeAddFriendMs)
}

void NotifyBeAddFriendMs::InitAsDefaultInstance() {
}

NotifyBeAddFriendMs::NotifyBeAddFriendMs(const NotifyBeAddFriendMs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyBeAddFriendMs)
}

void NotifyBeAddFriendMs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 103;
  sendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdnder_guididx_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBeAddFriendMs::~NotifyBeAddFriendMs() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyBeAddFriendMs)
  SharedDtor();
}

void NotifyBeAddFriendMs::SharedDtor() {
  if (sendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendnickname_;
  }
  if (recnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recnickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyBeAddFriendMs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBeAddFriendMs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBeAddFriendMs_descriptor_;
}

const NotifyBeAddFriendMs& NotifyBeAddFriendMs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyBeAddFriendMs* NotifyBeAddFriendMs::default_instance_ = NULL;

NotifyBeAddFriendMs* NotifyBeAddFriendMs::New() const {
  return new NotifyBeAddFriendMs;
}

void NotifyBeAddFriendMs::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgnum_ = 103;
    if (has_sendnickname()) {
      if (sendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendnickname_->clear();
      }
    }
    if (has_recnickname()) {
      if (recnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recnickname_->clear();
      }
    }
    sdnder_guididx_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBeAddFriendMs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyBeAddFriendMs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyBeAddFriendMsg];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgnum(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sendnickname;
        break;
      }

      // optional string sendnickname = 2;
      case 2: {
        if (tag == 18) {
         parse_sendnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendnickname().data(), this->sendnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recnickname;
        break;
      }

      // optional string recnickname = 3;
      case 3: {
        if (tag == 26) {
         parse_recnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recnickname().data(), this->recnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sdnder_guididx;
        break;
      }

      // optional uint64 sdnder_guididx = 4;
      case 4: {
        if (tag == 32) {
         parse_sdnder_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sdnder_guididx_)));
          set_has_sdnder_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyBeAddFriendMs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyBeAddFriendMs)
  return false;
#undef DO_
}

void NotifyBeAddFriendMs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyBeAddFriendMs)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyBeAddFriendMsg];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional string sendnickname = 2;
  if (has_sendnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendnickname().data(), this->sendnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sendnickname(), output);
  }

  // optional string recnickname = 3;
  if (has_recnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recnickname().data(), this->recnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->recnickname(), output);
  }

  // optional uint64 sdnder_guididx = 4;
  if (has_sdnder_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sdnder_guididx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyBeAddFriendMs)
}

::google::protobuf::uint8* NotifyBeAddFriendMs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyBeAddFriendMs)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyBeAddFriendMsg];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional string sendnickname = 2;
  if (has_sendnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendnickname().data(), this->sendnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendnickname(), target);
  }

  // optional string recnickname = 3;
  if (has_recnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recnickname().data(), this->recnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->recnickname(), target);
  }

  // optional uint64 sdnder_guididx = 4;
  if (has_sdnder_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sdnder_guididx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyBeAddFriendMs)
  return target;
}

int NotifyBeAddFriendMs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyBeAddFriendMsg];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional string sendnickname = 2;
    if (has_sendnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendnickname());
    }

    // optional string recnickname = 3;
    if (has_recnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recnickname());
    }

    // optional uint64 sdnder_guididx = 4;
    if (has_sdnder_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sdnder_guididx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBeAddFriendMs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBeAddFriendMs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBeAddFriendMs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBeAddFriendMs::MergeFrom(const NotifyBeAddFriendMs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_sendnickname()) {
      set_sendnickname(from.sendnickname());
    }
    if (from.has_recnickname()) {
      set_recnickname(from.recnickname());
    }
    if (from.has_sdnder_guididx()) {
      set_sdnder_guididx(from.sdnder_guididx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBeAddFriendMs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBeAddFriendMs::CopyFrom(const NotifyBeAddFriendMs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBeAddFriendMs::IsInitialized() const {

  return true;
}

void NotifyBeAddFriendMs::Swap(NotifyBeAddFriendMs* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(sendnickname_, other->sendnickname_);
    std::swap(recnickname_, other->recnickname_);
    std::swap(sdnder_guididx_, other->sdnder_guididx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBeAddFriendMs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBeAddFriendMs_descriptor_;
  metadata.reflection = NotifyBeAddFriendMs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMsgFromUser::kMsgnumFieldNumber;
const int NotifyMsgFromUser::kGuididxFieldNumber;
const int NotifyMsgFromUser::kNicknameFieldNumber;
const int NotifyMsgFromUser::kHeadidFieldNumber;
const int NotifyMsgFromUser::kChatstrFieldNumber;
#endif  // !_MSC_VER

NotifyMsgFromUser::NotifyMsgFromUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMsgFromUser)
}

void NotifyMsgFromUser::InitAsDefaultInstance() {
}

NotifyMsgFromUser::NotifyMsgFromUser(const NotifyMsgFromUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMsgFromUser)
}

void NotifyMsgFromUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 102;
  guididx_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headid_ = 0;
  chatstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMsgFromUser::~NotifyMsgFromUser() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMsgFromUser)
  SharedDtor();
}

void NotifyMsgFromUser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (chatstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chatstr_;
  }
  if (this != default_instance_) {
  }
}

void NotifyMsgFromUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMsgFromUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMsgFromUser_descriptor_;
}

const NotifyMsgFromUser& NotifyMsgFromUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMsgFromUser* NotifyMsgFromUser::default_instance_ = NULL;

NotifyMsgFromUser* NotifyMsgFromUser::New() const {
  return new NotifyMsgFromUser;
}

void NotifyMsgFromUser::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgnum_ = 102;
    guididx_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    headid_ = 0;
    if (has_chatstr()) {
      if (chatstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chatstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMsgFromUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMsgFromUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyMsgFromUser];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgnum(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 2;
      case 2: {
        if (tag == 16) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_headid;
        break;
      }

      // optional int32 headid = 4;
      case 4: {
        if (tag == 32) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chatstr;
        break;
      }

      // optional string chatstr = 5;
      case 5: {
        if (tag == 42) {
         parse_chatstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatstr().data(), this->chatstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chatstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMsgFromUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMsgFromUser)
  return false;
#undef DO_
}

void NotifyMsgFromUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMsgFromUser)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyMsgFromUser];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guididx(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 headid = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headid(), output);
  }

  // optional string chatstr = 5;
  if (has_chatstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatstr().data(), this->chatstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chatstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->chatstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMsgFromUser)
}

::google::protobuf::uint8* NotifyMsgFromUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMsgFromUser)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyMsgFromUser];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guididx(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 headid = 4;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headid(), target);
  }

  // optional string chatstr = 5;
  if (has_chatstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatstr().data(), this->chatstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chatstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chatstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMsgFromUser)
  return target;
}

int NotifyMsgFromUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyMsgFromUser];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 guididx = 2;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 headid = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional string chatstr = 5;
    if (has_chatstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMsgFromUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMsgFromUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMsgFromUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMsgFromUser::MergeFrom(const NotifyMsgFromUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_chatstr()) {
      set_chatstr(from.chatstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMsgFromUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMsgFromUser::CopyFrom(const NotifyMsgFromUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMsgFromUser::IsInitialized() const {

  return true;
}

void NotifyMsgFromUser::Swap(NotifyMsgFromUser* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guididx_, other->guididx_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(chatstr_, other->chatstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMsgFromUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMsgFromUser_descriptor_;
  metadata.reflection = NotifyMsgFromUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyUserSNSListChange::kMsgnumFieldNumber;
const int NotifyUserSNSListChange::kGuididxFieldNumber;
const int NotifyUserSNSListChange::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyUserSNSListChange::NotifyUserSNSListChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyUserSNSListChange)
}

void NotifyUserSNSListChange::InitAsDefaultInstance() {
}

NotifyUserSNSListChange::NotifyUserSNSListChange(const NotifyUserSNSListChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyUserSNSListChange)
}

void NotifyUserSNSListChange::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 100;
  guididx_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyUserSNSListChange::~NotifyUserSNSListChange() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyUserSNSListChange)
  SharedDtor();
}

void NotifyUserSNSListChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyUserSNSListChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyUserSNSListChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyUserSNSListChange_descriptor_;
}

const NotifyUserSNSListChange& NotifyUserSNSListChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyUserSNSListChange* NotifyUserSNSListChange::default_instance_ = NULL;

NotifyUserSNSListChange* NotifyUserSNSListChange::New() const {
  return new NotifyUserSNSListChange;
}

void NotifyUserSNSListChange::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgnum_ = 100;
    guididx_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyUserSNSListChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyUserSNSListChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSListChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgnum(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 2;
      case 2: {
        if (tag == 16) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyUserSNSListChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyUserSNSListChange)
  return false;
#undef DO_
}

void NotifyUserSNSListChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyUserSNSListChange)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSListChange];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guididx(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyUserSNSListChange)
}

::google::protobuf::uint8* NotifyUserSNSListChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyUserSNSListChange)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSListChange];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 guididx = 2;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guididx(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyUserSNSListChange)
  return target;
}

int NotifyUserSNSListChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyUserSNSListChange];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 guididx = 2;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyUserSNSListChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyUserSNSListChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyUserSNSListChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyUserSNSListChange::MergeFrom(const NotifyUserSNSListChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyUserSNSListChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyUserSNSListChange::CopyFrom(const NotifyUserSNSListChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyUserSNSListChange::IsInitialized() const {

  return true;
}

void NotifyUserSNSListChange::Swap(NotifyUserSNSListChange* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guididx_, other->guididx_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyUserSNSListChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyUserSNSListChange_descriptor_;
  metadata.reflection = NotifyUserSNSListChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBeInvitedToBattle::kMsgnumFieldNumber;
const int UserBeInvitedToBattle::kBattleidFieldNumber;
const int UserBeInvitedToBattle::kPwdFieldNumber;
const int UserBeInvitedToBattle::kInvitorFieldNumber;
#endif  // !_MSC_VER

UserBeInvitedToBattle::UserBeInvitedToBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.UserBeInvitedToBattle)
}

void UserBeInvitedToBattle::InitAsDefaultInstance() {
}

UserBeInvitedToBattle::UserBeInvitedToBattle(const UserBeInvitedToBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.UserBeInvitedToBattle)
}

void UserBeInvitedToBattle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgnum_ = 101;
  battleid_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBeInvitedToBattle::~UserBeInvitedToBattle() {
  // @@protoc_insertion_point(destructor:GSToGC.UserBeInvitedToBattle)
  SharedDtor();
}

void UserBeInvitedToBattle::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (invitor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitor_;
  }
  if (this != default_instance_) {
  }
}

void UserBeInvitedToBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBeInvitedToBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBeInvitedToBattle_descriptor_;
}

const UserBeInvitedToBattle& UserBeInvitedToBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

UserBeInvitedToBattle* UserBeInvitedToBattle::default_instance_ = NULL;

UserBeInvitedToBattle* UserBeInvitedToBattle::New() const {
  return new UserBeInvitedToBattle;
}

void UserBeInvitedToBattle::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgnum_ = 101;
    battleid_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
    if (has_invitor()) {
      if (invitor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitor_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBeInvitedToBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.UserBeInvitedToBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_UserBeInvitedToBattle];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgnum(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional int32 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Invitor;
        break;
      }

      // optional string Invitor = 4;
      case 4: {
        if (tag == 34) {
         parse_Invitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitor().data(), this->invitor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.UserBeInvitedToBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.UserBeInvitedToBattle)
  return false;
#undef DO_
}

void UserBeInvitedToBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.UserBeInvitedToBattle)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_UserBeInvitedToBattle];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional int32 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battleid(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // optional string Invitor = 4;
  if (has_invitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitor().data(), this->invitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->invitor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.UserBeInvitedToBattle)
}

::google::protobuf::uint8* UserBeInvitedToBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.UserBeInvitedToBattle)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_UserBeInvitedToBattle];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional int32 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battleid(), target);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // optional string Invitor = 4;
  if (has_invitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitor().data(), this->invitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->invitor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.UserBeInvitedToBattle)
  return target;
}

int UserBeInvitedToBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_UserBeInvitedToBattle];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional int32 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string Invitor = 4;
    if (has_invitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBeInvitedToBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBeInvitedToBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBeInvitedToBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBeInvitedToBattle::MergeFrom(const UserBeInvitedToBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_invitor()) {
      set_invitor(from.invitor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBeInvitedToBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBeInvitedToBattle::CopyFrom(const UserBeInvitedToBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBeInvitedToBattle::IsInitialized() const {

  return true;
}

void UserBeInvitedToBattle::Swap(UserBeInvitedToBattle* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(battleid_, other->battleid_);
    std::swap(pwd_, other->pwd_);
    std::swap(invitor_, other->invitor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBeInvitedToBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBeInvitedToBattle_descriptor_;
  metadata.reflection = UserBeInvitedToBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyAFPData_EnumFpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAFPData_EnumFpType_descriptor_;
}
bool NotifyAFPData_EnumFpType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyAFPData_EnumFpType NotifyAFPData::PhyHurt;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicHurt;
const NotifyAFPData_EnumFpType NotifyAFPData::CurHP;
const NotifyAFPData_EnumFpType NotifyAFPData::CurMP;
const NotifyAFPData_EnumFpType NotifyAFPData::PhyAttack;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicAttack;
const NotifyAFPData_EnumFpType NotifyAFPData::PhyDefense;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicDefense;
const NotifyAFPData_EnumFpType NotifyAFPData::MoveSpeed;
const NotifyAFPData_EnumFpType NotifyAFPData::AttackSpeed;
const NotifyAFPData_EnumFpType NotifyAFPData::MaxHP;
const NotifyAFPData_EnumFpType NotifyAFPData::MaxMP;
const NotifyAFPData_EnumFpType NotifyAFPData::HPRecoverRate;
const NotifyAFPData_EnumFpType NotifyAFPData::MPRecoverRate;
const NotifyAFPData_EnumFpType NotifyAFPData::ReliveTime;
const NotifyAFPData_EnumFpType NotifyAFPData::Dizziness;
const NotifyAFPData_EnumFpType NotifyAFPData::Silence;
const NotifyAFPData_EnumFpType NotifyAFPData::PosMove;
const NotifyAFPData_EnumFpType NotifyAFPData::Rebound;
const NotifyAFPData_EnumFpType NotifyAFPData::PhySuckBlood;
const NotifyAFPData_EnumFpType NotifyAFPData::Disarm;
const NotifyAFPData_EnumFpType NotifyAFPData::Restrain;
const NotifyAFPData_EnumFpType NotifyAFPData::CriPersent;
const NotifyAFPData_EnumFpType NotifyAFPData::CriHarm;
const NotifyAFPData_EnumFpType NotifyAFPData::CPRecover;
const NotifyAFPData_EnumFpType NotifyAFPData::PassitiveSkill;
const NotifyAFPData_EnumFpType NotifyAFPData::Invisible;
const NotifyAFPData_EnumFpType NotifyAFPData::AttackDist;
const NotifyAFPData_EnumFpType NotifyAFPData::TrueHurt;
const NotifyAFPData_EnumFpType NotifyAFPData::PhyPassNum;
const NotifyAFPData_EnumFpType NotifyAFPData::PhyPassPercent;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicPassNum;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicPassPercent;
const NotifyAFPData_EnumFpType NotifyAFPData::CooldownReduce;
const NotifyAFPData_EnumFpType NotifyAFPData::PhyDmgReduce;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicDmgReduce;
const NotifyAFPData_EnumFpType NotifyAFPData::TrueDmgReduce;
const NotifyAFPData_EnumFpType NotifyAFPData::PhyDmgReduceNum;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicDmgReduceNum;
const NotifyAFPData_EnumFpType NotifyAFPData::TrueDmgReduceNum;
const NotifyAFPData_EnumFpType NotifyAFPData::MagicSuckBlood;
const NotifyAFPData_EnumFpType NotifyAFPData::EnumFpType_MIN;
const NotifyAFPData_EnumFpType NotifyAFPData::EnumFpType_MAX;
const int NotifyAFPData::EnumFpType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyAFPData_FPInfo::kTypeFieldNumber;
const int NotifyAFPData_FPInfo::kValueFieldNumber;
#endif  // !_MSC_VER

NotifyAFPData_FPInfo::NotifyAFPData_FPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyAFPData.FPInfo)
}

void NotifyAFPData_FPInfo::InitAsDefaultInstance() {
}

NotifyAFPData_FPInfo::NotifyAFPData_FPInfo(const NotifyAFPData_FPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyAFPData.FPInfo)
}

void NotifyAFPData_FPInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAFPData_FPInfo::~NotifyAFPData_FPInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyAFPData.FPInfo)
  SharedDtor();
}

void NotifyAFPData_FPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAFPData_FPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAFPData_FPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAFPData_FPInfo_descriptor_;
}

const NotifyAFPData_FPInfo& NotifyAFPData_FPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyAFPData_FPInfo* NotifyAFPData_FPInfo::default_instance_ = NULL;

NotifyAFPData_FPInfo* NotifyAFPData_FPInfo::New() const {
  return new NotifyAFPData_FPInfo;
}

void NotifyAFPData_FPInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyAFPData_FPInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAFPData_FPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyAFPData.FPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyAFPData.FPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyAFPData.FPInfo)
  return false;
#undef DO_
}

void NotifyAFPData_FPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyAFPData.FPInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyAFPData.FPInfo)
}

::google::protobuf::uint8* NotifyAFPData_FPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyAFPData.FPInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyAFPData.FPInfo)
  return target;
}

int NotifyAFPData_FPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAFPData_FPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAFPData_FPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAFPData_FPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAFPData_FPInfo::MergeFrom(const NotifyAFPData_FPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAFPData_FPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAFPData_FPInfo::CopyFrom(const NotifyAFPData_FPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAFPData_FPInfo::IsInitialized() const {

  return true;
}

void NotifyAFPData_FPInfo::Swap(NotifyAFPData_FPInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAFPData_FPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAFPData_FPInfo_descriptor_;
  metadata.reflection = NotifyAFPData_FPInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyAFPData::kMsgnumFieldNumber;
const int NotifyAFPData::kGuidFieldNumber;
const int NotifyAFPData::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyAFPData::NotifyAFPData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyAFPData)
}

void NotifyAFPData::InitAsDefaultInstance() {
}

NotifyAFPData::NotifyAFPData(const NotifyAFPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyAFPData)
}

void NotifyAFPData::SharedCtor() {
  _cached_size_ = 0;
  msgnum_ = 85;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAFPData::~NotifyAFPData() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyAFPData)
  SharedDtor();
}

void NotifyAFPData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAFPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAFPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAFPData_descriptor_;
}

const NotifyAFPData& NotifyAFPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyAFPData* NotifyAFPData::default_instance_ = NULL;

NotifyAFPData* NotifyAFPData::New() const {
  return new NotifyAFPData;
}

void NotifyAFPData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgnum_ = 85;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAFPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyAFPData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyAFPData];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgnum(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .GSToGC.NotifyAFPData.FPInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyAFPData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyAFPData)
  return false;
#undef DO_
}

void NotifyAFPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyAFPData)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyAFPData];
  if (has_msgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgnum(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // repeated .GSToGC.NotifyAFPData.FPInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyAFPData)
}

::google::protobuf::uint8* NotifyAFPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyAFPData)
  // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyAFPData];
  if (has_msgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgnum(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // repeated .GSToGC.NotifyAFPData.FPInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyAFPData)
  return target;
}

int NotifyAFPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgnum = 1 [default = eMsgToGCFromGS_NotifyAFPData];
    if (has_msgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgnum());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .GSToGC.NotifyAFPData.FPInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAFPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAFPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAFPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAFPData::MergeFrom(const NotifyAFPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgnum()) {
      set_msgnum(from.msgnum());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAFPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAFPData::CopyFrom(const NotifyAFPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAFPData::IsInitialized() const {

  return true;
}

void NotifyAFPData::Swap(NotifyAFPData* other) {
  if (other != this) {
    std::swap(msgnum_, other->msgnum_);
    std::swap(guid_, other->guid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAFPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAFPData_descriptor_;
  metadata.reflection = NotifyAFPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseInfo::kMsgidFieldNumber;
const int UserBaseInfo::kGuidFieldNumber;
const int UserBaseInfo::kNameFieldNumber;
const int UserBaseInfo::kNicknameFieldNumber;
const int UserBaseInfo::kHeadidFieldNumber;
const int UserBaseInfo::kSexFieldNumber;
const int UserBaseInfo::kCurscoreFieldNumber;
const int UserBaseInfo::kCurdiamoandFieldNumber;
const int UserBaseInfo::kCurgoldFieldNumber;
const int UserBaseInfo::kMapidFieldNumber;
const int UserBaseInfo::kIfreconnectFieldNumber;
const int UserBaseInfo::kBattleidFieldNumber;
const int UserBaseInfo::kLevelFieldNumber;
const int UserBaseInfo::kVipLevelFieldNumber;
const int UserBaseInfo::kVipScoreFieldNumber;
const int UserBaseInfo::kCurExpFieldNumber;
#endif  // !_MSC_VER

UserBaseInfo::UserBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.UserBaseInfo)
}

void UserBaseInfo::InitAsDefaultInstance() {
}

UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.UserBaseInfo)
}

void UserBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 2;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headid_ = 0;
  sex_ = 0;
  curscore_ = GOOGLE_LONGLONG(0);
  curdiamoand_ = GOOGLE_LONGLONG(0);
  curgold_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ifreconnect_ = false;
  battleid_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  vip_level_ = 0;
  vip_score_ = 0;
  cur_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseInfo::~UserBaseInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.UserBaseInfo)
  SharedDtor();
}

void UserBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void UserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseInfo_descriptor_;
}

const UserBaseInfo& UserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

UserBaseInfo* UserBaseInfo::default_instance_ = NULL;

UserBaseInfo* UserBaseInfo::New() const {
  return new UserBaseInfo;
}

void UserBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(curscore_, sex_);
    msgid_ = 2;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    headid_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(mapid_, cur_exp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.UserBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_headid;
        break;
      }

      // optional int32 headid = 5;
      case 5: {
        if (tag == 40) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_curscore;
        break;
      }

      // optional int64 curscore = 7;
      case 7: {
        if (tag == 56) {
         parse_curscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curscore_)));
          set_has_curscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_curdiamoand;
        break;
      }

      // optional int64 curdiamoand = 8;
      case 8: {
        if (tag == 64) {
         parse_curdiamoand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curdiamoand_)));
          set_has_curdiamoand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curgold;
        break;
      }

      // optional int64 curgold = 9;
      case 9: {
        if (tag == 72) {
         parse_curgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curgold_)));
          set_has_curgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 11;
      case 11: {
        if (tag == 88) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ifreconnect;
        break;
      }

      // optional bool ifreconnect = 12;
      case 12: {
        if (tag == 96) {
         parse_ifreconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifreconnect_)));
          set_has_ifreconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 13;
      case 13: {
        if (tag == 104) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_level;
        break;
      }

      // optional int32 level = 14;
      case 14: {
        if (tag == 112) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 15;
      case 15: {
        if (tag == 120) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_vip_score;
        break;
      }

      // optional int32 vip_score = 16;
      case 16: {
        if (tag == 128) {
         parse_vip_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_score_)));
          set_has_vip_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cur_exp;
        break;
      }

      // optional int32 cur_exp = 17;
      case 17: {
        if (tag == 136) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.UserBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.UserBaseInfo)
  return false;
#undef DO_
}

void UserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.UserBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 headid = 5;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headid(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional int64 curscore = 7;
  if (has_curscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->curscore(), output);
  }

  // optional int64 curdiamoand = 8;
  if (has_curdiamoand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->curdiamoand(), output);
  }

  // optional int64 curgold = 9;
  if (has_curgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->curgold(), output);
  }

  // optional int32 mapid = 11;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mapid(), output);
  }

  // optional bool ifreconnect = 12;
  if (has_ifreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ifreconnect(), output);
  }

  // optional uint64 battleid = 13;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->battleid(), output);
  }

  // optional int32 level = 14;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->level(), output);
  }

  // optional int32 vip_level = 15;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->vip_level(), output);
  }

  // optional int32 vip_score = 16;
  if (has_vip_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->vip_score(), output);
  }

  // optional int32 cur_exp = 17;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cur_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.UserBaseInfo)
}

::google::protobuf::uint8* UserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.UserBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 headid = 5;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headid(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional int64 curscore = 7;
  if (has_curscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->curscore(), target);
  }

  // optional int64 curdiamoand = 8;
  if (has_curdiamoand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->curdiamoand(), target);
  }

  // optional int64 curgold = 9;
  if (has_curgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->curgold(), target);
  }

  // optional int32 mapid = 11;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mapid(), target);
  }

  // optional bool ifreconnect = 12;
  if (has_ifreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ifreconnect(), target);
  }

  // optional uint64 battleid = 13;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->battleid(), target);
  }

  // optional int32 level = 14;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->level(), target);
  }

  // optional int32 vip_level = 15;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->vip_level(), target);
  }

  // optional int32 vip_score = 16;
  if (has_vip_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->vip_score(), target);
  }

  // optional int32 cur_exp = 17;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cur_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.UserBaseInfo)
  return target;
}

int UserBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserBaseInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 headid = 5;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int64 curscore = 7;
    if (has_curscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curscore());
    }

    // optional int64 curdiamoand = 8;
    if (has_curdiamoand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curdiamoand());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 curgold = 9;
    if (has_curgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curgold());
    }

    // optional int32 mapid = 11;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional bool ifreconnect = 12;
    if (has_ifreconnect()) {
      total_size += 1 + 1;
    }

    // optional uint64 battleid = 13;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

    // optional int32 level = 14;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vip_level = 15;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 vip_score = 16;
    if (has_vip_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_score());
    }

    // optional int32 cur_exp = 17;
    if (has_cur_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseInfo::MergeFrom(const UserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_curscore()) {
      set_curscore(from.curscore());
    }
    if (from.has_curdiamoand()) {
      set_curdiamoand(from.curdiamoand());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curgold()) {
      set_curgold(from.curgold());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ifreconnect()) {
      set_ifreconnect(from.ifreconnect());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_score()) {
      set_vip_score(from.vip_score());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {

  return true;
}

void UserBaseInfo::Swap(UserBaseInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(sex_, other->sex_);
    std::swap(curscore_, other->curscore_);
    std::swap(curdiamoand_, other->curdiamoand_);
    std::swap(curgold_, other->curgold_);
    std::swap(mapid_, other->mapid_);
    std::swap(ifreconnect_, other->ifreconnect_);
    std::swap(battleid_, other->battleid_);
    std::swap(level_, other->level_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_score_, other->vip_score_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseInfo_descriptor_;
  metadata.reflection = UserBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySystemAnnounce::kMsgidFieldNumber;
const int NotifySystemAnnounce::kTypeFieldNumber;
const int NotifySystemAnnounce::kAnnounceFieldNumber;
#endif  // !_MSC_VER

NotifySystemAnnounce::NotifySystemAnnounce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySystemAnnounce)
}

void NotifySystemAnnounce::InitAsDefaultInstance() {
}

NotifySystemAnnounce::NotifySystemAnnounce(const NotifySystemAnnounce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySystemAnnounce)
}

void NotifySystemAnnounce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 3;
  type_ = 0;
  announce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySystemAnnounce::~NotifySystemAnnounce() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySystemAnnounce)
  SharedDtor();
}

void NotifySystemAnnounce::SharedDtor() {
  if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete announce_;
  }
  if (this != default_instance_) {
  }
}

void NotifySystemAnnounce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySystemAnnounce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySystemAnnounce_descriptor_;
}

const NotifySystemAnnounce& NotifySystemAnnounce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySystemAnnounce* NotifySystemAnnounce::default_instance_ = NULL;

NotifySystemAnnounce* NotifySystemAnnounce::New() const {
  return new NotifySystemAnnounce;
}

void NotifySystemAnnounce::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 3;
    type_ = 0;
    if (has_announce()) {
      if (announce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        announce_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySystemAnnounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySystemAnnounce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySystemAnnounce];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_announce;
        break;
      }

      // optional string announce = 3;
      case 3: {
        if (tag == 26) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announce().data(), this->announce().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "announce");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySystemAnnounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySystemAnnounce)
  return false;
#undef DO_
}

void NotifySystemAnnounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySystemAnnounce)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySystemAnnounce];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string announce = 3;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announce().data(), this->announce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "announce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->announce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySystemAnnounce)
}

::google::protobuf::uint8* NotifySystemAnnounce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySystemAnnounce)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySystemAnnounce];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string announce = 3;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announce().data(), this->announce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "announce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->announce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySystemAnnounce)
  return target;
}

int NotifySystemAnnounce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySystemAnnounce];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string announce = 3;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySystemAnnounce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySystemAnnounce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySystemAnnounce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySystemAnnounce::MergeFrom(const NotifySystemAnnounce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_announce()) {
      set_announce(from.announce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySystemAnnounce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySystemAnnounce::CopyFrom(const NotifySystemAnnounce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySystemAnnounce::IsInitialized() const {

  return true;
}

void NotifySystemAnnounce::Swap(NotifySystemAnnounce* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(announce_, other->announce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySystemAnnounce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySystemAnnounce_descriptor_;
  metadata.reflection = NotifySystemAnnounce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetClash::kMsgidFieldNumber;
#endif  // !_MSC_VER

NetClash::NetClash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NetClash)
}

void NetClash::InitAsDefaultInstance() {
}

NetClash::NetClash(const NetClash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NetClash)
}

void NetClash::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetClash::~NetClash() {
  // @@protoc_insertion_point(destructor:GSToGC.NetClash)
  SharedDtor();
}

void NetClash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetClash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetClash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetClash_descriptor_;
}

const NetClash& NetClash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NetClash* NetClash::default_instance_ = NULL;

NetClash* NetClash::New() const {
  return new NetClash;
}

void NetClash::Clear() {
  msgid_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetClash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NetClash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNetClash];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NetClash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NetClash)
  return false;
#undef DO_
}

void NetClash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NetClash)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNetClash];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NetClash)
}

::google::protobuf::uint8* NetClash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NetClash)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNetClash];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NetClash)
  return target;
}

int NetClash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyNetClash];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetClash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetClash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetClash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetClash::MergeFrom(const NetClash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetClash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetClash::CopyFrom(const NetClash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetClash::IsInitialized() const {

  return true;
}

void NetClash::Swap(NetClash* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetClash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetClash_descriptor_;
  metadata.reflection = NetClash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarningToSelectHero::kMsgidFieldNumber;
#endif  // !_MSC_VER

WarningToSelectHero::WarningToSelectHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.WarningToSelectHero)
}

void WarningToSelectHero::InitAsDefaultInstance() {
}

WarningToSelectHero::WarningToSelectHero(const WarningToSelectHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.WarningToSelectHero)
}

void WarningToSelectHero::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 66;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningToSelectHero::~WarningToSelectHero() {
  // @@protoc_insertion_point(destructor:GSToGC.WarningToSelectHero)
  SharedDtor();
}

void WarningToSelectHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningToSelectHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningToSelectHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningToSelectHero_descriptor_;
}

const WarningToSelectHero& WarningToSelectHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

WarningToSelectHero* WarningToSelectHero::default_instance_ = NULL;

WarningToSelectHero* WarningToSelectHero::New() const {
  return new WarningToSelectHero;
}

void WarningToSelectHero::Clear() {
  msgid_ = 66;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningToSelectHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.WarningToSelectHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_WarningToSelectHero];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.WarningToSelectHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.WarningToSelectHero)
  return false;
#undef DO_
}

void WarningToSelectHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.WarningToSelectHero)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_WarningToSelectHero];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.WarningToSelectHero)
}

::google::protobuf::uint8* WarningToSelectHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.WarningToSelectHero)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_WarningToSelectHero];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.WarningToSelectHero)
  return target;
}

int WarningToSelectHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_WarningToSelectHero];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningToSelectHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningToSelectHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningToSelectHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningToSelectHero::MergeFrom(const WarningToSelectHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningToSelectHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningToSelectHero::CopyFrom(const WarningToSelectHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningToSelectHero::IsInitialized() const {

  return true;
}

void WarningToSelectHero::Swap(WarningToSelectHero* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningToSelectHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningToSelectHero_descriptor_;
  metadata.reflection = WarningToSelectHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelLeading::kMsgidFieldNumber;
const int NotifySkillModelLeading::kGuidFieldNumber;
const int NotifySkillModelLeading::kEffectidFieldNumber;
const int NotifySkillModelLeading::kUniqueidFieldNumber;
const int NotifySkillModelLeading::kTarguidFieldNumber;
const int NotifySkillModelLeading::kStateFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelLeading::NotifySkillModelLeading()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelLeading)
}

void NotifySkillModelLeading::InitAsDefaultInstance() {
}

NotifySkillModelLeading::NotifySkillModelLeading(const NotifySkillModelLeading& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelLeading)
}

void NotifySkillModelLeading::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 74;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  uniqueid_ = 0;
  targuid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelLeading::~NotifySkillModelLeading() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelLeading)
  SharedDtor();
}

void NotifySkillModelLeading::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySkillModelLeading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelLeading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelLeading_descriptor_;
}

const NotifySkillModelLeading& NotifySkillModelLeading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelLeading* NotifySkillModelLeading::default_instance_ = NULL;

NotifySkillModelLeading* NotifySkillModelLeading::New() const {
  return new NotifySkillModelLeading;
}

void NotifySkillModelLeading::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifySkillModelLeading*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(effectid_, state_);
    msgid_ = 74;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelLeading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelLeading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelLeading];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 5;
      case 5: {
        if (tag == 40) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelLeading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelLeading)
  return false;
#undef DO_
}

void NotifySkillModelLeading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelLeading)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelLeading];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uniqueid(), output);
  }

  // optional uint64 targuid = 5;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->targuid(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelLeading)
}

::google::protobuf::uint8* NotifySkillModelLeading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelLeading)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelLeading];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uniqueid(), target);
  }

  // optional uint64 targuid = 5;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->targuid(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelLeading)
  return target;
}

int NotifySkillModelLeading::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelLeading];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional int32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

    // optional uint64 targuid = 5;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelLeading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelLeading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelLeading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelLeading::MergeFrom(const NotifySkillModelLeading& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelLeading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelLeading::CopyFrom(const NotifySkillModelLeading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelLeading::IsInitialized() const {

  return true;
}

void NotifySkillModelLeading::Swap(NotifySkillModelLeading* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(targuid_, other->targuid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelLeading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelLeading_descriptor_;
  metadata.reflection = NotifySkillModelLeading_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRet::kMsgidFieldNumber;
const int AskRet::kAskidFieldNumber;
const int AskRet::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

AskRet::AskRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.AskRet)
}

void AskRet::InitAsDefaultInstance() {
}

AskRet::AskRet(const AskRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.AskRet)
}

void AskRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 5;
  askid_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRet::~AskRet() {
  // @@protoc_insertion_point(destructor:GSToGC.AskRet)
  SharedDtor();
}

void AskRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRet_descriptor_;
}

const AskRet& AskRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

AskRet* AskRet::default_instance_ = NULL;

AskRet* AskRet::New() const {
  return new AskRet;
}

void AskRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AskRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(askid_, errorcode_);
    msgid_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.AskRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_askid;
        break;
      }

      // optional int32 askid = 2;
      case 2: {
        if (tag == 16) {
         parse_askid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askid_)));
          set_has_askid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorcode;
        break;
      }

      // optional int32 errorcode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.AskRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.AskRet)
  return false;
#undef DO_
}

void AskRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.AskRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 askid = 2;
  if (has_askid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->askid(), output);
  }

  // optional int32 errorcode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.AskRet)
}

::google::protobuf::uint8* AskRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.AskRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 askid = 2;
  if (has_askid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->askid(), target);
  }

  // optional int32 errorcode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.AskRet)
  return target;
}

int AskRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_GCAskRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 askid = 2;
    if (has_askid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askid());
    }

    // optional int32 errorcode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRet::MergeFrom(const AskRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_askid()) {
      set_askid(from.askid());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRet::CopyFrom(const AskRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRet::IsInitialized() const {

  return true;
}

void AskRet::Swap(AskRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(askid_, other->askid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRet_descriptor_;
  metadata.reflection = AskRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCSHeroList_HeroListCfg::kHeroidFieldNumber;
const int NotifyCSHeroList_HeroListCfg::kExpiredTimeFieldNumber;
const int NotifyCSHeroList_HeroListCfg::kIfFreeFieldNumber;
#endif  // !_MSC_VER

NotifyCSHeroList_HeroListCfg::NotifyCSHeroList_HeroListCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyCSHeroList.HeroListCfg)
}

void NotifyCSHeroList_HeroListCfg::InitAsDefaultInstance() {
}

NotifyCSHeroList_HeroListCfg::NotifyCSHeroList_HeroListCfg(const NotifyCSHeroList_HeroListCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyCSHeroList.HeroListCfg)
}

void NotifyCSHeroList_HeroListCfg::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  expired_time_ = GOOGLE_LONGLONG(0);
  if_free_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCSHeroList_HeroListCfg::~NotifyCSHeroList_HeroListCfg() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyCSHeroList.HeroListCfg)
  SharedDtor();
}

void NotifyCSHeroList_HeroListCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCSHeroList_HeroListCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCSHeroList_HeroListCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCSHeroList_HeroListCfg_descriptor_;
}

const NotifyCSHeroList_HeroListCfg& NotifyCSHeroList_HeroListCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyCSHeroList_HeroListCfg* NotifyCSHeroList_HeroListCfg::default_instance_ = NULL;

NotifyCSHeroList_HeroListCfg* NotifyCSHeroList_HeroListCfg::New() const {
  return new NotifyCSHeroList_HeroListCfg;
}

void NotifyCSHeroList_HeroListCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyCSHeroList_HeroListCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(expired_time_, if_free_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCSHeroList_HeroListCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyCSHeroList.HeroListCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expired_time;
        break;
      }

      // optional int64 expired_time = 2;
      case 2: {
        if (tag == 16) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_if_free;
        break;
      }

      // optional bool if_free = 3;
      case 3: {
        if (tag == 24) {
         parse_if_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &if_free_)));
          set_has_if_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyCSHeroList.HeroListCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyCSHeroList.HeroListCfg)
  return false;
#undef DO_
}

void NotifyCSHeroList_HeroListCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyCSHeroList.HeroListCfg)
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional int64 expired_time = 2;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expired_time(), output);
  }

  // optional bool if_free = 3;
  if (has_if_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->if_free(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyCSHeroList.HeroListCfg)
}

::google::protobuf::uint8* NotifyCSHeroList_HeroListCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyCSHeroList.HeroListCfg)
  // optional uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional int64 expired_time = 2;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expired_time(), target);
  }

  // optional bool if_free = 3;
  if (has_if_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->if_free(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyCSHeroList.HeroListCfg)
  return target;
}

int NotifyCSHeroList_HeroListCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional int64 expired_time = 2;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expired_time());
    }

    // optional bool if_free = 3;
    if (has_if_free()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCSHeroList_HeroListCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCSHeroList_HeroListCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCSHeroList_HeroListCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCSHeroList_HeroListCfg::MergeFrom(const NotifyCSHeroList_HeroListCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
    if (from.has_if_free()) {
      set_if_free(from.if_free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCSHeroList_HeroListCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCSHeroList_HeroListCfg::CopyFrom(const NotifyCSHeroList_HeroListCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCSHeroList_HeroListCfg::IsInitialized() const {

  return true;
}

void NotifyCSHeroList_HeroListCfg::Swap(NotifyCSHeroList_HeroListCfg* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(if_free_, other->if_free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCSHeroList_HeroListCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCSHeroList_HeroListCfg_descriptor_;
  metadata.reflection = NotifyCSHeroList_HeroListCfg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyCSHeroList::kMsgidFieldNumber;
const int NotifyCSHeroList::kHerocfgFieldNumber;
#endif  // !_MSC_VER

NotifyCSHeroList::NotifyCSHeroList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyCSHeroList)
}

void NotifyCSHeroList::InitAsDefaultInstance() {
}

NotifyCSHeroList::NotifyCSHeroList(const NotifyCSHeroList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyCSHeroList)
}

void NotifyCSHeroList::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 221;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCSHeroList::~NotifyCSHeroList() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyCSHeroList)
  SharedDtor();
}

void NotifyCSHeroList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCSHeroList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCSHeroList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCSHeroList_descriptor_;
}

const NotifyCSHeroList& NotifyCSHeroList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyCSHeroList* NotifyCSHeroList::default_instance_ = NULL;

NotifyCSHeroList* NotifyCSHeroList::New() const {
  return new NotifyCSHeroList;
}

void NotifyCSHeroList::Clear() {
  msgid_ = 221;
  herocfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCSHeroList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyCSHeroList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCSHeroList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_herocfg;
        break;
      }

      // repeated .GSToGC.NotifyCSHeroList.HeroListCfg herocfg = 2;
      case 2: {
        if (tag == 18) {
         parse_herocfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herocfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_herocfg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyCSHeroList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyCSHeroList)
  return false;
#undef DO_
}

void NotifyCSHeroList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyCSHeroList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCSHeroList];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.NotifyCSHeroList.HeroListCfg herocfg = 2;
  for (int i = 0; i < this->herocfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->herocfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyCSHeroList)
}

::google::protobuf::uint8* NotifyCSHeroList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyCSHeroList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCSHeroList];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.NotifyCSHeroList.HeroListCfg herocfg = 2;
  for (int i = 0; i < this->herocfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->herocfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyCSHeroList)
  return target;
}

int NotifyCSHeroList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCSHeroList];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.NotifyCSHeroList.HeroListCfg herocfg = 2;
  total_size += 1 * this->herocfg_size();
  for (int i = 0; i < this->herocfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herocfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCSHeroList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCSHeroList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCSHeroList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCSHeroList::MergeFrom(const NotifyCSHeroList& from) {
  GOOGLE_CHECK_NE(&from, this);
  herocfg_.MergeFrom(from.herocfg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCSHeroList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCSHeroList::CopyFrom(const NotifyCSHeroList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCSHeroList::IsInitialized() const {

  return true;
}

void NotifyCSHeroList::Swap(NotifyCSHeroList* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    herocfg_.Swap(&other->herocfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCSHeroList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCSHeroList_descriptor_;
  metadata.reflection = NotifyCSHeroList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroList::kMsgidFieldNumber;
const int HeroList::kHeroidFieldNumber;
const int HeroList::kTimeDiffFieldNumber;
#endif  // !_MSC_VER

HeroList::HeroList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroList)
}

void HeroList::InitAsDefaultInstance() {
}

HeroList::HeroList(const HeroList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroList)
}

void HeroList::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 7;
  timediff_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroList::~HeroList() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroList)
  SharedDtor();
}

void HeroList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroList_descriptor_;
}

const HeroList& HeroList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroList* HeroList::default_instance_ = NULL;

HeroList* HeroList::New() const {
  return new HeroList;
}

void HeroList::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    msgid_ = 7;
    timediff_ = GOOGLE_LONGLONG(0);
  }
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroList];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // repeated uint32 heroid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        if (input->ExpectTag(24)) goto parse_timeDiff;
        break;
      }

      // optional int64 timeDiff = 3;
      case 3: {
        if (tag == 24) {
         parse_timeDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timediff_)));
          set_has_timediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroList)
  return false;
#undef DO_
}

void HeroList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroList];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroid(i), output);
  }

  // optional int64 timeDiff = 3;
  if (has_timediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timediff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroList)
}

::google::protobuf::uint8* HeroList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroList)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroList];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroid(i), target);
  }

  // optional int64 timeDiff = 3;
  if (has_timediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timediff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroList)
  return target;
}

int HeroList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroList];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 timeDiff = 3;
    if (has_timediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timediff());
    }

  }
  // repeated uint32 heroid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroList::MergeFrom(const HeroList& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_timediff()) {
      set_timediff(from.timediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroList::CopyFrom(const HeroList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroList::IsInitialized() const {

  return true;
}

void HeroList::Swap(HeroList* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    heroid_.Swap(&other->heroid_);
    std::swap(timediff_, other->timediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroList_descriptor_;
  metadata.reflection = HeroList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleBaseInfo::kMsgidFieldNumber;
const int BattleBaseInfo::kBattleidFieldNumber;
const int BattleBaseInfo::kMapidFieldNumber;
const int BattleBaseInfo::kIfReconnectFieldNumber;
#endif  // !_MSC_VER

BattleBaseInfo::BattleBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleBaseInfo)
}

void BattleBaseInfo::InitAsDefaultInstance() {
}

BattleBaseInfo::BattleBaseInfo(const BattleBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleBaseInfo)
}

void BattleBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 8;
  battleid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ifreconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleBaseInfo::~BattleBaseInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleBaseInfo)
  SharedDtor();
}

void BattleBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleBaseInfo_descriptor_;
}

const BattleBaseInfo& BattleBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleBaseInfo* BattleBaseInfo::default_instance_ = NULL;

BattleBaseInfo* BattleBaseInfo::New() const {
  return new BattleBaseInfo;
}

void BattleBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mapid_, ifreconnect_);
    msgid_ = 8;
    battleid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleBaseInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 2;
      case 2: {
        if (tag == 16) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifReconnect;
        break;
      }

      // optional bool ifReconnect = 4;
      case 4: {
        if (tag == 32) {
         parse_ifReconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifreconnect_)));
          set_has_ifreconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleBaseInfo)
  return false;
#undef DO_
}

void BattleBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleBaseInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battleid(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional bool ifReconnect = 4;
  if (has_ifreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ifreconnect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleBaseInfo)
}

::google::protobuf::uint8* BattleBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleBaseInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battleid(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional bool ifReconnect = 4;
  if (has_ifreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ifreconnect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleBaseInfo)
  return target;
}

int BattleBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleBaseInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bool ifReconnect = 4;
    if (has_ifreconnect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleBaseInfo::MergeFrom(const BattleBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ifreconnect()) {
      set_ifreconnect(from.ifreconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleBaseInfo::CopyFrom(const BattleBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleBaseInfo::IsInitialized() const {

  return true;
}

void BattleBaseInfo::Swap(BattleBaseInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(ifreconnect_, other->ifreconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleBaseInfo_descriptor_;
  metadata.reflection = BattleBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBaseInfo::kMsgidFieldNumber;
const int RoomBaseInfo::kRoomidFieldNumber;
const int RoomBaseInfo::kMapidFieldNumber;
#endif  // !_MSC_VER

RoomBaseInfo::RoomBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RoomBaseInfo)
}

void RoomBaseInfo::InitAsDefaultInstance() {
}

RoomBaseInfo::RoomBaseInfo(const RoomBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RoomBaseInfo)
}

void RoomBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 140;
  roomid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBaseInfo::~RoomBaseInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.RoomBaseInfo)
  SharedDtor();
}

void RoomBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBaseInfo_descriptor_;
}

const RoomBaseInfo& RoomBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RoomBaseInfo* RoomBaseInfo::default_instance_ = NULL;

RoomBaseInfo* RoomBaseInfo::New() const {
  return new RoomBaseInfo;
}

void RoomBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 140;
    roomid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RoomBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRoomBaseInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 2;
      case 2: {
        if (tag == 16) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RoomBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RoomBaseInfo)
  return false;
#undef DO_
}

void RoomBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RoomBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRoomBaseInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RoomBaseInfo)
}

::google::protobuf::uint8* RoomBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RoomBaseInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRoomBaseInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RoomBaseInfo)
  return target;
}

int RoomBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyRoomBaseInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBaseInfo::MergeFrom(const RoomBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBaseInfo::CopyFrom(const RoomBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBaseInfo::IsInitialized() const {

  return true;
}

void RoomBaseInfo::Swap(RoomBaseInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(roomid_, other->roomid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBaseInfo_descriptor_;
  metadata.reflection = RoomBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSeatPosInfo_PosInfo::kPosFieldNumber;
const int BattleSeatPosInfo_PosInfo::kGuidFieldNumber;
const int BattleSeatPosInfo_PosInfo::kNicknameFieldNumber;
const int BattleSeatPosInfo_PosInfo::kIfmasterFieldNumber;
const int BattleSeatPosInfo_PosInfo::kIfreadyFieldNumber;
const int BattleSeatPosInfo_PosInfo::kHeadidFieldNumber;
const int BattleSeatPosInfo_PosInfo::kGoldFieldNumber;
#endif  // !_MSC_VER

BattleSeatPosInfo_PosInfo::BattleSeatPosInfo_PosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleSeatPosInfo.PosInfo)
}

void BattleSeatPosInfo_PosInfo::InitAsDefaultInstance() {
}

BattleSeatPosInfo_PosInfo::BattleSeatPosInfo_PosInfo(const BattleSeatPosInfo_PosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleSeatPosInfo.PosInfo)
}

void BattleSeatPosInfo_PosInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pos_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ifmaster_ = false;
  ifready_ = false;
  headid_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSeatPosInfo_PosInfo::~BattleSeatPosInfo_PosInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleSeatPosInfo.PosInfo)
  SharedDtor();
}

void BattleSeatPosInfo_PosInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void BattleSeatPosInfo_PosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSeatPosInfo_PosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSeatPosInfo_PosInfo_descriptor_;
}

const BattleSeatPosInfo_PosInfo& BattleSeatPosInfo_PosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleSeatPosInfo_PosInfo* BattleSeatPosInfo_PosInfo::default_instance_ = NULL;

BattleSeatPosInfo_PosInfo* BattleSeatPosInfo_PosInfo::New() const {
  return new BattleSeatPosInfo_PosInfo;
}

void BattleSeatPosInfo_PosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleSeatPosInfo_PosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(pos_, headid_);
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSeatPosInfo_PosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleSeatPosInfo.PosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifmaster;
        break;
      }

      // optional bool ifmaster = 4;
      case 4: {
        if (tag == 32) {
         parse_ifmaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifmaster_)));
          set_has_ifmaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifready;
        break;
      }

      // optional bool ifready = 5;
      case 5: {
        if (tag == 40) {
         parse_ifready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifready_)));
          set_has_ifready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_headid;
        break;
      }

      // optional int32 headid = 6;
      case 6: {
        if (tag == 48) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional int64 gold = 7;
      case 7: {
        if (tag == 56) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleSeatPosInfo.PosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleSeatPosInfo.PosInfo)
  return false;
#undef DO_
}

void BattleSeatPosInfo_PosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleSeatPosInfo.PosInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional bool ifmaster = 4;
  if (has_ifmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ifmaster(), output);
  }

  // optional bool ifready = 5;
  if (has_ifready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ifready(), output);
  }

  // optional int32 headid = 6;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->headid(), output);
  }

  // optional int64 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleSeatPosInfo.PosInfo)
}

::google::protobuf::uint8* BattleSeatPosInfo_PosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleSeatPosInfo.PosInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional bool ifmaster = 4;
  if (has_ifmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ifmaster(), target);
  }

  // optional bool ifready = 5;
  if (has_ifready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ifready(), target);
  }

  // optional int32 headid = 6;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->headid(), target);
  }

  // optional int64 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleSeatPosInfo.PosInfo)
  return target;
}

int BattleSeatPosInfo_PosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional bool ifmaster = 4;
    if (has_ifmaster()) {
      total_size += 1 + 1;
    }

    // optional bool ifready = 5;
    if (has_ifready()) {
      total_size += 1 + 1;
    }

    // optional int32 headid = 6;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSeatPosInfo_PosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSeatPosInfo_PosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSeatPosInfo_PosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSeatPosInfo_PosInfo::MergeFrom(const BattleSeatPosInfo_PosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_ifmaster()) {
      set_ifmaster(from.ifmaster());
    }
    if (from.has_ifready()) {
      set_ifready(from.ifready());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSeatPosInfo_PosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSeatPosInfo_PosInfo::CopyFrom(const BattleSeatPosInfo_PosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSeatPosInfo_PosInfo::IsInitialized() const {

  return true;
}

void BattleSeatPosInfo_PosInfo::Swap(BattleSeatPosInfo_PosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(guid_, other->guid_);
    std::swap(nickname_, other->nickname_);
    std::swap(ifmaster_, other->ifmaster_);
    std::swap(ifready_, other->ifready_);
    std::swap(headid_, other->headid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSeatPosInfo_PosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSeatPosInfo_PosInfo_descriptor_;
  metadata.reflection = BattleSeatPosInfo_PosInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BattleSeatPosInfo::kMsgidFieldNumber;
const int BattleSeatPosInfo::kPosinfoFieldNumber;
#endif  // !_MSC_VER

BattleSeatPosInfo::BattleSeatPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleSeatPosInfo)
}

void BattleSeatPosInfo::InitAsDefaultInstance() {
}

BattleSeatPosInfo::BattleSeatPosInfo(const BattleSeatPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleSeatPosInfo)
}

void BattleSeatPosInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSeatPosInfo::~BattleSeatPosInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleSeatPosInfo)
  SharedDtor();
}

void BattleSeatPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSeatPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSeatPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSeatPosInfo_descriptor_;
}

const BattleSeatPosInfo& BattleSeatPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleSeatPosInfo* BattleSeatPosInfo::default_instance_ = NULL;

BattleSeatPosInfo* BattleSeatPosInfo::New() const {
  return new BattleSeatPosInfo;
}

void BattleSeatPosInfo::Clear() {
  msgid_ = 9;
  posinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSeatPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleSeatPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_posinfo;
        break;
      }

      // repeated .GSToGC.BattleSeatPosInfo.PosInfo posinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_posinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_posinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_posinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleSeatPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleSeatPosInfo)
  return false;
#undef DO_
}

void BattleSeatPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleSeatPosInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.BattleSeatPosInfo.PosInfo posinfo = 2;
  for (int i = 0; i < this->posinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->posinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleSeatPosInfo)
}

::google::protobuf::uint8* BattleSeatPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleSeatPosInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.BattleSeatPosInfo.PosInfo posinfo = 2;
  for (int i = 0; i < this->posinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->posinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleSeatPosInfo)
  return target;
}

int BattleSeatPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.BattleSeatPosInfo.PosInfo posinfo = 2;
  total_size += 1 * this->posinfo_size();
  for (int i = 0; i < this->posinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->posinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSeatPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSeatPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSeatPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSeatPosInfo::MergeFrom(const BattleSeatPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  posinfo_.MergeFrom(from.posinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSeatPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSeatPosInfo::CopyFrom(const BattleSeatPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSeatPosInfo::IsInitialized() const {

  return true;
}

void BattleSeatPosInfo::Swap(BattleSeatPosInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    posinfo_.Swap(&other->posinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSeatPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSeatPosInfo_descriptor_;
  metadata.reflection = BattleSeatPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStateChange::kMsgidFieldNumber;
const int BattleStateChange::kStateFieldNumber;
const int BattleStateChange::kStatetimeleftFieldNumber;
#endif  // !_MSC_VER

BattleStateChange::BattleStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleStateChange)
}

void BattleStateChange::InitAsDefaultInstance() {
}

BattleStateChange::BattleStateChange(const BattleStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleStateChange)
}

void BattleStateChange::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 10;
  state_ = 0;
  statetimeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStateChange::~BattleStateChange() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleStateChange)
  SharedDtor();
}

void BattleStateChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleStateChange_descriptor_;
}

const BattleStateChange& BattleStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleStateChange* BattleStateChange::default_instance_ = NULL;

BattleStateChange* BattleStateChange::New() const {
  return new BattleStateChange;
}

void BattleStateChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleStateChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, statetimeleft_);
    msgid_ = 10;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleStateChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleStateChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_statetimeleft;
        break;
      }

      // optional int32 statetimeleft = 3;
      case 3: {
        if (tag == 24) {
         parse_statetimeleft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statetimeleft_)));
          set_has_statetimeleft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleStateChange)
  return false;
#undef DO_
}

void BattleStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleStateChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleStateChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 statetimeleft = 3;
  if (has_statetimeleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->statetimeleft(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleStateChange)
}

::google::protobuf::uint8* BattleStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleStateChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleStateChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 statetimeleft = 3;
  if (has_statetimeleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->statetimeleft(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleStateChange)
  return target;
}

int BattleStateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleStateChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 statetimeleft = 3;
    if (has_statetimeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statetimeleft());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleStateChange::MergeFrom(const BattleStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_statetimeleft()) {
      set_statetimeleft(from.statetimeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStateChange::CopyFrom(const BattleStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStateChange::IsInitialized() const {

  return true;
}

void BattleStateChange::Swap(BattleStateChange* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(state_, other->state_);
    std::swap(statetimeleft_, other->statetimeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleStateChange_descriptor_;
  metadata.reflection = BattleStateChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurBattleChange::kMsgidFieldNumber;
const int CurBattleChange::kSsidFieldNumber;
const int CurBattleChange::kBattleidFieldNumber;
const int CurBattleChange::kMapidFieldNumber;
#endif  // !_MSC_VER

CurBattleChange::CurBattleChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CurBattleChange)
}

void CurBattleChange::InitAsDefaultInstance() {
}

CurBattleChange::CurBattleChange(const CurBattleChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CurBattleChange)
}

void CurBattleChange::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 11;
  ssid_ = 0;
  battleid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurBattleChange::~CurBattleChange() {
  // @@protoc_insertion_point(destructor:GSToGC.CurBattleChange)
  SharedDtor();
}

void CurBattleChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurBattleChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurBattleChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurBattleChange_descriptor_;
}

const CurBattleChange& CurBattleChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CurBattleChange* CurBattleChange::default_instance_ = NULL;

CurBattleChange* CurBattleChange::New() const {
  return new CurBattleChange;
}

void CurBattleChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurBattleChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ssid_, mapid_);
    msgid_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurBattleChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CurBattleChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurBattleChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battleid;
        break;
      }

      // optional uint64 battleid = 3;
      case 3: {
        if (tag == 24) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CurBattleChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CurBattleChange)
  return false;
#undef DO_
}

void CurBattleChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CurBattleChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurBattleChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional uint64 battleid = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleid(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CurBattleChange)
}

::google::protobuf::uint8* CurBattleChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CurBattleChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurBattleChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ssid(), target);
  }

  // optional uint64 battleid = 3;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleid(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CurBattleChange)
  return target;
}

int CurBattleChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurBattleChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional uint64 battleid = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleid());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurBattleChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurBattleChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurBattleChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurBattleChange::MergeFrom(const CurBattleChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurBattleChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurBattleChange::CopyFrom(const CurBattleChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurBattleChange::IsInitialized() const {

  return true;
}

void CurBattleChange::Swap(CurBattleChange* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(ssid_, other->ssid_);
    std::swap(battleid_, other->battleid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurBattleChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurBattleChange_descriptor_;
  metadata.reflection = CurBattleChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kZFieldNumber;
#endif  // !_MSC_VER

Pos::Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.Pos)
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.Pos)
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:GSToGC.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.Pos)
  return false;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.Pos)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.Pos)
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.Pos)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.Pos)
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {

  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dir::kAngleFieldNumber;
#endif  // !_MSC_VER

Dir::Dir()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.Dir)
}

void Dir::InitAsDefaultInstance() {
}

Dir::Dir(const Dir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.Dir)
}

void Dir::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dir::~Dir() {
  // @@protoc_insertion_point(destructor:GSToGC.Dir)
  SharedDtor();
}

void Dir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dir_descriptor_;
}

const Dir& Dir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

Dir* Dir::default_instance_ = NULL;

Dir* Dir::New() const {
  return new Dir;
}

void Dir::Clear() {
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.Dir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 angle = 4;
      case 4: {
        if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.Dir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.Dir)
  return false;
#undef DO_
}

void Dir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.Dir)
  // optional int32 angle = 4;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.Dir)
}

::google::protobuf::uint8* Dir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.Dir)
  // optional int32 angle = 4;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.Dir)
  return target;
}

int Dir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 angle = 4;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dir::MergeFrom(const Dir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dir::CopyFrom(const Dir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dir::IsInitialized() const {

  return true;
}

void Dir::Swap(Dir* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dir_descriptor_;
  metadata.reflection = Dir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GOAppear_AppearInfo::kMasterguidFieldNumber;
const int GOAppear_AppearInfo::kObjguidFieldNumber;
const int GOAppear_AppearInfo::kCampFieldNumber;
const int GOAppear_AppearInfo::kPosFieldNumber;
const int GOAppear_AppearInfo::kDirFieldNumber;
const int GOAppear_AppearInfo::kHpFieldNumber;
const int GOAppear_AppearInfo::kMpFieldNumber;
const int GOAppear_AppearInfo::kObjTypeFieldNumber;
const int GOAppear_AppearInfo::kObjTypeIdFieldNumber;
#endif  // !_MSC_VER

GOAppear_AppearInfo::GOAppear_AppearInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GOAppear.AppearInfo)
}

void GOAppear_AppearInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

GOAppear_AppearInfo::GOAppear_AppearInfo(const GOAppear_AppearInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GOAppear.AppearInfo)
}

void GOAppear_AppearInfo::SharedCtor() {
  _cached_size_ = 0;
  masterguid_ = GOOGLE_ULONGLONG(0);
  objguid_ = GOOGLE_ULONGLONG(0);
  camp_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  hp_ = 0u;
  mp_ = 0u;
  obj_type_ = 1;
  obj_type_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GOAppear_AppearInfo::~GOAppear_AppearInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.GOAppear.AppearInfo)
  SharedDtor();
}

void GOAppear_AppearInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void GOAppear_AppearInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GOAppear_AppearInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GOAppear_AppearInfo_descriptor_;
}

const GOAppear_AppearInfo& GOAppear_AppearInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GOAppear_AppearInfo* GOAppear_AppearInfo::default_instance_ = NULL;

GOAppear_AppearInfo* GOAppear_AppearInfo::New() const {
  return new GOAppear_AppearInfo;
}

void GOAppear_AppearInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GOAppear_AppearInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(masterguid_, objguid_);
    ZR_(camp_, hp_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    mp_ = 0u;
    obj_type_ = 1;
  }
  obj_type_id_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GOAppear_AppearInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GOAppear.AppearInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 masterguid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterguid_)));
          set_has_masterguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_camp;
        break;
      }

      // optional int32 camp = 3;
      case 3: {
        if (tag == 24) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 6;
      case 6: {
        if (tag == 48) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 7;
      case 7: {
        if (tag == 56) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_obj_type;
        break;
      }

      // optional .GSToGC.ObjType obj_type = 8;
      case 8: {
        if (tag == 64) {
         parse_obj_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::ObjType_IsValid(value)) {
            set_obj_type(static_cast< ::GSToGC::ObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_obj_type_id;
        break;
      }

      // optional uint32 obj_type_id = 9;
      case 9: {
        if (tag == 72) {
         parse_obj_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_type_id_)));
          set_has_obj_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GOAppear.AppearInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GOAppear.AppearInfo)
  return false;
#undef DO_
}

void GOAppear_AppearInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GOAppear.AppearInfo)
  // optional uint64 masterguid = 1;
  if (has_masterguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->masterguid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camp(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hp(), output);
  }

  // optional uint32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mp(), output);
  }

  // optional .GSToGC.ObjType obj_type = 8;
  if (has_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->obj_type(), output);
  }

  // optional uint32 obj_type_id = 9;
  if (has_obj_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->obj_type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GOAppear.AppearInfo)
}

::google::protobuf::uint8* GOAppear_AppearInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GOAppear.AppearInfo)
  // optional uint64 masterguid = 1;
  if (has_masterguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->masterguid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camp(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hp(), target);
  }

  // optional uint32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mp(), target);
  }

  // optional .GSToGC.ObjType obj_type = 8;
  if (has_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->obj_type(), target);
  }

  // optional uint32 obj_type_id = 9;
  if (has_obj_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->obj_type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GOAppear.AppearInfo)
  return target;
}

int GOAppear_AppearInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 masterguid = 1;
    if (has_masterguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterguid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 camp = 3;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional .GSToGC.ObjType obj_type = 8;
    if (has_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obj_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 obj_type_id = 9;
    if (has_obj_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GOAppear_AppearInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GOAppear_AppearInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GOAppear_AppearInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GOAppear_AppearInfo::MergeFrom(const GOAppear_AppearInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masterguid()) {
      set_masterguid(from.masterguid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_obj_type()) {
      set_obj_type(from.obj_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_obj_type_id()) {
      set_obj_type_id(from.obj_type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GOAppear_AppearInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GOAppear_AppearInfo::CopyFrom(const GOAppear_AppearInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GOAppear_AppearInfo::IsInitialized() const {

  return true;
}

void GOAppear_AppearInfo::Swap(GOAppear_AppearInfo* other) {
  if (other != this) {
    std::swap(masterguid_, other->masterguid_);
    std::swap(objguid_, other->objguid_);
    std::swap(camp_, other->camp_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(obj_type_, other->obj_type_);
    std::swap(obj_type_id_, other->obj_type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GOAppear_AppearInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GOAppear_AppearInfo_descriptor_;
  metadata.reflection = GOAppear_AppearInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GOAppear::kMsgidFieldNumber;
const int GOAppear::kInfoFieldNumber;
#endif  // !_MSC_VER

GOAppear::GOAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GOAppear)
}

void GOAppear::InitAsDefaultInstance() {
}

GOAppear::GOAppear(const GOAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GOAppear)
}

void GOAppear::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 12;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GOAppear::~GOAppear() {
  // @@protoc_insertion_point(destructor:GSToGC.GOAppear)
  SharedDtor();
}

void GOAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GOAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GOAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GOAppear_descriptor_;
}

const GOAppear& GOAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GOAppear* GOAppear::default_instance_ = NULL;

GOAppear* GOAppear::New() const {
  return new GOAppear;
}

void GOAppear::Clear() {
  msgid_ = 12;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GOAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GOAppear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectAppear];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GSToGC.GOAppear.AppearInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GOAppear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GOAppear)
  return false;
#undef DO_
}

void GOAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GOAppear)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectAppear];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.GOAppear.AppearInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GOAppear)
}

::google::protobuf::uint8* GOAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GOAppear)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectAppear];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.GOAppear.AppearInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GOAppear)
  return target;
}

int GOAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectAppear];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.GOAppear.AppearInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GOAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GOAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GOAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GOAppear::MergeFrom(const GOAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GOAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GOAppear::CopyFrom(const GOAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GOAppear::IsInitialized() const {

  return true;
}

void GOAppear::Swap(GOAppear* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GOAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GOAppear_descriptor_;
  metadata.reflection = GOAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisappearInfo::kMsgidFieldNumber;
const int DisappearInfo::kGuidFieldNumber;
#endif  // !_MSC_VER

DisappearInfo::DisappearInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.DisappearInfo)
}

void DisappearInfo::InitAsDefaultInstance() {
}

DisappearInfo::DisappearInfo(const DisappearInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.DisappearInfo)
}

void DisappearInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 13;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisappearInfo::~DisappearInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.DisappearInfo)
  SharedDtor();
}

void DisappearInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisappearInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisappearInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisappearInfo_descriptor_;
}

const DisappearInfo& DisappearInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

DisappearInfo* DisappearInfo::default_instance_ = NULL;

DisappearInfo* DisappearInfo::New() const {
  return new DisappearInfo;
}

void DisappearInfo::Clear() {
  msgid_ = 13;
  guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisappearInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.DisappearInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDisappear];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // repeated uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_guid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.DisappearInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.DisappearInfo)
  return false;
#undef DO_
}

void DisappearInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.DisappearInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDisappear];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated uint64 guid = 2;
  for (int i = 0; i < this->guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->guid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.DisappearInfo)
}

::google::protobuf::uint8* DisappearInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.DisappearInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDisappear];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated uint64 guid = 2;
  for (int i = 0; i < this->guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->guid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.DisappearInfo)
  return target;
}

int DisappearInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDisappear];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated uint64 guid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guid(i));
    }
    total_size += 1 * this->guid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisappearInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisappearInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisappearInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisappearInfo::MergeFrom(const DisappearInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_.MergeFrom(from.guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisappearInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisappearInfo::CopyFrom(const DisappearInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisappearInfo::IsInitialized() const {

  return true;
}

void DisappearInfo::Swap(DisappearInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    guid_.Swap(&other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisappearInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisappearInfo_descriptor_;
  metadata.reflection = DisappearInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeState::kMsgidFieldNumber;
const int FreeState::kObjguidFieldNumber;
const int FreeState::kPosFieldNumber;
const int FreeState::kDirFieldNumber;
#endif  // !_MSC_VER

FreeState::FreeState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.FreeState)
}

void FreeState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

FreeState::FreeState(const FreeState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.FreeState)
}

void FreeState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 14;
  objguid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeState::~FreeState() {
  // @@protoc_insertion_point(destructor:GSToGC.FreeState)
  SharedDtor();
}

void FreeState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void FreeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeState_descriptor_;
}

const FreeState& FreeState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

FreeState* FreeState::default_instance_ = NULL;

FreeState* FreeState::New() const {
  return new FreeState;
}

void FreeState::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgid_ = 14;
    objguid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.FreeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectFreeState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.FreeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.FreeState)
  return false;
#undef DO_
}

void FreeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.FreeState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectFreeState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.FreeState)
}

::google::protobuf::uint8* FreeState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.FreeState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectFreeState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.FreeState)
  return target;
}

int FreeState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectFreeState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional .GSToGC.Pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeState::MergeFrom(const FreeState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeState::CopyFrom(const FreeState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeState::IsInitialized() const {

  return true;
}

void FreeState::Swap(FreeState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeState_descriptor_;
  metadata.reflection = FreeState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunningState::kMsgidFieldNumber;
const int RunningState::kObjguidFieldNumber;
const int RunningState::kPosFieldNumber;
const int RunningState::kDirFieldNumber;
const int RunningState::kMovespeedFieldNumber;
#endif  // !_MSC_VER

RunningState::RunningState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RunningState)
}

void RunningState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

RunningState::RunningState(const RunningState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RunningState)
}

void RunningState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 15;
  objguid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  dir_ = NULL;
  movespeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunningState::~RunningState() {
  // @@protoc_insertion_point(destructor:GSToGC.RunningState)
  SharedDtor();
}

void RunningState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void RunningState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunningState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunningState_descriptor_;
}

const RunningState& RunningState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RunningState* RunningState::default_instance_ = NULL;

RunningState* RunningState::New() const {
  return new RunningState;
}

void RunningState::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgid_ = 15;
    objguid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    movespeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunningState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RunningState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectRunState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_movespeed;
        break;
      }

      // optional int32 movespeed = 5;
      case 5: {
        if (tag == 40) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RunningState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RunningState)
  return false;
#undef DO_
}

void RunningState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RunningState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectRunState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  // optional int32 movespeed = 5;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RunningState)
}

::google::protobuf::uint8* RunningState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RunningState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectRunState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  // optional int32 movespeed = 5;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RunningState)
  return target;
}

int RunningState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectRunState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional .GSToGC.Pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional int32 movespeed = 5;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunningState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunningState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunningState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunningState::MergeFrom(const RunningState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunningState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunningState::CopyFrom(const RunningState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningState::IsInitialized() const {

  return true;
}

void RunningState::Swap(RunningState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunningState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunningState_descriptor_;
  metadata.reflection = RunningState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareSkillState::kMsgidFieldNumber;
const int PrepareSkillState::kObjguidFieldNumber;
const int PrepareSkillState::kSkillidFieldNumber;
const int PrepareSkillState::kPosFieldNumber;
const int PrepareSkillState::kDirFieldNumber;
const int PrepareSkillState::kTarguidFieldNumber;
const int PrepareSkillState::kSpeedFieldNumber;
#endif  // !_MSC_VER

PrepareSkillState::PrepareSkillState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.PrepareSkillState)
}

void PrepareSkillState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

PrepareSkillState::PrepareSkillState(const PrepareSkillState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.PrepareSkillState)
}

void PrepareSkillState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 16;
  objguid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareSkillState::~PrepareSkillState() {
  // @@protoc_insertion_point(destructor:GSToGC.PrepareSkillState)
  SharedDtor();
}

void PrepareSkillState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void PrepareSkillState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareSkillState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareSkillState_descriptor_;
}

const PrepareSkillState& PrepareSkillState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

PrepareSkillState* PrepareSkillState::default_instance_ = NULL;

PrepareSkillState* PrepareSkillState::New() const {
  return new PrepareSkillState;
}

void PrepareSkillState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrepareSkillState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(targuid_, speed_);
    msgid_ = 16;
    objguid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareSkillState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.PrepareSkillState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectPrepareSkillState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 6;
      case 6: {
        if (tag == 48) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        break;
      }

      // optional int32 speed = 7;
      case 7: {
        if (tag == 56) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.PrepareSkillState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.PrepareSkillState)
  return false;
#undef DO_
}

void PrepareSkillState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.PrepareSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectPrepareSkillState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->targuid(), output);
  }

  // optional int32 speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.PrepareSkillState)
}

::google::protobuf::uint8* PrepareSkillState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.PrepareSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectPrepareSkillState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->targuid(), target);
  }

  // optional int32 speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.PrepareSkillState)
  return target;
}

int PrepareSkillState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectPrepareSkillState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint64 targuid = 6;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

    // optional int32 speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareSkillState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareSkillState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareSkillState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareSkillState::MergeFrom(const PrepareSkillState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareSkillState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSkillState::CopyFrom(const PrepareSkillState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSkillState::IsInitialized() const {

  return true;
}

void PrepareSkillState::Swap(PrepareSkillState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareSkillState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareSkillState_descriptor_;
  metadata.reflection = PrepareSkillState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReleasingSkillState::kMsgidFieldNumber;
const int ReleasingSkillState::kObjguidFieldNumber;
const int ReleasingSkillState::kSkillidFieldNumber;
const int ReleasingSkillState::kPosFieldNumber;
const int ReleasingSkillState::kDirFieldNumber;
const int ReleasingSkillState::kTarguidFieldNumber;
#endif  // !_MSC_VER

ReleasingSkillState::ReleasingSkillState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.ReleasingSkillState)
}

void ReleasingSkillState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

ReleasingSkillState::ReleasingSkillState(const ReleasingSkillState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.ReleasingSkillState)
}

void ReleasingSkillState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 17;
  objguid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleasingSkillState::~ReleasingSkillState() {
  // @@protoc_insertion_point(destructor:GSToGC.ReleasingSkillState)
  SharedDtor();
}

void ReleasingSkillState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void ReleasingSkillState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleasingSkillState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleasingSkillState_descriptor_;
}

const ReleasingSkillState& ReleasingSkillState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

ReleasingSkillState* ReleasingSkillState::default_instance_ = NULL;

ReleasingSkillState* ReleasingSkillState::New() const {
  return new ReleasingSkillState;
}

void ReleasingSkillState::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 17;
    objguid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    targuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleasingSkillState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.ReleasingSkillState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkillState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 6;
      case 6: {
        if (tag == 48) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.ReleasingSkillState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.ReleasingSkillState)
  return false;
#undef DO_
}

void ReleasingSkillState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.ReleasingSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkillState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->targuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.ReleasingSkillState)
}

::google::protobuf::uint8* ReleasingSkillState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.ReleasingSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkillState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->targuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.ReleasingSkillState)
  return target;
}

int ReleasingSkillState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkillState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint64 targuid = 6;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleasingSkillState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleasingSkillState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleasingSkillState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleasingSkillState::MergeFrom(const ReleasingSkillState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleasingSkillState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleasingSkillState::CopyFrom(const ReleasingSkillState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleasingSkillState::IsInitialized() const {

  return true;
}

void ReleasingSkillState::Swap(ReleasingSkillState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleasingSkillState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleasingSkillState_descriptor_;
  metadata.reflection = ReleasingSkillState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsingSkillState::kMsgidFieldNumber;
const int UsingSkillState::kObjguidFieldNumber;
const int UsingSkillState::kSkillidFieldNumber;
const int UsingSkillState::kPosFieldNumber;
const int UsingSkillState::kDirFieldNumber;
const int UsingSkillState::kTarguidFieldNumber;
#endif  // !_MSC_VER

UsingSkillState::UsingSkillState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.UsingSkillState)
}

void UsingSkillState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

UsingSkillState::UsingSkillState(const UsingSkillState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.UsingSkillState)
}

void UsingSkillState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 240;
  objguid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsingSkillState::~UsingSkillState() {
  // @@protoc_insertion_point(destructor:GSToGC.UsingSkillState)
  SharedDtor();
}

void UsingSkillState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void UsingSkillState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsingSkillState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsingSkillState_descriptor_;
}

const UsingSkillState& UsingSkillState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

UsingSkillState* UsingSkillState::default_instance_ = NULL;

UsingSkillState* UsingSkillState::New() const {
  return new UsingSkillState;
}

void UsingSkillState::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 240;
    objguid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    targuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsingSkillState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.UsingSkillState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectUsingSkillState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 6;
      case 6: {
        if (tag == 48) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.UsingSkillState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.UsingSkillState)
  return false;
#undef DO_
}

void UsingSkillState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.UsingSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectUsingSkillState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->targuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.UsingSkillState)
}

::google::protobuf::uint8* UsingSkillState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.UsingSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectUsingSkillState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->targuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.UsingSkillState)
  return target;
}

int UsingSkillState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectUsingSkillState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint64 targuid = 6;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsingSkillState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsingSkillState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsingSkillState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsingSkillState::MergeFrom(const UsingSkillState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsingSkillState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsingSkillState::CopyFrom(const UsingSkillState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsingSkillState::IsInitialized() const {

  return true;
}

void UsingSkillState::Swap(UsingSkillState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsingSkillState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsingSkillState_descriptor_;
  metadata.reflection = UsingSkillState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LastingSkillState::kMsgidFieldNumber;
const int LastingSkillState::kObjguidFieldNumber;
const int LastingSkillState::kSkillidFieldNumber;
const int LastingSkillState::kPosFieldNumber;
const int LastingSkillState::kDirFieldNumber;
const int LastingSkillState::kTarguidFieldNumber;
#endif  // !_MSC_VER

LastingSkillState::LastingSkillState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.LastingSkillState)
}

void LastingSkillState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

LastingSkillState::LastingSkillState(const LastingSkillState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.LastingSkillState)
}

void LastingSkillState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 241;
  objguid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastingSkillState::~LastingSkillState() {
  // @@protoc_insertion_point(destructor:GSToGC.LastingSkillState)
  SharedDtor();
}

void LastingSkillState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void LastingSkillState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastingSkillState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastingSkillState_descriptor_;
}

const LastingSkillState& LastingSkillState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

LastingSkillState* LastingSkillState::default_instance_ = NULL;

LastingSkillState* LastingSkillState::New() const {
  return new LastingSkillState;
}

void LastingSkillState::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 241;
    objguid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    targuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastingSkillState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.LastingSkillState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectLastingSkillState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 6;
      case 6: {
        if (tag == 48) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.LastingSkillState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.LastingSkillState)
  return false;
#undef DO_
}

void LastingSkillState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.LastingSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectLastingSkillState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->targuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.LastingSkillState)
}

::google::protobuf::uint8* LastingSkillState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.LastingSkillState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectLastingSkillState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->targuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.LastingSkillState)
  return target;
}

int LastingSkillState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectLastingSkillState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint64 targuid = 6;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastingSkillState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastingSkillState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastingSkillState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastingSkillState::MergeFrom(const LastingSkillState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastingSkillState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastingSkillState::CopyFrom(const LastingSkillState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastingSkillState::IsInitialized() const {

  return true;
}

void LastingSkillState::Swap(LastingSkillState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastingSkillState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastingSkillState_descriptor_;
  metadata.reflection = LastingSkillState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeadState::kMsgidFieldNumber;
const int DeadState::kObjguidFieldNumber;
const int DeadState::kPosFieldNumber;
const int DeadState::kDirFieldNumber;
const int DeadState::kSpotFieldNumber;
#endif  // !_MSC_VER

DeadState::DeadState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.DeadState)
}

void DeadState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

DeadState::DeadState(const DeadState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.DeadState)
}

void DeadState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 18;
  objguid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  dir_ = NULL;
  spot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadState::~DeadState() {
  // @@protoc_insertion_point(destructor:GSToGC.DeadState)
  SharedDtor();
}

void DeadState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void DeadState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadState_descriptor_;
}

const DeadState& DeadState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

DeadState* DeadState::default_instance_ = NULL;

DeadState* DeadState::New() const {
  return new DeadState;
}

void DeadState::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    msgid_ = 18;
    objguid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    spot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.DeadState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDeadState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spot;
        break;
      }

      // optional bool spot = 5;
      case 5: {
        if (tag == 40) {
         parse_spot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spot_)));
          set_has_spot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.DeadState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.DeadState)
  return false;
#undef DO_
}

void DeadState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.DeadState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDeadState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  // optional bool spot = 5;
  if (has_spot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->spot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.DeadState)
}

::google::protobuf::uint8* DeadState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.DeadState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDeadState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  // optional bool spot = 5;
  if (has_spot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->spot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.DeadState)
  return target;
}

int DeadState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectDeadState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional .GSToGC.Pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional bool spot = 5;
    if (has_spot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadState::MergeFrom(const DeadState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_spot()) {
      set_spot(from.spot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadState::CopyFrom(const DeadState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadState::IsInitialized() const {

  return true;
}

void DeadState::Swap(DeadState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(spot_, other->spot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadState_descriptor_;
  metadata.reflection = DeadState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGoodsInfo_GoodsInfo::kNumFieldNumber;
const int NotifyGoodsInfo_GoodsInfo::kPosFieldNumber;
const int NotifyGoodsInfo_GoodsInfo::kIfComposedFieldNumber;
const int NotifyGoodsInfo_GoodsInfo::kTyepidFieldNumber;
const int NotifyGoodsInfo_GoodsInfo::kStateFieldNumber;
const int NotifyGoodsInfo_GoodsInfo::kStatetimeFieldNumber;
#endif  // !_MSC_VER

NotifyGoodsInfo_GoodsInfo::NotifyGoodsInfo_GoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyGoodsInfo.GoodsInfo)
}

void NotifyGoodsInfo_GoodsInfo::InitAsDefaultInstance() {
}

NotifyGoodsInfo_GoodsInfo::NotifyGoodsInfo_GoodsInfo(const NotifyGoodsInfo_GoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyGoodsInfo.GoodsInfo)
}

void NotifyGoodsInfo_GoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  pos_ = 0;
  ifcomposed_ = false;
  tyepid_ = 0;
  state_ = 0;
  statetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGoodsInfo_GoodsInfo::~NotifyGoodsInfo_GoodsInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyGoodsInfo.GoodsInfo)
  SharedDtor();
}

void NotifyGoodsInfo_GoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGoodsInfo_GoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGoodsInfo_GoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGoodsInfo_GoodsInfo_descriptor_;
}

const NotifyGoodsInfo_GoodsInfo& NotifyGoodsInfo_GoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyGoodsInfo_GoodsInfo* NotifyGoodsInfo_GoodsInfo::default_instance_ = NULL;

NotifyGoodsInfo_GoodsInfo* NotifyGoodsInfo_GoodsInfo::New() const {
  return new NotifyGoodsInfo_GoodsInfo;
}

void NotifyGoodsInfo_GoodsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyGoodsInfo_GoodsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(num_, statetime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGoodsInfo_GoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyGoodsInfo.GoodsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ifComposed;
        break;
      }

      // optional bool ifComposed = 3;
      case 3: {
        if (tag == 24) {
         parse_ifComposed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifcomposed_)));
          set_has_ifcomposed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tyepid;
        break;
      }

      // optional int32 tyepid = 4;
      case 4: {
        if (tag == 32) {
         parse_tyepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tyepid_)));
          set_has_tyepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_statetime;
        break;
      }

      // optional int32 statetime = 6;
      case 6: {
        if (tag == 48) {
         parse_statetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statetime_)));
          set_has_statetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyGoodsInfo.GoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyGoodsInfo.GoodsInfo)
  return false;
#undef DO_
}

void NotifyGoodsInfo_GoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyGoodsInfo.GoodsInfo)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional bool ifComposed = 3;
  if (has_ifcomposed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ifcomposed(), output);
  }

  // optional int32 tyepid = 4;
  if (has_tyepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tyepid(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional int32 statetime = 6;
  if (has_statetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->statetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyGoodsInfo.GoodsInfo)
}

::google::protobuf::uint8* NotifyGoodsInfo_GoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyGoodsInfo.GoodsInfo)
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional bool ifComposed = 3;
  if (has_ifcomposed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ifcomposed(), target);
  }

  // optional int32 tyepid = 4;
  if (has_tyepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tyepid(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional int32 statetime = 6;
  if (has_statetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->statetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyGoodsInfo.GoodsInfo)
  return target;
}

int NotifyGoodsInfo_GoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional bool ifComposed = 3;
    if (has_ifcomposed()) {
      total_size += 1 + 1;
    }

    // optional int32 tyepid = 4;
    if (has_tyepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tyepid());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 statetime = 6;
    if (has_statetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGoodsInfo_GoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGoodsInfo_GoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGoodsInfo_GoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGoodsInfo_GoodsInfo::MergeFrom(const NotifyGoodsInfo_GoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_ifcomposed()) {
      set_ifcomposed(from.ifcomposed());
    }
    if (from.has_tyepid()) {
      set_tyepid(from.tyepid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_statetime()) {
      set_statetime(from.statetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGoodsInfo_GoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGoodsInfo_GoodsInfo::CopyFrom(const NotifyGoodsInfo_GoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGoodsInfo_GoodsInfo::IsInitialized() const {

  return true;
}

void NotifyGoodsInfo_GoodsInfo::Swap(NotifyGoodsInfo_GoodsInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(pos_, other->pos_);
    std::swap(ifcomposed_, other->ifcomposed_);
    std::swap(tyepid_, other->tyepid_);
    std::swap(state_, other->state_);
    std::swap(statetime_, other->statetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGoodsInfo_GoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGoodsInfo_GoodsInfo_descriptor_;
  metadata.reflection = NotifyGoodsInfo_GoodsInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyGoodsInfo::kMsgidFieldNumber;
const int NotifyGoodsInfo::kGuidFieldNumber;
const int NotifyGoodsInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyGoodsInfo::NotifyGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyGoodsInfo)
}

void NotifyGoodsInfo::InitAsDefaultInstance() {
}

NotifyGoodsInfo::NotifyGoodsInfo(const NotifyGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyGoodsInfo)
}

void NotifyGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 19;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGoodsInfo::~NotifyGoodsInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyGoodsInfo)
  SharedDtor();
}

void NotifyGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGoodsInfo_descriptor_;
}

const NotifyGoodsInfo& NotifyGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyGoodsInfo* NotifyGoodsInfo::default_instance_ = NULL;

NotifyGoodsInfo* NotifyGoodsInfo::New() const {
  return new NotifyGoodsInfo;
}

void NotifyGoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 19;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyGoodsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsInf];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .GSToGC.NotifyGoodsInfo.GoodsInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyGoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyGoodsInfo)
  return false;
#undef DO_
}

void NotifyGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyGoodsInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsInf];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // repeated .GSToGC.NotifyGoodsInfo.GoodsInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyGoodsInfo)
}

::google::protobuf::uint8* NotifyGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyGoodsInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsInf];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // repeated .GSToGC.NotifyGoodsInfo.GoodsInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyGoodsInfo)
  return target;
}

int NotifyGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGoodsInf];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .GSToGC.NotifyGoodsInfo.GoodsInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGoodsInfo::MergeFrom(const NotifyGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGoodsInfo::CopyFrom(const NotifyGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGoodsInfo::IsInitialized() const {

  return true;
}

void NotifyGoodsInfo::Swap(NotifyGoodsInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGoodsInfo_descriptor_;
  metadata.reflection = NotifyGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleLoadingState::kMsgidFieldNumber;
const int BattleLoadingState::kGuidFieldNumber;
const int BattleLoadingState::kLoadperFieldNumber;
#endif  // !_MSC_VER

BattleLoadingState::BattleLoadingState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleLoadingState)
}

void BattleLoadingState::InitAsDefaultInstance() {
}

BattleLoadingState::BattleLoadingState(const BattleLoadingState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleLoadingState)
}

void BattleLoadingState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 20;
  guid_ = GOOGLE_LONGLONG(0);
  loadper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleLoadingState::~BattleLoadingState() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleLoadingState)
  SharedDtor();
}

void BattleLoadingState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleLoadingState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleLoadingState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleLoadingState_descriptor_;
}

const BattleLoadingState& BattleLoadingState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleLoadingState* BattleLoadingState::default_instance_ = NULL;

BattleLoadingState* BattleLoadingState::New() const {
  return new BattleLoadingState;
}

void BattleLoadingState::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 20;
    guid_ = GOOGLE_LONGLONG(0);
    loadper_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleLoadingState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleLoadingState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleLoadingState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loadper;
        break;
      }

      // optional int32 loadper = 3;
      case 3: {
        if (tag == 24) {
         parse_loadper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadper_)));
          set_has_loadper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleLoadingState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleLoadingState)
  return false;
#undef DO_
}

void BattleLoadingState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleLoadingState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleLoadingState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 loadper = 3;
  if (has_loadper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loadper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleLoadingState)
}

::google::protobuf::uint8* BattleLoadingState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleLoadingState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleLoadingState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 loadper = 3;
  if (has_loadper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loadper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleLoadingState)
  return target;
}

int BattleLoadingState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleLoadingState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 loadper = 3;
    if (has_loadper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loadper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleLoadingState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleLoadingState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleLoadingState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleLoadingState::MergeFrom(const BattleLoadingState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_loadper()) {
      set_loadper(from.loadper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleLoadingState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLoadingState::CopyFrom(const BattleLoadingState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLoadingState::IsInitialized() const {

  return true;
}

void BattleLoadingState::Swap(BattleLoadingState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(loadper_, other->loadper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleLoadingState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleLoadingState_descriptor_;
  metadata.reflection = BattleLoadingState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroPosInfo::kPosFieldNumber;
const int HeroPosInfo::kHeroidFieldNumber;
#endif  // !_MSC_VER

HeroPosInfo::HeroPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroPosInfo)
}

void HeroPosInfo::InitAsDefaultInstance() {
}

HeroPosInfo::HeroPosInfo(const HeroPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroPosInfo)
}

void HeroPosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroPosInfo::~HeroPosInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroPosInfo)
  SharedDtor();
}

void HeroPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroPosInfo_descriptor_;
}

const HeroPosInfo& HeroPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroPosInfo* HeroPosInfo::default_instance_ = NULL;

HeroPosInfo* HeroPosInfo::New() const {
  return new HeroPosInfo;
}

void HeroPosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroPosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, heroid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 3;
      case 3: {
        if (tag == 24) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroPosInfo)
  return false;
#undef DO_
}

void HeroPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroPosInfo)
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional int32 heroid = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroPosInfo)
}

::google::protobuf::uint8* HeroPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroPosInfo)
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional int32 heroid = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroPosInfo)
  return target;
}

int HeroPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 heroid = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroPosInfo::MergeFrom(const HeroPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroPosInfo::CopyFrom(const HeroPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroPosInfo::IsInitialized() const {

  return true;
}

void HeroPosInfo::Swap(HeroPosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroPosInfo_descriptor_;
  metadata.reflection = HeroPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroInfo::kMsgidFieldNumber;
const int HeroInfo::kHeroposinfoFieldNumber;
#endif  // !_MSC_VER

HeroInfo::HeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroInfo)
}

void HeroInfo::InitAsDefaultInstance() {
  heroposinfo_ = const_cast< ::GSToGC::HeroPosInfo*>(&::GSToGC::HeroPosInfo::default_instance());
}

HeroInfo::HeroInfo(const HeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroInfo)
}

void HeroInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 21;
  heroposinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroInfo::~HeroInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroInfo)
  SharedDtor();
}

void HeroInfo::SharedDtor() {
  if (this != default_instance_) {
    delete heroposinfo_;
  }
}

void HeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroInfo_descriptor_;
}

const HeroInfo& HeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroInfo* HeroInfo::default_instance_ = NULL;

HeroInfo* HeroInfo::New() const {
  return new HeroInfo;
}

void HeroInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 21;
    if (has_heroposinfo()) {
      if (heroposinfo_ != NULL) heroposinfo_->::GSToGC::HeroPosInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleHeroInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroposinfo;
        break;
      }

      // optional .GSToGC.HeroPosInfo heroposinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_heroposinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroposinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroInfo)
  return false;
#undef DO_
}

void HeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleHeroInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional .GSToGC.HeroPosInfo heroposinfo = 2;
  if (has_heroposinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroposinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroInfo)
}

::google::protobuf::uint8* HeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleHeroInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional .GSToGC.HeroPosInfo heroposinfo = 2;
  if (has_heroposinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroposinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroInfo)
  return target;
}

int HeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleHeroInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional .GSToGC.HeroPosInfo heroposinfo = 2;
    if (has_heroposinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroposinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroInfo::MergeFrom(const HeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_heroposinfo()) {
      mutable_heroposinfo()->::GSToGC::HeroPosInfo::MergeFrom(from.heroposinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroInfo::CopyFrom(const HeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroInfo::IsInitialized() const {

  return true;
}

void HeroInfo::Swap(HeroInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(heroposinfo_, other->heroposinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroInfo_descriptor_;
  metadata.reflection = HeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatInRoom::kMsgidFieldNumber;
const int ChatInRoom::kPosFieldNumber;
const int ChatInRoom::kChatFieldNumber;
#endif  // !_MSC_VER

ChatInRoom::ChatInRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.ChatInRoom)
}

void ChatInRoom::InitAsDefaultInstance() {
}

ChatInRoom::ChatInRoom(const ChatInRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.ChatInRoom)
}

void ChatInRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 24;
  pos_ = 0;
  chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInRoom::~ChatInRoom() {
  // @@protoc_insertion_point(destructor:GSToGC.ChatInRoom)
  SharedDtor();
}

void ChatInRoom::SharedDtor() {
  if (chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chat_;
  }
  if (this != default_instance_) {
  }
}

void ChatInRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInRoom_descriptor_;
}

const ChatInRoom& ChatInRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

ChatInRoom* ChatInRoom::default_instance_ = NULL;

ChatInRoom* ChatInRoom::New() const {
  return new ChatInRoom;
}

void ChatInRoom::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 24;
    pos_ = 0;
    if (has_chat()) {
      if (chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chat_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatInRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.ChatInRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_ChatInRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chat;
        break;
      }

      // optional string chat = 3;
      case 3: {
        if (tag == 26) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat().data(), this->chat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.ChatInRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.ChatInRoom)
  return false;
#undef DO_
}

void ChatInRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.ChatInRoom)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_ChatInRoom];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional string chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.ChatInRoom)
}

::google::protobuf::uint8* ChatInRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.ChatInRoom)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_ChatInRoom];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional string chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.ChatInRoom)
  return target;
}

int ChatInRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_ChatInRoom];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional string chat = 3;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatInRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatInRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatInRoom::MergeFrom(const ChatInRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatInRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInRoom::CopyFrom(const ChatInRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInRoom::IsInitialized() const {

  return true;
}

void ChatInRoom::Swap(ChatInRoom* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(pos_, other->pos_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatInRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInRoom_descriptor_;
  metadata.reflection = ChatInRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillHitTar::kMsgidFieldNumber;
const int SkillHitTar::kGuidFieldNumber;
const int SkillHitTar::kSkillidFieldNumber;
const int SkillHitTar::kTarguidFieldNumber;
#endif  // !_MSC_VER

SkillHitTar::SkillHitTar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SkillHitTar)
}

void SkillHitTar::InitAsDefaultInstance() {
}

SkillHitTar::SkillHitTar(const SkillHitTar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SkillHitTar)
}

void SkillHitTar::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 25;
  guid_ = GOOGLE_LONGLONG(0);
  skillid_ = 0;
  targuid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillHitTar::~SkillHitTar() {
  // @@protoc_insertion_point(destructor:GSToGC.SkillHitTar)
  SharedDtor();
}

void SkillHitTar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillHitTar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillHitTar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillHitTar_descriptor_;
}

const SkillHitTar& SkillHitTar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SkillHitTar* SkillHitTar::default_instance_ = NULL;

SkillHitTar* SkillHitTar::New() const {
  return new SkillHitTar;
}

void SkillHitTar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillHitTar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillid_, targuid_);
    msgid_ = 25;
    guid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillHitTar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SkillHitTar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillHitTarget];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targuid;
        break;
      }

      // optional int64 targuid = 4;
      case 4: {
        if (tag == 32) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SkillHitTar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SkillHitTar)
  return false;
#undef DO_
}

void SkillHitTar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SkillHitTar)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillHitTarget];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int64 targuid = 4;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->targuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SkillHitTar)
}

::google::protobuf::uint8* SkillHitTar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SkillHitTar)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillHitTarget];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int64 targuid = 4;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->targuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SkillHitTar)
  return target;
}

int SkillHitTar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillHitTarget];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int64 targuid = 4;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillHitTar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillHitTar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillHitTar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillHitTar::MergeFrom(const SkillHitTar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillHitTar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillHitTar::CopyFrom(const SkillHitTar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillHitTar::IsInitialized() const {

  return true;
}

void SkillHitTar::Swap(SkillHitTar* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(targuid_, other->targuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillHitTar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillHitTar_descriptor_;
  metadata.reflection = SkillHitTar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPChange::kMsgidFieldNumber;
const int HPChange::kGuidFieldNumber;
const int HPChange::kHpFieldNumber;
const int HPChange::kReasonFieldNumber;
#endif  // !_MSC_VER

HPChange::HPChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HPChange)
}

void HPChange::InitAsDefaultInstance() {
}

HPChange::HPChange(const HPChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HPChange)
}

void HPChange::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 26;
  guid_ = GOOGLE_ULONGLONG(0);
  hp_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPChange::~HPChange() {
  // @@protoc_insertion_point(destructor:GSToGC.HPChange)
  SharedDtor();
}

void HPChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPChange_descriptor_;
}

const HPChange& HPChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HPChange* HPChange::default_instance_ = NULL;

HPChange* HPChange::New() const {
  return new HPChange;
}

void HPChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HPChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(hp_, reason_);
    msgid_ = 26;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HPChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional .GSToGC.HPMPChangeReason reason = 4;
      case 4: {
        if (tag == 32) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::HPMPChangeReason_IsValid(value)) {
            set_reason(static_cast< ::GSToGC::HPMPChangeReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HPChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HPChange)
  return false;
#undef DO_
}

void HPChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HPChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // optional .GSToGC.HPMPChangeReason reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HPChange)
}

::google::protobuf::uint8* HPChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HPChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // optional .GSToGC.HPMPChangeReason reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HPChange)
  return target;
}

int HPChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional .GSToGC.HPMPChangeReason reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPChange::MergeFrom(const HPChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPChange::CopyFrom(const HPChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPChange::IsInitialized() const {

  return true;
}

void HPChange::Swap(HPChange* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(hp_, other->hp_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPChange_descriptor_;
  metadata.reflection = HPChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpChange::kMsgidFieldNumber;
const int MpChange::kGuidFieldNumber;
const int MpChange::kMpFieldNumber;
const int MpChange::kReasonFieldNumber;
#endif  // !_MSC_VER

MpChange::MpChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.MpChange)
}

void MpChange::InitAsDefaultInstance() {
}

MpChange::MpChange(const MpChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.MpChange)
}

void MpChange::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 27;
  guid_ = GOOGLE_ULONGLONG(0);
  mp_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpChange::~MpChange() {
  // @@protoc_insertion_point(destructor:GSToGC.MpChange)
  SharedDtor();
}

void MpChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MpChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpChange_descriptor_;
}

const MpChange& MpChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

MpChange* MpChange::default_instance_ = NULL;

MpChange* MpChange::New() const {
  return new MpChange;
}

void MpChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MpChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mp_, reason_);
    msgid_ = 27;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.MpChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mp;
        break;
      }

      // optional int32 mp = 3;
      case 3: {
        if (tag == 24) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional .GSToGC.HPMPChangeReason reason = 4;
      case 4: {
        if (tag == 32) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::HPMPChangeReason_IsValid(value)) {
            set_reason(static_cast< ::GSToGC::HPMPChangeReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.MpChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.MpChange)
  return false;
#undef DO_
}

void MpChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.MpChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 mp = 3;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp(), output);
  }

  // optional .GSToGC.HPMPChangeReason reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.MpChange)
}

::google::protobuf::uint8* MpChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.MpChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 mp = 3;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp(), target);
  }

  // optional .GSToGC.HPMPChangeReason reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.MpChange)
  return target;
}

int MpChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 mp = 3;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional .GSToGC.HPMPChangeReason reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpChange::MergeFrom(const MpChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpChange::CopyFrom(const MpChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpChange::IsInitialized() const {

  return true;
}

void MpChange::Swap(MpChange* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(mp_, other->mp_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpChange_descriptor_;
  metadata.reflection = MpChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TryToChooseHero::kMsgidFieldNumber;
const int TryToChooseHero::kPosFieldNumber;
const int TryToChooseHero::kHeroidFieldNumber;
#endif  // !_MSC_VER

TryToChooseHero::TryToChooseHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.TryToChooseHero)
}

void TryToChooseHero::InitAsDefaultInstance() {
}

TryToChooseHero::TryToChooseHero(const TryToChooseHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.TryToChooseHero)
}

void TryToChooseHero::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 28;
  pos_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TryToChooseHero::~TryToChooseHero() {
  // @@protoc_insertion_point(destructor:GSToGC.TryToChooseHero)
  SharedDtor();
}

void TryToChooseHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TryToChooseHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryToChooseHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryToChooseHero_descriptor_;
}

const TryToChooseHero& TryToChooseHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

TryToChooseHero* TryToChooseHero::default_instance_ = NULL;

TryToChooseHero* TryToChooseHero::New() const {
  return new TryToChooseHero;
}

void TryToChooseHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TryToChooseHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pos_, heroid_);
    msgid_ = 28;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TryToChooseHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.TryToChooseHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyTryToChooseHero];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 3;
      case 3: {
        if (tag == 24) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.TryToChooseHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.TryToChooseHero)
  return false;
#undef DO_
}

void TryToChooseHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.TryToChooseHero)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyTryToChooseHero];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional int32 heroid = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.TryToChooseHero)
}

::google::protobuf::uint8* TryToChooseHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.TryToChooseHero)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyTryToChooseHero];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // optional int32 heroid = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.TryToChooseHero)
  return target;
}

int TryToChooseHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyTryToChooseHero];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 heroid = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryToChooseHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TryToChooseHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TryToChooseHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TryToChooseHero::MergeFrom(const TryToChooseHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TryToChooseHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryToChooseHero::CopyFrom(const TryToChooseHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryToChooseHero::IsInitialized() const {

  return true;
}

void TryToChooseHero::Swap(TryToChooseHero* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(pos_, other->pos_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TryToChooseHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TryToChooseHero_descriptor_;
  metadata.reflection = TryToChooseHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyChooseHeroTimeEnd::kMsgidFieldNumber;
const int NotifyChooseHeroTimeEnd::kHeroposinfoFieldNumber;
#endif  // !_MSC_VER

NotifyChooseHeroTimeEnd::NotifyChooseHeroTimeEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyChooseHeroTimeEnd)
}

void NotifyChooseHeroTimeEnd::InitAsDefaultInstance() {
}

NotifyChooseHeroTimeEnd::NotifyChooseHeroTimeEnd(const NotifyChooseHeroTimeEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyChooseHeroTimeEnd)
}

void NotifyChooseHeroTimeEnd::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 29;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyChooseHeroTimeEnd::~NotifyChooseHeroTimeEnd() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyChooseHeroTimeEnd)
  SharedDtor();
}

void NotifyChooseHeroTimeEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyChooseHeroTimeEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyChooseHeroTimeEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyChooseHeroTimeEnd_descriptor_;
}

const NotifyChooseHeroTimeEnd& NotifyChooseHeroTimeEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyChooseHeroTimeEnd* NotifyChooseHeroTimeEnd::default_instance_ = NULL;

NotifyChooseHeroTimeEnd* NotifyChooseHeroTimeEnd::New() const {
  return new NotifyChooseHeroTimeEnd;
}

void NotifyChooseHeroTimeEnd::Clear() {
  msgid_ = 29;
  heroposinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyChooseHeroTimeEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyChooseHeroTimeEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyChooseHeroTimeEnd];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroposinfo;
        break;
      }

      // repeated .GSToGC.HeroPosInfo heroposinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_heroposinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroposinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroposinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyChooseHeroTimeEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyChooseHeroTimeEnd)
  return false;
#undef DO_
}

void NotifyChooseHeroTimeEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyChooseHeroTimeEnd)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyChooseHeroTimeEnd];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.HeroPosInfo heroposinfo = 2;
  for (int i = 0; i < this->heroposinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroposinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyChooseHeroTimeEnd)
}

::google::protobuf::uint8* NotifyChooseHeroTimeEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyChooseHeroTimeEnd)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyChooseHeroTimeEnd];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.HeroPosInfo heroposinfo = 2;
  for (int i = 0; i < this->heroposinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroposinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyChooseHeroTimeEnd)
  return target;
}

int NotifyChooseHeroTimeEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyChooseHeroTimeEnd];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.HeroPosInfo heroposinfo = 2;
  total_size += 1 * this->heroposinfo_size();
  for (int i = 0; i < this->heroposinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroposinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyChooseHeroTimeEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyChooseHeroTimeEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyChooseHeroTimeEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyChooseHeroTimeEnd::MergeFrom(const NotifyChooseHeroTimeEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroposinfo_.MergeFrom(from.heroposinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyChooseHeroTimeEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyChooseHeroTimeEnd::CopyFrom(const NotifyChooseHeroTimeEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyChooseHeroTimeEnd::IsInitialized() const {

  return true;
}

void NotifyChooseHeroTimeEnd::Swap(NotifyChooseHeroTimeEnd* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    heroposinfo_.Swap(&other->heroposinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyChooseHeroTimeEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyChooseHeroTimeEnd_descriptor_;
  metadata.reflection = NotifyChooseHeroTimeEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillEntityInfo::kMsgidFieldNumber;
const int SkillEntityInfo::kGuidFieldNumber;
const int SkillEntityInfo::kSkillidFieldNumber;
const int SkillEntityInfo::kDirFieldNumber;
const int SkillEntityInfo::kTarguidFieldNumber;
const int SkillEntityInfo::kUniqueidFieldNumber;
const int SkillEntityInfo::kTardirFieldNumber;
#endif  // !_MSC_VER

SkillEntityInfo::SkillEntityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SkillEntityInfo)
}

void SkillEntityInfo::InitAsDefaultInstance() {
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  tardir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

SkillEntityInfo::SkillEntityInfo(const SkillEntityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SkillEntityInfo)
}

void SkillEntityInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 30;
  guid_ = GOOGLE_LONGLONG(0);
  skillid_ = 0;
  dir_ = NULL;
  targuid_ = GOOGLE_LONGLONG(0);
  uniqueid_ = GOOGLE_LONGLONG(0);
  tardir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEntityInfo::~SkillEntityInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.SkillEntityInfo)
  SharedDtor();
}

void SkillEntityInfo::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete tardir_;
  }
}

void SkillEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEntityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEntityInfo_descriptor_;
}

const SkillEntityInfo& SkillEntityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SkillEntityInfo* SkillEntityInfo::default_instance_ = NULL;

SkillEntityInfo* SkillEntityInfo::New() const {
  return new SkillEntityInfo;
}

void SkillEntityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillEntityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(targuid_, uniqueid_);
    msgid_ = 30;
    guid_ = GOOGLE_LONGLONG(0);
    skillid_ = 0;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    if (has_tardir()) {
      if (tardir_ != NULL) tardir_->::GSToGC::Dir::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SkillEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEntityInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targuid;
        break;
      }

      // optional int64 targuid = 5;
      case 5: {
        if (tag == 40) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uniqueid;
        break;
      }

      // optional int64 uniqueid = 6;
      case 6: {
        if (tag == 48) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tardir;
        break;
      }

      // optional .GSToGC.Dir tardir = 7;
      case 7: {
        if (tag == 58) {
         parse_tardir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tardir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SkillEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SkillEntityInfo)
  return false;
#undef DO_
}

void SkillEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SkillEntityInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEntityInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  // optional int64 targuid = 5;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->targuid(), output);
  }

  // optional int64 uniqueid = 6;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->uniqueid(), output);
  }

  // optional .GSToGC.Dir tardir = 7;
  if (has_tardir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tardir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SkillEntityInfo)
}

::google::protobuf::uint8* SkillEntityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SkillEntityInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEntityInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  // optional int64 targuid = 5;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->targuid(), target);
  }

  // optional int64 uniqueid = 6;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->uniqueid(), target);
  }

  // optional .GSToGC.Dir tardir = 7;
  if (has_tardir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tardir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SkillEntityInfo)
  return target;
}

int SkillEntityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEntityInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .GSToGC.Dir dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional int64 targuid = 5;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targuid());
    }

    // optional int64 uniqueid = 6;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uniqueid());
    }

    // optional .GSToGC.Dir tardir = 7;
    if (has_tardir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tardir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEntityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEntityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillEntityInfo::MergeFrom(const SkillEntityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_tardir()) {
      mutable_tardir()->::GSToGC::Dir::MergeFrom(from.tardir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillEntityInfo::CopyFrom(const SkillEntityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEntityInfo::IsInitialized() const {

  return true;
}

void SkillEntityInfo::Swap(SkillEntityInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(tardir_, other->tardir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillEntityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEntityInfo_descriptor_;
  metadata.reflection = SkillEntityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FPInfo::kMsgidFieldNumber;
const int FPInfo::kGuidFieldNumber;
const int FPInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

FPInfo::FPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.FPInfo)
}

void FPInfo::InitAsDefaultInstance() {
}

FPInfo::FPInfo(const FPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.FPInfo)
}

void FPInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 31;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FPInfo::~FPInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.FPInfo)
  SharedDtor();
}

void FPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FPInfo_descriptor_;
}

const FPInfo& FPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

FPInfo* FPInfo::default_instance_ = NULL;

FPInfo* FPInfo::New() const {
  return new FPInfo;
}

void FPInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 31;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.FPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFightPropertyInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_info;
        break;
      }

      // repeated int32 info = 3;
      case 3: {
        if (tag == 24) {
         parse_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_info())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_info())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.FPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.FPInfo)
  return false;
#undef DO_
}

void FPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.FPInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFightPropertyInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // repeated int32 info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.FPInfo)
}

::google::protobuf::uint8* FPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.FPInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFightPropertyInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // repeated int32 info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.FPInfo)
  return target;
}

int FPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFightPropertyInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated int32 info = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->info(i));
    }
    total_size += 1 * this->info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FPInfo::MergeFrom(const FPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPInfo::CopyFrom(const FPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPInfo::IsInitialized() const {

  return true;
}

void FPInfo::Swap(FPInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FPInfo_descriptor_;
  metadata.reflection = FPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHPInfo_HPInfo::kGuidFieldNumber;
const int NotifyHPInfo_HPInfo::kCurhpFieldNumber;
const int NotifyHPInfo_HPInfo::kMaxhpFieldNumber;
#endif  // !_MSC_VER

NotifyHPInfo_HPInfo::NotifyHPInfo_HPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHPInfo.HPInfo)
}

void NotifyHPInfo_HPInfo::InitAsDefaultInstance() {
}

NotifyHPInfo_HPInfo::NotifyHPInfo_HPInfo(const NotifyHPInfo_HPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHPInfo.HPInfo)
}

void NotifyHPInfo_HPInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  curhp_ = 0;
  maxhp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHPInfo_HPInfo::~NotifyHPInfo_HPInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHPInfo.HPInfo)
  SharedDtor();
}

void NotifyHPInfo_HPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHPInfo_HPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHPInfo_HPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHPInfo_HPInfo_descriptor_;
}

const NotifyHPInfo_HPInfo& NotifyHPInfo_HPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHPInfo_HPInfo* NotifyHPInfo_HPInfo::default_instance_ = NULL;

NotifyHPInfo_HPInfo* NotifyHPInfo_HPInfo::New() const {
  return new NotifyHPInfo_HPInfo;
}

void NotifyHPInfo_HPInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyHPInfo_HPInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, maxhp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHPInfo_HPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHPInfo.HPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curhp;
        break;
      }

      // optional int32 curhp = 2;
      case 2: {
        if (tag == 16) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 3;
      case 3: {
        if (tag == 24) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHPInfo.HPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHPInfo.HPInfo)
  return false;
#undef DO_
}

void NotifyHPInfo_HPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHPInfo.HPInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 curhp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curhp(), output);
  }

  // optional int32 maxhp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHPInfo.HPInfo)
}

::google::protobuf::uint8* NotifyHPInfo_HPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHPInfo.HPInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 curhp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curhp(), target);
  }

  // optional int32 maxhp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHPInfo.HPInfo)
  return target;
}

int NotifyHPInfo_HPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 curhp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 maxhp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHPInfo_HPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHPInfo_HPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHPInfo_HPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHPInfo_HPInfo::MergeFrom(const NotifyHPInfo_HPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHPInfo_HPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHPInfo_HPInfo::CopyFrom(const NotifyHPInfo_HPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHPInfo_HPInfo::IsInitialized() const {

  return true;
}

void NotifyHPInfo_HPInfo::Swap(NotifyHPInfo_HPInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHPInfo_HPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHPInfo_HPInfo_descriptor_;
  metadata.reflection = NotifyHPInfo_HPInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyHPInfo::kMsgidFieldNumber;
const int NotifyHPInfo::kHpinfoFieldNumber;
#endif  // !_MSC_VER

NotifyHPInfo::NotifyHPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHPInfo)
}

void NotifyHPInfo::InitAsDefaultInstance() {
}

NotifyHPInfo::NotifyHPInfo(const NotifyHPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHPInfo)
}

void NotifyHPInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 34;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHPInfo::~NotifyHPInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHPInfo)
  SharedDtor();
}

void NotifyHPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHPInfo_descriptor_;
}

const NotifyHPInfo& NotifyHPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHPInfo* NotifyHPInfo::default_instance_ = NULL;

NotifyHPInfo* NotifyHPInfo::New() const {
  return new NotifyHPInfo;
}

void NotifyHPInfo::Clear() {
  msgid_ = 34;
  hpinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hpinfo;
        break;
      }

      // repeated .GSToGC.NotifyHPInfo.HPInfo hpinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_hpinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hpinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hpinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHPInfo)
  return false;
#undef DO_
}

void NotifyHPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHPInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.NotifyHPInfo.HPInfo hpinfo = 2;
  for (int i = 0; i < this->hpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hpinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHPInfo)
}

::google::protobuf::uint8* NotifyHPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHPInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.NotifyHPInfo.HPInfo hpinfo = 2;
  for (int i = 0; i < this->hpinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hpinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHPInfo)
  return target;
}

int NotifyHPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHPInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.NotifyHPInfo.HPInfo hpinfo = 2;
  total_size += 1 * this->hpinfo_size();
  for (int i = 0; i < this->hpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hpinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHPInfo::MergeFrom(const NotifyHPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hpinfo_.MergeFrom(from.hpinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHPInfo::CopyFrom(const NotifyHPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHPInfo::IsInitialized() const {

  return true;
}

void NotifyHPInfo::Swap(NotifyHPInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    hpinfo_.Swap(&other->hpinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHPInfo_descriptor_;
  metadata.reflection = NotifyHPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMPInfo_MPInfo::kGuidFieldNumber;
const int NotifyMPInfo_MPInfo::kCurmpFieldNumber;
const int NotifyMPInfo_MPInfo::kMaxmpFieldNumber;
#endif  // !_MSC_VER

NotifyMPInfo_MPInfo::NotifyMPInfo_MPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMPInfo.MPInfo)
}

void NotifyMPInfo_MPInfo::InitAsDefaultInstance() {
}

NotifyMPInfo_MPInfo::NotifyMPInfo_MPInfo(const NotifyMPInfo_MPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMPInfo.MPInfo)
}

void NotifyMPInfo_MPInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  curmp_ = 0;
  maxmp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMPInfo_MPInfo::~NotifyMPInfo_MPInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMPInfo.MPInfo)
  SharedDtor();
}

void NotifyMPInfo_MPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMPInfo_MPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMPInfo_MPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMPInfo_MPInfo_descriptor_;
}

const NotifyMPInfo_MPInfo& NotifyMPInfo_MPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMPInfo_MPInfo* NotifyMPInfo_MPInfo::default_instance_ = NULL;

NotifyMPInfo_MPInfo* NotifyMPInfo_MPInfo::New() const {
  return new NotifyMPInfo_MPInfo;
}

void NotifyMPInfo_MPInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyMPInfo_MPInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, maxmp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMPInfo_MPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMPInfo.MPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curmp;
        break;
      }

      // optional int32 curmp = 2;
      case 2: {
        if (tag == 16) {
         parse_curmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmp_)));
          set_has_curmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxmp;
        break;
      }

      // optional int32 maxmp = 3;
      case 3: {
        if (tag == 24) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMPInfo.MPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMPInfo.MPInfo)
  return false;
#undef DO_
}

void NotifyMPInfo_MPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMPInfo.MPInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 curmp = 2;
  if (has_curmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curmp(), output);
  }

  // optional int32 maxmp = 3;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxmp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMPInfo.MPInfo)
}

::google::protobuf::uint8* NotifyMPInfo_MPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMPInfo.MPInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 curmp = 2;
  if (has_curmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curmp(), target);
  }

  // optional int32 maxmp = 3;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxmp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMPInfo.MPInfo)
  return target;
}

int NotifyMPInfo_MPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 curmp = 2;
    if (has_curmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmp());
    }

    // optional int32 maxmp = 3;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMPInfo_MPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMPInfo_MPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMPInfo_MPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMPInfo_MPInfo::MergeFrom(const NotifyMPInfo_MPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_curmp()) {
      set_curmp(from.curmp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMPInfo_MPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMPInfo_MPInfo::CopyFrom(const NotifyMPInfo_MPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMPInfo_MPInfo::IsInitialized() const {

  return true;
}

void NotifyMPInfo_MPInfo::Swap(NotifyMPInfo_MPInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(curmp_, other->curmp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMPInfo_MPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMPInfo_MPInfo_descriptor_;
  metadata.reflection = NotifyMPInfo_MPInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyMPInfo::kMsgidFieldNumber;
const int NotifyMPInfo::kMpinfoFieldNumber;
#endif  // !_MSC_VER

NotifyMPInfo::NotifyMPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyMPInfo)
}

void NotifyMPInfo::InitAsDefaultInstance() {
}

NotifyMPInfo::NotifyMPInfo(const NotifyMPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyMPInfo)
}

void NotifyMPInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 35;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMPInfo::~NotifyMPInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyMPInfo)
  SharedDtor();
}

void NotifyMPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMPInfo_descriptor_;
}

const NotifyMPInfo& NotifyMPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyMPInfo* NotifyMPInfo::default_instance_ = NULL;

NotifyMPInfo* NotifyMPInfo::New() const {
  return new NotifyMPInfo;
}

void NotifyMPInfo::Clear() {
  msgid_ = 35;
  mpinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyMPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mpinfo;
        break;
      }

      // repeated .GSToGC.NotifyMPInfo.MPInfo mpinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_mpinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mpinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mpinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyMPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyMPInfo)
  return false;
#undef DO_
}

void NotifyMPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyMPInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.NotifyMPInfo.MPInfo mpinfo = 2;
  for (int i = 0; i < this->mpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mpinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyMPInfo)
}

::google::protobuf::uint8* NotifyMPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyMPInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.NotifyMPInfo.MPInfo mpinfo = 2;
  for (int i = 0; i < this->mpinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mpinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyMPInfo)
  return target;
}

int NotifyMPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyMPInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.NotifyMPInfo.MPInfo mpinfo = 2;
  total_size += 1 * this->mpinfo_size();
  for (int i = 0; i < this->mpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mpinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMPInfo::MergeFrom(const NotifyMPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mpinfo_.MergeFrom(from.mpinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMPInfo::CopyFrom(const NotifyMPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMPInfo::IsInitialized() const {

  return true;
}

void NotifyMPInfo::Swap(NotifyMPInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    mpinfo_.Swap(&other->mpinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMPInfo_descriptor_;
  metadata.reflection = NotifyMPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHeroInfo::kMsgidFieldNumber;
const int NotifyHeroInfo::kGuidFieldNumber;
const int NotifyHeroInfo::kLevelFieldNumber;
const int NotifyHeroInfo::kExpFieldNumber;
const int NotifyHeroInfo::kFuryFieldNumber;
const int NotifyHeroInfo::kAbsorb1FieldNumber;
const int NotifyHeroInfo::kAbsorb2FieldNumber;
#endif  // !_MSC_VER

NotifyHeroInfo::NotifyHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHeroInfo)
}

void NotifyHeroInfo::InitAsDefaultInstance() {
}

NotifyHeroInfo::NotifyHeroInfo(const NotifyHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHeroInfo)
}

void NotifyHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 36;
  guid_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  exp_ = 0;
  fury_ = 0;
  absorb1_ = 0;
  absorb2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHeroInfo::~NotifyHeroInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHeroInfo)
  SharedDtor();
}

void NotifyHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeroInfo_descriptor_;
}

const NotifyHeroInfo& NotifyHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHeroInfo* NotifyHeroInfo::default_instance_ = NULL;

NotifyHeroInfo* NotifyHeroInfo::New() const {
  return new NotifyHeroInfo;
}

void NotifyHeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyHeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(level_, absorb2_);
    msgid_ = 36;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fury;
        break;
      }

      // optional int32 fury = 5;
      case 5: {
        if (tag == 40) {
         parse_fury:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fury_)));
          set_has_fury();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_absorb1;
        break;
      }

      // optional int32 absorb1 = 6;
      case 6: {
        if (tag == 48) {
         parse_absorb1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorb1_)));
          set_has_absorb1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_absorb2;
        break;
      }

      // optional int32 absorb2 = 7;
      case 7: {
        if (tag == 56) {
         parse_absorb2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorb2_)));
          set_has_absorb2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHeroInfo)
  return false;
#undef DO_
}

void NotifyHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHeroInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 fury = 5;
  if (has_fury()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fury(), output);
  }

  // optional int32 absorb1 = 6;
  if (has_absorb1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->absorb1(), output);
  }

  // optional int32 absorb2 = 7;
  if (has_absorb2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->absorb2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHeroInfo)
}

::google::protobuf::uint8* NotifyHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHeroInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 fury = 5;
  if (has_fury()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fury(), target);
  }

  // optional int32 absorb1 = 6;
  if (has_absorb1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->absorb1(), target);
  }

  // optional int32 absorb2 = 7;
  if (has_absorb2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->absorb2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHeroInfo)
  return target;
}

int NotifyHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 fury = 5;
    if (has_fury()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fury());
    }

    // optional int32 absorb1 = 6;
    if (has_absorb1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorb1());
    }

    // optional int32 absorb2 = 7;
    if (has_absorb2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorb2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHeroInfo::MergeFrom(const NotifyHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_fury()) {
      set_fury(from.fury());
    }
    if (from.has_absorb1()) {
      set_absorb1(from.absorb1());
    }
    if (from.has_absorb2()) {
      set_absorb2(from.absorb2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHeroInfo::CopyFrom(const NotifyHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHeroInfo::IsInitialized() const {

  return true;
}

void NotifyHeroInfo::Swap(NotifyHeroInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(fury_, other->fury_);
    std::swap(absorb1_, other->absorb1_);
    std::swap(absorb2_, other->absorb2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHeroInfo_descriptor_;
  metadata.reflection = NotifyHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillInfo::kMsgidFieldNumber;
const int NotifySkillInfo::kGuidFieldNumber;
const int NotifySkillInfo::kSkillslotFieldNumber;
const int NotifySkillInfo::kSkillidFieldNumber;
const int NotifySkillInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

NotifySkillInfo::NotifySkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillInfo)
}

void NotifySkillInfo::InitAsDefaultInstance() {
}

NotifySkillInfo::NotifySkillInfo(const NotifySkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillInfo)
}

void NotifySkillInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 39;
  guid_ = GOOGLE_ULONGLONG(0);
  skillslot_ = 0;
  skillid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillInfo::~NotifySkillInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillInfo)
  SharedDtor();
}

void NotifySkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillInfo_descriptor_;
}

const NotifySkillInfo& NotifySkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillInfo* NotifySkillInfo::default_instance_ = NULL;

NotifySkillInfo* NotifySkillInfo::New() const {
  return new NotifySkillInfo;
}

void NotifySkillInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifySkillInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(skillslot_, time_);
    msgid_ = 39;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillslot;
        break;
      }

      // optional int32 skillslot = 3;
      case 3: {
        if (tag == 24) {
         parse_skillslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillslot_)));
          set_has_skillslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 4;
      case 4: {
        if (tag == 32) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillInfo)
  return false;
#undef DO_
}

void NotifySkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 skillslot = 3;
  if (has_skillslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillslot(), output);
  }

  // optional int32 skillid = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillid(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillInfo)
}

::google::protobuf::uint8* NotifySkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillslot = 3;
  if (has_skillslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillslot(), target);
  }

  // optional int32 skillid = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillid(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillInfo)
  return target;
}

int NotifySkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 skillslot = 3;
    if (has_skillslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillslot());
    }

    // optional int32 skillid = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillInfo::MergeFrom(const NotifySkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillslot()) {
      set_skillslot(from.skillslot());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillInfo::CopyFrom(const NotifySkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillInfo::IsInitialized() const {

  return true;
}

void NotifySkillInfo::Swap(NotifySkillInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillslot_, other->skillslot_);
    std::swap(skillid_, other->skillid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillInfo_descriptor_;
  metadata.reflection = NotifySkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFinish::kMsgidFieldNumber;
const int BattleFinish::kBulidguidFieldNumber;
#endif  // !_MSC_VER

BattleFinish::BattleFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BattleFinish)
}

void BattleFinish::InitAsDefaultInstance() {
}

BattleFinish::BattleFinish(const BattleFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BattleFinish)
}

void BattleFinish::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 40;
  bulidguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFinish::~BattleFinish() {
  // @@protoc_insertion_point(destructor:GSToGC.BattleFinish)
  SharedDtor();
}

void BattleFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFinish_descriptor_;
}

const BattleFinish& BattleFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BattleFinish* BattleFinish::default_instance_ = NULL;

BattleFinish* BattleFinish::New() const {
  return new BattleFinish;
}

void BattleFinish::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 40;
    bulidguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BattleFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleFinish];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bulidguid;
        break;
      }

      // optional uint64 bulidguid = 2;
      case 2: {
        if (tag == 16) {
         parse_bulidguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bulidguid_)));
          set_has_bulidguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BattleFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BattleFinish)
  return false;
#undef DO_
}

void BattleFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BattleFinish)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleFinish];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 bulidguid = 2;
  if (has_bulidguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bulidguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BattleFinish)
}

::google::protobuf::uint8* BattleFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BattleFinish)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleFinish];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 bulidguid = 2;
  if (has_bulidguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bulidguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BattleFinish)
  return target;
}

int BattleFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleFinish];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 bulidguid = 2;
    if (has_bulidguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bulidguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleFinish::MergeFrom(const BattleFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bulidguid()) {
      set_bulidguid(from.bulidguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFinish::CopyFrom(const BattleFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFinish::IsInitialized() const {

  return true;
}

void BattleFinish::Swap(BattleFinish* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bulidguid_, other->bulidguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFinish_descriptor_;
  metadata.reflection = BattleFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Exp::kMsgidFieldNumber;
const int Exp::kGuidFieldNumber;
const int Exp::kExpFieldNumber;
#endif  // !_MSC_VER

Exp::Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.Exp)
}

void Exp::InitAsDefaultInstance() {
}

Exp::Exp(const Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.Exp)
}

void Exp::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 41;
  guid_ = GOOGLE_ULONGLONG(0);
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Exp::~Exp() {
  // @@protoc_insertion_point(destructor:GSToGC.Exp)
  SharedDtor();
}

void Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Exp_descriptor_;
}

const Exp& Exp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

Exp* Exp::default_instance_ = NULL;

Exp* Exp::New() const {
  return new Exp;
}

void Exp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 41;
    guid_ = GOOGLE_ULONGLONG(0);
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.Exp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyExpInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.Exp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.Exp)
  return false;
#undef DO_
}

void Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.Exp)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyExpInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.Exp)
}

::google::protobuf::uint8* Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.Exp)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyExpInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.Exp)
  return target;
}

int Exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyExpInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Exp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Exp::MergeFrom(const Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exp::CopyFrom(const Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exp::IsInitialized() const {

  return true;
}

void Exp::Swap(Exp* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Exp_descriptor_;
  metadata.reflection = Exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelInfo::kMsgidFieldNumber;
const int LevelInfo::kGuidFieldNumber;
const int LevelInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

LevelInfo::LevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.LevelInfo)
}

void LevelInfo::InitAsDefaultInstance() {
}

LevelInfo::LevelInfo(const LevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.LevelInfo)
}

void LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 42;
  guid_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelInfo::~LevelInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.LevelInfo)
  SharedDtor();
}

void LevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelInfo_descriptor_;
}

const LevelInfo& LevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

LevelInfo* LevelInfo::default_instance_ = NULL;

LevelInfo* LevelInfo::New() const {
  return new LevelInfo;
}

void LevelInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 42;
    guid_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.LevelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroLevelInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.LevelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.LevelInfo)
  return false;
#undef DO_
}

void LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.LevelInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroLevelInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.LevelInfo)
}

::google::protobuf::uint8* LevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.LevelInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroLevelInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.LevelInfo)
  return target;
}

int LevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroLevelInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelInfo::MergeFrom(const LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelInfo::CopyFrom(const LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelInfo::IsInitialized() const {

  return true;
}

void LevelInfo::Swap(LevelInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelInfo_descriptor_;
  metadata.reflection = LevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbsorbBegin::kMsgidFieldNumber;
const int AbsorbBegin::kGuidFieldNumber;
const int AbsorbBegin::kMonsterguidFieldNumber;
#endif  // !_MSC_VER

AbsorbBegin::AbsorbBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.AbsorbBegin)
}

void AbsorbBegin::InitAsDefaultInstance() {
}

AbsorbBegin::AbsorbBegin(const AbsorbBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.AbsorbBegin)
}

void AbsorbBegin::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 43;
  guid_ = GOOGLE_ULONGLONG(0);
  monsterguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbsorbBegin::~AbsorbBegin() {
  // @@protoc_insertion_point(destructor:GSToGC.AbsorbBegin)
  SharedDtor();
}

void AbsorbBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AbsorbBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbsorbBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbsorbBegin_descriptor_;
}

const AbsorbBegin& AbsorbBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

AbsorbBegin* AbsorbBegin::default_instance_ = NULL;

AbsorbBegin* AbsorbBegin::New() const {
  return new AbsorbBegin;
}

void AbsorbBegin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AbsorbBegin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guid_, monsterguid_);
    msgid_ = 43;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbsorbBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.AbsorbBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbBegin];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monsterguid;
        break;
      }

      // optional uint64 monsterguid = 3;
      case 3: {
        if (tag == 24) {
         parse_monsterguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monsterguid_)));
          set_has_monsterguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.AbsorbBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.AbsorbBegin)
  return false;
#undef DO_
}

void AbsorbBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.AbsorbBegin)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbBegin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint64 monsterguid = 3;
  if (has_monsterguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->monsterguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.AbsorbBegin)
}

::google::protobuf::uint8* AbsorbBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.AbsorbBegin)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbBegin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint64 monsterguid = 3;
  if (has_monsterguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->monsterguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.AbsorbBegin)
  return target;
}

int AbsorbBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbBegin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 monsterguid = 3;
    if (has_monsterguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monsterguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbsorbBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbsorbBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbsorbBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbsorbBegin::MergeFrom(const AbsorbBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_monsterguid()) {
      set_monsterguid(from.monsterguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbsorbBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsorbBegin::CopyFrom(const AbsorbBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsorbBegin::IsInitialized() const {

  return true;
}

void AbsorbBegin::Swap(AbsorbBegin* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(monsterguid_, other->monsterguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbsorbBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbsorbBegin_descriptor_;
  metadata.reflection = AbsorbBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbsorbRes::kMsgidFieldNumber;
const int AbsorbRes::kGuidFieldNumber;
const int AbsorbRes::kResFieldNumber;
const int AbsorbRes::kAbsorb1FieldNumber;
const int AbsorbRes::kAbsorb2FieldNumber;
#endif  // !_MSC_VER

AbsorbRes::AbsorbRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.AbsorbRes)
}

void AbsorbRes::InitAsDefaultInstance() {
}

AbsorbRes::AbsorbRes(const AbsorbRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.AbsorbRes)
}

void AbsorbRes::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 44;
  guid_ = GOOGLE_ULONGLONG(0);
  res_ = false;
  absorb1_ = 0;
  absorb2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbsorbRes::~AbsorbRes() {
  // @@protoc_insertion_point(destructor:GSToGC.AbsorbRes)
  SharedDtor();
}

void AbsorbRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AbsorbRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbsorbRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbsorbRes_descriptor_;
}

const AbsorbRes& AbsorbRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

AbsorbRes* AbsorbRes::default_instance_ = NULL;

AbsorbRes* AbsorbRes::New() const {
  return new AbsorbRes;
}

void AbsorbRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AbsorbRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(res_, absorb2_);
    msgid_ = 44;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbsorbRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.AbsorbRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbMonsterResult];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional bool res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_absorb1;
        break;
      }

      // optional int32 absorb1 = 4;
      case 4: {
        if (tag == 32) {
         parse_absorb1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorb1_)));
          set_has_absorb1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_absorb2;
        break;
      }

      // optional int32 absorb2 = 5;
      case 5: {
        if (tag == 40) {
         parse_absorb2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorb2_)));
          set_has_absorb2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.AbsorbRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.AbsorbRes)
  return false;
#undef DO_
}

void AbsorbRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.AbsorbRes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbMonsterResult];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional bool res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->res(), output);
  }

  // optional int32 absorb1 = 4;
  if (has_absorb1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->absorb1(), output);
  }

  // optional int32 absorb2 = 5;
  if (has_absorb2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->absorb2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.AbsorbRes)
}

::google::protobuf::uint8* AbsorbRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.AbsorbRes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbMonsterResult];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional bool res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->res(), target);
  }

  // optional int32 absorb1 = 4;
  if (has_absorb1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->absorb1(), target);
  }

  // optional int32 absorb2 = 5;
  if (has_absorb2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->absorb2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.AbsorbRes)
  return target;
}

int AbsorbRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAbsorbMonsterResult];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional bool res = 3;
    if (has_res()) {
      total_size += 1 + 1;
    }

    // optional int32 absorb1 = 4;
    if (has_absorb1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorb1());
    }

    // optional int32 absorb2 = 5;
    if (has_absorb2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorb2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbsorbRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbsorbRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbsorbRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbsorbRes::MergeFrom(const AbsorbRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_absorb1()) {
      set_absorb1(from.absorb1());
    }
    if (from.has_absorb2()) {
      set_absorb2(from.absorb2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbsorbRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsorbRes::CopyFrom(const AbsorbRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsorbRes::IsInitialized() const {

  return true;
}

void AbsorbRes::Swap(AbsorbRes* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(res_, other->res_);
    std::swap(absorb1_, other->absorb1_);
    std::swap(absorb2_, other->absorb2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbsorbRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbsorbRes_descriptor_;
  metadata.reflection = AbsorbRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelAbsorb::kMsgidFieldNumber;
const int CancelAbsorb::kMonsteridFieldNumber;
#endif  // !_MSC_VER

CancelAbsorb::CancelAbsorb()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CancelAbsorb)
}

void CancelAbsorb::InitAsDefaultInstance() {
}

CancelAbsorb::CancelAbsorb(const CancelAbsorb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CancelAbsorb)
}

void CancelAbsorb::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 45;
  monsterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelAbsorb::~CancelAbsorb() {
  // @@protoc_insertion_point(destructor:GSToGC.CancelAbsorb)
  SharedDtor();
}

void CancelAbsorb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelAbsorb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelAbsorb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelAbsorb_descriptor_;
}

const CancelAbsorb& CancelAbsorb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CancelAbsorb* CancelAbsorb::default_instance_ = NULL;

CancelAbsorb* CancelAbsorb::New() const {
  return new CancelAbsorb;
}

void CancelAbsorb::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 45;
    monsterid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelAbsorb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CancelAbsorb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCancelAbsorbSkill];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monsterid;
        break;
      }

      // optional int32 monsterid = 2;
      case 2: {
        if (tag == 16) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CancelAbsorb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CancelAbsorb)
  return false;
#undef DO_
}

void CancelAbsorb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CancelAbsorb)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCancelAbsorbSkill];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 monsterid = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CancelAbsorb)
}

::google::protobuf::uint8* CancelAbsorb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CancelAbsorb)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCancelAbsorbSkill];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 monsterid = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CancelAbsorb)
  return target;
}

int CancelAbsorb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCancelAbsorbSkill];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 monsterid = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelAbsorb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelAbsorb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelAbsorb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelAbsorb::MergeFrom(const CancelAbsorb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelAbsorb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelAbsorb::CopyFrom(const CancelAbsorb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelAbsorb::IsInitialized() const {

  return true;
}

void CancelAbsorb::Swap(CancelAbsorb* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelAbsorb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelAbsorb_descriptor_;
  metadata.reflection = CancelAbsorb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGameInfo::kMsgidFieldNumber;
const int UserGameInfo::kHeadidFieldNumber;
const int UserGameInfo::kNicknameFieldNumber;
const int UserGameInfo::kLevelFieldNumber;
const int UserGameInfo::kUpgradeexpFieldNumber;
const int UserGameInfo::kCurexpFieldNumber;
const int UserGameInfo::kTotalgameinnsFieldNumber;
const int UserGameInfo::kTotalwintimesFieldNumber;
const int UserGameInfo::kHerokillsFieldNumber;
const int UserGameInfo::kDestorybuildingsFieldNumber;
const int UserGameInfo::kDeadtimesFieldNumber;
const int UserGameInfo::kTotalAchnumFieldNumber;
const int UserGameInfo::kAchnumFieldNumber;
const int UserGameInfo::kVipscoreFieldNumber;
const int UserGameInfo::kAssistnumFieldNumber;
const int UserGameInfo::kLadderscoreFieldNumber;
const int UserGameInfo::kGuildnameFieldNumber;
const int UserGameInfo::kExpAdtimeFieldNumber;
const int UserGameInfo::kGoldAddtimeFieldNumber;
#endif  // !_MSC_VER

UserGameInfo::UserGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.UserGameInfo)
}

void UserGameInfo::InitAsDefaultInstance() {
}

UserGameInfo::UserGameInfo(const UserGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.UserGameInfo)
}

void UserGameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 46;
  headid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  upgradeexp_ = 0;
  curexp_ = 0;
  totalgameinns_ = 0;
  totalwintimes_ = 0;
  herokills_ = 0;
  destorybuildings_ = 0;
  deadtimes_ = 0;
  total_achnum_ = 0;
  achnum_ = 0;
  vipscore_ = 0;
  assistnum_ = 0;
  ladderscore_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_adtime_ = GOOGLE_LONGLONG(0);
  gold_addtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGameInfo::~UserGameInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.UserGameInfo)
  SharedDtor();
}

void UserGameInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void UserGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGameInfo_descriptor_;
}

const UserGameInfo& UserGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

UserGameInfo* UserGameInfo::default_instance_ = NULL;

UserGameInfo* UserGameInfo::New() const {
  return new UserGameInfo;
}

void UserGameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserGameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, totalwintimes_);
    msgid_ = 46;
    headid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(herokills_, assistnum_);
    ladderscore_ = 0;
  }
  if (_has_bits_[16 / 32] & 458752) {
    ZR_(exp_adtime_, gold_addtime_);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.UserGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGameInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_headid;
        break;
      }

      // optional int32 headid = 2;
      case 2: {
        if (tag == 16) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upgradeexp;
        break;
      }

      // optional int32 upgradeexp = 5;
      case 5: {
        if (tag == 40) {
         parse_upgradeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradeexp_)));
          set_has_upgradeexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_curexp;
        break;
      }

      // optional int32 curexp = 6;
      case 6: {
        if (tag == 48) {
         parse_curexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalgameinns;
        break;
      }

      // optional int32 totalgameinns = 7;
      case 7: {
        if (tag == 56) {
         parse_totalgameinns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgameinns_)));
          set_has_totalgameinns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalwintimes;
        break;
      }

      // optional int32 totalwintimes = 8;
      case 8: {
        if (tag == 64) {
         parse_totalwintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalwintimes_)));
          set_has_totalwintimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_herokills;
        break;
      }

      // optional int32 herokills = 9;
      case 9: {
        if (tag == 72) {
         parse_herokills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herokills_)));
          set_has_herokills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_destorybuildings;
        break;
      }

      // optional int32 destorybuildings = 10;
      case 10: {
        if (tag == 80) {
         parse_destorybuildings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destorybuildings_)));
          set_has_destorybuildings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_deadtimes;
        break;
      }

      // optional int32 deadtimes = 11;
      case 11: {
        if (tag == 88) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_total_achnum;
        break;
      }

      // optional int32 total_achnum = 12;
      case 12: {
        if (tag == 96) {
         parse_total_achnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_achnum_)));
          set_has_total_achnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_achnum;
        break;
      }

      // optional int32 achnum = 13;
      case 13: {
        if (tag == 104) {
         parse_achnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achnum_)));
          set_has_achnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_vipscore;
        break;
      }

      // optional int32 vipscore = 14;
      case 14: {
        if (tag == 112) {
         parse_vipscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipscore_)));
          set_has_vipscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_assistnum;
        break;
      }

      // optional int32 assistnum = 15;
      case 15: {
        if (tag == 120) {
         parse_assistnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assistnum_)));
          set_has_assistnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ladderscore;
        break;
      }

      // optional int32 ladderscore = 16;
      case 16: {
        if (tag == 128) {
         parse_ladderscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladderscore_)));
          set_has_ladderscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_guildname;
        break;
      }

      // optional string guildname = 17;
      case 17: {
        if (tag == 138) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_exp_adtime;
        break;
      }

      // optional int64 exp_adtime = 18;
      case 18: {
        if (tag == 144) {
         parse_exp_adtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_adtime_)));
          set_has_exp_adtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_gold_addtime;
        break;
      }

      // optional int64 gold_addtime = 19;
      case 19: {
        if (tag == 152) {
         parse_gold_addtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_addtime_)));
          set_has_gold_addtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.UserGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.UserGameInfo)
  return false;
#undef DO_
}

void UserGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.UserGameInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGameInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 headid = 2;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 upgradeexp = 5;
  if (has_upgradeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upgradeexp(), output);
  }

  // optional int32 curexp = 6;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curexp(), output);
  }

  // optional int32 totalgameinns = 7;
  if (has_totalgameinns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalgameinns(), output);
  }

  // optional int32 totalwintimes = 8;
  if (has_totalwintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalwintimes(), output);
  }

  // optional int32 herokills = 9;
  if (has_herokills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->herokills(), output);
  }

  // optional int32 destorybuildings = 10;
  if (has_destorybuildings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->destorybuildings(), output);
  }

  // optional int32 deadtimes = 11;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->deadtimes(), output);
  }

  // optional int32 total_achnum = 12;
  if (has_total_achnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_achnum(), output);
  }

  // optional int32 achnum = 13;
  if (has_achnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->achnum(), output);
  }

  // optional int32 vipscore = 14;
  if (has_vipscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->vipscore(), output);
  }

  // optional int32 assistnum = 15;
  if (has_assistnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->assistnum(), output);
  }

  // optional int32 ladderscore = 16;
  if (has_ladderscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ladderscore(), output);
  }

  // optional string guildname = 17;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->guildname(), output);
  }

  // optional int64 exp_adtime = 18;
  if (has_exp_adtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->exp_adtime(), output);
  }

  // optional int64 gold_addtime = 19;
  if (has_gold_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->gold_addtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.UserGameInfo)
}

::google::protobuf::uint8* UserGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.UserGameInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGameInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 headid = 2;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 upgradeexp = 5;
  if (has_upgradeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upgradeexp(), target);
  }

  // optional int32 curexp = 6;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curexp(), target);
  }

  // optional int32 totalgameinns = 7;
  if (has_totalgameinns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalgameinns(), target);
  }

  // optional int32 totalwintimes = 8;
  if (has_totalwintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalwintimes(), target);
  }

  // optional int32 herokills = 9;
  if (has_herokills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->herokills(), target);
  }

  // optional int32 destorybuildings = 10;
  if (has_destorybuildings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->destorybuildings(), target);
  }

  // optional int32 deadtimes = 11;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->deadtimes(), target);
  }

  // optional int32 total_achnum = 12;
  if (has_total_achnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_achnum(), target);
  }

  // optional int32 achnum = 13;
  if (has_achnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->achnum(), target);
  }

  // optional int32 vipscore = 14;
  if (has_vipscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->vipscore(), target);
  }

  // optional int32 assistnum = 15;
  if (has_assistnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->assistnum(), target);
  }

  // optional int32 ladderscore = 16;
  if (has_ladderscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ladderscore(), target);
  }

  // optional string guildname = 17;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->guildname(), target);
  }

  // optional int64 exp_adtime = 18;
  if (has_exp_adtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->exp_adtime(), target);
  }

  // optional int64 gold_addtime = 19;
  if (has_gold_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->gold_addtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.UserGameInfo)
  return target;
}

int UserGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyUserGameInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 headid = 2;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 upgradeexp = 5;
    if (has_upgradeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradeexp());
    }

    // optional int32 curexp = 6;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curexp());
    }

    // optional int32 totalgameinns = 7;
    if (has_totalgameinns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgameinns());
    }

    // optional int32 totalwintimes = 8;
    if (has_totalwintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalwintimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 herokills = 9;
    if (has_herokills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herokills());
    }

    // optional int32 destorybuildings = 10;
    if (has_destorybuildings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destorybuildings());
    }

    // optional int32 deadtimes = 11;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadtimes());
    }

    // optional int32 total_achnum = 12;
    if (has_total_achnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_achnum());
    }

    // optional int32 achnum = 13;
    if (has_achnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achnum());
    }

    // optional int32 vipscore = 14;
    if (has_vipscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipscore());
    }

    // optional int32 assistnum = 15;
    if (has_assistnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assistnum());
    }

    // optional int32 ladderscore = 16;
    if (has_ladderscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladderscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string guildname = 17;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int64 exp_adtime = 18;
    if (has_exp_adtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_adtime());
    }

    // optional int64 gold_addtime = 19;
    if (has_gold_addtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold_addtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGameInfo::MergeFrom(const UserGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_upgradeexp()) {
      set_upgradeexp(from.upgradeexp());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_totalgameinns()) {
      set_totalgameinns(from.totalgameinns());
    }
    if (from.has_totalwintimes()) {
      set_totalwintimes(from.totalwintimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_herokills()) {
      set_herokills(from.herokills());
    }
    if (from.has_destorybuildings()) {
      set_destorybuildings(from.destorybuildings());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_total_achnum()) {
      set_total_achnum(from.total_achnum());
    }
    if (from.has_achnum()) {
      set_achnum(from.achnum());
    }
    if (from.has_vipscore()) {
      set_vipscore(from.vipscore());
    }
    if (from.has_assistnum()) {
      set_assistnum(from.assistnum());
    }
    if (from.has_ladderscore()) {
      set_ladderscore(from.ladderscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_exp_adtime()) {
      set_exp_adtime(from.exp_adtime());
    }
    if (from.has_gold_addtime()) {
      set_gold_addtime(from.gold_addtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameInfo::CopyFrom(const UserGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameInfo::IsInitialized() const {

  return true;
}

void UserGameInfo::Swap(UserGameInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(headid_, other->headid_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    std::swap(upgradeexp_, other->upgradeexp_);
    std::swap(curexp_, other->curexp_);
    std::swap(totalgameinns_, other->totalgameinns_);
    std::swap(totalwintimes_, other->totalwintimes_);
    std::swap(herokills_, other->herokills_);
    std::swap(destorybuildings_, other->destorybuildings_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(total_achnum_, other->total_achnum_);
    std::swap(achnum_, other->achnum_);
    std::swap(vipscore_, other->vipscore_);
    std::swap(assistnum_, other->assistnum_);
    std::swap(ladderscore_, other->ladderscore_);
    std::swap(guildname_, other->guildname_);
    std::swap(exp_adtime_, other->exp_adtime_);
    std::swap(gold_addtime_, other->gold_addtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGameInfo_descriptor_;
  metadata.reflection = UserGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroKills::kMsgidFieldNumber;
const int HeroKills::kGuidFieldNumber;
const int HeroKills::kKillsFieldNumber;
#endif  // !_MSC_VER

HeroKills::HeroKills()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroKills)
}

void HeroKills::InitAsDefaultInstance() {
}

HeroKills::HeroKills(const HeroKills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroKills)
}

void HeroKills::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 47;
  guid_ = GOOGLE_ULONGLONG(0);
  kills_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroKills::~HeroKills() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroKills)
  SharedDtor();
}

void HeroKills::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroKills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroKills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroKills_descriptor_;
}

const HeroKills& HeroKills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroKills* HeroKills::default_instance_ = NULL;

HeroKills* HeroKills::New() const {
  return new HeroKills;
}

void HeroKills::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 47;
    guid_ = GOOGLE_ULONGLONG(0);
    kills_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroKills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroKills)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroKills];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kills;
        break;
      }

      // optional int32 kills = 3;
      case 3: {
        if (tag == 24) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroKills)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroKills)
  return false;
#undef DO_
}

void HeroKills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroKills)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroKills];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 kills = 3;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kills(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroKills)
}

::google::protobuf::uint8* HeroKills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroKills)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroKills];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 kills = 3;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kills(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroKills)
  return target;
}

int HeroKills::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroKills];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 kills = 3;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kills());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroKills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroKills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroKills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroKills::MergeFrom(const HeroKills& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroKills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroKills::CopyFrom(const HeroKills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroKills::IsInitialized() const {

  return true;
}

void HeroKills::Swap(HeroKills* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(kills_, other->kills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroKills::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroKills_descriptor_;
  metadata.reflection = HeroKills_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurDeadTimes::kMsgidFieldNumber;
const int CurDeadTimes::kObjguidFieldNumber;
const int CurDeadTimes::kDeadtimesFieldNumber;
const int CurDeadTimes::kKillerCampFieldNumber;
const int CurDeadTimes::kReasonheroguidFieldNumber;
const int CurDeadTimes::kIfAcedFieldNumber;
const int CurDeadTimes::kCampFieldNumber;
const int CurDeadTimes::kHerostateFieldNumber;
const int CurDeadTimes::kHerotitleFieldNumber;
#endif  // !_MSC_VER

CurDeadTimes::CurDeadTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CurDeadTimes)
}

void CurDeadTimes::InitAsDefaultInstance() {
}

CurDeadTimes::CurDeadTimes(const CurDeadTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CurDeadTimes)
}

void CurDeadTimes::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 48;
  objguid_ = GOOGLE_ULONGLONG(0);
  deadtimes_ = 0;
  killer_camp_ = 0;
  reasonheroguid_ = GOOGLE_ULONGLONG(0);
  ifaced_ = false;
  camp_ = 0;
  herostate_ = 0;
  herotitle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurDeadTimes::~CurDeadTimes() {
  // @@protoc_insertion_point(destructor:GSToGC.CurDeadTimes)
  SharedDtor();
}

void CurDeadTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurDeadTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurDeadTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurDeadTimes_descriptor_;
}

const CurDeadTimes& CurDeadTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CurDeadTimes* CurDeadTimes::default_instance_ = NULL;

CurDeadTimes* CurDeadTimes::New() const {
  return new CurDeadTimes;
}

void CurDeadTimes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurDeadTimes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deadtimes_, herostate_);
    msgid_ = 48;
    objguid_ = GOOGLE_ULONGLONG(0);
  }
  herotitle_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurDeadTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CurDeadTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurDeadTimes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objguid;
        break;
      }

      // optional uint64 objguid = 2;
      case 2: {
        if (tag == 16) {
         parse_objguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deadtimes;
        break;
      }

      // optional int32 deadtimes = 3;
      case 3: {
        if (tag == 24) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_killer_camp;
        break;
      }

      // optional int32 killer_camp = 4;
      case 4: {
        if (tag == 32) {
         parse_killer_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killer_camp_)));
          set_has_killer_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reasonheroguid;
        break;
      }

      // optional uint64 reasonheroguid = 5;
      case 5: {
        if (tag == 40) {
         parse_reasonheroguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reasonheroguid_)));
          set_has_reasonheroguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ifAced;
        break;
      }

      // optional bool ifAced = 6;
      case 6: {
        if (tag == 48) {
         parse_ifAced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifaced_)));
          set_has_ifaced();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_camp;
        break;
      }

      // optional int32 camp = 7;
      case 7: {
        if (tag == 56) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_herostate;
        break;
      }

      // optional int32 herostate = 8;
      case 8: {
        if (tag == 64) {
         parse_herostate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herostate_)));
          set_has_herostate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_herotitle;
        break;
      }

      // optional int32 herotitle = 9;
      case 9: {
        if (tag == 72) {
         parse_herotitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herotitle_)));
          set_has_herotitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CurDeadTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CurDeadTimes)
  return false;
#undef DO_
}

void CurDeadTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CurDeadTimes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurDeadTimes];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objguid(), output);
  }

  // optional int32 deadtimes = 3;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deadtimes(), output);
  }

  // optional int32 killer_camp = 4;
  if (has_killer_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->killer_camp(), output);
  }

  // optional uint64 reasonheroguid = 5;
  if (has_reasonheroguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->reasonheroguid(), output);
  }

  // optional bool ifAced = 6;
  if (has_ifaced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ifaced(), output);
  }

  // optional int32 camp = 7;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->camp(), output);
  }

  // optional int32 herostate = 8;
  if (has_herostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->herostate(), output);
  }

  // optional int32 herotitle = 9;
  if (has_herotitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->herotitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CurDeadTimes)
}

::google::protobuf::uint8* CurDeadTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CurDeadTimes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurDeadTimes];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 objguid = 2;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->objguid(), target);
  }

  // optional int32 deadtimes = 3;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deadtimes(), target);
  }

  // optional int32 killer_camp = 4;
  if (has_killer_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->killer_camp(), target);
  }

  // optional uint64 reasonheroguid = 5;
  if (has_reasonheroguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->reasonheroguid(), target);
  }

  // optional bool ifAced = 6;
  if (has_ifaced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ifaced(), target);
  }

  // optional int32 camp = 7;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->camp(), target);
  }

  // optional int32 herostate = 8;
  if (has_herostate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->herostate(), target);
  }

  // optional int32 herotitle = 9;
  if (has_herotitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->herotitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CurDeadTimes)
  return target;
}

int CurDeadTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurDeadTimes];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 objguid = 2;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 deadtimes = 3;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadtimes());
    }

    // optional int32 killer_camp = 4;
    if (has_killer_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killer_camp());
    }

    // optional uint64 reasonheroguid = 5;
    if (has_reasonheroguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reasonheroguid());
    }

    // optional bool ifAced = 6;
    if (has_ifaced()) {
      total_size += 1 + 1;
    }

    // optional int32 camp = 7;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 herostate = 8;
    if (has_herostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herostate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 herotitle = 9;
    if (has_herotitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herotitle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurDeadTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurDeadTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurDeadTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurDeadTimes::MergeFrom(const CurDeadTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_killer_camp()) {
      set_killer_camp(from.killer_camp());
    }
    if (from.has_reasonheroguid()) {
      set_reasonheroguid(from.reasonheroguid());
    }
    if (from.has_ifaced()) {
      set_ifaced(from.ifaced());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_herostate()) {
      set_herostate(from.herostate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_herotitle()) {
      set_herotitle(from.herotitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurDeadTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurDeadTimes::CopyFrom(const CurDeadTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurDeadTimes::IsInitialized() const {

  return true;
}

void CurDeadTimes::Swap(CurDeadTimes* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(objguid_, other->objguid_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(killer_camp_, other->killer_camp_);
    std::swap(reasonheroguid_, other->reasonheroguid_);
    std::swap(ifaced_, other->ifaced_);
    std::swap(camp_, other->camp_);
    std::swap(herostate_, other->herostate_);
    std::swap(herotitle_, other->herotitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurDeadTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurDeadTimes_descriptor_;
  metadata.reflection = CurDeadTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurCP::kMsgidFieldNumber;
const int CurCP::kTargetguidFieldNumber;
const int CurCP::kPersonCpFieldNumber;
const int CurCP::kTeamCpFieldNumber;
#endif  // !_MSC_VER

CurCP::CurCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CurCP)
}

void CurCP::InitAsDefaultInstance() {
}

CurCP::CurCP(const CurCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CurCP)
}

void CurCP::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 49;
  targetguid_ = GOOGLE_ULONGLONG(0);
  person_cp_ = 0;
  team_cp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurCP::~CurCP() {
  // @@protoc_insertion_point(destructor:GSToGC.CurCP)
  SharedDtor();
}

void CurCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurCP_descriptor_;
}

const CurCP& CurCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CurCP* CurCP::default_instance_ = NULL;

CurCP* CurCP::New() const {
  return new CurCP;
}

void CurCP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurCP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(person_cp_, team_cp_);
    msgid_ = 49;
    targetguid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CurCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurCP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetguid;
        break;
      }

      // optional uint64 targetguid = 2;
      case 2: {
        if (tag == 16) {
         parse_targetguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetguid_)));
          set_has_targetguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_person_cp;
        break;
      }

      // optional int32 person_cp = 3;
      case 3: {
        if (tag == 24) {
         parse_person_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &person_cp_)));
          set_has_person_cp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team_cp;
        break;
      }

      // optional int32 team_cp = 4;
      case 4: {
        if (tag == 32) {
         parse_team_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_cp_)));
          set_has_team_cp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CurCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CurCP)
  return false;
#undef DO_
}

void CurCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CurCP)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurCP];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 targetguid = 2;
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetguid(), output);
  }

  // optional int32 person_cp = 3;
  if (has_person_cp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->person_cp(), output);
  }

  // optional int32 team_cp = 4;
  if (has_team_cp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_cp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CurCP)
}

::google::protobuf::uint8* CurCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CurCP)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurCP];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 targetguid = 2;
  if (has_targetguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetguid(), target);
  }

  // optional int32 person_cp = 3;
  if (has_person_cp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->person_cp(), target);
  }

  // optional int32 team_cp = 4;
  if (has_team_cp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_cp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CurCP)
  return target;
}

int CurCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurCP];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 targetguid = 2;
    if (has_targetguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetguid());
    }

    // optional int32 person_cp = 3;
    if (has_person_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->person_cp());
    }

    // optional int32 team_cp = 4;
    if (has_team_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_cp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurCP::MergeFrom(const CurCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_targetguid()) {
      set_targetguid(from.targetguid());
    }
    if (from.has_person_cp()) {
      set_person_cp(from.person_cp());
    }
    if (from.has_team_cp()) {
      set_team_cp(from.team_cp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurCP::CopyFrom(const CurCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurCP::IsInitialized() const {

  return true;
}

void CurCP::Swap(CurCP* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(targetguid_, other->targetguid_);
    std::swap(person_cp_, other->person_cp_);
    std::swap(team_cp_, other->team_cp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurCP_descriptor_;
  metadata.reflection = CurCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurAtkSpeed_SpeedInfo::kGuidFieldNumber;
const int CurAtkSpeed_SpeedInfo::kSpeedFieldNumber;
#endif  // !_MSC_VER

CurAtkSpeed_SpeedInfo::CurAtkSpeed_SpeedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CurAtkSpeed.SpeedInfo)
}

void CurAtkSpeed_SpeedInfo::InitAsDefaultInstance() {
}

CurAtkSpeed_SpeedInfo::CurAtkSpeed_SpeedInfo(const CurAtkSpeed_SpeedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CurAtkSpeed.SpeedInfo)
}

void CurAtkSpeed_SpeedInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurAtkSpeed_SpeedInfo::~CurAtkSpeed_SpeedInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.CurAtkSpeed.SpeedInfo)
  SharedDtor();
}

void CurAtkSpeed_SpeedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurAtkSpeed_SpeedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurAtkSpeed_SpeedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurAtkSpeed_SpeedInfo_descriptor_;
}

const CurAtkSpeed_SpeedInfo& CurAtkSpeed_SpeedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CurAtkSpeed_SpeedInfo* CurAtkSpeed_SpeedInfo::default_instance_ = NULL;

CurAtkSpeed_SpeedInfo* CurAtkSpeed_SpeedInfo::New() const {
  return new CurAtkSpeed_SpeedInfo;
}

void CurAtkSpeed_SpeedInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurAtkSpeed_SpeedInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, speed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurAtkSpeed_SpeedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CurAtkSpeed.SpeedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }

      // optional int32 speed = 2;
      case 2: {
        if (tag == 16) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CurAtkSpeed.SpeedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CurAtkSpeed.SpeedInfo)
  return false;
#undef DO_
}

void CurAtkSpeed_SpeedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CurAtkSpeed.SpeedInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CurAtkSpeed.SpeedInfo)
}

::google::protobuf::uint8* CurAtkSpeed_SpeedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CurAtkSpeed.SpeedInfo)
  // optional uint64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CurAtkSpeed.SpeedInfo)
  return target;
}

int CurAtkSpeed_SpeedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurAtkSpeed_SpeedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurAtkSpeed_SpeedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurAtkSpeed_SpeedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurAtkSpeed_SpeedInfo::MergeFrom(const CurAtkSpeed_SpeedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurAtkSpeed_SpeedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurAtkSpeed_SpeedInfo::CopyFrom(const CurAtkSpeed_SpeedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurAtkSpeed_SpeedInfo::IsInitialized() const {

  return true;
}

void CurAtkSpeed_SpeedInfo::Swap(CurAtkSpeed_SpeedInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurAtkSpeed_SpeedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurAtkSpeed_SpeedInfo_descriptor_;
  metadata.reflection = CurAtkSpeed_SpeedInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CurAtkSpeed::kMsgidFieldNumber;
const int CurAtkSpeed::kInfoFieldNumber;
#endif  // !_MSC_VER

CurAtkSpeed::CurAtkSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CurAtkSpeed)
}

void CurAtkSpeed::InitAsDefaultInstance() {
}

CurAtkSpeed::CurAtkSpeed(const CurAtkSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CurAtkSpeed)
}

void CurAtkSpeed::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurAtkSpeed::~CurAtkSpeed() {
  // @@protoc_insertion_point(destructor:GSToGC.CurAtkSpeed)
  SharedDtor();
}

void CurAtkSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurAtkSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurAtkSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurAtkSpeed_descriptor_;
}

const CurAtkSpeed& CurAtkSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CurAtkSpeed* CurAtkSpeed::default_instance_ = NULL;

CurAtkSpeed* CurAtkSpeed::New() const {
  return new CurAtkSpeed;
}

void CurAtkSpeed::Clear() {
  msgid_ = 50;
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurAtkSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CurAtkSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurAtkSpeed];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .GSToGC.CurAtkSpeed.SpeedInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CurAtkSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CurAtkSpeed)
  return false;
#undef DO_
}

void CurAtkSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CurAtkSpeed)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurAtkSpeed];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.CurAtkSpeed.SpeedInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CurAtkSpeed)
}

::google::protobuf::uint8* CurAtkSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CurAtkSpeed)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurAtkSpeed];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.CurAtkSpeed.SpeedInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CurAtkSpeed)
  return target;
}

int CurAtkSpeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyCurAtkSpeed];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.CurAtkSpeed.SpeedInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurAtkSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurAtkSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurAtkSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurAtkSpeed::MergeFrom(const CurAtkSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurAtkSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurAtkSpeed::CopyFrom(const CurAtkSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurAtkSpeed::IsInitialized() const {

  return true;
}

void CurAtkSpeed::Swap(CurAtkSpeed* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurAtkSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurAtkSpeed_descriptor_;
  metadata.reflection = CurAtkSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuryVal::kMsgidFieldNumber;
const int FuryVal::kGuidFieldNumber;
const int FuryVal::kFuryFieldNumber;
#endif  // !_MSC_VER

FuryVal::FuryVal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.FuryVal)
}

void FuryVal::InitAsDefaultInstance() {
}

FuryVal::FuryVal(const FuryVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.FuryVal)
}

void FuryVal::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 51;
  guid_ = GOOGLE_ULONGLONG(0);
  fury_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuryVal::~FuryVal() {
  // @@protoc_insertion_point(destructor:GSToGC.FuryVal)
  SharedDtor();
}

void FuryVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuryVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuryVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuryVal_descriptor_;
}

const FuryVal& FuryVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

FuryVal* FuryVal::default_instance_ = NULL;

FuryVal* FuryVal::New() const {
  return new FuryVal;
}

void FuryVal::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 51;
    guid_ = GOOGLE_ULONGLONG(0);
    fury_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuryVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.FuryVal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryValue];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fury;
        break;
      }

      // optional int32 fury = 3;
      case 3: {
        if (tag == 24) {
         parse_fury:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fury_)));
          set_has_fury();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.FuryVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.FuryVal)
  return false;
#undef DO_
}

void FuryVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.FuryVal)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryValue];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 fury = 3;
  if (has_fury()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fury(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.FuryVal)
}

::google::protobuf::uint8* FuryVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.FuryVal)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryValue];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 fury = 3;
  if (has_fury()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fury(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.FuryVal)
  return target;
}

int FuryVal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryValue];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 fury = 3;
    if (has_fury()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fury());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuryVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuryVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuryVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuryVal::MergeFrom(const FuryVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_fury()) {
      set_fury(from.fury());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuryVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuryVal::CopyFrom(const FuryVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuryVal::IsInitialized() const {

  return true;
}

void FuryVal::Swap(FuryVal* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(fury_, other->fury_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuryVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuryVal_descriptor_;
  metadata.reflection = FuryVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuryState::kMsgidFieldNumber;
const int FuryState::kGuidFieldNumber;
const int FuryState::kStateFieldNumber;
#endif  // !_MSC_VER

FuryState::FuryState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.FuryState)
}

void FuryState::InitAsDefaultInstance() {
}

FuryState::FuryState(const FuryState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.FuryState)
}

void FuryState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 52;
  guid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuryState::~FuryState() {
  // @@protoc_insertion_point(destructor:GSToGC.FuryState)
  SharedDtor();
}

void FuryState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuryState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuryState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuryState_descriptor_;
}

const FuryState& FuryState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

FuryState* FuryState::default_instance_ = NULL;

FuryState* FuryState::New() const {
  return new FuryState;
}

void FuryState::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 52;
    guid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuryState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.FuryState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.FuryState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.FuryState)
  return false;
#undef DO_
}

void FuryState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.FuryState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.FuryState)
}

::google::protobuf::uint8* FuryState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.FuryState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.FuryState)
  return target;
}

int FuryState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyFuryState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuryState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuryState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuryState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuryState::MergeFrom(const FuryState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuryState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuryState::CopyFrom(const FuryState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuryState::IsInitialized() const {

  return true;
}

void FuryState::Swap(FuryState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuryState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuryState_descriptor_;
  metadata.reflection = FuryState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHeroReborn::kMsgidFieldNumber;
#endif  // !_MSC_VER

NotifyHeroReborn::NotifyHeroReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyHeroReborn)
}

void NotifyHeroReborn::InitAsDefaultInstance() {
}

NotifyHeroReborn::NotifyHeroReborn(const NotifyHeroReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyHeroReborn)
}

void NotifyHeroReborn::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 110;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHeroReborn::~NotifyHeroReborn() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyHeroReborn)
  SharedDtor();
}

void NotifyHeroReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHeroReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHeroReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeroReborn_descriptor_;
}

const NotifyHeroReborn& NotifyHeroReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyHeroReborn* NotifyHeroReborn::default_instance_ = NULL;

NotifyHeroReborn* NotifyHeroReborn::New() const {
  return new NotifyHeroReborn;
}

void NotifyHeroReborn::Clear() {
  msgid_ = 110;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHeroReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyHeroReborn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroReborn];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyHeroReborn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyHeroReborn)
  return false;
#undef DO_
}

void NotifyHeroReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyHeroReborn)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroReborn];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyHeroReborn)
}

::google::protobuf::uint8* NotifyHeroReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyHeroReborn)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroReborn];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyHeroReborn)
  return target;
}

int NotifyHeroReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroReborn];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHeroReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHeroReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHeroReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHeroReborn::MergeFrom(const NotifyHeroReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHeroReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHeroReborn::CopyFrom(const NotifyHeroReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHeroReborn::IsInitialized() const {

  return true;
}

void NotifyHeroReborn::Swap(NotifyHeroReborn* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHeroReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHeroReborn_descriptor_;
  metadata.reflection = NotifyHeroReborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RebornTimes::kMsgidFieldNumber;
const int RebornTimes::kMasterguidFieldNumber;
const int RebornTimes::kSendtimesFieldNumber;
const int RebornTimes::kGoldFieldNumber;
const int RebornTimes::kRemainTimesFieldNumber;
const int RebornTimes::kRebornTimeFieldNumber;
#endif  // !_MSC_VER

RebornTimes::RebornTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RebornTimes)
}

void RebornTimes::InitAsDefaultInstance() {
}

RebornTimes::RebornTimes(const RebornTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RebornTimes)
}

void RebornTimes::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 53;
  masterguid_ = GOOGLE_ULONGLONG(0);
  sendtimes_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  remain_times_ = 0;
  reborn_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RebornTimes::~RebornTimes() {
  // @@protoc_insertion_point(destructor:GSToGC.RebornTimes)
  SharedDtor();
}

void RebornTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RebornTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RebornTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RebornTimes_descriptor_;
}

const RebornTimes& RebornTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RebornTimes* RebornTimes::default_instance_ = NULL;

RebornTimes* RebornTimes::New() const {
  return new RebornTimes;
}

void RebornTimes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RebornTimes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(masterguid_, sendtimes_);
    ZR_(remain_times_, reborn_time_);
    msgid_ = 53;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RebornTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RebornTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroRebornTimes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_masterguid;
        break;
      }

      // optional uint64 masterguid = 2;
      case 2: {
        if (tag == 16) {
         parse_masterguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterguid_)));
          set_has_masterguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sendtimes;
        break;
      }

      // optional int64 sendtimes = 3;
      case 3: {
        if (tag == 24) {
         parse_sendtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtimes_)));
          set_has_sendtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int64 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_remain_times;
        break;
      }

      // optional int32 remain_times = 5;
      case 5: {
        if (tag == 40) {
         parse_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_times_)));
          set_has_remain_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reborn_time;
        break;
      }

      // optional int32 reborn_time = 6;
      case 6: {
        if (tag == 48) {
         parse_reborn_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reborn_time_)));
          set_has_reborn_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RebornTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RebornTimes)
  return false;
#undef DO_
}

void RebornTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RebornTimes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroRebornTimes];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 masterguid = 2;
  if (has_masterguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->masterguid(), output);
  }

  // optional int64 sendtimes = 3;
  if (has_sendtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sendtimes(), output);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gold(), output);
  }

  // optional int32 remain_times = 5;
  if (has_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remain_times(), output);
  }

  // optional int32 reborn_time = 6;
  if (has_reborn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reborn_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RebornTimes)
}

::google::protobuf::uint8* RebornTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RebornTimes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroRebornTimes];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 masterguid = 2;
  if (has_masterguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->masterguid(), target);
  }

  // optional int64 sendtimes = 3;
  if (has_sendtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sendtimes(), target);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gold(), target);
  }

  // optional int32 remain_times = 5;
  if (has_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remain_times(), target);
  }

  // optional int32 reborn_time = 6;
  if (has_reborn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reborn_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RebornTimes)
  return target;
}

int RebornTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyHeroRebornTimes];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 masterguid = 2;
    if (has_masterguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterguid());
    }

    // optional int64 sendtimes = 3;
    if (has_sendtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtimes());
    }

    // optional int64 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 remain_times = 5;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_times());
    }

    // optional int32 reborn_time = 6;
    if (has_reborn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reborn_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RebornTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RebornTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RebornTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RebornTimes::MergeFrom(const RebornTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_masterguid()) {
      set_masterguid(from.masterguid());
    }
    if (from.has_sendtimes()) {
      set_sendtimes(from.sendtimes());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_remain_times()) {
      set_remain_times(from.remain_times());
    }
    if (from.has_reborn_time()) {
      set_reborn_time(from.reborn_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RebornTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebornTimes::CopyFrom(const RebornTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebornTimes::IsInitialized() const {

  return true;
}

void RebornTimes::Swap(RebornTimes* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(masterguid_, other->masterguid_);
    std::swap(sendtimes_, other->sendtimes_);
    std::swap(gold_, other->gold_);
    std::swap(remain_times_, other->remain_times_);
    std::swap(reborn_time_, other->reborn_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RebornTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RebornTimes_descriptor_;
  metadata.reflection = RebornTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RebornSuccess::kMsgidFieldNumber;
const int RebornSuccess::kGuidFieldNumber;
#endif  // !_MSC_VER

RebornSuccess::RebornSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RebornSuccess)
}

void RebornSuccess::InitAsDefaultInstance() {
}

RebornSuccess::RebornSuccess(const RebornSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RebornSuccess)
}

void RebornSuccess::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 54;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RebornSuccess::~RebornSuccess() {
  // @@protoc_insertion_point(destructor:GSToGC.RebornSuccess)
  SharedDtor();
}

void RebornSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RebornSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RebornSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RebornSuccess_descriptor_;
}

const RebornSuccess& RebornSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RebornSuccess* RebornSuccess::default_instance_ = NULL;

RebornSuccess* RebornSuccess::New() const {
  return new RebornSuccess;
}

void RebornSuccess::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 54;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RebornSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RebornSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBuyRebornSuccess];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RebornSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RebornSuccess)
  return false;
#undef DO_
}

void RebornSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RebornSuccess)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBuyRebornSuccess];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RebornSuccess)
}

::google::protobuf::uint8* RebornSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RebornSuccess)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBuyRebornSuccess];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RebornSuccess)
  return target;
}

int RebornSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBuyRebornSuccess];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RebornSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RebornSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RebornSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RebornSuccess::MergeFrom(const RebornSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RebornSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebornSuccess::CopyFrom(const RebornSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebornSuccess::IsInitialized() const {

  return true;
}

void RebornSuccess::Swap(RebornSuccess* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RebornSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RebornSuccess_descriptor_;
  metadata.reflection = RebornSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonCPChange::kMsgidFieldNumber;
const int PersonCPChange::kGuidFieldNumber;
const int PersonCPChange::kCpFieldNumber;
#endif  // !_MSC_VER

PersonCPChange::PersonCPChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.PersonCPChange)
}

void PersonCPChange::InitAsDefaultInstance() {
}

PersonCPChange::PersonCPChange(const PersonCPChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.PersonCPChange)
}

void PersonCPChange::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 56;
  guid_ = GOOGLE_ULONGLONG(0);
  cp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonCPChange::~PersonCPChange() {
  // @@protoc_insertion_point(destructor:GSToGC.PersonCPChange)
  SharedDtor();
}

void PersonCPChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersonCPChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonCPChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonCPChange_descriptor_;
}

const PersonCPChange& PersonCPChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

PersonCPChange* PersonCPChange::default_instance_ = NULL;

PersonCPChange* PersonCPChange::New() const {
  return new PersonCPChange;
}

void PersonCPChange::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 56;
    guid_ = GOOGLE_ULONGLONG(0);
    cp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonCPChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.PersonCPChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPersonalCPChange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cp;
        break;
      }

      // optional int32 cp = 3;
      case 3: {
        if (tag == 24) {
         parse_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_)));
          set_has_cp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.PersonCPChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.PersonCPChange)
  return false;
#undef DO_
}

void PersonCPChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.PersonCPChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPersonalCPChange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 cp = 3;
  if (has_cp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.PersonCPChange)
}

::google::protobuf::uint8* PersonCPChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.PersonCPChange)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPersonalCPChange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 cp = 3;
  if (has_cp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.PersonCPChange)
  return target;
}

int PersonCPChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPersonalCPChange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 cp = 3;
    if (has_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonCPChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonCPChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonCPChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonCPChange::MergeFrom(const PersonCPChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_cp()) {
      set_cp(from.cp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonCPChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonCPChange::CopyFrom(const PersonCPChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonCPChange::IsInitialized() const {

  return true;
}

void PersonCPChange::Swap(PersonCPChange* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(cp_, other->cp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonCPChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonCPChange_descriptor_;
  metadata.reflection = PersonCPChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastBatteleRes_ResInfo::kObjguidFieldNumber;
const int BroadcastBatteleRes_ResInfo::kHeroidFieldNumber;
const int BroadcastBatteleRes_ResInfo::kNicknameFieldNumber;
const int BroadcastBatteleRes_ResInfo::kCurlevelFieldNumber;
const int BroadcastBatteleRes_ResInfo::kKilltimesFieldNumber;
const int BroadcastBatteleRes_ResInfo::kDeadtimesFieldNumber;
const int BroadcastBatteleRes_ResInfo::kAsstimesFieldNumber;
const int BroadcastBatteleRes_ResInfo::kTotalcpFieldNumber;
const int BroadcastBatteleRes_ResInfo::kLasthitFieldNumber;
const int BroadcastBatteleRes_ResInfo::kCamgpidFieldNumber;
#endif  // !_MSC_VER

BroadcastBatteleRes_ResInfo::BroadcastBatteleRes_ResInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBatteleRes.ResInfo)
}

void BroadcastBatteleRes_ResInfo::InitAsDefaultInstance() {
}

BroadcastBatteleRes_ResInfo::BroadcastBatteleRes_ResInfo(const BroadcastBatteleRes_ResInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBatteleRes.ResInfo)
}

void BroadcastBatteleRes_ResInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objguid_ = GOOGLE_ULONGLONG(0);
  heroid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curlevel_ = 0;
  killtimes_ = 0;
  deadtimes_ = 0;
  asstimes_ = 0;
  totalcp_ = 0;
  lasthit_ = 0;
  camgpid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBatteleRes_ResInfo::~BroadcastBatteleRes_ResInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBatteleRes.ResInfo)
  SharedDtor();
}

void BroadcastBatteleRes_ResInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastBatteleRes_ResInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBatteleRes_ResInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBatteleRes_ResInfo_descriptor_;
}

const BroadcastBatteleRes_ResInfo& BroadcastBatteleRes_ResInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBatteleRes_ResInfo* BroadcastBatteleRes_ResInfo::default_instance_ = NULL;

BroadcastBatteleRes_ResInfo* BroadcastBatteleRes_ResInfo::New() const {
  return new BroadcastBatteleRes_ResInfo;
}

void BroadcastBatteleRes_ResInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastBatteleRes_ResInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(heroid_, totalcp_);
    objguid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ZR_(lasthit_, camgpid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBatteleRes_ResInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBatteleRes.ResInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 objguid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objguid_)));
          set_has_objguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // optional int32 heroid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curlevel;
        break;
      }

      // optional int32 curlevel = 4;
      case 4: {
        if (tag == 32) {
         parse_curlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlevel_)));
          set_has_curlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killtimes;
        break;
      }

      // optional int32 killtimes = 5;
      case 5: {
        if (tag == 40) {
         parse_killtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killtimes_)));
          set_has_killtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deadtimes;
        break;
      }

      // optional int32 deadtimes = 6;
      case 6: {
        if (tag == 48) {
         parse_deadtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadtimes_)));
          set_has_deadtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_asstimes;
        break;
      }

      // optional int32 asstimes = 7;
      case 7: {
        if (tag == 56) {
         parse_asstimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asstimes_)));
          set_has_asstimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalcp;
        break;
      }

      // optional int32 totalcp = 8;
      case 8: {
        if (tag == 64) {
         parse_totalcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcp_)));
          set_has_totalcp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lasthit;
        break;
      }

      // optional int32 lasthit = 9;
      case 9: {
        if (tag == 72) {
         parse_lasthit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasthit_)));
          set_has_lasthit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_camgpid;
        break;
      }

      // optional int32 camgpid = 10;
      case 10: {
        if (tag == 80) {
         parse_camgpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camgpid_)));
          set_has_camgpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBatteleRes.ResInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBatteleRes.ResInfo)
  return false;
#undef DO_
}

void BroadcastBatteleRes_ResInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBatteleRes.ResInfo)
  // optional uint64 objguid = 1;
  if (has_objguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->objguid(), output);
  }

  // optional int32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heroid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 curlevel = 4;
  if (has_curlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curlevel(), output);
  }

  // optional int32 killtimes = 5;
  if (has_killtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killtimes(), output);
  }

  // optional int32 deadtimes = 6;
  if (has_deadtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deadtimes(), output);
  }

  // optional int32 asstimes = 7;
  if (has_asstimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->asstimes(), output);
  }

  // optional int32 totalcp = 8;
  if (has_totalcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalcp(), output);
  }

  // optional int32 lasthit = 9;
  if (has_lasthit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lasthit(), output);
  }

  // optional int32 camgpid = 10;
  if (has_camgpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->camgpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBatteleRes.ResInfo)
}

::google::protobuf::uint8* BroadcastBatteleRes_ResInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBatteleRes.ResInfo)
  // optional uint64 objguid = 1;
  if (has_objguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->objguid(), target);
  }

  // optional int32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heroid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 curlevel = 4;
  if (has_curlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curlevel(), target);
  }

  // optional int32 killtimes = 5;
  if (has_killtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killtimes(), target);
  }

  // optional int32 deadtimes = 6;
  if (has_deadtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deadtimes(), target);
  }

  // optional int32 asstimes = 7;
  if (has_asstimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->asstimes(), target);
  }

  // optional int32 totalcp = 8;
  if (has_totalcp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalcp(), target);
  }

  // optional int32 lasthit = 9;
  if (has_lasthit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lasthit(), target);
  }

  // optional int32 camgpid = 10;
  if (has_camgpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->camgpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBatteleRes.ResInfo)
  return target;
}

int BroadcastBatteleRes_ResInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 objguid = 1;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objguid());
    }

    // optional int32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 curlevel = 4;
    if (has_curlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlevel());
    }

    // optional int32 killtimes = 5;
    if (has_killtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killtimes());
    }

    // optional int32 deadtimes = 6;
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadtimes());
    }

    // optional int32 asstimes = 7;
    if (has_asstimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asstimes());
    }

    // optional int32 totalcp = 8;
    if (has_totalcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lasthit = 9;
    if (has_lasthit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasthit());
    }

    // optional int32 camgpid = 10;
    if (has_camgpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camgpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBatteleRes_ResInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBatteleRes_ResInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBatteleRes_ResInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBatteleRes_ResInfo::MergeFrom(const BroadcastBatteleRes_ResInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objguid()) {
      set_objguid(from.objguid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_curlevel()) {
      set_curlevel(from.curlevel());
    }
    if (from.has_killtimes()) {
      set_killtimes(from.killtimes());
    }
    if (from.has_deadtimes()) {
      set_deadtimes(from.deadtimes());
    }
    if (from.has_asstimes()) {
      set_asstimes(from.asstimes());
    }
    if (from.has_totalcp()) {
      set_totalcp(from.totalcp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lasthit()) {
      set_lasthit(from.lasthit());
    }
    if (from.has_camgpid()) {
      set_camgpid(from.camgpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBatteleRes_ResInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBatteleRes_ResInfo::CopyFrom(const BroadcastBatteleRes_ResInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBatteleRes_ResInfo::IsInitialized() const {

  return true;
}

void BroadcastBatteleRes_ResInfo::Swap(BroadcastBatteleRes_ResInfo* other) {
  if (other != this) {
    std::swap(objguid_, other->objguid_);
    std::swap(heroid_, other->heroid_);
    std::swap(nickname_, other->nickname_);
    std::swap(curlevel_, other->curlevel_);
    std::swap(killtimes_, other->killtimes_);
    std::swap(deadtimes_, other->deadtimes_);
    std::swap(asstimes_, other->asstimes_);
    std::swap(totalcp_, other->totalcp_);
    std::swap(lasthit_, other->lasthit_);
    std::swap(camgpid_, other->camgpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBatteleRes_ResInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBatteleRes_ResInfo_descriptor_;
  metadata.reflection = BroadcastBatteleRes_ResInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BroadcastBatteleRes::kMsgidFieldNumber;
const int BroadcastBatteleRes::kIfwinFieldNumber;
const int BroadcastBatteleRes::kResinfoFieldNumber;
#endif  // !_MSC_VER

BroadcastBatteleRes::BroadcastBatteleRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBatteleRes)
}

void BroadcastBatteleRes::InitAsDefaultInstance() {
}

BroadcastBatteleRes::BroadcastBatteleRes(const BroadcastBatteleRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBatteleRes)
}

void BroadcastBatteleRes::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 57;
  ifwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBatteleRes::~BroadcastBatteleRes() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBatteleRes)
  SharedDtor();
}

void BroadcastBatteleRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastBatteleRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBatteleRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBatteleRes_descriptor_;
}

const BroadcastBatteleRes& BroadcastBatteleRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBatteleRes* BroadcastBatteleRes::default_instance_ = NULL;

BroadcastBatteleRes* BroadcastBatteleRes::New() const {
  return new BroadcastBatteleRes;
}

void BroadcastBatteleRes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 57;
    ifwin_ = false;
  }
  resinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBatteleRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBatteleRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadCurBattleResult];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ifwin;
        break;
      }

      // optional bool ifwin = 2;
      case 2: {
        if (tag == 16) {
         parse_ifwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifwin_)));
          set_has_ifwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resinfo;
        break;
      }

      // repeated .GSToGC.BroadcastBatteleRes.ResInfo resinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_resinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBatteleRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBatteleRes)
  return false;
#undef DO_
}

void BroadcastBatteleRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBatteleRes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadCurBattleResult];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional bool ifwin = 2;
  if (has_ifwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ifwin(), output);
  }

  // repeated .GSToGC.BroadcastBatteleRes.ResInfo resinfo = 3;
  for (int i = 0; i < this->resinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBatteleRes)
}

::google::protobuf::uint8* BroadcastBatteleRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBatteleRes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadCurBattleResult];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional bool ifwin = 2;
  if (has_ifwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ifwin(), target);
  }

  // repeated .GSToGC.BroadcastBatteleRes.ResInfo resinfo = 3;
  for (int i = 0; i < this->resinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBatteleRes)
  return target;
}

int BroadcastBatteleRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadCurBattleResult];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional bool ifwin = 2;
    if (has_ifwin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .GSToGC.BroadcastBatteleRes.ResInfo resinfo = 3;
  total_size += 1 * this->resinfo_size();
  for (int i = 0; i < this->resinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBatteleRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBatteleRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBatteleRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBatteleRes::MergeFrom(const BroadcastBatteleRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  resinfo_.MergeFrom(from.resinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_ifwin()) {
      set_ifwin(from.ifwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBatteleRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBatteleRes::CopyFrom(const BroadcastBatteleRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBatteleRes::IsInitialized() const {

  return true;
}

void BroadcastBatteleRes::Swap(BroadcastBatteleRes* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(ifwin_, other->ifwin_);
    resinfo_.Swap(&other->resinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBatteleRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBatteleRes_descriptor_;
  metadata.reflection = BroadcastBatteleRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastBattelePersonalRes::kMsgidFieldNumber;
const int BroadcastBattelePersonalRes::kGotGoldFieldNumber;
const int BroadcastBattelePersonalRes::kOldLvFieldNumber;
const int BroadcastBattelePersonalRes::kOldExpFieldNumber;
const int BroadcastBattelePersonalRes::kCurLvFieldNumber;
const int BroadcastBattelePersonalRes::kCurExpFieldNumber;
const int BroadcastBattelePersonalRes::kGotExpFieldNumber;
#endif  // !_MSC_VER

BroadcastBattelePersonalRes::BroadcastBattelePersonalRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBattelePersonalRes)
}

void BroadcastBattelePersonalRes::InitAsDefaultInstance() {
}

BroadcastBattelePersonalRes::BroadcastBattelePersonalRes(const BroadcastBattelePersonalRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBattelePersonalRes)
}

void BroadcastBattelePersonalRes::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 233;
  got_gold_ = GOOGLE_LONGLONG(0);
  old_lv_ = 0;
  old_exp_ = 0;
  cur_lv_ = 0;
  cur_exp_ = 0;
  got_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBattelePersonalRes::~BroadcastBattelePersonalRes() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBattelePersonalRes)
  SharedDtor();
}

void BroadcastBattelePersonalRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastBattelePersonalRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBattelePersonalRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBattelePersonalRes_descriptor_;
}

const BroadcastBattelePersonalRes& BroadcastBattelePersonalRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBattelePersonalRes* BroadcastBattelePersonalRes::default_instance_ = NULL;

BroadcastBattelePersonalRes* BroadcastBattelePersonalRes::New() const {
  return new BroadcastBattelePersonalRes;
}

void BroadcastBattelePersonalRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastBattelePersonalRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(old_lv_, got_exp_);
    msgid_ = 233;
    got_gold_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBattelePersonalRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBattelePersonalRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBattlePersonalResult];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_got_gold;
        break;
      }

      // optional int64 got_gold = 2;
      case 2: {
        if (tag == 16) {
         parse_got_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &got_gold_)));
          set_has_got_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_old_lv;
        break;
      }

      // optional int32 old_lv = 3;
      case 3: {
        if (tag == 24) {
         parse_old_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_lv_)));
          set_has_old_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_old_exp;
        break;
      }

      // optional int32 old_exp = 4;
      case 4: {
        if (tag == 32) {
         parse_old_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_exp_)));
          set_has_old_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_lv;
        break;
      }

      // optional int32 cur_lv = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_lv_)));
          set_has_cur_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_exp;
        break;
      }

      // optional int32 cur_exp = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_got_exp;
        break;
      }

      // optional int32 got_exp = 7;
      case 7: {
        if (tag == 56) {
         parse_got_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &got_exp_)));
          set_has_got_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBattelePersonalRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBattelePersonalRes)
  return false;
#undef DO_
}

void BroadcastBattelePersonalRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBattelePersonalRes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBattlePersonalResult];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 got_gold = 2;
  if (has_got_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->got_gold(), output);
  }

  // optional int32 old_lv = 3;
  if (has_old_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->old_lv(), output);
  }

  // optional int32 old_exp = 4;
  if (has_old_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->old_exp(), output);
  }

  // optional int32 cur_lv = 5;
  if (has_cur_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_lv(), output);
  }

  // optional int32 cur_exp = 6;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_exp(), output);
  }

  // optional int32 got_exp = 7;
  if (has_got_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->got_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBattelePersonalRes)
}

::google::protobuf::uint8* BroadcastBattelePersonalRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBattelePersonalRes)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBattlePersonalResult];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 got_gold = 2;
  if (has_got_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->got_gold(), target);
  }

  // optional int32 old_lv = 3;
  if (has_old_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->old_lv(), target);
  }

  // optional int32 old_exp = 4;
  if (has_old_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->old_exp(), target);
  }

  // optional int32 cur_lv = 5;
  if (has_cur_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_lv(), target);
  }

  // optional int32 cur_exp = 6;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_exp(), target);
  }

  // optional int32 got_exp = 7;
  if (has_got_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->got_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBattelePersonalRes)
  return target;
}

int BroadcastBattelePersonalRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBattlePersonalResult];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 got_gold = 2;
    if (has_got_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->got_gold());
    }

    // optional int32 old_lv = 3;
    if (has_old_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_lv());
    }

    // optional int32 old_exp = 4;
    if (has_old_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_exp());
    }

    // optional int32 cur_lv = 5;
    if (has_cur_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_lv());
    }

    // optional int32 cur_exp = 6;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_exp());
    }

    // optional int32 got_exp = 7;
    if (has_got_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->got_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBattelePersonalRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBattelePersonalRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBattelePersonalRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBattelePersonalRes::MergeFrom(const BroadcastBattelePersonalRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_got_gold()) {
      set_got_gold(from.got_gold());
    }
    if (from.has_old_lv()) {
      set_old_lv(from.old_lv());
    }
    if (from.has_old_exp()) {
      set_old_exp(from.old_exp());
    }
    if (from.has_cur_lv()) {
      set_cur_lv(from.cur_lv());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_got_exp()) {
      set_got_exp(from.got_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBattelePersonalRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBattelePersonalRes::CopyFrom(const BroadcastBattelePersonalRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBattelePersonalRes::IsInitialized() const {

  return true;
}

void BroadcastBattelePersonalRes::Swap(BroadcastBattelePersonalRes* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(got_gold_, other->got_gold_);
    std::swap(old_lv_, other->old_lv_);
    std::swap(old_exp_, other->old_exp_);
    std::swap(cur_lv_, other->cur_lv_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(got_exp_, other->got_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBattelePersonalRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBattelePersonalRes_descriptor_;
  metadata.reflection = BroadcastBattelePersonalRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastBuildingDestory::kMsgidFieldNumber;
const int BroadcastBuildingDestory::kBuildingguidFieldNumber;
const int BroadcastBuildingDestory::kBuildingCampFieldNumber;
const int BroadcastBuildingDestory::kKillerGuidFieldNumber;
const int BroadcastBuildingDestory::kKillerCampFieldNumber;
#endif  // !_MSC_VER

BroadcastBuildingDestory::BroadcastBuildingDestory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BroadcastBuildingDestory)
}

void BroadcastBuildingDestory::InitAsDefaultInstance() {
}

BroadcastBuildingDestory::BroadcastBuildingDestory(const BroadcastBuildingDestory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BroadcastBuildingDestory)
}

void BroadcastBuildingDestory::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 58;
  buildingguid_ = GOOGLE_ULONGLONG(0);
  building_camp_ = 0;
  killer_guid_ = GOOGLE_ULONGLONG(0);
  killer_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastBuildingDestory::~BroadcastBuildingDestory() {
  // @@protoc_insertion_point(destructor:GSToGC.BroadcastBuildingDestory)
  SharedDtor();
}

void BroadcastBuildingDestory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastBuildingDestory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastBuildingDestory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastBuildingDestory_descriptor_;
}

const BroadcastBuildingDestory& BroadcastBuildingDestory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BroadcastBuildingDestory* BroadcastBuildingDestory::default_instance_ = NULL;

BroadcastBuildingDestory* BroadcastBuildingDestory::New() const {
  return new BroadcastBuildingDestory;
}

void BroadcastBuildingDestory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastBuildingDestory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(building_camp_, killer_camp_);
    msgid_ = 58;
    buildingguid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastBuildingDestory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BroadcastBuildingDestory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBuildingDestroyByWho];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buildingguid;
        break;
      }

      // optional uint64 buildingguid = 2;
      case 2: {
        if (tag == 16) {
         parse_buildingguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildingguid_)));
          set_has_buildingguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_building_camp;
        break;
      }

      // optional int32 building_camp = 3;
      case 3: {
        if (tag == 24) {
         parse_building_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_camp_)));
          set_has_building_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_killer_guid;
        break;
      }

      // optional uint64 killer_guid = 4;
      case 4: {
        if (tag == 32) {
         parse_killer_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killer_guid_)));
          set_has_killer_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killer_camp;
        break;
      }

      // optional int32 killer_camp = 5;
      case 5: {
        if (tag == 40) {
         parse_killer_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killer_camp_)));
          set_has_killer_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BroadcastBuildingDestory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BroadcastBuildingDestory)
  return false;
#undef DO_
}

void BroadcastBuildingDestory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BroadcastBuildingDestory)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBuildingDestroyByWho];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 buildingguid = 2;
  if (has_buildingguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buildingguid(), output);
  }

  // optional int32 building_camp = 3;
  if (has_building_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->building_camp(), output);
  }

  // optional uint64 killer_guid = 4;
  if (has_killer_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->killer_guid(), output);
  }

  // optional int32 killer_camp = 5;
  if (has_killer_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killer_camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BroadcastBuildingDestory)
}

::google::protobuf::uint8* BroadcastBuildingDestory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BroadcastBuildingDestory)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBuildingDestroyByWho];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 buildingguid = 2;
  if (has_buildingguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buildingguid(), target);
  }

  // optional int32 building_camp = 3;
  if (has_building_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->building_camp(), target);
  }

  // optional uint64 killer_guid = 4;
  if (has_killer_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->killer_guid(), target);
  }

  // optional int32 killer_camp = 5;
  if (has_killer_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killer_camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BroadcastBuildingDestory)
  return target;
}

int BroadcastBuildingDestory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadBuildingDestroyByWho];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 buildingguid = 2;
    if (has_buildingguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildingguid());
    }

    // optional int32 building_camp = 3;
    if (has_building_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_camp());
    }

    // optional uint64 killer_guid = 4;
    if (has_killer_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killer_guid());
    }

    // optional int32 killer_camp = 5;
    if (has_killer_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killer_camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastBuildingDestory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastBuildingDestory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastBuildingDestory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastBuildingDestory::MergeFrom(const BroadcastBuildingDestory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_buildingguid()) {
      set_buildingguid(from.buildingguid());
    }
    if (from.has_building_camp()) {
      set_building_camp(from.building_camp());
    }
    if (from.has_killer_guid()) {
      set_killer_guid(from.killer_guid());
    }
    if (from.has_killer_camp()) {
      set_killer_camp(from.killer_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastBuildingDestory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastBuildingDestory::CopyFrom(const BroadcastBuildingDestory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastBuildingDestory::IsInitialized() const {

  return true;
}

void BroadcastBuildingDestory::Swap(BroadcastBuildingDestory* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(buildingguid_, other->buildingguid_);
    std::swap(building_camp_, other->building_camp_);
    std::swap(killer_guid_, other->killer_guid_);
    std::swap(killer_camp_, other->killer_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastBuildingDestory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastBuildingDestory_descriptor_;
  metadata.reflection = BroadcastBuildingDestory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroMoveInfo::kMsgidFieldNumber;
const int HeroMoveInfo::kGuidFieldNumber;
const int HeroMoveInfo::kDirFieldNumber;
const int HeroMoveInfo::kPosFieldNumber;
#endif  // !_MSC_VER

HeroMoveInfo::HeroMoveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HeroMoveInfo)
}

void HeroMoveInfo::InitAsDefaultInstance() {
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

HeroMoveInfo::HeroMoveInfo(const HeroMoveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HeroMoveInfo)
}

void HeroMoveInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 9;
  guid_ = GOOGLE_ULONGLONG(0);
  dir_ = NULL;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroMoveInfo::~HeroMoveInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.HeroMoveInfo)
  SharedDtor();
}

void HeroMoveInfo::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete pos_;
  }
}

void HeroMoveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroMoveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroMoveInfo_descriptor_;
}

const HeroMoveInfo& HeroMoveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HeroMoveInfo* HeroMoveInfo::default_instance_ = NULL;

HeroMoveInfo* HeroMoveInfo::New() const {
  return new HeroMoveInfo;
}

void HeroMoveInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgid_ = 9;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroMoveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HeroMoveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 3;
      case 3: {
        if (tag == 26) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HeroMoveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HeroMoveInfo)
  return false;
#undef DO_
}

void HeroMoveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HeroMoveInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional .GSToGC.Dir dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dir(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HeroMoveInfo)
}

::google::protobuf::uint8* HeroMoveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HeroMoveInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional .GSToGC.Dir dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dir(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HeroMoveInfo)
  return target;
}

int HeroMoveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBattleSeatPosInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .GSToGC.Dir dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroMoveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroMoveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroMoveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroMoveInfo::MergeFrom(const HeroMoveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroMoveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroMoveInfo::CopyFrom(const HeroMoveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroMoveInfo::IsInitialized() const {

  return true;
}

void HeroMoveInfo::Swap(HeroMoveInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(dir_, other->dir_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroMoveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroMoveInfo_descriptor_;
  metadata.reflection = HeroMoveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayFinishVedio::kMsgidFieldNumber;
const int PlayFinishVedio::kWincampFieldNumber;
const int PlayFinishVedio::kLosercampFieldNumber;
const int PlayFinishVedio::kMapidFieldNumber;
const int PlayFinishVedio::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayFinishVedio::PlayFinishVedio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.PlayFinishVedio)
}

void PlayFinishVedio::InitAsDefaultInstance() {
}

PlayFinishVedio::PlayFinishVedio(const PlayFinishVedio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.PlayFinishVedio)
}

void PlayFinishVedio::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 61;
  wincamp_ = 0;
  losercamp_ = 0;
  mapid_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayFinishVedio::~PlayFinishVedio() {
  // @@protoc_insertion_point(destructor:GSToGC.PlayFinishVedio)
  SharedDtor();
}

void PlayFinishVedio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayFinishVedio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayFinishVedio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayFinishVedio_descriptor_;
}

const PlayFinishVedio& PlayFinishVedio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

PlayFinishVedio* PlayFinishVedio::default_instance_ = NULL;

PlayFinishVedio* PlayFinishVedio::New() const {
  return new PlayFinishVedio;
}

void PlayFinishVedio::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayFinishVedio*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(wincamp_, guid_);
    msgid_ = 61;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayFinishVedio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.PlayFinishVedio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastPlayFinishVedio];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wincamp;
        break;
      }

      // optional int32 wincamp = 2;
      case 2: {
        if (tag == 16) {
         parse_wincamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincamp_)));
          set_has_wincamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_losercamp;
        break;
      }

      // optional int32 losercamp = 3;
      case 3: {
        if (tag == 24) {
         parse_losercamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losercamp_)));
          set_has_losercamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 5;
      case 5: {
        if (tag == 40) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.PlayFinishVedio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.PlayFinishVedio)
  return false;
#undef DO_
}

void PlayFinishVedio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.PlayFinishVedio)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastPlayFinishVedio];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 wincamp = 2;
  if (has_wincamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wincamp(), output);
  }

  // optional int32 losercamp = 3;
  if (has_losercamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->losercamp(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.PlayFinishVedio)
}

::google::protobuf::uint8* PlayFinishVedio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.PlayFinishVedio)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastPlayFinishVedio];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 wincamp = 2;
  if (has_wincamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wincamp(), target);
  }

  // optional int32 losercamp = 3;
  if (has_losercamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->losercamp(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.PlayFinishVedio)
  return target;
}

int PlayFinishVedio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_BroadcastPlayFinishVedio];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 wincamp = 2;
    if (has_wincamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincamp());
    }

    // optional int32 losercamp = 3;
    if (has_losercamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losercamp());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional uint64 guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayFinishVedio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayFinishVedio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayFinishVedio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayFinishVedio::MergeFrom(const PlayFinishVedio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_wincamp()) {
      set_wincamp(from.wincamp());
    }
    if (from.has_losercamp()) {
      set_losercamp(from.losercamp());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayFinishVedio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayFinishVedio::CopyFrom(const PlayFinishVedio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayFinishVedio::IsInitialized() const {

  return true;
}

void PlayFinishVedio::Swap(PlayFinishVedio* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(wincamp_, other->wincamp_);
    std::swap(losercamp_, other->losercamp_);
    std::swap(mapid_, other->mapid_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayFinishVedio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayFinishVedio_descriptor_;
  metadata.reflection = PlayFinishVedio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveBattleSuccess::kMsgidFieldNumber;
#endif  // !_MSC_VER

LeaveBattleSuccess::LeaveBattleSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.LeaveBattleSuccess)
}

void LeaveBattleSuccess::InitAsDefaultInstance() {
}

LeaveBattleSuccess::LeaveBattleSuccess(const LeaveBattleSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.LeaveBattleSuccess)
}

void LeaveBattleSuccess::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 62;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveBattleSuccess::~LeaveBattleSuccess() {
  // @@protoc_insertion_point(destructor:GSToGC.LeaveBattleSuccess)
  SharedDtor();
}

void LeaveBattleSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveBattleSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveBattleSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveBattleSuccess_descriptor_;
}

const LeaveBattleSuccess& LeaveBattleSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

LeaveBattleSuccess* LeaveBattleSuccess::default_instance_ = NULL;

LeaveBattleSuccess* LeaveBattleSuccess::New() const {
  return new LeaveBattleSuccess;
}

void LeaveBattleSuccess::Clear() {
  msgid_ = 62;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveBattleSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.LeaveBattleSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyLeaveBattleSuccess];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.LeaveBattleSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.LeaveBattleSuccess)
  return false;
#undef DO_
}

void LeaveBattleSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.LeaveBattleSuccess)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyLeaveBattleSuccess];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.LeaveBattleSuccess)
}

::google::protobuf::uint8* LeaveBattleSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.LeaveBattleSuccess)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyLeaveBattleSuccess];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.LeaveBattleSuccess)
  return target;
}

int LeaveBattleSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyLeaveBattleSuccess];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveBattleSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveBattleSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveBattleSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveBattleSuccess::MergeFrom(const LeaveBattleSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveBattleSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveBattleSuccess::CopyFrom(const LeaveBattleSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveBattleSuccess::IsInitialized() const {

  return true;
}

void LeaveBattleSuccess::Swap(LeaveBattleSuccess* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveBattleSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveBattleSuccess_descriptor_;
  metadata.reflection = LeaveBattleSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BornSoler::kMsgidFieldNumber;
const int BornSoler::kTypeFieldNumber;
const int BornSoler::kCampFieldNumber;
const int BornSoler::kPosFieldNumber;
const int BornSoler::kGuidFieldNumber;
#endif  // !_MSC_VER

BornSoler::BornSoler()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BornSoler)
}

void BornSoler::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

BornSoler::BornSoler(const BornSoler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BornSoler)
}

void BornSoler::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 63;
  type_ = 0;
  camp_ = 0;
  pos_ = NULL;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BornSoler::~BornSoler() {
  // @@protoc_insertion_point(destructor:GSToGC.BornSoler)
  SharedDtor();
}

void BornSoler::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void BornSoler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BornSoler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BornSoler_descriptor_;
}

const BornSoler& BornSoler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BornSoler* BornSoler::default_instance_ = NULL;

BornSoler* BornSoler::New() const {
  return new BornSoler;
}

void BornSoler::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BornSoler*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guid_, camp_);
    msgid_ = 63;
    type_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BornSoler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BornSoler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBornSolder];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_camp;
        break;
      }

      // optional int32 camp = 3;
      case 3: {
        if (tag == 24) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 5;
      case 5: {
        if (tag == 40) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BornSoler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BornSoler)
  return false;
#undef DO_
}

void BornSoler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BornSoler)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBornSolder];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camp(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BornSoler)
}

::google::protobuf::uint8* BornSoler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BornSoler)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBornSolder];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camp(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BornSoler)
  return target;
}

int BornSoler::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBornSolder];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 camp = 3;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BornSoler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BornSoler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BornSoler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BornSoler::MergeFrom(const BornSoler& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BornSoler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BornSoler::CopyFrom(const BornSoler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BornSoler::IsInitialized() const {

  return true;
}

void BornSoler::Swap(BornSoler* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(camp_, other->camp_);
    std::swap(pos_, other->pos_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BornSoler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BornSoler_descriptor_;
  metadata.reflection = BornSoler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillEnd::kMsgidFieldNumber;
const int SkillEnd::kGuidFieldNumber;
const int SkillEnd::kSkillidFieldNumber;
const int SkillEnd::kTarguidFieldNumber;
const int SkillEnd::kUniqueidFieldNumber;
#endif  // !_MSC_VER

SkillEnd::SkillEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SkillEnd)
}

void SkillEnd::InitAsDefaultInstance() {
}

SkillEnd::SkillEnd(const SkillEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SkillEnd)
}

void SkillEnd::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 64;
  guid_ = GOOGLE_LONGLONG(0);
  skillid_ = 0;
  targuid_ = GOOGLE_LONGLONG(0);
  uniqueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEnd::~SkillEnd() {
  // @@protoc_insertion_point(destructor:GSToGC.SkillEnd)
  SharedDtor();
}

void SkillEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEnd_descriptor_;
}

const SkillEnd& SkillEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SkillEnd* SkillEnd::default_instance_ = NULL;

SkillEnd* SkillEnd::New() const {
  return new SkillEnd;
}

void SkillEnd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillEnd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(skillid_, uniqueid_);
    msgid_ = 64;
    guid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SkillEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEnd];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targuid;
        break;
      }

      // optional int64 targuid = 4;
      case 4: {
        if (tag == 32) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 5;
      case 5: {
        if (tag == 40) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SkillEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SkillEnd)
  return false;
#undef DO_
}

void SkillEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SkillEnd)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEnd];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int64 targuid = 4;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->targuid(), output);
  }

  // optional int32 uniqueid = 5;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SkillEnd)
}

::google::protobuf::uint8* SkillEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SkillEnd)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEnd];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int64 targuid = 4;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->targuid(), target);
  }

  // optional int32 uniqueid = 5;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SkillEnd)
  return target;
}

int SkillEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillEnd];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int64 targuid = 4;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targuid());
    }

    // optional int32 uniqueid = 5;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillEnd::MergeFrom(const SkillEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillEnd::CopyFrom(const SkillEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEnd::IsInitialized() const {

  return true;
}

void SkillEnd::Swap(SkillEnd* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(targuid_, other->targuid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEnd_descriptor_;
  metadata.reflection = SkillEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AltarBSIco::kMsgidFieldNumber;
const int AltarBSIco::kIndexFieldNumber;
const int AltarBSIco::kTypeFieldNumber;
const int AltarBSIco::kOptypeFieldNumber;
#endif  // !_MSC_VER

AltarBSIco::AltarBSIco()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.AltarBSIco)
}

void AltarBSIco::InitAsDefaultInstance() {
}

AltarBSIco::AltarBSIco(const AltarBSIco& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.AltarBSIco)
}

void AltarBSIco::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 65;
  index_ = 0;
  type_ = 0;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AltarBSIco::~AltarBSIco() {
  // @@protoc_insertion_point(destructor:GSToGC.AltarBSIco)
  SharedDtor();
}

void AltarBSIco::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AltarBSIco::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AltarBSIco::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AltarBSIco_descriptor_;
}

const AltarBSIco& AltarBSIco::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

AltarBSIco* AltarBSIco::default_instance_ = NULL;

AltarBSIco* AltarBSIco::New() const {
  return new AltarBSIco;
}

void AltarBSIco::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AltarBSIco*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(index_, optype_);
    msgid_ = 65;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AltarBSIco::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.AltarBSIco)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSIco];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // optional int32 optype = 4;
      case 4: {
        if (tag == 32) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.AltarBSIco)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.AltarBSIco)
  return false;
#undef DO_
}

void AltarBSIco::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.AltarBSIco)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSIco];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.AltarBSIco)
}

::google::protobuf::uint8* AltarBSIco::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.AltarBSIco)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSIco];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.AltarBSIco)
  return target;
}

int AltarBSIco::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSIco];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AltarBSIco::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AltarBSIco* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AltarBSIco*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AltarBSIco::MergeFrom(const AltarBSIco& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AltarBSIco::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AltarBSIco::CopyFrom(const AltarBSIco& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AltarBSIco::IsInitialized() const {

  return true;
}

void AltarBSIco::Swap(AltarBSIco* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AltarBSIco::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AltarBSIco_descriptor_;
  metadata.reflection = AltarBSIco_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GOReleaseSkill::kMsgidFieldNumber;
const int GOReleaseSkill::kGuidFieldNumber;
const int GOReleaseSkill::kSkillidFieldNumber;
const int GOReleaseSkill::kStateFieldNumber;
const int GOReleaseSkill::kCurPosFieldNumber;
const int GOReleaseSkill::kCurDirFieldNumber;
const int GOReleaseSkill::kTarguidFieldNumber;
const int GOReleaseSkill::kTarposFieldNumber;
#endif  // !_MSC_VER

GOReleaseSkill::GOReleaseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GOReleaseSkill)
}

void GOReleaseSkill::InitAsDefaultInstance() {
  curpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  curdir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  tarpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

GOReleaseSkill::GOReleaseSkill(const GOReleaseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GOReleaseSkill)
}

void GOReleaseSkill::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 67;
  guid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  state_ = 0;
  curpos_ = NULL;
  curdir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  tarpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GOReleaseSkill::~GOReleaseSkill() {
  // @@protoc_insertion_point(destructor:GSToGC.GOReleaseSkill)
  SharedDtor();
}

void GOReleaseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete curpos_;
    delete curdir_;
    delete tarpos_;
  }
}

void GOReleaseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GOReleaseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GOReleaseSkill_descriptor_;
}

const GOReleaseSkill& GOReleaseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GOReleaseSkill* GOReleaseSkill::default_instance_ = NULL;

GOReleaseSkill* GOReleaseSkill::New() const {
  return new GOReleaseSkill;
}

void GOReleaseSkill::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    msgid_ = 67;
    guid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0;
    state_ = 0;
    if (has_curpos()) {
      if (curpos_ != NULL) curpos_->::GSToGC::Pos::Clear();
    }
    if (has_curdir()) {
      if (curdir_ != NULL) curdir_->::GSToGC::Dir::Clear();
    }
    targuid_ = GOOGLE_ULONGLONG(0);
    if (has_tarpos()) {
      if (tarpos_ != NULL) tarpos_->::GSToGC::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GOReleaseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GOReleaseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkill];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .GSToGC.SkillState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::SkillState_IsValid(value)) {
            set_state(static_cast< ::GSToGC::SkillState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_curPos;
        break;
      }

      // optional .GSToGC.Pos curPos = 5;
      case 5: {
        if (tag == 42) {
         parse_curPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_curDir;
        break;
      }

      // optional .GSToGC.Dir curDir = 6;
      case 6: {
        if (tag == 50) {
         parse_curDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curdir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 7;
      case 7: {
        if (tag == 56) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tarpos;
        break;
      }

      // optional .GSToGC.Pos tarpos = 8;
      case 8: {
        if (tag == 66) {
         parse_tarpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tarpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GOReleaseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GOReleaseSkill)
  return false;
#undef DO_
}

void GOReleaseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GOReleaseSkill)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkill];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional .GSToGC.SkillState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional .GSToGC.Pos curPos = 5;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->curpos(), output);
  }

  // optional .GSToGC.Dir curDir = 6;
  if (has_curdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->curdir(), output);
  }

  // optional uint64 targuid = 7;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->targuid(), output);
  }

  // optional .GSToGC.Pos tarpos = 8;
  if (has_tarpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tarpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GOReleaseSkill)
}

::google::protobuf::uint8* GOReleaseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GOReleaseSkill)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkill];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional .GSToGC.SkillState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional .GSToGC.Pos curPos = 5;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->curpos(), target);
  }

  // optional .GSToGC.Dir curDir = 6;
  if (has_curdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->curdir(), target);
  }

  // optional uint64 targuid = 7;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->targuid(), target);
  }

  // optional .GSToGC.Pos tarpos = 8;
  if (has_tarpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tarpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GOReleaseSkill)
  return target;
}

int GOReleaseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReleaseSkill];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .GSToGC.SkillState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .GSToGC.Pos curPos = 5;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curpos());
    }

    // optional .GSToGC.Dir curDir = 6;
    if (has_curdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curdir());
    }

    // optional uint64 targuid = 7;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

    // optional .GSToGC.Pos tarpos = 8;
    if (has_tarpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tarpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GOReleaseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GOReleaseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GOReleaseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GOReleaseSkill::MergeFrom(const GOReleaseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_curpos()) {
      mutable_curpos()->::GSToGC::Pos::MergeFrom(from.curpos());
    }
    if (from.has_curdir()) {
      mutable_curdir()->::GSToGC::Dir::MergeFrom(from.curdir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_tarpos()) {
      mutable_tarpos()->::GSToGC::Pos::MergeFrom(from.tarpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GOReleaseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GOReleaseSkill::CopyFrom(const GOReleaseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GOReleaseSkill::IsInitialized() const {

  return true;
}

void GOReleaseSkill::Swap(GOReleaseSkill* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(state_, other->state_);
    std::swap(curpos_, other->curpos_);
    std::swap(curdir_, other->curdir_);
    std::swap(targuid_, other->targuid_);
    std::swap(tarpos_, other->tarpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GOReleaseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GOReleaseSkill_descriptor_;
  metadata.reflection = GOReleaseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GOSkillCD::kMsgidFieldNumber;
const int GOSkillCD::kGuidFieldNumber;
const int GOSkillCD::kSkillidFieldNumber;
const int GOSkillCD::kTimeFieldNumber;
#endif  // !_MSC_VER

GOSkillCD::GOSkillCD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GOSkillCD)
}

void GOSkillCD::InitAsDefaultInstance() {
}

GOSkillCD::GOSkillCD(const GOSkillCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GOSkillCD)
}

void GOSkillCD::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 68;
  guid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GOSkillCD::~GOSkillCD() {
  // @@protoc_insertion_point(destructor:GSToGC.GOSkillCD)
  SharedDtor();
}

void GOSkillCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GOSkillCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GOSkillCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GOSkillCD_descriptor_;
}

const GOSkillCD& GOSkillCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GOSkillCD* GOSkillCD::default_instance_ = NULL;

GOSkillCD* GOSkillCD::New() const {
  return new GOSkillCD;
}

void GOSkillCD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GOSkillCD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillid_, time_);
    msgid_ = 68;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GOSkillCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GOSkillCD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectSkillCD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GOSkillCD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GOSkillCD)
  return false;
#undef DO_
}

void GOSkillCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GOSkillCD)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectSkillCD];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GOSkillCD)
}

::google::protobuf::uint8* GOSkillCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GOSkillCD)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectSkillCD];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GOSkillCD)
  return target;
}

int GOSkillCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectSkillCD];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GOSkillCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GOSkillCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GOSkillCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GOSkillCD::MergeFrom(const GOSkillCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GOSkillCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GOSkillCD::CopyFrom(const GOSkillCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GOSkillCD::IsInitialized() const {

  return true;
}

void GOSkillCD::Swap(GOSkillCD* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GOSkillCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GOSkillCD_descriptor_;
  metadata.reflection = GOSkillCD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmitSkill::kMsgidFieldNumber;
const int EmitSkill::kGuidFieldNumber;
const int EmitSkill::kEffectidFieldNumber;
const int EmitSkill::kUniqueidFieldNumber;
const int EmitSkill::kDirFieldNumber;
const int EmitSkill::kTarguidFieldNumber;
const int EmitSkill::kTarposFieldNumber;
const int EmitSkill::kIfAbsorbSkillFieldNumber;
#endif  // !_MSC_VER

EmitSkill::EmitSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.EmitSkill)
}

void EmitSkill::InitAsDefaultInstance() {
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  tarpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

EmitSkill::EmitSkill(const EmitSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.EmitSkill)
}

void EmitSkill::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 69;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  uniqueid_ = 0;
  dir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  tarpos_ = NULL;
  ifabsorbskill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmitSkill::~EmitSkill() {
  // @@protoc_insertion_point(destructor:GSToGC.EmitSkill)
  SharedDtor();
}

void EmitSkill::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete tarpos_;
  }
}

void EmitSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmitSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmitSkill_descriptor_;
}

const EmitSkill& EmitSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

EmitSkill* EmitSkill::default_instance_ = NULL;

EmitSkill* EmitSkill::New() const {
  return new EmitSkill;
}

void EmitSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EmitSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(targuid_, ifabsorbskill_);
    msgid_ = 69;
    guid_ = GOOGLE_ULONGLONG(0);
    effectid_ = 0u;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    if (has_tarpos()) {
      if (tarpos_ != NULL) tarpos_->::GSToGC::Pos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmitSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.EmitSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmit];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 6;
      case 6: {
        if (tag == 48) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tarpos;
        break;
      }

      // optional .GSToGC.Pos tarpos = 7;
      case 7: {
        if (tag == 58) {
         parse_tarpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tarpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ifAbsorbSkill;
        break;
      }

      // optional bool ifAbsorbSkill = 8;
      case 8: {
        if (tag == 64) {
         parse_ifAbsorbSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifabsorbskill_)));
          set_has_ifabsorbskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.EmitSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.EmitSkill)
  return false;
#undef DO_
}

void EmitSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.EmitSkill)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmit];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uniqueid(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->targuid(), output);
  }

  // optional .GSToGC.Pos tarpos = 7;
  if (has_tarpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tarpos(), output);
  }

  // optional bool ifAbsorbSkill = 8;
  if (has_ifabsorbskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ifabsorbskill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.EmitSkill)
}

::google::protobuf::uint8* EmitSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.EmitSkill)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmit];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uniqueid(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional uint64 targuid = 6;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->targuid(), target);
  }

  // optional .GSToGC.Pos tarpos = 7;
  if (has_tarpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tarpos(), target);
  }

  // optional bool ifAbsorbSkill = 8;
  if (has_ifabsorbskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ifabsorbskill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.EmitSkill)
  return target;
}

int EmitSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmit];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional int32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint64 targuid = 6;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

    // optional .GSToGC.Pos tarpos = 7;
    if (has_tarpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tarpos());
    }

    // optional bool ifAbsorbSkill = 8;
    if (has_ifabsorbskill()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmitSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmitSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmitSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmitSkill::MergeFrom(const EmitSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_tarpos()) {
      mutable_tarpos()->::GSToGC::Pos::MergeFrom(from.tarpos());
    }
    if (from.has_ifabsorbskill()) {
      set_ifabsorbskill(from.ifabsorbskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmitSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmitSkill::CopyFrom(const EmitSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitSkill::IsInitialized() const {

  return true;
}

void EmitSkill::Swap(EmitSkill* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(tarpos_, other->tarpos_);
    std::swap(ifabsorbskill_, other->ifabsorbskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmitSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmitSkill_descriptor_;
  metadata.reflection = EmitSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestroyEmitEffect::kMsgidFieldNumber;
const int DestroyEmitEffect::kUniqueidFieldNumber;
#endif  // !_MSC_VER

DestroyEmitEffect::DestroyEmitEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.DestroyEmitEffect)
}

void DestroyEmitEffect::InitAsDefaultInstance() {
}

DestroyEmitEffect::DestroyEmitEffect(const DestroyEmitEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.DestroyEmitEffect)
}

void DestroyEmitEffect::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 70;
  uniqueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyEmitEffect::~DestroyEmitEffect() {
  // @@protoc_insertion_point(destructor:GSToGC.DestroyEmitEffect)
  SharedDtor();
}

void DestroyEmitEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyEmitEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyEmitEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyEmitEffect_descriptor_;
}

const DestroyEmitEffect& DestroyEmitEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

DestroyEmitEffect* DestroyEmitEffect::default_instance_ = NULL;

DestroyEmitEffect* DestroyEmitEffect::New() const {
  return new DestroyEmitEffect;
}

void DestroyEmitEffect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 70;
    uniqueid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestroyEmitEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.DestroyEmitEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitDestroy];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 2;
      case 2: {
        if (tag == 16) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.DestroyEmitEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.DestroyEmitEffect)
  return false;
#undef DO_
}

void DestroyEmitEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.DestroyEmitEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitDestroy];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 uniqueid = 2;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.DestroyEmitEffect)
}

::google::protobuf::uint8* DestroyEmitEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.DestroyEmitEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitDestroy];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 uniqueid = 2;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.DestroyEmitEffect)
  return target;
}

int DestroyEmitEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitDestroy];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 uniqueid = 2;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyEmitEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyEmitEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyEmitEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyEmitEffect::MergeFrom(const DestroyEmitEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestroyEmitEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyEmitEffect::CopyFrom(const DestroyEmitEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyEmitEffect::IsInitialized() const {

  return true;
}

void DestroyEmitEffect::Swap(DestroyEmitEffect* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestroyEmitEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyEmitEffect_descriptor_;
  metadata.reflection = DestroyEmitEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HitTar::kMsgidFieldNumber;
const int HitTar::kGuidFieldNumber;
const int HitTar::kEffectidFieldNumber;
const int HitTar::kTarguidFieldNumber;
#endif  // !_MSC_VER

HitTar::HitTar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.HitTar)
}

void HitTar::InitAsDefaultInstance() {
}

HitTar::HitTar(const HitTar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.HitTar)
}

void HitTar::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 71;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  targuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitTar::~HitTar() {
  // @@protoc_insertion_point(destructor:GSToGC.HitTar)
  SharedDtor();
}

void HitTar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HitTar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitTar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitTar_descriptor_;
}

const HitTar& HitTar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

HitTar* HitTar::default_instance_ = NULL;

HitTar* HitTar::New() const {
  return new HitTar;
}

void HitTar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HitTar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(effectid_, targuid_);
    msgid_ = 71;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitTar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.HitTar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelHitTarget];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 4;
      case 4: {
        if (tag == 32) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.HitTar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.HitTar)
  return false;
#undef DO_
}

void HitTar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.HitTar)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelHitTarget];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional uint64 targuid = 4;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.HitTar)
}

::google::protobuf::uint8* HitTar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.HitTar)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelHitTarget];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional uint64 targuid = 4;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.HitTar)
  return target;
}

int HitTar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelHitTarget];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint64 targuid = 4;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitTar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitTar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitTar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitTar::MergeFrom(const HitTar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitTar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitTar::CopyFrom(const HitTar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitTar::IsInitialized() const {

  return true;
}

void HitTar::Swap(HitTar* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(targuid_, other->targuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitTar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitTar_descriptor_;
  metadata.reflection = HitTar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeEffect::kMsgidFieldNumber;
const int RangeEffect::kGuidFieldNumber;
const int RangeEffect::kEffectidFieldNumber;
const int RangeEffect::kUniqueidFieldNumber;
const int RangeEffect::kDirFieldNumber;
const int RangeEffect::kPosFieldNumber;
#endif  // !_MSC_VER

RangeEffect::RangeEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RangeEffect)
}

void RangeEffect::InitAsDefaultInstance() {
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

RangeEffect::RangeEffect(const RangeEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RangeEffect)
}

void RangeEffect::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 72;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  uniqueid_ = 0u;
  dir_ = NULL;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeEffect::~RangeEffect() {
  // @@protoc_insertion_point(destructor:GSToGC.RangeEffect)
  SharedDtor();
}

void RangeEffect::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete pos_;
  }
}

void RangeEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeEffect_descriptor_;
}

const RangeEffect& RangeEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RangeEffect* RangeEffect::default_instance_ = NULL;

RangeEffect* RangeEffect::New() const {
  return new RangeEffect;
}

void RangeEffect::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 72;
    guid_ = GOOGLE_ULONGLONG(0);
    effectid_ = 0u;
    uniqueid_ = 0u;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RangeEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRange];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 5;
      case 5: {
        if (tag == 42) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 6;
      case 6: {
        if (tag == 50) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RangeEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RangeEffect)
  return false;
#undef DO_
}

void RangeEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RangeEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRange];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional uint32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uniqueid(), output);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dir(), output);
  }

  // optional .GSToGC.Pos pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RangeEffect)
}

::google::protobuf::uint8* RangeEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RangeEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRange];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional uint32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uniqueid(), target);
  }

  // optional .GSToGC.Dir dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dir(), target);
  }

  // optional .GSToGC.Pos pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RangeEffect)
  return target;
}

int RangeEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRange];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

    // optional .GSToGC.Dir dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional .GSToGC.Pos pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeEffect::MergeFrom(const RangeEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeEffect::CopyFrom(const RangeEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeEffect::IsInitialized() const {

  return true;
}

void RangeEffect::Swap(RangeEffect* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(dir_, other->dir_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeEffect_descriptor_;
  metadata.reflection = RangeEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeEffectEnd::kMsgidFieldNumber;
const int RangeEffectEnd::kGuidFieldNumber;
const int RangeEffectEnd::kUniqueidFieldNumber;
#endif  // !_MSC_VER

RangeEffectEnd::RangeEffectEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RangeEffectEnd)
}

void RangeEffectEnd::InitAsDefaultInstance() {
}

RangeEffectEnd::RangeEffectEnd(const RangeEffectEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RangeEffectEnd)
}

void RangeEffectEnd::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 73;
  guid_ = GOOGLE_ULONGLONG(0);
  uniqueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeEffectEnd::~RangeEffectEnd() {
  // @@protoc_insertion_point(destructor:GSToGC.RangeEffectEnd)
  SharedDtor();
}

void RangeEffectEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeEffectEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeEffectEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeEffectEnd_descriptor_;
}

const RangeEffectEnd& RangeEffectEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RangeEffectEnd* RangeEffectEnd::default_instance_ = NULL;

RangeEffectEnd* RangeEffectEnd::New() const {
  return new RangeEffectEnd;
}

void RangeEffectEnd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 73;
    guid_ = GOOGLE_ULONGLONG(0);
    uniqueid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeEffectEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RangeEffectEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRangeEnd];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 3;
      case 3: {
        if (tag == 24) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RangeEffectEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RangeEffectEnd)
  return false;
#undef DO_
}

void RangeEffectEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RangeEffectEnd)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRangeEnd];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 uniqueid = 3;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RangeEffectEnd)
}

::google::protobuf::uint8* RangeEffectEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RangeEffectEnd)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRangeEnd];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 uniqueid = 3;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RangeEffectEnd)
  return target;
}

int RangeEffectEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelRangeEnd];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 uniqueid = 3;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeEffectEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeEffectEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeEffectEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeEffectEnd::MergeFrom(const RangeEffectEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeEffectEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeEffectEnd::CopyFrom(const RangeEffectEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeEffectEnd::IsInitialized() const {

  return true;
}

void RangeEffectEnd::Swap(RangeEffectEnd* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeEffectEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeEffectEnd_descriptor_;
  metadata.reflection = RangeEffectEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummonEffect::kMsgidFieldNumber;
const int SummonEffect::kGuidFieldNumber;
const int SummonEffect::kEffectidFieldNumber;
const int SummonEffect::kNpcguidFieldNumber;
#endif  // !_MSC_VER

SummonEffect::SummonEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.SummonEffect)
}

void SummonEffect::InitAsDefaultInstance() {
}

SummonEffect::SummonEffect(const SummonEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.SummonEffect)
}

void SummonEffect::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 75;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonEffect::~SummonEffect() {
  // @@protoc_insertion_point(destructor:GSToGC.SummonEffect)
  SharedDtor();
}

void SummonEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummonEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummonEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummonEffect_descriptor_;
}

const SummonEffect& SummonEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

SummonEffect* SummonEffect::default_instance_ = NULL;

SummonEffect* SummonEffect::New() const {
  return new SummonEffect;
}

void SummonEffect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SummonEffect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(effectid_, npcguid_);
    msgid_ = 75;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummonEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.SummonEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelSummonEffect];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 4;
      case 4: {
        if (tag == 32) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.SummonEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.SummonEffect)
  return false;
#undef DO_
}

void SummonEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.SummonEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelSummonEffect];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional uint64 npcguid = 4;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.SummonEffect)
}

::google::protobuf::uint8* SummonEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.SummonEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelSummonEffect];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional uint64 npcguid = 4;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.SummonEffect)
  return target;
}

int SummonEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelSummonEffect];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint64 npcguid = 4;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummonEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummonEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummonEffect::MergeFrom(const SummonEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummonEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummonEffect::CopyFrom(const SummonEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonEffect::IsInitialized() const {

  return true;
}

void SummonEffect::Swap(SummonEffect* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummonEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummonEffect_descriptor_;
  metadata.reflection = SummonEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffEffect::kMsgidFieldNumber;
const int BuffEffect::kGuidFieldNumber;
const int BuffEffect::kEffectidFieldNumber;
const int BuffEffect::kUniqueidFieldNumber;
const int BuffEffect::kTarguidFieldNumber;
const int BuffEffect::kTimeFieldNumber;
const int BuffEffect::kStateFieldNumber;
#endif  // !_MSC_VER

BuffEffect::BuffEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.BuffEffect)
}

void BuffEffect::InitAsDefaultInstance() {
}

BuffEffect::BuffEffect(const BuffEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.BuffEffect)
}

void BuffEffect::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 76;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  uniqueid_ = 0u;
  targuid_ = GOOGLE_ULONGLONG(0);
  time_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffEffect::~BuffEffect() {
  // @@protoc_insertion_point(destructor:GSToGC.BuffEffect)
  SharedDtor();
}

void BuffEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffEffect_descriptor_;
}

const BuffEffect& BuffEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

BuffEffect* BuffEffect::default_instance_ = NULL;

BuffEffect* BuffEffect::New() const {
  return new BuffEffect;
}

void BuffEffect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffEffect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(effectid_, state_);
    msgid_ = 76;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.BuffEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelBufEffect];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 5;
      case 5: {
        if (tag == 40) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional int32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7;
      case 7: {
        if (tag == 56) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.BuffEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.BuffEffect)
  return false;
#undef DO_
}

void BuffEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.BuffEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelBufEffect];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional uint32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uniqueid(), output);
  }

  // optional uint64 targuid = 5;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->targuid(), output);
  }

  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }

  // optional int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.BuffEffect)
}

::google::protobuf::uint8* BuffEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.BuffEffect)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelBufEffect];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional uint32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uniqueid(), target);
  }

  // optional uint64 targuid = 5;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->targuid(), target);
  }

  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }

  // optional int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.BuffEffect)
  return target;
}

int BuffEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelBufEffect];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

    // optional uint64 targuid = 5;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffEffect::MergeFrom(const BuffEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffEffect::CopyFrom(const BuffEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffEffect::IsInitialized() const {

  return true;
}

void BuffEffect::Swap(BuffEffect* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(targuid_, other->targuid_);
    std::swap(time_, other->time_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffEffect_descriptor_;
  metadata.reflection = BuffEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySummonLifeTime::kMsgidFieldNumber;
const int NotifySummonLifeTime::kGuidFieldNumber;
const int NotifySummonLifeTime::kLifetimeFieldNumber;
const int NotifySummonLifeTime::kResttimeFieldNumber;
const int NotifySummonLifeTime::kPosFieldNumber;
const int NotifySummonLifeTime::kDirFieldNumber;
#endif  // !_MSC_VER

NotifySummonLifeTime::NotifySummonLifeTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySummonLifeTime)
}

void NotifySummonLifeTime::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

NotifySummonLifeTime::NotifySummonLifeTime(const NotifySummonLifeTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySummonLifeTime)
}

void NotifySummonLifeTime::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 77;
  guid_ = GOOGLE_ULONGLONG(0);
  lifetime_ = 0;
  resttime_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySummonLifeTime::~NotifySummonLifeTime() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySummonLifeTime)
  SharedDtor();
}

void NotifySummonLifeTime::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void NotifySummonLifeTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySummonLifeTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySummonLifeTime_descriptor_;
}

const NotifySummonLifeTime& NotifySummonLifeTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySummonLifeTime* NotifySummonLifeTime::default_instance_ = NULL;

NotifySummonLifeTime* NotifySummonLifeTime::New() const {
  return new NotifySummonLifeTime;
}

void NotifySummonLifeTime::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 77;
    guid_ = GOOGLE_ULONGLONG(0);
    lifetime_ = 0;
    resttime_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySummonLifeTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySummonLifeTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySummonLifeTime];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lifetime;
        break;
      }

      // optional int32 lifetime = 3;
      case 3: {
        if (tag == 24) {
         parse_lifetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resttime;
        break;
      }

      // optional int32 resttime = 4;
      case 4: {
        if (tag == 32) {
         parse_resttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resttime_)));
          set_has_resttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 6;
      case 6: {
        if (tag == 50) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySummonLifeTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySummonLifeTime)
  return false;
#undef DO_
}

void NotifySummonLifeTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySummonLifeTime)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySummonLifeTime];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 lifetime = 3;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lifetime(), output);
  }

  // optional int32 resttime = 4;
  if (has_resttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resttime(), output);
  }

  // optional .GSToGC.Pos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 6;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySummonLifeTime)
}

::google::protobuf::uint8* NotifySummonLifeTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySummonLifeTime)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySummonLifeTime];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 lifetime = 3;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lifetime(), target);
  }

  // optional int32 resttime = 4;
  if (has_resttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resttime(), target);
  }

  // optional .GSToGC.Pos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 6;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySummonLifeTime)
  return target;
}

int NotifySummonLifeTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySummonLifeTime];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 lifetime = 3;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifetime());
    }

    // optional int32 resttime = 4;
    if (has_resttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resttime());
    }

    // optional .GSToGC.Pos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 6;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySummonLifeTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySummonLifeTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySummonLifeTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySummonLifeTime::MergeFrom(const NotifySummonLifeTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_resttime()) {
      set_resttime(from.resttime());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySummonLifeTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySummonLifeTime::CopyFrom(const NotifySummonLifeTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySummonLifeTime::IsInitialized() const {

  return true;
}

void NotifySummonLifeTime::Swap(NotifySummonLifeTime* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(resttime_, other->resttime_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySummonLifeTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySummonLifeTime_descriptor_;
  metadata.reflection = NotifySummonLifeTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelStartForceMove::kMsgidFieldNumber;
const int NotifySkillModelStartForceMove::kGuidFieldNumber;
const int NotifySkillModelStartForceMove::kEffectidFieldNumber;
const int NotifySkillModelStartForceMove::kDirFieldNumber;
const int NotifySkillModelStartForceMove::kPodFieldNumber;
const int NotifySkillModelStartForceMove::kSpeedFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelStartForceMove::NotifySkillModelStartForceMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelStartForceMove)
}

void NotifySkillModelStartForceMove::InitAsDefaultInstance() {
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  pod_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

NotifySkillModelStartForceMove::NotifySkillModelStartForceMove(const NotifySkillModelStartForceMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelStartForceMove)
}

void NotifySkillModelStartForceMove::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 78;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0;
  dir_ = NULL;
  pod_ = NULL;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelStartForceMove::~NotifySkillModelStartForceMove() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelStartForceMove)
  SharedDtor();
}

void NotifySkillModelStartForceMove::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete pod_;
  }
}

void NotifySkillModelStartForceMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelStartForceMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelStartForceMove_descriptor_;
}

const NotifySkillModelStartForceMove& NotifySkillModelStartForceMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelStartForceMove* NotifySkillModelStartForceMove::default_instance_ = NULL;

NotifySkillModelStartForceMove* NotifySkillModelStartForceMove::New() const {
  return new NotifySkillModelStartForceMove;
}

void NotifySkillModelStartForceMove::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 78;
    guid_ = GOOGLE_ULONGLONG(0);
    effectid_ = 0;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    if (has_pod()) {
      if (pod_ != NULL) pod_->::GSToGC::Pos::Clear();
    }
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelStartForceMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelStartForceMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMove];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional int32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pod;
        break;
      }

      // optional .GSToGC.Pos pod = 5;
      case 5: {
        if (tag == 42) {
         parse_pod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pod()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6;
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelStartForceMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelStartForceMove)
  return false;
#undef DO_
}

void NotifySkillModelStartForceMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelStartForceMove)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMove];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effectid(), output);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  // optional .GSToGC.Pos pod = 5;
  if (has_pod()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pod(), output);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelStartForceMove)
}

::google::protobuf::uint8* NotifySkillModelStartForceMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelStartForceMove)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMove];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effectid(), target);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  // optional .GSToGC.Pos pod = 5;
  if (has_pod()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pod(), target);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelStartForceMove)
  return target;
}

int NotifySkillModelStartForceMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMove];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional .GSToGC.Dir dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional .GSToGC.Pos pod = 5;
    if (has_pod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pod());
    }

    // optional int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelStartForceMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelStartForceMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelStartForceMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelStartForceMove::MergeFrom(const NotifySkillModelStartForceMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_pod()) {
      mutable_pod()->::GSToGC::Pos::MergeFrom(from.pod());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelStartForceMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelStartForceMove::CopyFrom(const NotifySkillModelStartForceMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelStartForceMove::IsInitialized() const {

  return true;
}

void NotifySkillModelStartForceMove::Swap(NotifySkillModelStartForceMove* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(dir_, other->dir_);
    std::swap(pod_, other->pod_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelStartForceMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelStartForceMove_descriptor_;
  metadata.reflection = NotifySkillModelStartForceMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelStartForceMoveStop::kMsgidFieldNumber;
const int NotifySkillModelStartForceMoveStop::kGuidFieldNumber;
const int NotifySkillModelStartForceMoveStop::kEffectidFieldNumber;
const int NotifySkillModelStartForceMoveStop::kPosFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelStartForceMoveStop::NotifySkillModelStartForceMoveStop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelStartForceMoveStop)
}

void NotifySkillModelStartForceMoveStop::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

NotifySkillModelStartForceMoveStop::NotifySkillModelStartForceMoveStop(const NotifySkillModelStartForceMoveStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelStartForceMoveStop)
}

void NotifySkillModelStartForceMoveStop::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 79;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelStartForceMoveStop::~NotifySkillModelStartForceMoveStop() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelStartForceMoveStop)
  SharedDtor();
}

void NotifySkillModelStartForceMoveStop::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void NotifySkillModelStartForceMoveStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelStartForceMoveStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelStartForceMoveStop_descriptor_;
}

const NotifySkillModelStartForceMoveStop& NotifySkillModelStartForceMoveStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelStartForceMoveStop* NotifySkillModelStartForceMoveStop::default_instance_ = NULL;

NotifySkillModelStartForceMoveStop* NotifySkillModelStartForceMoveStop::New() const {
  return new NotifySkillModelStartForceMoveStop;
}

void NotifySkillModelStartForceMoveStop::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgid_ = 79;
    guid_ = GOOGLE_ULONGLONG(0);
    effectid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelStartForceMoveStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelStartForceMoveStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveStop];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional int32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelStartForceMoveStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelStartForceMoveStop)
  return false;
#undef DO_
}

void NotifySkillModelStartForceMoveStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelStartForceMoveStop)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveStop];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effectid(), output);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelStartForceMoveStop)
}

::google::protobuf::uint8* NotifySkillModelStartForceMoveStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelStartForceMoveStop)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveStop];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effectid(), target);
  }

  // optional .GSToGC.Pos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelStartForceMoveStop)
  return target;
}

int NotifySkillModelStartForceMoveStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveStop];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional .GSToGC.Pos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelStartForceMoveStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelStartForceMoveStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelStartForceMoveStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelStartForceMoveStop::MergeFrom(const NotifySkillModelStartForceMoveStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelStartForceMoveStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelStartForceMoveStop::CopyFrom(const NotifySkillModelStartForceMoveStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelStartForceMoveStop::IsInitialized() const {

  return true;
}

void NotifySkillModelStartForceMoveStop::Swap(NotifySkillModelStartForceMoveStop* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelStartForceMoveStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelStartForceMoveStop_descriptor_;
  metadata.reflection = NotifySkillModelStartForceMoveStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelStartForceMoveTeleport::kMsgidFieldNumber;
const int NotifySkillModelStartForceMoveTeleport::kGuidFieldNumber;
const int NotifySkillModelStartForceMoveTeleport::kEffectidFieldNumber;
const int NotifySkillModelStartForceMoveTeleport::kBeginposFieldNumber;
const int NotifySkillModelStartForceMoveTeleport::kBegindirFieldNumber;
const int NotifySkillModelStartForceMoveTeleport::kTarposFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelStartForceMoveTeleport::NotifySkillModelStartForceMoveTeleport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelStartForceMoveTeleport)
}

void NotifySkillModelStartForceMoveTeleport::InitAsDefaultInstance() {
  beginpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  begindir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  tarpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

NotifySkillModelStartForceMoveTeleport::NotifySkillModelStartForceMoveTeleport(const NotifySkillModelStartForceMoveTeleport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelStartForceMoveTeleport)
}

void NotifySkillModelStartForceMoveTeleport::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 80;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0;
  beginpos_ = NULL;
  begindir_ = NULL;
  tarpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelStartForceMoveTeleport::~NotifySkillModelStartForceMoveTeleport() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelStartForceMoveTeleport)
  SharedDtor();
}

void NotifySkillModelStartForceMoveTeleport::SharedDtor() {
  if (this != default_instance_) {
    delete beginpos_;
    delete begindir_;
    delete tarpos_;
  }
}

void NotifySkillModelStartForceMoveTeleport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelStartForceMoveTeleport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelStartForceMoveTeleport_descriptor_;
}

const NotifySkillModelStartForceMoveTeleport& NotifySkillModelStartForceMoveTeleport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelStartForceMoveTeleport* NotifySkillModelStartForceMoveTeleport::default_instance_ = NULL;

NotifySkillModelStartForceMoveTeleport* NotifySkillModelStartForceMoveTeleport::New() const {
  return new NotifySkillModelStartForceMoveTeleport;
}

void NotifySkillModelStartForceMoveTeleport::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    msgid_ = 80;
    guid_ = GOOGLE_ULONGLONG(0);
    effectid_ = 0;
    if (has_beginpos()) {
      if (beginpos_ != NULL) beginpos_->::GSToGC::Pos::Clear();
    }
    if (has_begindir()) {
      if (begindir_ != NULL) begindir_->::GSToGC::Dir::Clear();
    }
    if (has_tarpos()) {
      if (tarpos_ != NULL) tarpos_->::GSToGC::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelStartForceMoveTeleport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelStartForceMoveTeleport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveTeleport];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional int32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_beginpos;
        break;
      }

      // optional .GSToGC.Pos beginpos = 4;
      case 4: {
        if (tag == 34) {
         parse_beginpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beginpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_begindir;
        break;
      }

      // optional .GSToGC.Dir begindir = 5;
      case 5: {
        if (tag == 42) {
         parse_begindir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begindir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tarpos;
        break;
      }

      // optional .GSToGC.Pos tarpos = 6;
      case 6: {
        if (tag == 50) {
         parse_tarpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tarpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelStartForceMoveTeleport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelStartForceMoveTeleport)
  return false;
#undef DO_
}

void NotifySkillModelStartForceMoveTeleport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelStartForceMoveTeleport)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveTeleport];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effectid(), output);
  }

  // optional .GSToGC.Pos beginpos = 4;
  if (has_beginpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->beginpos(), output);
  }

  // optional .GSToGC.Dir begindir = 5;
  if (has_begindir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->begindir(), output);
  }

  // optional .GSToGC.Pos tarpos = 6;
  if (has_tarpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tarpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelStartForceMoveTeleport)
}

::google::protobuf::uint8* NotifySkillModelStartForceMoveTeleport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelStartForceMoveTeleport)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveTeleport];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effectid(), target);
  }

  // optional .GSToGC.Pos beginpos = 4;
  if (has_beginpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->beginpos(), target);
  }

  // optional .GSToGC.Dir begindir = 5;
  if (has_begindir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->begindir(), target);
  }

  // optional .GSToGC.Pos tarpos = 6;
  if (has_tarpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tarpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelStartForceMoveTeleport)
  return target;
}

int NotifySkillModelStartForceMoveTeleport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartForceMoveTeleport];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional .GSToGC.Pos beginpos = 4;
    if (has_beginpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beginpos());
    }

    // optional .GSToGC.Dir begindir = 5;
    if (has_begindir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begindir());
    }

    // optional .GSToGC.Pos tarpos = 6;
    if (has_tarpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tarpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelStartForceMoveTeleport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelStartForceMoveTeleport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelStartForceMoveTeleport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelStartForceMoveTeleport::MergeFrom(const NotifySkillModelStartForceMoveTeleport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_beginpos()) {
      mutable_beginpos()->::GSToGC::Pos::MergeFrom(from.beginpos());
    }
    if (from.has_begindir()) {
      mutable_begindir()->::GSToGC::Dir::MergeFrom(from.begindir());
    }
    if (from.has_tarpos()) {
      mutable_tarpos()->::GSToGC::Pos::MergeFrom(from.tarpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelStartForceMoveTeleport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelStartForceMoveTeleport::CopyFrom(const NotifySkillModelStartForceMoveTeleport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelStartForceMoveTeleport::IsInitialized() const {

  return true;
}

void NotifySkillModelStartForceMoveTeleport::Swap(NotifySkillModelStartForceMoveTeleport* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(beginpos_, other->beginpos_);
    std::swap(begindir_, other->begindir_);
    std::swap(tarpos_, other->tarpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelStartForceMoveTeleport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelStartForceMoveTeleport_descriptor_;
  metadata.reflection = NotifySkillModelStartForceMoveTeleport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelPurification::kMsgidFieldNumber;
const int NotifySkillModelPurification::kGuidFieldNumber;
const int NotifySkillModelPurification::kTargetguidFieldNumber;
const int NotifySkillModelPurification::kEffectidFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelPurification::NotifySkillModelPurification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelPurification)
}

void NotifySkillModelPurification::InitAsDefaultInstance() {
}

NotifySkillModelPurification::NotifySkillModelPurification(const NotifySkillModelPurification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelPurification)
}

void NotifySkillModelPurification::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 220;
  guid_ = GOOGLE_ULONGLONG(0);
  targetguid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelPurification::~NotifySkillModelPurification() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelPurification)
  SharedDtor();
}

void NotifySkillModelPurification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySkillModelPurification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelPurification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelPurification_descriptor_;
}

const NotifySkillModelPurification& NotifySkillModelPurification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelPurification* NotifySkillModelPurification::default_instance_ = NULL;

NotifySkillModelPurification* NotifySkillModelPurification::New() const {
  return new NotifySkillModelPurification;
}

void NotifySkillModelPurification::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifySkillModelPurification*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(effectid_, targetguid_);
    msgid_ = 220;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelPurification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelPurification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelPurification];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetguid;
        break;
      }

      // optional uint64 targetguid = 3;
      case 3: {
        if (tag == 24) {
         parse_targetguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetguid_)));
          set_has_targetguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_effectid;
        break;
      }

      // optional int32 effectid = 4;
      case 4: {
        if (tag == 32) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelPurification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelPurification)
  return false;
#undef DO_
}

void NotifySkillModelPurification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelPurification)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelPurification];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint64 targetguid = 3;
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetguid(), output);
  }

  // optional int32 effectid = 4;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->effectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelPurification)
}

::google::protobuf::uint8* NotifySkillModelPurification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelPurification)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelPurification];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint64 targetguid = 3;
  if (has_targetguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetguid(), target);
  }

  // optional int32 effectid = 4;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->effectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelPurification)
  return target;
}

int NotifySkillModelPurification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelPurification];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 targetguid = 3;
    if (has_targetguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetguid());
    }

    // optional int32 effectid = 4;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelPurification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelPurification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelPurification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelPurification::MergeFrom(const NotifySkillModelPurification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_targetguid()) {
      set_targetguid(from.targetguid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelPurification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelPurification::CopyFrom(const NotifySkillModelPurification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelPurification::IsInitialized() const {

  return true;
}

void NotifySkillModelPurification::Swap(NotifySkillModelPurification* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(targetguid_, other->targetguid_);
    std::swap(effectid_, other->effectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelPurification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelPurification_descriptor_;
  metadata.reflection = NotifySkillModelPurification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelStartLink::kMsgidFieldNumber;
const int NotifySkillModelStartLink::kGuidFieldNumber;
const int NotifySkillModelStartLink::kBeginposFieldNumber;
const int NotifySkillModelStartLink::kTargetguidFieldNumber;
const int NotifySkillModelStartLink::kEffectidFieldNumber;
const int NotifySkillModelStartLink::kUniqueidFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelStartLink::NotifySkillModelStartLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelStartLink)
}

void NotifySkillModelStartLink::InitAsDefaultInstance() {
  beginpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

NotifySkillModelStartLink::NotifySkillModelStartLink(const NotifySkillModelStartLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelStartLink)
}

void NotifySkillModelStartLink::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 550;
  guid_ = GOOGLE_ULONGLONG(0);
  beginpos_ = NULL;
  targetguid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0;
  uniqueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelStartLink::~NotifySkillModelStartLink() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelStartLink)
  SharedDtor();
}

void NotifySkillModelStartLink::SharedDtor() {
  if (this != default_instance_) {
    delete beginpos_;
  }
}

void NotifySkillModelStartLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelStartLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelStartLink_descriptor_;
}

const NotifySkillModelStartLink& NotifySkillModelStartLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelStartLink* NotifySkillModelStartLink::default_instance_ = NULL;

NotifySkillModelStartLink* NotifySkillModelStartLink::New() const {
  return new NotifySkillModelStartLink;
}

void NotifySkillModelStartLink::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifySkillModelStartLink*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(effectid_, uniqueid_);
    msgid_ = 550;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_beginpos()) {
      if (beginpos_ != NULL) beginpos_->::GSToGC::Pos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelStartLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelStartLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartLink];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_beginpos;
        break;
      }

      // optional .GSToGC.Pos beginpos = 3;
      case 3: {
        if (tag == 26) {
         parse_beginpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beginpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetguid;
        break;
      }

      // optional uint64 targetguid = 4;
      case 4: {
        if (tag == 32) {
         parse_targetguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetguid_)));
          set_has_targetguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effectid;
        break;
      }

      // optional int32 effectid = 5;
      case 5: {
        if (tag == 40) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 6;
      case 6: {
        if (tag == 48) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelStartLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelStartLink)
  return false;
#undef DO_
}

void NotifySkillModelStartLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelStartLink)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartLink];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional .GSToGC.Pos beginpos = 3;
  if (has_beginpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beginpos(), output);
  }

  // optional uint64 targetguid = 4;
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetguid(), output);
  }

  // optional int32 effectid = 5;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->effectid(), output);
  }

  // optional uint32 uniqueid = 6;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelStartLink)
}

::google::protobuf::uint8* NotifySkillModelStartLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelStartLink)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartLink];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional .GSToGC.Pos beginpos = 3;
  if (has_beginpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beginpos(), target);
  }

  // optional uint64 targetguid = 4;
  if (has_targetguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetguid(), target);
  }

  // optional int32 effectid = 5;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->effectid(), target);
  }

  // optional uint32 uniqueid = 6;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelStartLink)
  return target;
}

int NotifySkillModelStartLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStartLink];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .GSToGC.Pos beginpos = 3;
    if (has_beginpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beginpos());
    }

    // optional uint64 targetguid = 4;
    if (has_targetguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetguid());
    }

    // optional int32 effectid = 5;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional uint32 uniqueid = 6;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelStartLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelStartLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelStartLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelStartLink::MergeFrom(const NotifySkillModelStartLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_beginpos()) {
      mutable_beginpos()->::GSToGC::Pos::MergeFrom(from.beginpos());
    }
    if (from.has_targetguid()) {
      set_targetguid(from.targetguid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelStartLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelStartLink::CopyFrom(const NotifySkillModelStartLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelStartLink::IsInitialized() const {

  return true;
}

void NotifySkillModelStartLink::Swap(NotifySkillModelStartLink* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(beginpos_, other->beginpos_);
    std::swap(targetguid_, other->targetguid_);
    std::swap(effectid_, other->effectid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelStartLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelStartLink_descriptor_;
  metadata.reflection = NotifySkillModelStartLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelStopLink::kMsgidFieldNumber;
const int NotifySkillModelStopLink::kUniqueidFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelStopLink::NotifySkillModelStopLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelStopLink)
}

void NotifySkillModelStopLink::InitAsDefaultInstance() {
}

NotifySkillModelStopLink::NotifySkillModelStopLink(const NotifySkillModelStopLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelStopLink)
}

void NotifySkillModelStopLink::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 551;
  uniqueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelStopLink::~NotifySkillModelStopLink() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelStopLink)
  SharedDtor();
}

void NotifySkillModelStopLink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySkillModelStopLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelStopLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelStopLink_descriptor_;
}

const NotifySkillModelStopLink& NotifySkillModelStopLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelStopLink* NotifySkillModelStopLink::default_instance_ = NULL;

NotifySkillModelStopLink* NotifySkillModelStopLink::New() const {
  return new NotifySkillModelStopLink;
}

void NotifySkillModelStopLink::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 551;
    uniqueid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelStopLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelStopLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStopLink];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 2;
      case 2: {
        if (tag == 16) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelStopLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelStopLink)
  return false;
#undef DO_
}

void NotifySkillModelStopLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelStopLink)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStopLink];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 uniqueid = 2;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelStopLink)
}

::google::protobuf::uint8* NotifySkillModelStopLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelStopLink)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStopLink];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 uniqueid = 2;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelStopLink)
  return target;
}

int NotifySkillModelStopLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelStopLink];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 uniqueid = 2;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelStopLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelStopLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelStopLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelStopLink::MergeFrom(const NotifySkillModelStopLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelStopLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelStopLink::CopyFrom(const NotifySkillModelStopLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelStopLink::IsInitialized() const {

  return true;
}

void NotifySkillModelStopLink::Swap(NotifySkillModelStopLink* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelStopLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelStopLink_descriptor_;
  metadata.reflection = NotifySkillModelStopLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPassitiveSkillRelease::kMsgidFieldNumber;
const int NotifyPassitiveSkillRelease::kGuidFieldNumber;
const int NotifyPassitiveSkillRelease::kSkillidFieldNumber;
const int NotifyPassitiveSkillRelease::kTimeLeftFieldNumber;
#endif  // !_MSC_VER

NotifyPassitiveSkillRelease::NotifyPassitiveSkillRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyPassitiveSkillRelease)
}

void NotifyPassitiveSkillRelease::InitAsDefaultInstance() {
}

NotifyPassitiveSkillRelease::NotifyPassitiveSkillRelease(const NotifyPassitiveSkillRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyPassitiveSkillRelease)
}

void NotifyPassitiveSkillRelease::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 81;
  guid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  timeleft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPassitiveSkillRelease::~NotifyPassitiveSkillRelease() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyPassitiveSkillRelease)
  SharedDtor();
}

void NotifyPassitiveSkillRelease::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPassitiveSkillRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPassitiveSkillRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPassitiveSkillRelease_descriptor_;
}

const NotifyPassitiveSkillRelease& NotifyPassitiveSkillRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyPassitiveSkillRelease* NotifyPassitiveSkillRelease::default_instance_ = NULL;

NotifyPassitiveSkillRelease* NotifyPassitiveSkillRelease::New() const {
  return new NotifyPassitiveSkillRelease;
}

void NotifyPassitiveSkillRelease::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyPassitiveSkillRelease*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillid_, timeleft_);
    msgid_ = 81;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPassitiveSkillRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyPassitiveSkillRelease)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillRelease];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeLeft;
        break;
      }

      // optional int32 timeLeft = 4;
      case 4: {
        if (tag == 32) {
         parse_timeLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeleft_)));
          set_has_timeleft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyPassitiveSkillRelease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyPassitiveSkillRelease)
  return false;
#undef DO_
}

void NotifyPassitiveSkillRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyPassitiveSkillRelease)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillRelease];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int32 timeLeft = 4;
  if (has_timeleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeleft(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyPassitiveSkillRelease)
}

::google::protobuf::uint8* NotifyPassitiveSkillRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyPassitiveSkillRelease)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillRelease];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int32 timeLeft = 4;
  if (has_timeleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeleft(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyPassitiveSkillRelease)
  return target;
}

int NotifyPassitiveSkillRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillRelease];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 timeLeft = 4;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPassitiveSkillRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPassitiveSkillRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPassitiveSkillRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPassitiveSkillRelease::MergeFrom(const NotifyPassitiveSkillRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_timeleft()) {
      set_timeleft(from.timeleft());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPassitiveSkillRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPassitiveSkillRelease::CopyFrom(const NotifyPassitiveSkillRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPassitiveSkillRelease::IsInitialized() const {

  return true;
}

void NotifyPassitiveSkillRelease::Swap(NotifyPassitiveSkillRelease* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPassitiveSkillRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPassitiveSkillRelease_descriptor_;
  metadata.reflection = NotifyPassitiveSkillRelease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPassitiveSkillLoad::kMsgidFieldNumber;
const int NotifyPassitiveSkillLoad::kGuidFieldNumber;
const int NotifyPassitiveSkillLoad::kSkillidFieldNumber;
const int NotifyPassitiveSkillLoad::kUniqueidFieldNumber;
#endif  // !_MSC_VER

NotifyPassitiveSkillLoad::NotifyPassitiveSkillLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyPassitiveSkillLoad)
}

void NotifyPassitiveSkillLoad::InitAsDefaultInstance() {
}

NotifyPassitiveSkillLoad::NotifyPassitiveSkillLoad(const NotifyPassitiveSkillLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyPassitiveSkillLoad)
}

void NotifyPassitiveSkillLoad::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 82;
  guid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  uniqueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPassitiveSkillLoad::~NotifyPassitiveSkillLoad() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyPassitiveSkillLoad)
  SharedDtor();
}

void NotifyPassitiveSkillLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPassitiveSkillLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPassitiveSkillLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPassitiveSkillLoad_descriptor_;
}

const NotifyPassitiveSkillLoad& NotifyPassitiveSkillLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyPassitiveSkillLoad* NotifyPassitiveSkillLoad::default_instance_ = NULL;

NotifyPassitiveSkillLoad* NotifyPassitiveSkillLoad::New() const {
  return new NotifyPassitiveSkillLoad;
}

void NotifyPassitiveSkillLoad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyPassitiveSkillLoad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillid_, uniqueid_);
    msgid_ = 82;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPassitiveSkillLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyPassitiveSkillLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillLoad];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyPassitiveSkillLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyPassitiveSkillLoad)
  return false;
#undef DO_
}

void NotifyPassitiveSkillLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyPassitiveSkillLoad)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillLoad];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyPassitiveSkillLoad)
}

::google::protobuf::uint8* NotifyPassitiveSkillLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyPassitiveSkillLoad)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillLoad];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyPassitiveSkillLoad)
  return target;
}

int NotifyPassitiveSkillLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillLoad];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPassitiveSkillLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPassitiveSkillLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPassitiveSkillLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPassitiveSkillLoad::MergeFrom(const NotifyPassitiveSkillLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPassitiveSkillLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPassitiveSkillLoad::CopyFrom(const NotifyPassitiveSkillLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPassitiveSkillLoad::IsInitialized() const {

  return true;
}

void NotifyPassitiveSkillLoad::Swap(NotifyPassitiveSkillLoad* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPassitiveSkillLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPassitiveSkillLoad_descriptor_;
  metadata.reflection = NotifyPassitiveSkillLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPassitiveSkillUnLoad::kMsgidFieldNumber;
const int NotifyPassitiveSkillUnLoad::kGuidFieldNumber;
const int NotifyPassitiveSkillUnLoad::kSkillidFieldNumber;
const int NotifyPassitiveSkillUnLoad::kUniqueidFieldNumber;
#endif  // !_MSC_VER

NotifyPassitiveSkillUnLoad::NotifyPassitiveSkillUnLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyPassitiveSkillUnLoad)
}

void NotifyPassitiveSkillUnLoad::InitAsDefaultInstance() {
}

NotifyPassitiveSkillUnLoad::NotifyPassitiveSkillUnLoad(const NotifyPassitiveSkillUnLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyPassitiveSkillUnLoad)
}

void NotifyPassitiveSkillUnLoad::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 83;
  guid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0;
  uniqueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPassitiveSkillUnLoad::~NotifyPassitiveSkillUnLoad() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyPassitiveSkillUnLoad)
  SharedDtor();
}

void NotifyPassitiveSkillUnLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPassitiveSkillUnLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPassitiveSkillUnLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPassitiveSkillUnLoad_descriptor_;
}

const NotifyPassitiveSkillUnLoad& NotifyPassitiveSkillUnLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyPassitiveSkillUnLoad* NotifyPassitiveSkillUnLoad::default_instance_ = NULL;

NotifyPassitiveSkillUnLoad* NotifyPassitiveSkillUnLoad::New() const {
  return new NotifyPassitiveSkillUnLoad;
}

void NotifyPassitiveSkillUnLoad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyPassitiveSkillUnLoad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillid_, uniqueid_);
    msgid_ = 83;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPassitiveSkillUnLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyPassitiveSkillUnLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillUnload];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyPassitiveSkillUnLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyPassitiveSkillUnLoad)
  return false;
#undef DO_
}

void NotifyPassitiveSkillUnLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyPassitiveSkillUnLoad)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillUnload];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyPassitiveSkillUnLoad)
}

::google::protobuf::uint8* NotifyPassitiveSkillUnLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyPassitiveSkillUnLoad)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillUnload];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyPassitiveSkillUnLoad)
  return target;
}

int NotifyPassitiveSkillUnLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyPassitiveSkillUnload];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPassitiveSkillUnLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPassitiveSkillUnLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPassitiveSkillUnLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPassitiveSkillUnLoad::MergeFrom(const NotifyPassitiveSkillUnLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPassitiveSkillUnLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPassitiveSkillUnLoad::CopyFrom(const NotifyPassitiveSkillUnLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPassitiveSkillUnLoad::IsInitialized() const {

  return true;
}

void NotifyPassitiveSkillUnLoad::Swap(NotifyPassitiveSkillUnLoad* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillid_, other->skillid_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPassitiveSkillUnLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPassitiveSkillUnLoad_descriptor_;
  metadata.reflection = NotifyPassitiveSkillUnLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillModelEmitTurn::kMsgidFieldNumber;
const int NotifySkillModelEmitTurn::kGuidFieldNumber;
const int NotifySkillModelEmitTurn::kEffectidFieldNumber;
const int NotifySkillModelEmitTurn::kProgectidFieldNumber;
const int NotifySkillModelEmitTurn::kPosFieldNumber;
const int NotifySkillModelEmitTurn::kDirFieldNumber;
const int NotifySkillModelEmitTurn::kTarguidFieldNumber;
const int NotifySkillModelEmitTurn::kTarposFieldNumber;
#endif  // !_MSC_VER

NotifySkillModelEmitTurn::NotifySkillModelEmitTurn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillModelEmitTurn)
}

void NotifySkillModelEmitTurn::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
  tarpos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
}

NotifySkillModelEmitTurn::NotifySkillModelEmitTurn(const NotifySkillModelEmitTurn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillModelEmitTurn)
}

void NotifySkillModelEmitTurn::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 84;
  guid_ = GOOGLE_ULONGLONG(0);
  effectid_ = 0u;
  progectid_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  targuid_ = GOOGLE_ULONGLONG(0);
  tarpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillModelEmitTurn::~NotifySkillModelEmitTurn() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillModelEmitTurn)
  SharedDtor();
}

void NotifySkillModelEmitTurn::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
    delete tarpos_;
  }
}

void NotifySkillModelEmitTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillModelEmitTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillModelEmitTurn_descriptor_;
}

const NotifySkillModelEmitTurn& NotifySkillModelEmitTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillModelEmitTurn* NotifySkillModelEmitTurn::default_instance_ = NULL;

NotifySkillModelEmitTurn* NotifySkillModelEmitTurn::New() const {
  return new NotifySkillModelEmitTurn;
}

void NotifySkillModelEmitTurn::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    msgid_ = 84;
    guid_ = GOOGLE_ULONGLONG(0);
    effectid_ = 0u;
    progectid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
    targuid_ = GOOGLE_ULONGLONG(0);
    if (has_tarpos()) {
      if (tarpos_ != NULL) tarpos_->::GSToGC::Pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillModelEmitTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillModelEmitTurn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitTurn];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effectid;
        break;
      }

      // optional uint32 effectid = 3;
      case 3: {
        if (tag == 24) {
         parse_effectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progectid;
        break;
      }

      // optional int32 progectid = 4;
      case 4: {
        if (tag == 32) {
         parse_progectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progectid_)));
          set_has_progectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 6;
      case 6: {
        if (tag == 50) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_targuid;
        break;
      }

      // optional uint64 targuid = 7;
      case 7: {
        if (tag == 56) {
         parse_targuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targuid_)));
          set_has_targuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tarpos;
        break;
      }

      // optional .GSToGC.Pos tarpos = 8;
      case 8: {
        if (tag == 66) {
         parse_tarpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tarpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillModelEmitTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillModelEmitTurn)
  return false;
#undef DO_
}

void NotifySkillModelEmitTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillModelEmitTurn)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitTurn];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectid(), output);
  }

  // optional int32 progectid = 4;
  if (has_progectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->progectid(), output);
  }

  // optional .GSToGC.Pos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 6;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dir(), output);
  }

  // optional uint64 targuid = 7;
  if (has_targuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->targuid(), output);
  }

  // optional .GSToGC.Pos tarpos = 8;
  if (has_tarpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tarpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillModelEmitTurn)
}

::google::protobuf::uint8* NotifySkillModelEmitTurn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillModelEmitTurn)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitTurn];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 effectid = 3;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effectid(), target);
  }

  // optional int32 progectid = 4;
  if (has_progectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->progectid(), target);
  }

  // optional .GSToGC.Pos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 6;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dir(), target);
  }

  // optional uint64 targuid = 7;
  if (has_targuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->targuid(), target);
  }

  // optional .GSToGC.Pos tarpos = 8;
  if (has_tarpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tarpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillModelEmitTurn)
  return target;
}

int NotifySkillModelEmitTurn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillModelEmitTurn];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 effectid = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional int32 progectid = 4;
    if (has_progectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progectid());
    }

    // optional .GSToGC.Pos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 6;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional uint64 targuid = 7;
    if (has_targuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targuid());
    }

    // optional .GSToGC.Pos tarpos = 8;
    if (has_tarpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tarpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillModelEmitTurn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillModelEmitTurn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillModelEmitTurn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillModelEmitTurn::MergeFrom(const NotifySkillModelEmitTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_progectid()) {
      set_progectid(from.progectid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
    if (from.has_targuid()) {
      set_targuid(from.targuid());
    }
    if (from.has_tarpos()) {
      mutable_tarpos()->::GSToGC::Pos::MergeFrom(from.tarpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillModelEmitTurn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillModelEmitTurn::CopyFrom(const NotifySkillModelEmitTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillModelEmitTurn::IsInitialized() const {

  return true;
}

void NotifySkillModelEmitTurn::Swap(NotifySkillModelEmitTurn* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(effectid_, other->effectid_);
    std::swap(progectid_, other->progectid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(targuid_, other->targuid_);
    std::swap(tarpos_, other->tarpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillModelEmitTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillModelEmitTurn_descriptor_;
  metadata.reflection = NotifySkillModelEmitTurn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBornObj::kMsgidFieldNumber;
const int NotifyBornObj::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyBornObj::NotifyBornObj()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyBornObj)
}

void NotifyBornObj::InitAsDefaultInstance() {
}

NotifyBornObj::NotifyBornObj(const NotifyBornObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyBornObj)
}

void NotifyBornObj::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 116;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBornObj::~NotifyBornObj() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyBornObj)
  SharedDtor();
}

void NotifyBornObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBornObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBornObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBornObj_descriptor_;
}

const NotifyBornObj& NotifyBornObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyBornObj* NotifyBornObj::default_instance_ = NULL;

NotifyBornObj* NotifyBornObj::New() const {
  return new NotifyBornObj;
}

void NotifyBornObj::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 116;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBornObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyBornObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToSSFromCS_NotifyBornObj];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyBornObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyBornObj)
  return false;
#undef DO_
}

void NotifyBornObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyBornObj)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToSSFromCS_NotifyBornObj];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyBornObj)
}

::google::protobuf::uint8* NotifyBornObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyBornObj)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToSSFromCS_NotifyBornObj];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyBornObj)
  return target;
}

int NotifyBornObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToSSFromCS_NotifyBornObj];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBornObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBornObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBornObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBornObj::MergeFrom(const NotifyBornObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBornObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBornObj::CopyFrom(const NotifyBornObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBornObj::IsInitialized() const {

  return true;
}

void NotifyBornObj::Swap(NotifyBornObj* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBornObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBornObj_descriptor_;
  metadata.reflection = NotifyBornObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyReconnectInfo_ReconnectInfo::kPosFieldNumber;
const int NotifyReconnectInfo_ReconnectInfo::kGuidFieldNumber;
const int NotifyReconnectInfo_ReconnectInfo::kNicknameFieldNumber;
const int NotifyReconnectInfo_ReconnectInfo::kHeroidFieldNumber;
const int NotifyReconnectInfo_ReconnectInfo::kIfselectedFieldNumber;
#endif  // !_MSC_VER

NotifyReconnectInfo_ReconnectInfo::NotifyReconnectInfo_ReconnectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyReconnectInfo.ReconnectInfo)
}

void NotifyReconnectInfo_ReconnectInfo::InitAsDefaultInstance() {
}

NotifyReconnectInfo_ReconnectInfo::NotifyReconnectInfo_ReconnectInfo(const NotifyReconnectInfo_ReconnectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyReconnectInfo.ReconnectInfo)
}

void NotifyReconnectInfo_ReconnectInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pos_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heroid_ = 0u;
  ifselected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyReconnectInfo_ReconnectInfo::~NotifyReconnectInfo_ReconnectInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  SharedDtor();
}

void NotifyReconnectInfo_ReconnectInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void NotifyReconnectInfo_ReconnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyReconnectInfo_ReconnectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyReconnectInfo_ReconnectInfo_descriptor_;
}

const NotifyReconnectInfo_ReconnectInfo& NotifyReconnectInfo_ReconnectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyReconnectInfo_ReconnectInfo* NotifyReconnectInfo_ReconnectInfo::default_instance_ = NULL;

NotifyReconnectInfo_ReconnectInfo* NotifyReconnectInfo_ReconnectInfo::New() const {
  return new NotifyReconnectInfo_ReconnectInfo;
}

void NotifyReconnectInfo_ReconnectInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyReconnectInfo_ReconnectInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guid_, heroid_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    ifselected_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyReconnectInfo_ReconnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 4;
      case 4: {
        if (tag == 32) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ifselected;
        break;
      }

      // optional bool ifselected = 5;
      case 5: {
        if (tag == 40) {
         parse_ifselected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifselected_)));
          set_has_ifselected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  return false;
#undef DO_
}

void NotifyReconnectInfo_ReconnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional uint32 heroid = 4;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->heroid(), output);
  }

  // optional bool ifselected = 5;
  if (has_ifselected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ifselected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyReconnectInfo.ReconnectInfo)
}

::google::protobuf::uint8* NotifyReconnectInfo_ReconnectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional uint32 heroid = 4;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->heroid(), target);
  }

  // optional bool ifselected = 5;
  if (has_ifselected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ifselected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyReconnectInfo.ReconnectInfo)
  return target;
}

int NotifyReconnectInfo_ReconnectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 heroid = 4;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional bool ifselected = 5;
    if (has_ifselected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyReconnectInfo_ReconnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyReconnectInfo_ReconnectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyReconnectInfo_ReconnectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyReconnectInfo_ReconnectInfo::MergeFrom(const NotifyReconnectInfo_ReconnectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_ifselected()) {
      set_ifselected(from.ifselected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyReconnectInfo_ReconnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyReconnectInfo_ReconnectInfo::CopyFrom(const NotifyReconnectInfo_ReconnectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyReconnectInfo_ReconnectInfo::IsInitialized() const {

  return true;
}

void NotifyReconnectInfo_ReconnectInfo::Swap(NotifyReconnectInfo_ReconnectInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(guid_, other->guid_);
    std::swap(nickname_, other->nickname_);
    std::swap(heroid_, other->heroid_);
    std::swap(ifselected_, other->ifselected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyReconnectInfo_ReconnectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyReconnectInfo_ReconnectInfo_descriptor_;
  metadata.reflection = NotifyReconnectInfo_ReconnectInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyReconnectInfo::kMsgidFieldNumber;
const int NotifyReconnectInfo::kBattlestateFieldNumber;
const int NotifyReconnectInfo::kRemainTimesFieldNumber;
const int NotifyReconnectInfo::kIfobFieldNumber;
const int NotifyReconnectInfo::kReconnectinfoFieldNumber;
#endif  // !_MSC_VER

NotifyReconnectInfo::NotifyReconnectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyReconnectInfo)
}

void NotifyReconnectInfo::InitAsDefaultInstance() {
}

NotifyReconnectInfo::NotifyReconnectInfo(const NotifyReconnectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyReconnectInfo)
}

void NotifyReconnectInfo::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 115;
  battlestate_ = 0;
  remain_times_ = 0;
  ifob_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyReconnectInfo::~NotifyReconnectInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyReconnectInfo)
  SharedDtor();
}

void NotifyReconnectInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyReconnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyReconnectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyReconnectInfo_descriptor_;
}

const NotifyReconnectInfo& NotifyReconnectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyReconnectInfo* NotifyReconnectInfo::default_instance_ = NULL;

NotifyReconnectInfo* NotifyReconnectInfo::New() const {
  return new NotifyReconnectInfo;
}

void NotifyReconnectInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyReconnectInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(battlestate_, ifob_);
    msgid_ = 115;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reconnectinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyReconnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyReconnectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyReconnectInfo];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battlestate;
        break;
      }

      // optional int32 battlestate = 2;
      case 2: {
        if (tag == 16) {
         parse_battlestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlestate_)));
          set_has_battlestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remain_times;
        break;
      }

      // optional int32 remain_times = 3;
      case 3: {
        if (tag == 24) {
         parse_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_times_)));
          set_has_remain_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifob;
        break;
      }

      // optional bool ifob = 4;
      case 4: {
        if (tag == 32) {
         parse_ifob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ifob_)));
          set_has_ifob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reconnectinfo;
        break;
      }

      // repeated .GSToGC.NotifyReconnectInfo.ReconnectInfo reconnectinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_reconnectinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reconnectinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reconnectinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyReconnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyReconnectInfo)
  return false;
#undef DO_
}

void NotifyReconnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyReconnectInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyReconnectInfo];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int32 battlestate = 2;
  if (has_battlestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battlestate(), output);
  }

  // optional int32 remain_times = 3;
  if (has_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_times(), output);
  }

  // optional bool ifob = 4;
  if (has_ifob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ifob(), output);
  }

  // repeated .GSToGC.NotifyReconnectInfo.ReconnectInfo reconnectinfo = 5;
  for (int i = 0; i < this->reconnectinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reconnectinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyReconnectInfo)
}

::google::protobuf::uint8* NotifyReconnectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyReconnectInfo)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyReconnectInfo];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int32 battlestate = 2;
  if (has_battlestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battlestate(), target);
  }

  // optional int32 remain_times = 3;
  if (has_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_times(), target);
  }

  // optional bool ifob = 4;
  if (has_ifob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ifob(), target);
  }

  // repeated .GSToGC.NotifyReconnectInfo.ReconnectInfo reconnectinfo = 5;
  for (int i = 0; i < this->reconnectinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reconnectinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyReconnectInfo)
  return target;
}

int NotifyReconnectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromCS_NotifyReconnectInfo];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int32 battlestate = 2;
    if (has_battlestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlestate());
    }

    // optional int32 remain_times = 3;
    if (has_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_times());
    }

    // optional bool ifob = 4;
    if (has_ifob()) {
      total_size += 1 + 1;
    }

  }
  // repeated .GSToGC.NotifyReconnectInfo.ReconnectInfo reconnectinfo = 5;
  total_size += 1 * this->reconnectinfo_size();
  for (int i = 0; i < this->reconnectinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reconnectinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyReconnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyReconnectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyReconnectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyReconnectInfo::MergeFrom(const NotifyReconnectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reconnectinfo_.MergeFrom(from.reconnectinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_battlestate()) {
      set_battlestate(from.battlestate());
    }
    if (from.has_remain_times()) {
      set_remain_times(from.remain_times());
    }
    if (from.has_ifob()) {
      set_ifob(from.ifob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyReconnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyReconnectInfo::CopyFrom(const NotifyReconnectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyReconnectInfo::IsInitialized() const {

  return true;
}

void NotifyReconnectInfo::Swap(NotifyReconnectInfo* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(battlestate_, other->battlestate_);
    std::swap(remain_times_, other->remain_times_);
    std::swap(ifob_, other->ifob_);
    reconnectinfo_.Swap(&other->reconnectinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyReconnectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyReconnectInfo_descriptor_;
  metadata.reflection = NotifyReconnectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOBReturnBattleRoom::kMsgidFieldNumber;
#endif  // !_MSC_VER

NotifyOBReturnBattleRoom::NotifyOBReturnBattleRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyOBReturnBattleRoom)
}

void NotifyOBReturnBattleRoom::InitAsDefaultInstance() {
}

NotifyOBReturnBattleRoom::NotifyOBReturnBattleRoom(const NotifyOBReturnBattleRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyOBReturnBattleRoom)
}

void NotifyOBReturnBattleRoom::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 90;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOBReturnBattleRoom::~NotifyOBReturnBattleRoom() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyOBReturnBattleRoom)
  SharedDtor();
}

void NotifyOBReturnBattleRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyOBReturnBattleRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOBReturnBattleRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOBReturnBattleRoom_descriptor_;
}

const NotifyOBReturnBattleRoom& NotifyOBReturnBattleRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyOBReturnBattleRoom* NotifyOBReturnBattleRoom::default_instance_ = NULL;

NotifyOBReturnBattleRoom* NotifyOBReturnBattleRoom::New() const {
  return new NotifyOBReturnBattleRoom;
}

void NotifyOBReturnBattleRoom::Clear() {
  msgid_ = 90;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOBReturnBattleRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyOBReturnBattleRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBReturnBattleRoom];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyOBReturnBattleRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyOBReturnBattleRoom)
  return false;
#undef DO_
}

void NotifyOBReturnBattleRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyOBReturnBattleRoom)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBReturnBattleRoom];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyOBReturnBattleRoom)
}

::google::protobuf::uint8* NotifyOBReturnBattleRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyOBReturnBattleRoom)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBReturnBattleRoom];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyOBReturnBattleRoom)
  return target;
}

int NotifyOBReturnBattleRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBReturnBattleRoom];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOBReturnBattleRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOBReturnBattleRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOBReturnBattleRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOBReturnBattleRoom::MergeFrom(const NotifyOBReturnBattleRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOBReturnBattleRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOBReturnBattleRoom::CopyFrom(const NotifyOBReturnBattleRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOBReturnBattleRoom::IsInitialized() const {

  return true;
}

void NotifyOBReturnBattleRoom::Swap(NotifyOBReturnBattleRoom* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOBReturnBattleRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOBReturnBattleRoom_descriptor_;
  metadata.reflection = NotifyOBReturnBattleRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOBAppear::kMsgidFieldNumber;
const int NotifyOBAppear::kObidFieldNumber;
const int NotifyOBAppear::kCampFieldNumber;
#endif  // !_MSC_VER

NotifyOBAppear::NotifyOBAppear()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyOBAppear)
}

void NotifyOBAppear::InitAsDefaultInstance() {
}

NotifyOBAppear::NotifyOBAppear(const NotifyOBAppear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyOBAppear)
}

void NotifyOBAppear::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 95;
  obid_ = GOOGLE_ULONGLONG(0);
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOBAppear::~NotifyOBAppear() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyOBAppear)
  SharedDtor();
}

void NotifyOBAppear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyOBAppear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOBAppear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOBAppear_descriptor_;
}

const NotifyOBAppear& NotifyOBAppear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyOBAppear* NotifyOBAppear::default_instance_ = NULL;

NotifyOBAppear* NotifyOBAppear::New() const {
  return new NotifyOBAppear;
}

void NotifyOBAppear::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 95;
    obid_ = GOOGLE_ULONGLONG(0);
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOBAppear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyOBAppear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBAppear];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_obid;
        break;
      }

      // optional uint64 obid = 2;
      case 2: {
        if (tag == 16) {
         parse_obid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obid_)));
          set_has_obid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_camp;
        break;
      }

      // optional int32 camp = 3;
      case 3: {
        if (tag == 24) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyOBAppear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyOBAppear)
  return false;
#undef DO_
}

void NotifyOBAppear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyOBAppear)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBAppear];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 obid = 2;
  if (has_obid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->obid(), output);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyOBAppear)
}

::google::protobuf::uint8* NotifyOBAppear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyOBAppear)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBAppear];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 obid = 2;
  if (has_obid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->obid(), target);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyOBAppear)
  return target;
}

int NotifyOBAppear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyOBAppear];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 obid = 2;
    if (has_obid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obid());
    }

    // optional int32 camp = 3;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOBAppear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOBAppear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOBAppear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOBAppear::MergeFrom(const NotifyOBAppear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_obid()) {
      set_obid(from.obid());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOBAppear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOBAppear::CopyFrom(const NotifyOBAppear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOBAppear::IsInitialized() const {

  return true;
}

void NotifyOBAppear::Swap(NotifyOBAppear* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(obid_, other->obid_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOBAppear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOBAppear_descriptor_;
  metadata.reflection = NotifyOBAppear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyKillNPC::kMsgidFieldNumber;
const int NotifyKillNPC::kGuidFieldNumber;
const int NotifyKillNPC::kKillnumFieldNumber;
#endif  // !_MSC_VER

NotifyKillNPC::NotifyKillNPC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyKillNPC)
}

void NotifyKillNPC::InitAsDefaultInstance() {
}

NotifyKillNPC::NotifyKillNPC(const NotifyKillNPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyKillNPC)
}

void NotifyKillNPC::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 96;
  guid_ = GOOGLE_ULONGLONG(0);
  killnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyKillNPC::~NotifyKillNPC() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyKillNPC)
  SharedDtor();
}

void NotifyKillNPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyKillNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyKillNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyKillNPC_descriptor_;
}

const NotifyKillNPC& NotifyKillNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyKillNPC* NotifyKillNPC::default_instance_ = NULL;

NotifyKillNPC* NotifyKillNPC::New() const {
  return new NotifyKillNPC;
}

void NotifyKillNPC::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 96;
    guid_ = GOOGLE_ULONGLONG(0);
    killnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyKillNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyKillNPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyKillNPC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killnum;
        break;
      }

      // optional uint32 killnum = 3;
      case 3: {
        if (tag == 24) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyKillNPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyKillNPC)
  return false;
#undef DO_
}

void NotifyKillNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyKillNPC)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyKillNPC];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 killnum = 3;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyKillNPC)
}

::google::protobuf::uint8* NotifyKillNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyKillNPC)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyKillNPC];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 killnum = 3;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyKillNPC)
  return target;
}

int NotifyKillNPC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyKillNPC];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 killnum = 3;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyKillNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyKillNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyKillNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyKillNPC::MergeFrom(const NotifyKillNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyKillNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyKillNPC::CopyFrom(const NotifyKillNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyKillNPC::IsInitialized() const {

  return true;
}

void NotifyKillNPC::Swap(NotifyKillNPC* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(killnum_, other->killnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyKillNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyKillNPC_descriptor_;
  metadata.reflection = NotifyKillNPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAltarBSIco::kMsgidFieldNumber;
const int NotifyAltarBSIco::kAltaridFieldNumber;
const int NotifyAltarBSIco::kObjtypeFieldNumber;
const int NotifyAltarBSIco::kOptypeFieldNumber;
#endif  // !_MSC_VER

NotifyAltarBSIco::NotifyAltarBSIco()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyAltarBSIco)
}

void NotifyAltarBSIco::InitAsDefaultInstance() {
}

NotifyAltarBSIco::NotifyAltarBSIco(const NotifyAltarBSIco& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyAltarBSIco)
}

void NotifyAltarBSIco::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 97;
  altarid_ = 0u;
  objtype_ = 0u;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAltarBSIco::~NotifyAltarBSIco() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyAltarBSIco)
  SharedDtor();
}

void NotifyAltarBSIco::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAltarBSIco::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAltarBSIco::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAltarBSIco_descriptor_;
}

const NotifyAltarBSIco& NotifyAltarBSIco::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyAltarBSIco* NotifyAltarBSIco::default_instance_ = NULL;

NotifyAltarBSIco* NotifyAltarBSIco::New() const {
  return new NotifyAltarBSIco;
}

void NotifyAltarBSIco::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyAltarBSIco*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(altarid_, optype_);
    msgid_ = 97;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAltarBSIco::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyAltarBSIco)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSOk];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_altarid;
        break;
      }

      // optional uint32 altarid = 2;
      case 2: {
        if (tag == 16) {
         parse_altarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &altarid_)));
          set_has_altarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_objtype;
        break;
      }

      // optional uint32 objtype = 3;
      case 3: {
        if (tag == 24) {
         parse_objtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 4;
      case 4: {
        if (tag == 32) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyAltarBSIco)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyAltarBSIco)
  return false;
#undef DO_
}

void NotifyAltarBSIco::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyAltarBSIco)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSOk];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 altarid = 2;
  if (has_altarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->altarid(), output);
  }

  // optional uint32 objtype = 3;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objtype(), output);
  }

  // optional uint32 optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyAltarBSIco)
}

::google::protobuf::uint8* NotifyAltarBSIco::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyAltarBSIco)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSOk];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 altarid = 2;
  if (has_altarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->altarid(), target);
  }

  // optional uint32 objtype = 3;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objtype(), target);
  }

  // optional uint32 optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyAltarBSIco)
  return target;
}

int NotifyAltarBSIco::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyAltarBSOk];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 altarid = 2;
    if (has_altarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->altarid());
    }

    // optional uint32 objtype = 3;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objtype());
    }

    // optional uint32 optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAltarBSIco::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAltarBSIco* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAltarBSIco*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAltarBSIco::MergeFrom(const NotifyAltarBSIco& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_altarid()) {
      set_altarid(from.altarid());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAltarBSIco::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAltarBSIco::CopyFrom(const NotifyAltarBSIco& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAltarBSIco::IsInitialized() const {

  return true;
}

void NotifyAltarBSIco::Swap(NotifyAltarBSIco* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(altarid_, other->altarid_);
    std::swap(objtype_, other->objtype_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAltarBSIco::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAltarBSIco_descriptor_;
  metadata.reflection = NotifyAltarBSIco_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySkillUpLv::kMsgidFieldNumber;
const int NotifySkillUpLv::kGuidFieldNumber;
const int NotifySkillUpLv::kSkillposFieldNumber;
const int NotifySkillUpLv::kSkillidFieldNumber;
#endif  // !_MSC_VER

NotifySkillUpLv::NotifySkillUpLv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifySkillUpLv)
}

void NotifySkillUpLv::InitAsDefaultInstance() {
}

NotifySkillUpLv::NotifySkillUpLv(const NotifySkillUpLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifySkillUpLv)
}

void NotifySkillUpLv::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 98;
  guid_ = GOOGLE_ULONGLONG(0);
  skillpos_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySkillUpLv::~NotifySkillUpLv() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifySkillUpLv)
  SharedDtor();
}

void NotifySkillUpLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySkillUpLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySkillUpLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySkillUpLv_descriptor_;
}

const NotifySkillUpLv& NotifySkillUpLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifySkillUpLv* NotifySkillUpLv::default_instance_ = NULL;

NotifySkillUpLv* NotifySkillUpLv::New() const {
  return new NotifySkillUpLv;
}

void NotifySkillUpLv::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifySkillUpLv*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillpos_, skillid_);
    msgid_ = 98;
    guid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySkillUpLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifySkillUpLv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillUpLv];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillpos;
        break;
      }

      // optional uint32 skillpos = 3;
      case 3: {
        if (tag == 24) {
         parse_skillpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpos_)));
          set_has_skillpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 4;
      case 4: {
        if (tag == 32) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifySkillUpLv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifySkillUpLv)
  return false;
#undef DO_
}

void NotifySkillUpLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifySkillUpLv)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillUpLv];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint32 skillpos = 3;
  if (has_skillpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillpos(), output);
  }

  // optional uint32 skillid = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifySkillUpLv)
}

::google::protobuf::uint8* NotifySkillUpLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifySkillUpLv)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillUpLv];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint32 skillpos = 3;
  if (has_skillpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillpos(), target);
  }

  // optional uint32 skillid = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifySkillUpLv)
  return target;
}

int NotifySkillUpLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifySkillUpLv];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 skillpos = 3;
    if (has_skillpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpos());
    }

    // optional uint32 skillid = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySkillUpLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySkillUpLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySkillUpLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySkillUpLv::MergeFrom(const NotifySkillUpLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skillpos()) {
      set_skillpos(from.skillpos());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySkillUpLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySkillUpLv::CopyFrom(const NotifySkillUpLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySkillUpLv::IsInitialized() const {

  return true;
}

void NotifySkillUpLv::Swap(NotifySkillUpLv* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(skillpos_, other->skillpos_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySkillUpLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySkillUpLv_descriptor_;
  metadata.reflection = NotifySkillUpLv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBlastHurt::kMsgidFieldNumber;
const int NotifyBlastHurt::kGuidFieldNumber;
const int NotifyBlastHurt::kBlasthpFieldNumber;
#endif  // !_MSC_VER

NotifyBlastHurt::NotifyBlastHurt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyBlastHurt)
}

void NotifyBlastHurt::InitAsDefaultInstance() {
}

NotifyBlastHurt::NotifyBlastHurt(const NotifyBlastHurt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyBlastHurt)
}

void NotifyBlastHurt::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 107;
  guid_ = GOOGLE_ULONGLONG(0);
  blasthp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBlastHurt::~NotifyBlastHurt() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyBlastHurt)
  SharedDtor();
}

void NotifyBlastHurt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBlastHurt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBlastHurt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBlastHurt_descriptor_;
}

const NotifyBlastHurt& NotifyBlastHurt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyBlastHurt* NotifyBlastHurt::default_instance_ = NULL;

NotifyBlastHurt* NotifyBlastHurt::New() const {
  return new NotifyBlastHurt;
}

void NotifyBlastHurt::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 107;
    guid_ = GOOGLE_ULONGLONG(0);
    blasthp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBlastHurt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyBlastHurt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBlastHurt];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blasthp;
        break;
      }

      // optional int32 blasthp = 3;
      case 3: {
        if (tag == 24) {
         parse_blasthp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blasthp_)));
          set_has_blasthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyBlastHurt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyBlastHurt)
  return false;
#undef DO_
}

void NotifyBlastHurt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyBlastHurt)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBlastHurt];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 blasthp = 3;
  if (has_blasthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blasthp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyBlastHurt)
}

::google::protobuf::uint8* NotifyBlastHurt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyBlastHurt)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBlastHurt];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 blasthp = 3;
  if (has_blasthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blasthp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyBlastHurt)
  return target;
}

int NotifyBlastHurt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyBlastHurt];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 blasthp = 3;
    if (has_blasthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blasthp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBlastHurt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBlastHurt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBlastHurt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBlastHurt::MergeFrom(const NotifyBlastHurt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_blasthp()) {
      set_blasthp(from.blasthp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBlastHurt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBlastHurt::CopyFrom(const NotifyBlastHurt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBlastHurt::IsInitialized() const {

  return true;
}

void NotifyBlastHurt::Swap(NotifyBlastHurt* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(blasthp_, other->blasthp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBlastHurt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBlastHurt_descriptor_;
  metadata.reflection = NotifyBlastHurt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGameObjectReliveState::kMsgidFieldNumber;
const int NotifyGameObjectReliveState::kGuidFieldNumber;
const int NotifyGameObjectReliveState::kPosFieldNumber;
const int NotifyGameObjectReliveState::kDirFieldNumber;
#endif  // !_MSC_VER

NotifyGameObjectReliveState::NotifyGameObjectReliveState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyGameObjectReliveState)
}

void NotifyGameObjectReliveState::InitAsDefaultInstance() {
  pos_ = const_cast< ::GSToGC::Pos*>(&::GSToGC::Pos::default_instance());
  dir_ = const_cast< ::GSToGC::Dir*>(&::GSToGC::Dir::default_instance());
}

NotifyGameObjectReliveState::NotifyGameObjectReliveState(const NotifyGameObjectReliveState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyGameObjectReliveState)
}

void NotifyGameObjectReliveState::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 111;
  guid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGameObjectReliveState::~NotifyGameObjectReliveState() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyGameObjectReliveState)
  SharedDtor();
}

void NotifyGameObjectReliveState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void NotifyGameObjectReliveState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGameObjectReliveState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGameObjectReliveState_descriptor_;
}

const NotifyGameObjectReliveState& NotifyGameObjectReliveState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyGameObjectReliveState* NotifyGameObjectReliveState::default_instance_ = NULL;

NotifyGameObjectReliveState* NotifyGameObjectReliveState::New() const {
  return new NotifyGameObjectReliveState;
}

void NotifyGameObjectReliveState::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    msgid_ = 111;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::GSToGC::Pos::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::GSToGC::Dir::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGameObjectReliveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyGameObjectReliveState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReliveState];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .GSToGC.Pos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .GSToGC.Dir dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyGameObjectReliveState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyGameObjectReliveState)
  return false;
#undef DO_
}

void NotifyGameObjectReliveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyGameObjectReliveState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReliveState];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyGameObjectReliveState)
}

::google::protobuf::uint8* NotifyGameObjectReliveState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyGameObjectReliveState)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReliveState];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional .GSToGC.Pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .GSToGC.Dir dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyGameObjectReliveState)
  return target;
}

int NotifyGameObjectReliveState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGameObjectReliveState];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .GSToGC.Pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .GSToGC.Dir dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGameObjectReliveState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGameObjectReliveState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGameObjectReliveState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGameObjectReliveState::MergeFrom(const NotifyGameObjectReliveState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_pos()) {
      mutable_pos()->::GSToGC::Pos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::GSToGC::Dir::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGameObjectReliveState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGameObjectReliveState::CopyFrom(const NotifyGameObjectReliveState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGameObjectReliveState::IsInitialized() const {

  return true;
}

void NotifyGameObjectReliveState::Swap(NotifyGameObjectReliveState* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGameObjectReliveState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGameObjectReliveState_descriptor_;
  metadata.reflection = NotifyGameObjectReliveState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCurGold::kMsgidFieldNumber;
const int NotifyCurGold::kGoldFieldNumber;
#endif  // !_MSC_VER

NotifyCurGold::NotifyCurGold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyCurGold)
}

void NotifyCurGold::InitAsDefaultInstance() {
}

NotifyCurGold::NotifyCurGold(const NotifyCurGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyCurGold)
}

void NotifyCurGold::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 122;
  gold_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCurGold::~NotifyCurGold() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyCurGold)
  SharedDtor();
}

void NotifyCurGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCurGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCurGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCurGold_descriptor_;
}

const NotifyCurGold& NotifyCurGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyCurGold* NotifyCurGold::default_instance_ = NULL;

NotifyCurGold* NotifyCurGold::New() const {
  return new NotifyCurGold;
}

void NotifyCurGold::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 122;
    gold_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCurGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyCurGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurGold];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyCurGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyCurGold)
  return false;
#undef DO_
}

void NotifyCurGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyCurGold)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurGold];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyCurGold)
}

::google::protobuf::uint8* NotifyCurGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyCurGold)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurGold];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyCurGold)
  return target;
}

int NotifyCurGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurGold];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCurGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCurGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCurGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCurGold::MergeFrom(const NotifyCurGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCurGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCurGold::CopyFrom(const NotifyCurGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCurGold::IsInitialized() const {

  return true;
}

void NotifyCurGold::Swap(NotifyCurGold* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCurGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCurGold_descriptor_;
  metadata.reflection = NotifyCurGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCurDiamond::kMsgidFieldNumber;
const int NotifyCurDiamond::kDiamondFieldNumber;
#endif  // !_MSC_VER

NotifyCurDiamond::NotifyCurDiamond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.NotifyCurDiamond)
}

void NotifyCurDiamond::InitAsDefaultInstance() {
}

NotifyCurDiamond::NotifyCurDiamond(const NotifyCurDiamond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.NotifyCurDiamond)
}

void NotifyCurDiamond::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 123;
  diamond_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCurDiamond::~NotifyCurDiamond() {
  // @@protoc_insertion_point(destructor:GSToGC.NotifyCurDiamond)
  SharedDtor();
}

void NotifyCurDiamond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCurDiamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCurDiamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCurDiamond_descriptor_;
}

const NotifyCurDiamond& NotifyCurDiamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

NotifyCurDiamond* NotifyCurDiamond::default_instance_ = NULL;

NotifyCurDiamond* NotifyCurDiamond::New() const {
  return new NotifyCurDiamond;
}

void NotifyCurDiamond::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 123;
    diamond_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCurDiamond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.NotifyCurDiamond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurDiamond];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Diamond;
        break;
      }

      // optional uint64 Diamond = 2;
      case 2: {
        if (tag == 16) {
         parse_Diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.NotifyCurDiamond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.NotifyCurDiamond)
  return false;
#undef DO_
}

void NotifyCurDiamond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.NotifyCurDiamond)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurDiamond];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 Diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.NotifyCurDiamond)
}

::google::protobuf::uint8* NotifyCurDiamond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.NotifyCurDiamond)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurDiamond];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 Diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.NotifyCurDiamond)
  return target;
}

int NotifyCurDiamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGs_NotifyCurDiamond];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 Diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCurDiamond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCurDiamond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCurDiamond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCurDiamond::MergeFrom(const NotifyCurDiamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCurDiamond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCurDiamond::CopyFrom(const NotifyCurDiamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCurDiamond::IsInitialized() const {

  return true;
}

void NotifyCurDiamond::Swap(NotifyCurDiamond* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCurDiamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCurDiamond_descriptor_;
  metadata.reflection = NotifyCurDiamond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetloginRewardSuccess::kMsgidFieldNumber;
#endif  // !_MSC_VER

GetloginRewardSuccess::GetloginRewardSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GetloginRewardSuccess)
}

void GetloginRewardSuccess::InitAsDefaultInstance() {
}

GetloginRewardSuccess::GetloginRewardSuccess(const GetloginRewardSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GetloginRewardSuccess)
}

void GetloginRewardSuccess::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 124;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetloginRewardSuccess::~GetloginRewardSuccess() {
  // @@protoc_insertion_point(destructor:GSToGC.GetloginRewardSuccess)
  SharedDtor();
}

void GetloginRewardSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetloginRewardSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetloginRewardSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetloginRewardSuccess_descriptor_;
}

const GetloginRewardSuccess& GetloginRewardSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GetloginRewardSuccess* GetloginRewardSuccess::default_instance_ = NULL;

GetloginRewardSuccess* GetloginRewardSuccess::New() const {
  return new GetloginRewardSuccess;
}

void GetloginRewardSuccess::Clear() {
  msgid_ = 124;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetloginRewardSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GetloginRewardSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginRewardSuccess];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GetloginRewardSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GetloginRewardSuccess)
  return false;
#undef DO_
}

void GetloginRewardSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GetloginRewardSuccess)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginRewardSuccess];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GetloginRewardSuccess)
}

::google::protobuf::uint8* GetloginRewardSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GetloginRewardSuccess)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginRewardSuccess];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GetloginRewardSuccess)
  return target;
}

int GetloginRewardSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginRewardSuccess];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetloginRewardSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetloginRewardSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetloginRewardSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetloginRewardSuccess::MergeFrom(const GetloginRewardSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetloginRewardSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetloginRewardSuccess::CopyFrom(const GetloginRewardSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetloginRewardSuccess::IsInitialized() const {

  return true;
}

void GetloginRewardSuccess::Swap(GetloginRewardSuccess* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetloginRewardSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetloginRewardSuccess_descriptor_;
  metadata.reflection = GetloginRewardSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetloginReward_Skin::kMsgidFieldNumber;
const int GetloginReward_Skin::kSkinidFieldNumber;
#endif  // !_MSC_VER

GetloginReward_Skin::GetloginReward_Skin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GetloginReward_Skin)
}

void GetloginReward_Skin::InitAsDefaultInstance() {
}

GetloginReward_Skin::GetloginReward_Skin(const GetloginReward_Skin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GetloginReward_Skin)
}

void GetloginReward_Skin::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 125;
  skinid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetloginReward_Skin::~GetloginReward_Skin() {
  // @@protoc_insertion_point(destructor:GSToGC.GetloginReward_Skin)
  SharedDtor();
}

void GetloginReward_Skin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetloginReward_Skin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetloginReward_Skin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetloginReward_Skin_descriptor_;
}

const GetloginReward_Skin& GetloginReward_Skin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GetloginReward_Skin* GetloginReward_Skin::default_instance_ = NULL;

GetloginReward_Skin* GetloginReward_Skin::New() const {
  return new GetloginReward_Skin;
}

void GetloginReward_Skin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 125;
    skinid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetloginReward_Skin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GetloginReward_Skin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Skin];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skinid;
        break;
      }

      // optional int64 skinid = 2;
      case 2: {
        if (tag == 16) {
         parse_skinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GetloginReward_Skin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GetloginReward_Skin)
  return false;
#undef DO_
}

void GetloginReward_Skin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GetloginReward_Skin)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Skin];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 skinid = 2;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->skinid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GetloginReward_Skin)
}

::google::protobuf::uint8* GetloginReward_Skin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GetloginReward_Skin)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Skin];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 skinid = 2;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->skinid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GetloginReward_Skin)
  return target;
}

int GetloginReward_Skin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Skin];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 skinid = 2;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skinid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetloginReward_Skin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetloginReward_Skin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetloginReward_Skin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetloginReward_Skin::MergeFrom(const GetloginReward_Skin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetloginReward_Skin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetloginReward_Skin::CopyFrom(const GetloginReward_Skin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetloginReward_Skin::IsInitialized() const {

  return true;
}

void GetloginReward_Skin::Swap(GetloginReward_Skin* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(skinid_, other->skinid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetloginReward_Skin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetloginReward_Skin_descriptor_;
  metadata.reflection = GetloginReward_Skin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetloginReward_Rune::kMsgidFieldNumber;
const int GetloginReward_Rune::kRuneidFieldNumber;
#endif  // !_MSC_VER

GetloginReward_Rune::GetloginReward_Rune()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GetloginReward_Rune)
}

void GetloginReward_Rune::InitAsDefaultInstance() {
}

GetloginReward_Rune::GetloginReward_Rune(const GetloginReward_Rune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GetloginReward_Rune)
}

void GetloginReward_Rune::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 126;
  runeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetloginReward_Rune::~GetloginReward_Rune() {
  // @@protoc_insertion_point(destructor:GSToGC.GetloginReward_Rune)
  SharedDtor();
}

void GetloginReward_Rune::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetloginReward_Rune::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetloginReward_Rune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetloginReward_Rune_descriptor_;
}

const GetloginReward_Rune& GetloginReward_Rune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GetloginReward_Rune* GetloginReward_Rune::default_instance_ = NULL;

GetloginReward_Rune* GetloginReward_Rune::New() const {
  return new GetloginReward_Rune;
}

void GetloginReward_Rune::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 126;
    runeid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetloginReward_Rune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GetloginReward_Rune)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Rune];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_runeid;
        break;
      }

      // optional int64 runeid = 2;
      case 2: {
        if (tag == 16) {
         parse_runeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &runeid_)));
          set_has_runeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GetloginReward_Rune)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GetloginReward_Rune)
  return false;
#undef DO_
}

void GetloginReward_Rune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GetloginReward_Rune)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Rune];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional int64 runeid = 2;
  if (has_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->runeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GetloginReward_Rune)
}

::google::protobuf::uint8* GetloginReward_Rune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GetloginReward_Rune)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Rune];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional int64 runeid = 2;
  if (has_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->runeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GetloginReward_Rune)
  return target;
}

int GetloginReward_Rune::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Rune];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional int64 runeid = 2;
    if (has_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->runeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetloginReward_Rune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetloginReward_Rune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetloginReward_Rune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetloginReward_Rune::MergeFrom(const GetloginReward_Rune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_runeid()) {
      set_runeid(from.runeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetloginReward_Rune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetloginReward_Rune::CopyFrom(const GetloginReward_Rune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetloginReward_Rune::IsInitialized() const {

  return true;
}

void GetloginReward_Rune::Swap(GetloginReward_Rune* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(runeid_, other->runeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetloginReward_Rune::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetloginReward_Rune_descriptor_;
  metadata.reflection = GetloginReward_Rune_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetloginReward_Hero::kMsgidFieldNumber;
const int GetloginReward_Hero::kHeroidFieldNumber;
const int GetloginReward_Hero::kExpiredTimeFieldNumber;
#endif  // !_MSC_VER

GetloginReward_Hero::GetloginReward_Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.GetloginReward_Hero)
}

void GetloginReward_Hero::InitAsDefaultInstance() {
}

GetloginReward_Hero::GetloginReward_Hero(const GetloginReward_Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.GetloginReward_Hero)
}

void GetloginReward_Hero::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 127;
  heroid_ = 0u;
  expired_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetloginReward_Hero::~GetloginReward_Hero() {
  // @@protoc_insertion_point(destructor:GSToGC.GetloginReward_Hero)
  SharedDtor();
}

void GetloginReward_Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetloginReward_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetloginReward_Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetloginReward_Hero_descriptor_;
}

const GetloginReward_Hero& GetloginReward_Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

GetloginReward_Hero* GetloginReward_Hero::default_instance_ = NULL;

GetloginReward_Hero* GetloginReward_Hero::New() const {
  return new GetloginReward_Hero;
}

void GetloginReward_Hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetloginReward_Hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(heroid_, expired_time_);
    msgid_ = 127;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetloginReward_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.GetloginReward_Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Hero];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expired_time;
        break;
      }

      // optional int64 expired_time = 3;
      case 3: {
        if (tag == 24) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.GetloginReward_Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.GetloginReward_Hero)
  return false;
#undef DO_
}

void GetloginReward_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.GetloginReward_Hero)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Hero];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // optional int64 expired_time = 3;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expired_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.GetloginReward_Hero)
}

::google::protobuf::uint8* GetloginReward_Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.GetloginReward_Hero)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Hero];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // optional int64 expired_time = 3;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expired_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.GetloginReward_Hero)
  return target;
}

int GetloginReward_Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_NotifyGetloginReward_Hero];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional int64 expired_time = 3;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expired_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetloginReward_Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetloginReward_Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetloginReward_Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetloginReward_Hero::MergeFrom(const GetloginReward_Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetloginReward_Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetloginReward_Hero::CopyFrom(const GetloginReward_Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetloginReward_Hero::IsInitialized() const {

  return true;
}

void GetloginReward_Hero::Swap(GetloginReward_Hero* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(heroid_, other->heroid_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetloginReward_Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetloginReward_Hero_descriptor_;
  metadata.reflection = GetloginReward_Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CanInviteFriends_Friends::kHeaderIdFieldNumber;
const int CanInviteFriends_Friends::kNicknameFieldNumber;
const int CanInviteFriends_Friends::kGuididxFieldNumber;
#endif  // !_MSC_VER

CanInviteFriends_Friends::CanInviteFriends_Friends()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CanInviteFriends.Friends)
}

void CanInviteFriends_Friends::InitAsDefaultInstance() {
}

CanInviteFriends_Friends::CanInviteFriends_Friends(const CanInviteFriends_Friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CanInviteFriends.Friends)
}

void CanInviteFriends_Friends::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  headerid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guididx_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanInviteFriends_Friends::~CanInviteFriends_Friends() {
  // @@protoc_insertion_point(destructor:GSToGC.CanInviteFriends.Friends)
  SharedDtor();
}

void CanInviteFriends_Friends::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CanInviteFriends_Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanInviteFriends_Friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanInviteFriends_Friends_descriptor_;
}

const CanInviteFriends_Friends& CanInviteFriends_Friends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CanInviteFriends_Friends* CanInviteFriends_Friends::default_instance_ = NULL;

CanInviteFriends_Friends* CanInviteFriends_Friends::New() const {
  return new CanInviteFriends_Friends;
}

void CanInviteFriends_Friends::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CanInviteFriends_Friends*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(guididx_, headerid_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanInviteFriends_Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CanInviteFriends.Friends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HeaderId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headerid_)));
          set_has_headerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guididx;
        break;
      }

      // optional uint64 guididx = 3;
      case 3: {
        if (tag == 24) {
         parse_guididx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guididx_)));
          set_has_guididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CanInviteFriends.Friends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CanInviteFriends.Friends)
  return false;
#undef DO_
}

void CanInviteFriends_Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CanInviteFriends.Friends)
  // optional int32 HeaderId = 1;
  if (has_headerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->headerid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional uint64 guididx = 3;
  if (has_guididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guididx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CanInviteFriends.Friends)
}

::google::protobuf::uint8* CanInviteFriends_Friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CanInviteFriends.Friends)
  // optional int32 HeaderId = 1;
  if (has_headerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->headerid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint64 guididx = 3;
  if (has_guididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guididx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CanInviteFriends.Friends)
  return target;
}

int CanInviteFriends_Friends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HeaderId = 1;
    if (has_headerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headerid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint64 guididx = 3;
    if (has_guididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guididx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanInviteFriends_Friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanInviteFriends_Friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanInviteFriends_Friends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanInviteFriends_Friends::MergeFrom(const CanInviteFriends_Friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headerid()) {
      set_headerid(from.headerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_guididx()) {
      set_guididx(from.guididx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanInviteFriends_Friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanInviteFriends_Friends::CopyFrom(const CanInviteFriends_Friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanInviteFriends_Friends::IsInitialized() const {

  return true;
}

void CanInviteFriends_Friends::Swap(CanInviteFriends_Friends* other) {
  if (other != this) {
    std::swap(headerid_, other->headerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(guididx_, other->guididx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanInviteFriends_Friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanInviteFriends_Friends_descriptor_;
  metadata.reflection = CanInviteFriends_Friends_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CanInviteFriends::kMsgidFieldNumber;
const int CanInviteFriends::kFriendsFieldNumber;
#endif  // !_MSC_VER

CanInviteFriends::CanInviteFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.CanInviteFriends)
}

void CanInviteFriends::InitAsDefaultInstance() {
}

CanInviteFriends::CanInviteFriends(const CanInviteFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.CanInviteFriends)
}

void CanInviteFriends::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 141;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanInviteFriends::~CanInviteFriends() {
  // @@protoc_insertion_point(destructor:GSToGC.CanInviteFriends)
  SharedDtor();
}

void CanInviteFriends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CanInviteFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanInviteFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanInviteFriends_descriptor_;
}

const CanInviteFriends& CanInviteFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

CanInviteFriends* CanInviteFriends::default_instance_ = NULL;

CanInviteFriends* CanInviteFriends::New() const {
  return new CanInviteFriends;
}

void CanInviteFriends::Clear() {
  msgid_ = 141;
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanInviteFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.CanInviteFriends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCanInviteFriends];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .GSToGC.CanInviteFriends.Friends friends = 2;
      case 2: {
        if (tag == 18) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.CanInviteFriends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.CanInviteFriends)
  return false;
#undef DO_
}

void CanInviteFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.CanInviteFriends)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCanInviteFriends];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.CanInviteFriends.Friends friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.CanInviteFriends)
}

::google::protobuf::uint8* CanInviteFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.CanInviteFriends)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCanInviteFriends];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.CanInviteFriends.Friends friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.CanInviteFriends)
  return target;
}

int CanInviteFriends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCanInviteFriends];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.CanInviteFriends.Friends friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanInviteFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanInviteFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanInviteFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanInviteFriends::MergeFrom(const CanInviteFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanInviteFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanInviteFriends::CopyFrom(const CanInviteFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanInviteFriends::IsInitialized() const {

  return true;
}

void CanInviteFriends::Swap(CanInviteFriends* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanInviteFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanInviteFriends_descriptor_;
  metadata.reflection = CanInviteFriends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LastHitNum::kMsgidFieldNumber;
const int LastHitNum::kGuidFieldNumber;
const int LastHitNum::kLhnumFieldNumber;
#endif  // !_MSC_VER

LastHitNum::LastHitNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.LastHitNum)
}

void LastHitNum::InitAsDefaultInstance() {
}

LastHitNum::LastHitNum(const LastHitNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.LastHitNum)
}

void LastHitNum::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 142;
  guid_ = GOOGLE_ULONGLONG(0);
  lhnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastHitNum::~LastHitNum() {
  // @@protoc_insertion_point(destructor:GSToGC.LastHitNum)
  SharedDtor();
}

void LastHitNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LastHitNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastHitNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastHitNum_descriptor_;
}

const LastHitNum& LastHitNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

LastHitNum* LastHitNum::default_instance_ = NULL;

LastHitNum* LastHitNum::New() const {
  return new LastHitNum;
}

void LastHitNum::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    msgid_ = 142;
    guid_ = GOOGLE_ULONGLONG(0);
    lhnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastHitNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.LastHitNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCurLastHitNum];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lhnum;
        break;
      }

      // optional int32 lhnum = 3;
      case 3: {
        if (tag == 24) {
         parse_lhnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lhnum_)));
          set_has_lhnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.LastHitNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.LastHitNum)
  return false;
#undef DO_
}

void LastHitNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.LastHitNum)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCurLastHitNum];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional int32 lhnum = 3;
  if (has_lhnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lhnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.LastHitNum)
}

::google::protobuf::uint8* LastHitNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.LastHitNum)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCurLastHitNum];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional int32 lhnum = 3;
  if (has_lhnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lhnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.LastHitNum)
  return target;
}

int LastHitNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromBS_NotifyCurLastHitNum];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional int32 lhnum = 3;
    if (has_lhnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lhnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastHitNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastHitNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastHitNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastHitNum::MergeFrom(const LastHitNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_lhnum()) {
      set_lhnum(from.lhnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastHitNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastHitNum::CopyFrom(const LastHitNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastHitNum::IsInitialized() const {

  return true;
}

void LastHitNum::Swap(LastHitNum* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(guid_, other->guid_);
    std::swap(lhnum_, other->lhnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastHitNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastHitNum_descriptor_;
  metadata.reflection = LastHitNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kRoomIdFieldNumber;
const int RoomInfo::kIfPwdFieldNumber;
const int RoomInfo::kMapIdFieldNumber;
const int RoomInfo::kMasterFieldNumber;
const int RoomInfo::kCurUserCountFieldNumber;
const int RoomInfo::kMaxUserCountFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  ifpwd_ = 0;
  mapid_ = 0;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curusercount_ = 0;
  maxusercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:GSToGC.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (master_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roomid_, ifpwd_);
    ZR_(mapid_, maxusercount_);
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ifPwd;
        break;
      }

      // optional int32 ifPwd = 2;
      case 2: {
        if (tag == 16) {
         parse_ifPwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifpwd_)));
          set_has_ifpwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 3;
      case 3: {
        if (tag == 24) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_master;
        break;
      }

      // optional string master = 4;
      case 4: {
        if (tag == 34) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curUserCount;
        break;
      }

      // optional int32 curUserCount = 5;
      case 5: {
        if (tag == 40) {
         parse_curUserCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curusercount_)));
          set_has_curusercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxUserCount;
        break;
      }

      // optional int32 maxUserCount = 6;
      case 6: {
        if (tag == 48) {
         parse_maxUserCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxusercount_)));
          set_has_maxusercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.RoomInfo)
  // optional int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 ifPwd = 2;
  if (has_ifpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifpwd(), output);
  }

  // optional int32 mapId = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->master(), output);
  }

  // optional int32 curUserCount = 5;
  if (has_curusercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curusercount(), output);
  }

  // optional int32 maxUserCount = 6;
  if (has_maxusercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxusercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.RoomInfo)
  // optional int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 ifPwd = 2;
  if (has_ifpwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifpwd(), target);
  }

  // optional int32 mapId = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master(), target);
  }

  // optional int32 curUserCount = 5;
  if (has_curusercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curusercount(), target);
  }

  // optional int32 maxUserCount = 6;
  if (has_maxusercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxusercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 ifPwd = 2;
    if (has_ifpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifpwd());
    }

    // optional int32 mapId = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional string master = 4;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

    // optional int32 curUserCount = 5;
    if (has_curusercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curusercount());
    }

    // optional int32 maxUserCount = 6;
    if (has_maxusercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxusercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_ifpwd()) {
      set_ifpwd(from.ifpwd());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_curusercount()) {
      set_curusercount(from.curusercount());
    }
    if (from.has_maxusercount()) {
      set_maxusercount(from.maxusercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(ifpwd_, other->ifpwd_);
    std::swap(mapid_, other->mapid_);
    std::swap(master_, other->master_);
    std::swap(curusercount_, other->curusercount_);
    std::swap(maxusercount_, other->maxusercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskRoomListRet::kMsgidFieldNumber;
const int AskRoomListRet::kRoomlistFieldNumber;
#endif  // !_MSC_VER

AskRoomListRet::AskRoomListRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GSToGC.AskRoomListRet)
}

void AskRoomListRet::InitAsDefaultInstance() {
}

AskRoomListRet::AskRoomListRet(const AskRoomListRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GSToGC.AskRoomListRet)
}

void AskRoomListRet::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 143;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskRoomListRet::~AskRoomListRet() {
  // @@protoc_insertion_point(destructor:GSToGC.AskRoomListRet)
  SharedDtor();
}

void AskRoomListRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskRoomListRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskRoomListRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskRoomListRet_descriptor_;
}

const AskRoomListRet& AskRoomListRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GSToGC_2eproto();
  return *default_instance_;
}

AskRoomListRet* AskRoomListRet::default_instance_ = NULL;

AskRoomListRet* AskRoomListRet::New() const {
  return new AskRoomListRet;
}

void AskRoomListRet::Clear() {
  msgid_ = 143;
  roomlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskRoomListRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GSToGC.AskRoomListRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AskRoomListRet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GSToGC::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::GSToGC::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomlist;
        break;
      }

      // repeated .GSToGC.RoomInfo roomlist = 2;
      case 2: {
        if (tag == 18) {
         parse_roomlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GSToGC.AskRoomListRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GSToGC.AskRoomListRet)
  return false;
#undef DO_
}

void AskRoomListRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GSToGC.AskRoomListRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AskRoomListRet];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated .GSToGC.RoomInfo roomlist = 2;
  for (int i = 0; i < this->roomlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GSToGC.AskRoomListRet)
}

::google::protobuf::uint8* AskRoomListRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToGC.AskRoomListRet)
  // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AskRoomListRet];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgid(), target);
  }

  // repeated .GSToGC.RoomInfo roomlist = 2;
  for (int i = 0; i < this->roomlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToGC.AskRoomListRet)
  return target;
}

int AskRoomListRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GSToGC.MsgID msgid = 1 [default = eMsgToGCFromGS_AskRoomListRet];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  // repeated .GSToGC.RoomInfo roomlist = 2;
  total_size += 1 * this->roomlist_size();
  for (int i = 0; i < this->roomlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskRoomListRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskRoomListRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskRoomListRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskRoomListRet::MergeFrom(const AskRoomListRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomlist_.MergeFrom(from.roomlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskRoomListRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskRoomListRet::CopyFrom(const AskRoomListRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskRoomListRet::IsInitialized() const {

  return true;
}

void AskRoomListRet::Swap(AskRoomListRet* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    roomlist_.Swap(&other->roomlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskRoomListRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskRoomListRet_descriptor_;
  metadata.reflection = AskRoomListRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GSToGC

// @@protoc_insertion_point(global_scope)
